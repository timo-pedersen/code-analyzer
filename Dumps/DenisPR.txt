version.h
-2
+2
/Applications/NeoIDE/NeoIDE/Properties/version.h
#define BUILD_NUMBER 10611 
#define BUILD_NO_STR "10611" 
#define BUILD_NUMBER 10681 
#define BUILD_NO_STR "10681" 
#define RELEASE 1 
#define VERSION 2,46 
#define VERSION_STRING "2.46" 

VersionInfo.cs
-2
+2
/Applications/NeoIDE/NeoIDE/Properties/VersionInfo.cs
using System.Reflection; 
[assembly: AssemblyVersion("2.46.10611")] 
[assembly: AssemblyInformationalVersion("2.46.10611 Internal")] 
[assembly: AssemblyVersion("2.46.10681")] 
[assembly: AssemblyInformationalVersion("2.46.10681 Internal")] 

CommonCF.csproj
+1
/Common/CommonCF/.vNext/CommonCF.csproj
    <GenerateAssemblyProductAttribute>false</GenerateAssemblyProductAttribute>
    <GenerateAssemblyCopyrightAttribute>false</GenerateAssemblyCopyrightAttribute>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <RootNamespace>Neo.ApplicationFramework.Common</RootNamespace>
  </PropertyGroup>

CommonTest.csproj
+152
/Common/CommonTest/.vNext/CommonTest.csproj
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net6.0-windows;net48</TargetFrameworks>
    <UseWindowsForms>true</UseWindowsForms>
    <UseWPF>True</UseWPF>
    <IsPackable>false</IsPackable>
    <RootNamespace>Neo.ApplicationFramework.Common</RootNamespace>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE;DEBUG;VNEXT_TARGET;VNEXT_TARGET_NEEDS_REIMPLEMENTATION;VNEXT_TARGET_INCLUDED;VNEXT_TARGET_STRUCTURE_DIFFERENCE</DefineConstants>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DefineConstants>TRACE;VNEXT_TARGET;VNEXT_TARGET_NEEDS_REIMPLEMENTATION;VNEXT_TARGET_INCLUDED;VNEXT_TARGET_STRUCTURE_DIFFERENCE</DefineConstants>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <ItemGroup>
    <Compile Remove="obj\**" />
    <EmbeddedResource Remove="obj\**" />
    <None Remove="obj\**" />
    <Compile Remove="..\obj\**" />
    <EmbeddedResource Remove="..\obj\**" />
    <None Remove="..\obj\**" />
    <!--<Compile Include="..\**\*.cs" />-->
  </ItemGroup>
  <ItemGroup>
    <Compile Include="..\Assertion\AssertTest.cs" Link="Assertion\AssertTest.cs" />
    <Compile Include="..\Boundary\ComparerFactoryTest.cs" Link="Boundary\ComparerFactoryTest.cs" />
    <Compile Include="..\Boundary\DecimalComparerTest.cs" Link="Boundary\DecimalComparerTest.cs" />
    <Compile Include="..\Boundary\DoubleComparerTest.cs" Link="Boundary\DoubleComparerTest.cs" />
    <Compile Include="..\Boundary\IntComparerTest.cs" Link="Boundary\IntComparerTest.cs" />
    <Compile Include="..\Brand\BrandToolResourceDocumentationTest.cs" Link="Brand\BrandToolResourceDocumentationTest.cs" />
    <Compile Include="..\Collections\ExtendedBindingListTest.cs" Link="Collections\ExtendedBindingListTest.cs" />
    <Compile Include="..\Collections\FilteredListTests.cs" Link="Collections\FilteredListTests.cs" />
    <Compile Include="..\Collections\OwnedListTests.cs" Link="Collections\OwnedListTests.cs" />
    <Compile Include="..\Collections\StringComparableListTest.cs" Link="Collections\StringComparableListTest.cs" />
    <Compile Include="..\Collections\ThreadSafeQueueTests.cs" Link="Collections\ThreadSafeQueueTests.cs" />
    <Compile Include="..\Converters\BooleanToStretchConverterTest.cs" Link="Converters\BooleanToStretchConverterTest.cs" />
    <Compile Include="..\Converters\DateTimeToStringWithDateTimePatternConverterTest.cs" Link="Converters\DateTimeToStringWithDateTimePatternConverterTest.cs" />
    <Compile Include="..\Data\ControlStub.cs" Link="Data\ControlStub.cs" />
    <Compile Include="..\Data\DataItemProxyFactoryTest.cs" Link="Data\DataItemProxyFactoryTest.cs" />
    <Compile Include="..\Data\DataItemProxyTest.cs" Link="Data\DataItemProxyTest.cs" />
    <Compile Include="..\Data\DynamicBindingTest.cs" Link="Data\DynamicBindingTest.cs" />
    <Compile Include="..\Data\DynamicControlBindingsCollectionTest.cs" Link="Data\DynamicControlBindingsCollectionTest.cs" />
    <Compile Include="..\Data\NotifyPropertyChangedHelperBaseTest.cs" Link="Data\NotifyPropertyChangedHelperBaseTest.cs" />
    <Compile Include="..\Data\NotifyPropertyChangedHelperTest.cs" Link="Data\NotifyPropertyChangedHelperTest.cs" />
    <Compile Include="..\Data\PropertyConnectionCollectionTest.cs" Link="Data\PropertyConnectionCollectionTest.cs" />
    <Compile Include="..\Data\PropertyConnectionTest.cs" Link="Data\PropertyConnectionTest.cs" />
    <Compile Include="..\Database\DBNullValidationTest.cs" Link="Database\DBNullValidationTest.cs" />
    <Compile Include="..\Dynamics\DynamicStringTest.cs" Link="Dynamics\DynamicStringTest.cs" />
    <Compile Include="..\Dynamics\LinearConverterTest.cs" Link="Dynamics\LinearConverterTest.cs" />
    <Compile Include="..\Dynamics\MessageLibraryDynamicsConverterTest.cs" Link="Dynamics\MessageLibraryDynamicsConverterTest.cs" />
    <Compile Include="..\EnsureReferences.cs" Link="EnsureReferences.cs" />
    <Compile Include="..\Extensions\System\ActionExtensionsTest.cs" Link="Extensions\System\ActionExtensionsTest.cs" />
    <Compile Include="..\Extensions\System\Collections\Generic\ICollectionExtensionsTest.cs" Link="Extensions\System\Collections\Generic\ICollectionExtensionsTest.cs" />
    <Compile Include="..\Extensions\System\Collections\Generic\IEnumerableExtensionsTest.cs" Link="Extensions\System\Collections\Generic\IEnumerableExtensionsTest.cs" />
    <Compile Include="..\Extensions\System\ICloneableExtensionsTest.cs" Link="Extensions\System\ICloneableExtensionsTest.cs" />
    <Compile Include="..\Extensions\System\Linq\Expressions\ExpressionExtensionsTest.cs" Link="Extensions\System\Linq\Expressions\ExpressionExtensionsTest.cs" />
    <Compile Include="..\Extensions\System\StringExtensionsTest.cs" Link="Extensions\System\StringExtensionsTest.cs" />
    <Compile Include="..\Extensions\System\Windows\Media\BrushExtensionsTest.cs" Link="Extensions\System\Windows\Media\BrushExtensionsTest.cs" />
    <Compile Include="..\FileLogic\FilePathLogicCFTest.cs" Link="FileLogic\FilePathLogicCFTest.cs" />
    <Compile Include="..\Graphics\BitmapHelperTest.cs" Link="Graphics\BitmapHelperTest.cs" />
    <Compile Include="..\Graphics\AnimatedGifHelperTest.cs" Link="Graphics\AnimatedGifHelperTest.cs" />
    <Compile Include="..\Keyboard\KeyboardLayoutInfoTest.cs" Link="Keyboard\KeyboardLayoutInfoTest.cs" />
    <Compile Include="..\Logic\ArcLogicTest.cs" Link="Logic\ArcLogicTest.cs" />
    <Compile Include="..\MultiLanguage\StringIntervalsSynchronizerTest.cs" Link="MultiLanguage\StringIntervalsSynchronizerTest.cs" />
    <Compile Include="..\NotifyPropertyChangedHelperTest.cs" Link="NotifyPropertyChangedHelperTest.cs" />
    <Compile Include="..\ObjectDumper.cs" Link="ObjectDumper.cs" />
    <Compile Include="..\Printer\GdiPrinter\ColumnWidthCalculatorTest.cs" Link="Printer\GdiPrinter\ColumnWidthCalculatorTest.cs" />
    <Compile Include="..\Printer\GdiPrinter\GdiPrinterCFTest.cs" Link="Printer\GdiPrinter\GdiPrinterCFTest.cs" />
    <Compile Include="..\Printer\SerialPrinter\SerialPortRecorder.cs" Link="Printer\SerialPrinter\SerialPortRecorder.cs" />
    <Compile Include="..\Printer\SerialPrinter\SerialPrinterCFTest.cs" Link="Printer\SerialPrinter\SerialPrinterCFTest.cs" />
    <Compile Include="..\RectangleDTest.cs" Link="RectangleDTest.cs" />
    <Compile Include="..\RelaxedStreamComparer\RelaxedStreamComparerAllowingOnePercentDifferenceTest.cs" Link="RelaxedStreamComparer\RelaxedStreamComparerAllowingOnePercentDifferenceTest.cs" />
    <Compile Include="..\RelaxedStreamComparer\RelaxedStreamComparerTest.cs" Link="RelaxedStreamComparer\RelaxedStreamComparerTest.cs" />
    <Compile Include="..\Runtime\GlobalsBaseTest.cs" Link="Runtime\GlobalsBaseTest.cs" />
    <Compile Include="..\ServiceRegistration\InterceptTestHelper.cs" Link="ServiceRegistration\InterceptTestHelper.cs" />
    <Compile Include="..\ServiceRegistration\InterceptTests.cs" Link="ServiceRegistration\InterceptTests.cs" />
    <Compile Include="..\TestDispatcherHelper.cs" Link="TestDispatcherHelper.cs" />
    <Compile Include="..\TestHelpers\Fixtures\KeyFixtures.cs" Link="TestHelpers\Fixtures\KeyFixtures.cs" />
    <Compile Include="..\TestHelpers\FrameworkElementEventExtensions.cs" Link="TestHelpers\FrameworkElementEventExtensions.cs" />
    <Compile Include="..\TestHelpers\RoutedEventsTestHelper.cs" Link="TestHelpers\RoutedEventsTestHelper.cs" />
    <Compile Include="..\Threshold\BoundaryMonitorTest.cs" Link="Threshold\BoundaryMonitorTest.cs" />
    <Compile Include="..\TypeValidation\ComplexDefaultValueTests.cs" Link="TypeValidation\ComplexDefaultValueTests.cs" />
    <Compile Include="..\Utilities\BEDATATYPEConverterTest.cs" Link="Utilities\BEDATATYPEConverterTest.cs" />
    <Compile Include="..\Utilities\BlockRecursionScopeTest.cs" Link="Utilities\BlockRecursionScopeTest.cs" />
    <Compile Include="..\Utilities\BrushFactoryTest.cs" Link="Utilities\BrushFactoryTest.cs" />
    <Compile Include="..\Utilities\CFFormExtensionMethodsTest.cs" Link="Utilities\CFFormExtensionMethodsTest.cs" />
    <Compile Include="..\Utilities\ComponentPropertyBinderTest.cs" Link="Utilities\ComponentPropertyBinderTest.cs" />
    <Compile Include="..\Utilities\DependencyObjectPropertyBinderTest.cs" Link="Utilities\DependencyObjectPropertyBinderTest.cs" />
    <Compile Include="..\Utilities\DependencyObjectPropertyBinderTests\BoolDataSourceTest.cs" Link="Utilities\DependencyObjectPropertyBinderTests\BoolDataSourceTest.cs" />
    <Compile Include="..\Utilities\DependencyObjectPropertyBinderTests\DateTimeDataSourceTest.cs" Link="Utilities\DependencyObjectPropertyBinderTests\DateTimeDataSourceTest.cs" />
    <Compile Include="..\Utilities\DependencyObjectPropertyBinderTests\DependencyObjectPropertyBinderTestBase.cs" Link="Utilities\DependencyObjectPropertyBinderTests\DependencyObjectPropertyBinderTestBase.cs" />
    <Compile Include="..\Utilities\DependencyObjectPropertyBinderTests\DoubleDataSourceTest.cs" Link="Utilities\DependencyObjectPropertyBinderTests\DoubleDataSourceTest.cs" />
    <Compile Include="..\Utilities\DependencyObjectPropertyBinderTests\IntDataSourceTest.cs" Link="Utilities\DependencyObjectPropertyBinderTests\IntDataSourceTest.cs" />
    <Compile Include="..\Utilities\DependencyObjectPropertyBinderTests\MockObjects\FrameworkElementMock.cs" Link="Utilities\DependencyObjectPropertyBinderTests\MockObjects\FrameworkElementMock.cs" />
    <Compile Include="..\Utilities\DependencyObjectPropertyBinderTests\ShortDataSourceTest.cs" Link="Utilities\DependencyObjectPropertyBinderTests\ShortDataSourceTest.cs" />
    <Compile Include="..\Utilities\DependencyObjectPropertyBinderTests\SingleDataSourceTest.cs" Link="Utilities\DependencyObjectPropertyBinderTests\SingleDataSourceTest.cs" />
    <Compile Include="..\Utilities\DependencyObjectPropertyBinderTests\StringDataSourceTest.cs" Link="Utilities\DependencyObjectPropertyBinderTests\StringDataSourceTest.cs" />
    <Compile Include="..\Utilities\ElementHelperTest.cs" Link="Utilities\ElementHelperTest.cs" />
    <Compile Include="..\Utilities\FileHelperTest.cs" Link="Utilities\FileHelperTest.cs" />
    <Compile Include="..\Utilities\NaturalSortComparerTest.cs" Link="Utilities\NaturalSortComparerTest.cs" />
    <Compile Include="..\Utilities\NeoZipFileFolderTest.cs" Link="Utilities\NeoZipFileFolderTest.cs" />
    <Compile Include="..\Utilities\Threading\TaskTest.cs" Link="Utilities\Threading\TaskTest.cs" />
    <Compile Include="..\Utilities\Threading\ThreadPoolTaskSchedulerTest.cs" Link="Utilities\Threading\ThreadPoolTaskSchedulerTest.cs" />
    <Compile Include="..\Utilities\ThreadPoolHelperCFTest.cs" Link="Utilities\ThreadPoolHelperCFTest.cs" />
    <Compile Include="..\VariantValueTest.cs" Link="VariantValueTest.cs" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="..\Graphics\animated clock.gif" Link="Graphics\animated clock.gif" />
    <EmbeddedResource Include="..\Graphics\animated dog.gif" Link="Graphics\animated dog.gif" />
    <EmbeddedResource Include="..\Graphics\animated writing process composition.png" Link="Graphics\animated writing process composition.png" />
    <EmbeddedResource Include="..\Graphics\animated writing process.gif" Link="Graphics\animated writing process.gif" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.8.3" />
    <PackageReference Include="Mono.Cecil" Version="0.11.4" />
    <PackageReference Include="NSubstitute" Version="4.2.2" />
    <PackageReference Include="NUnit" Version="3.13.2" />
    <PackageReference Include="NUnit3TestAdapter" Version="4.0.0" />
    <PackageReference Include="coverlet.collector" Version="1.3.0" />
  </ItemGroup>
  
  <ItemGroup>
    <ProjectReference Include="..\..\..\Controls\Controls\.vNext\Controls.csproj" />
    <ProjectReference Include="..\..\..\Interfaces\InterfacesCF\.vNext\InterfacesCF.csproj" />
    <ProjectReference Include="..\..\..\Test\TestUtilities\.vNext\TestUtilities.csproj" />
    <ProjectReference Include="..\..\..\Tools\Tools\.vNext\Tools.csproj" />
    <ProjectReference Include="..\..\CommonCF\.vNext\CommonCF.csproj" />
    <ProjectReference Include="..\..\Common\.vNext\Common.csproj" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="DataSourceInterop">
      <HintPath>..\..\..\..\ixDeveloperWithoutCore\Interop\DataSource\BeDataSource2\Interop\DataSourceInterop.dll</HintPath>
    </Reference>
  </ItemGroup>
</Project>

NumberValidationBehaviorFormattingTest.cs
-8
+8
/Common/CommonTest/Behaviors/Formatters/NumberValidationBehaviorFormattingTest.cs
using Core.Api.ProjectTarget;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Behaviors.Formatters
{
        public void RunBeforeEachTest()
        {
            TestHelper.ClearServices();
            m_TargetInfo = MockRepository.GenerateStub<ITargetInfo>();
            m_Terminal = MockRepository.GenerateStub<ITerminal>();
            m_TargetInfo = Substitute.For<ITargetInfo>();
            m_Terminal = Substitute.For<ITerminal>();
            m_TargetInfo.TerminalDescription = m_Terminal;
            m_TargetService = MockRepository.GenerateStub<ITargetService>();
            m_TargetService.Stub(x => x.CurrentTargetInfo).Return(m_TargetInfo);
            m_TargetService = Substitute.For<ITargetService>();
            m_TargetService.CurrentTargetInfo.Returns(m_TargetInfo);
            TestHelper.AddService(typeof(ITargetService), m_TargetService);
            TestHelper.AddService(typeof(ITerminalTargetChangeService), MockRepository.GenerateStub<ITerminalTargetChangeService>());
            TestHelper.AddService(typeof(ITerminalTargetChangeService), Substitute.For<ITerminalTargetChangeService>());
            m_NumberValidationBehavior = new ExtendedNumberValidationBehavior();
            m_TextBox = new TextBox();
        private void StubTargetingPC()
        {
            m_Terminal.Stub(x => x.IsPC).Return(true);
            m_Terminal.IsPC.Returns(true);
        }
        private void StubTargetingNonPC()
        {
            m_Terminal.Stub(x => x.IsPC).Return(false);
            m_Terminal.IsPC.Returns(false);
        }
        [Test]

ExecuteCommandOnLostFocusBehaviorTest.cs
-2
+2
/Common/CommonTest/Behaviors/ExecuteCommandOnLostFocusBehaviorTest.cs
using Neo.ApplicationFramework.Common.TestHelpers;
using Neo.ApplicationFramework.Common.ViewModels;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Behaviors
{
            m_ExecuteCommandOnLostFocusBehavior = new ExecuteCommandOnLostFocusBehavior();
            m_TextBox = new RibbonTextBox();
            m_ExecuteCommandOnLostFocusBehavior.Attach(m_TextBox);
            m_LocalViewModel = new LocalViewModel(MockRepository.GenerateStub<ICommandManagerService>());
            m_LocalViewModel = new LocalViewModel(Substitute.For<ICommandManagerService>());
        }
        [Test]

NumberValidationBehaviorTest.cs
-6
+6
/Common/CommonTest/Behaviors/NumberValidationBehaviorTest.cs
using Neo.ApplicationFramework.Common.TestHelpers;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Behaviors
{
        public void RunBeforeEachTest()
        {
            TestHelper.ClearServices();
            m_TargetInfo = MockRepository.GenerateStub<ITargetInfo>();
            m_Terminal = MockRepository.GenerateStub<ITerminal>();
            m_TargetInfo = Substitute.For<ITargetInfo>();
            m_Terminal = Substitute.For<ITerminal>();
            m_TargetInfo.TerminalDescription = m_Terminal;
            m_TargetService = MockRepository.GenerateStub<ITargetService>();
            m_TargetService.Stub(x => x.CurrentTargetInfo).Return(m_TargetInfo);
            m_TargetService = Substitute.For<ITargetService>();
            m_TargetService.CurrentTargetInfo.Returns(m_TargetInfo);
            TestHelper.AddService(typeof(ITargetService), m_TargetService);
            TestHelper.AddService(typeof(ITerminalTargetChangeService), MockRepository.GenerateStub<ITerminalTargetChangeService>());
            TestHelper.AddService(typeof(ITerminalTargetChangeService), Substitute.For<ITerminalTargetChangeService>());
            m_NumberValidationBehavior = new ExtendedNumberValidationBehavior();
            m_TextBox = new TextBox();

DataItemProxyFactoryTest.cs
-1
+9
/Common/CommonTest/Data/DataItemProxyFactoryTest.cs
using Core.Api.GlobalReference;
using Core.Controls.Api.Designer;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using TestHelper = Neo.ApplicationFramework.TestUtilities.TestHelper;
        public void SetUp()
        {
            TestHelper.UseTestWindowThreadHelper = true;
            TestHelper.CreateAndAddServiceStub<IGlobalReferenceService>();
            var mock = TestHelper.CreateAndAddServiceStub<IGlobalReferenceService>();
            mock.GetObject<IDataItemProxySource>(Arg.Any<string>()).ReturnsForAnyArgs(x => null);
        }
        [TearDown]
        public void TearDown()
        {
            TestHelper.ClearServices();
        }
        [Test]

DataItemProxyTest.cs
-3
+3
/Common/CommonTest/Data/DataItemProxyTest.cs
using Core.Api.GlobalReference;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Data
{
            m_InitialValue = 12;
            m_NewValue = 24;
            m_DataItemStub = MockRepository.GenerateStub<IDataItemProxySource>();
            m_DataItemStub = Substitute.For<IDataItemProxySource>();
            m_DataItemStub.Value = m_InitialValue;
            m_DataItemStub.Values = new [] { new VariantValue(m_InitialValue) };
            m_GlobalReferenceServiceStub = TestHelper.CreateAndAddServiceStub<IGlobalReferenceService>();
            m_GlobalReferenceServiceStub.Stub(globalReferenceService => globalReferenceService.GetObject<IDataItemProxySource>(m_DataItemName)).Return(m_DataItemStub).Repeat.Any();
            m_GlobalReferenceServiceStub.GetObject<IDataItemProxySource>(m_DataItemName).Returns(m_DataItemStub);
        }
        [TearDown]

DynamicBindingTest.cs
-13
+16
/Common/CommonTest/Data/DynamicBindingTest.cs
using Core.Api.Tools;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Rhino.Mocks.Interfaces;
namespace Neo.ApplicationFramework.Common.Data
{
    [TestFixture(DataSourceUpdateMode.Never, typeof(ControlStub))]
    public class DynamicBindingTest
    {
        private IEventRaiser m_DataItemEventRaiser;
        private string m_NewPropertyValue;
        private IDataItemProxy m_DataItemProxy;
        private ControlStub m_ControlStub;
        private readonly Type m_ControlStubType;
        //private IToolManager m_ToolManager;
        private MockRepository m_Mocker;
        private readonly DataSourceUpdateMode m_DataSourceUpdateMode;
        public DynamicBindingTest(DataSourceUpdateMode dataSourceUpdateMode, Type controlStubType)
        [SetUp]
        public void SetUp()
        {
            //m_ToolManager = MockRepository.GenerateStub<IToolManager>();
            //m_ToolManager.Stub(x => x.RunTime).Return(true);
            //m_ToolManager = Substitute.For<IToolManager>();
            //m_ToolManager.RunTime).Returns(true);
            //TestHelper.AddService<IToolManager>(m_ToolManager);
            m_Mocker = new MockRepository();
            m_DataItemProxy = m_Mocker.Stub<IDataItemProxy>();
            m_DataItemProxy = Substitute.For<IDataItemProxy>();
            m_DataItemProxy.Value = "value";
            m_DataItemEventRaiser = m_DataItemProxy.GetEventRaiser(x => x.PropertyChanged += null);
            m_DataItemProxy.PropertyChanged += (sender, args) => 
            {
                Console.WriteLine("Event has been handled!");
                m_NewPropertyValue = args.PropertyName;
            };
            m_ControlStub = (ControlStub)Activator.CreateInstance(m_ControlStubType);
            var toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(inv => inv.Runtime).Return(true);
            toolManager.Runtime.Returns(true);
        }
        [TearDown]
        public void TearDown()
        {
            m_ControlStub.Dispose();
            TestHelper.ClearServices();
        }
        [Test]
            SetDataItemProxyValue(x => x.Value, "kotte");
            Assert.That(m_ControlStub.Value, Is.EqualTo("kotte"));
            Assert.Equals("kotte", m_NewPropertyValue);
        }
        [Test]
            SetDataItemProxyValue(x => x.FullName, "kotte");
            Assert.That(m_ControlStub.Value, Is.EqualTo("value"));
            Assert.IsNull(m_NewPropertyValue);
        }
        [Test]
        {
            MemberExpression member = propertyExpression.Body as MemberExpression;
            ((PropertyInfo)member.Member).SetValue(m_DataItemProxy, newValue, null);
            m_DataItemEventRaiser.Raise(m_DataItemProxy, new PropertyChangedEventArgs(member.Member.Name));
            //m_DataItemEventRaiser.Raise(m_DataItemProxy, new PropertyChangedEventArgs(member.Member.Name));
            Raise.Event<PropertyChangedEventHandler>(new PropertyChangedEventArgs(member.Member.Name));
        }
    }
}

DynamicControlBindingsCollectionTest.cs
-3
+3
/Common/CommonTest/Data/DynamicControlBindingsCollectionTest.cs
using Neo.ApplicationFramework.Interop.DataSource;
using Neo.ApplicationFramework.PropertyChangeHelpers;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Data
{
        public void Setup()
        {
            var toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(inv => inv.Runtime).Return(true);
            toolManager.Runtime.Returns(true);
        }
        [TearDown]
            TestHelper.RemoveService<IToolManager>();
            var toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(inv => inv.Runtime).Return(false);
            toolManager.Runtime.Returns(false);
            m_BindingContainer.DesignTime = true;

PropertyConnectionCollectionTest.cs
-7
+7
/Common/CommonTest/Data/PropertyConnectionCollectionTest.cs
using System.Windows.Forms;
using Neo.ApplicationFramework.Interfaces;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Common.Data
{
        [SetUp]
        public void Setup()
        {
            m_BindableComponentStub = MockRepository.GenerateStub<IBindableComponent>();
            m_BindableComponentStub = Substitute.For<IBindableComponent>();
            m_PropertyConnectionCollection = new PropertyConnectionCollection(m_BindableComponentStub);
            m_PropertyConnectionStub = MockRepository.GenerateStub<IPropertyConnection>();
            m_PropertyConnectionStub.Stub(x => x.Key).Return("Key");
            m_PropertyConnectionStub = Substitute.For<IPropertyConnection>();
            m_PropertyConnectionStub.Key.Returns("Key");
        }
        [Test]
        public void AddingItemSetsUpConnection()
        {
            m_PropertyConnectionCollection.Add(m_PropertyConnectionStub);
            m_PropertyConnectionStub.AssertWasCalled(d => d.SetupConnection(m_BindableComponentStub));
            m_PropertyConnectionStub.Received().SetupConnection(m_BindableComponentStub);
        }
        [Test]
        {
            m_PropertyConnectionCollection.Add(m_PropertyConnectionStub);
            m_PropertyConnectionCollection.Clear();
            m_PropertyConnectionStub.AssertWasCalled(d => d.TearDownConnection());
            m_PropertyConnectionStub.Received().TearDownConnection();
        }
        [Test]
        {
            m_PropertyConnectionCollection.Add(m_PropertyConnectionStub);
            m_PropertyConnectionCollection.Remove(m_PropertyConnectionStub);
            m_PropertyConnectionStub.AssertWasCalled(d => d.TearDownConnection());
            m_PropertyConnectionStub.Received().TearDownConnection();
        }
        [Test]

NameCreationServiceCreateProjectItemNameTest.cs
-30
+17
/Common/CommonTest/Design/NameCreationServiceCreateProjectItemNameTest.cs
using System.Collections.Generic;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.Design;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Design
{
        [SetUp]
        public void Setup()
        {
            m_NamingConstraints = MockRepository.GenerateMock<INamingConstraints>();
            m_NamingConstraints.Stub(inv => inv.IsNameLengthValid(Arg<int>.Is.Anything, Arg<int>.Is.Anything, Arg<int>.Is.Anything)).Return(true);
            m_NamingConstraints.Stub(inv => inv.ReservedApplicationNames).Return(new HashSet<string>());
            m_NamingConstraints.Stub(inv => inv.ReservedSystemNames).Return(new HashSet<string>());
            m_NamingConstraints = Substitute.For<INamingConstraints>();
            m_NamingConstraints.IsNameLengthValid(Arg.Any<int>(), Arg.Any<int>(), Arg.Any<int>()).Returns(true);
            m_NamingConstraints.ReservedApplicationNames.Returns(new HashSet<string>());
            m_NamingConstraints.ReservedSystemNames.Returns(new HashSet<string>());
        }
        [Test]
        public void FirstChildForBaseNameHasSuffix1()
        {
            MockRepository mockRepository = new MockRepository();
            IProjectItem projectItem = mockRepository.StrictMock<IProjectItem>();
            String baseName = "Button";
            String expectedProjectItemName = baseName + "1";
            String actualProjectItemName;
            IProjectItem projectItem = Substitute.For<IProjectItem>();
            string baseName = "Button";
            string expectedProjectItemName = baseName + "1";
            string actualProjectItemName;
            IProjectNameCreationServiceIde projectNameCreationService = new ProjectNameCreationService(new NameCreationService(m_NamingConstraints).ToILazy<INameCreationService>());
            using (mockRepository.Record())
            {
                Expect.Call(projectItem.HasChild(null)).IgnoreArguments().Return(false);
            }
            projectItem.HasChild(Arg.Any<string>()).ReturnsForAnyArgs(false);
            using (mockRepository.Playback())
            {
            actualProjectItemName = projectNameCreationService.CreateProjectItemName(projectItem, baseName);
            }
            Assert.AreEqual(expectedProjectItemName, actualProjectItemName);
            projectItem.Received().HasChild(Arg.Any<string>());
        }
        [Test]
        public void SecondChildForBaseNameHasSuffix2()
        {
            MockRepository mockRepository = new MockRepository();
            IProjectItem projectItem = mockRepository.StrictMock<IProjectItem>();
            String baseName = "Button";
            String expectedProjectItemName = baseName + "2";
            String actualProjectItemName;
            IProjectItem projectItem = Substitute.For<IProjectItem>();
            string baseName = "Button";
            string expectedProjectItemName = baseName + "2";
            string actualProjectItemName;
            IProjectNameCreationServiceIde projectNameCreationService = new ProjectNameCreationService(new NameCreationService(m_NamingConstraints).ToILazy<INameCreationService>());
            using (mockRepository.Record())
            {
                Expect.Call(projectItem.HasChild(null)).IgnoreArguments().Return(true);
                Expect.Call(projectItem.HasChild(null)).IgnoreArguments().Return(false);
            }
            projectItem.HasChild(Arg.Any<string>()).ReturnsForAnyArgs(true, false);
            using (mockRepository.Playback())
            {
            actualProjectItemName = projectNameCreationService.CreateProjectItemName(projectItem, baseName);
            }
            Assert.AreEqual(expectedProjectItemName, actualProjectItemName);
            projectItem.Received().HasChild(Arg.Any<string>());
        }
    }
}

NameCreationServiceTest.cs
-13
+13
/Common/CommonTest/Design/NameCreationServiceTest.cs
using System.Collections.Generic;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.Design;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Design
{
                                            "com9"
                                        }.ToSet();
            var namingConstraints = MockRepository.GenerateMock<INamingConstraints>();
            namingConstraints.Stub(inv => inv.IsNameLengthValid(Arg<int>.Is.Anything, Arg<int>.Is.Anything, Arg<int>.Is.Anything)).Return(true);
            namingConstraints.Stub(inv => inv.ReservedApplicationNames).Return(new HashSet<string>());
            namingConstraints.Stub(inv => inv.ReservedSystemNames).Return(reservedSystemNames);
            var namingConstraints = Substitute.For<INamingConstraints>();
            namingConstraints.IsNameLengthValid(Arg.Any<int>(), Arg.Any<int>(), Arg.Any<int>()).Returns(true);
            namingConstraints.ReservedApplicationNames.Returns(new HashSet<string>());
            namingConstraints.ReservedSystemNames.Returns(reservedSystemNames);
            NameCreationService = new NameCreationService(namingConstraints);
            m_ProjectNameCreationService = new ProjectNameCreationService(NameCreationService.ToILazy());
        }
        [TestCase("  SomeName ", "__SomeName_")]
        public void GetUniqueNameReturnsDefaultNameIfInvalid(string inputName, string expectedOutputName)
        {
            IProjectItem projectItem = MockRepository.GenerateStub<IProjectItem>();
            projectItem.Stub(x => x.NameExists(null, null)).IgnoreArguments().Return(false);
            IProjectItem projectItem = Substitute.For<IProjectItem>();
            projectItem.NameExists(null, null).ReturnsForAnyArgs(false);
            IProject project = MockRepository.GenerateStub<IProject>();
            project.Stub(x => x.ProjectItems).Return(new[] { projectItem });
            IProject project = Substitute.For<IProject>();
            project.ProjectItems.Returns(new[] { projectItem });
            string outputName = m_ProjectNameCreationService.GetUniqueName(project, inputName);
        [TestCase("ProjectItem1", "ProjectItem11")]
        public void GetUniqueNameIncreasesTheSuffixNumberIfNameExistsInProject(string inputName, string expectedOutputName)
        {
            IProjectItem projectItem = MockRepository.GenerateStub<IProjectItem>();
            projectItem.Stub(x => x.NameExists(x, inputName)).Return(true);
            IProjectItem projectItem = Substitute.For<IProjectItem>();
            projectItem.NameExists(projectItem, inputName).Returns(true);
            IProject project = MockRepository.GenerateStub<IProject>();
            project.Stub(x => x.ProjectItems).Return(new[] { projectItem });
            IProject project = Substitute.For<IProject>();
            project.ProjectItems.Returns(new[] { projectItem });
            string outputName = m_ProjectNameCreationService.GetUniqueName(project, inputName);

NameCreationTest.cs
-11
+11
/Common/CommonTest/Design/NameCreationTest.cs
using Neo.ApplicationFramework.Common.Test;
using Neo.ApplicationFramework.Tools.Design;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
using INameCreationService = Neo.ApplicationFramework.Interfaces.INameCreationService;
namespace Neo.ApplicationFramework.Common.Design
            m_Names = new List<string>();
            m_Name = string.Empty;
            m_NamingConstraints = MockRepository.GenerateMock<INamingConstraints>();
            m_NamingConstraints.Stub(inv => inv.IsNameLengthValid(Arg<int>.Is.Anything, Arg<int>.Is.Anything, Arg<int>.Is.Anything)).Return(true);
            m_NamingConstraints.Stub(inv => inv.ReservedApplicationNames).Return(new HashSet<string>());
            m_NamingConstraints.Stub(inv => inv.ReservedSystemNames).Return(new HashSet<string>());
            m_NamingConstraints = Substitute.For<INamingConstraints>();
            m_NamingConstraints.IsNameLengthValid(Arg.Any<int>(), Arg.Any<int>(), Arg.Any<int>()).Returns(true);
            m_NamingConstraints.ReservedApplicationNames.Returns(new HashSet<string>());
            m_NamingConstraints.ReservedSystemNames.Returns(new HashSet<string>());
            m_ContainerMock = MockRepository.GenerateStub<IContainer>();
            m_ContainerMock = Substitute.For<IContainer>();
        }
        [Test]
        {
            INameCreationService nameCreationService = new NameCreationService(m_NamingConstraints);
            m_ContainerMock.Stub(x => x.Components).Return(new ComponentCollection(
            m_ContainerMock.Components.Returns(new ComponentCollection(
                new IComponent[]{})
            );
        [Test]
        public void CreateNameWithinContainerNamesExist()
        {
            m_ContainerMock.Stub(x => x.Components).Return(new ComponentCollection(
            m_ContainerMock.Components.Returns(new ComponentCollection(
                new IComponent[]
                {
                    new Button
        [Test]
        public void CreateNameWithinContainerNamesExistNameInTheMiddle()
        {
            m_ContainerMock.Stub(x => x.Components).Return(new ComponentCollection(
            m_ContainerMock.Components.Returns(new ComponentCollection(
                new IComponent[]
                {
                    new Button
        {
            INameCreationService nameCreationService = new NameCreationService(m_NamingConstraints);
            m_ContainerMock.Stub(x => x.Components).Return(new ComponentCollection(
            m_ContainerMock.Components.Returns(new ComponentCollection(
                new IComponent[] { })
            );
        [Test]
        public void CreateNameWithinContainerNamesExistVeryLongName()
        {
            m_ContainerMock.Stub(x => x.Components).Return(new ComponentCollection(
            m_ContainerMock.Components.Returns(new ComponentCollection(
                new IComponent[]
                {
                    new Button

DynamicStringTest.cs
+1
/Common/CommonTest/Dynamics/DynamicStringTest.cs
        public void TearDown()
        {
            NeoDesignerProperties.IsInDesignMode = false;
            TestHelper.ClearServices();
        }
        [Test]

MessageLibraryDynamicsConverterTest.cs
-4
+3
/Common/CommonTest/Dynamics/MessageLibraryDynamicsConverterTest.cs
using System;
using Core.Controls.Api.Bindings.PropertyBinders;
using Core.Controls.Api.Designer;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.MessageLibrary;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Dynamics
{
            m_MessageGroup.Messages.Add(new MessageItem() { Message = Text1900To1999, StartValue = 1900, EndValue = 1999 });
            m_MessageGroup.Messages.Add(new MessageItem() { Message = Text2000To2099, StartValue = 2000, EndValue = 2099 });
            var groupResolver = MockRepository.GenerateStub<MessageLibraryGroupResolver>();
            groupResolver.Expect(r => r.GetGroup(null)).IgnoreArguments().Return(m_MessageGroup).Repeat.Any();
            var groupResolver = Substitute.For<MessageLibraryGroupResolver>();
            groupResolver.GetGroup(Arg.Any<string>()).ReturnsForAnyArgs(m_MessageGroup);
            m_MessageLibraryDynamicsConverter = new MessageLibraryDynamicsConverterCF(m_MessageGroup.Name);
            m_MessageLibraryDynamicsConverter.MessageLibraryGroupResolver = groupResolver;

EncodingsListManagerTest.cs
-7
+7
/Common/CommonTest/EncodingsList/EncodingsListManagerTest.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Neo.ApplicationFramework.Common.Constants;
using Neo.ApplicationFramework.Common.Serialization;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace Neo.ApplicationFramework.Common.EncodingsList
{
        {
            m_TempFileName = Path.Combine(Path.GetTempPath(), EncodingConstants.EncodingsListFileName);
            m_Serializer = new DictionarySerializer<string, int>();
            m_FileSettings = MockRepository.GenerateMock<IFileSettingsServiceIde>();
            m_FileSettings.Expect(i => i.CommonApplicationDataFolder).Return(".");
            m_FileSettings = Substitute.For<IFileSettingsServiceIde>();
            m_FileSettings.CommonApplicationDataFolder.Returns(".");
            m_EncodingsListManager = new EncodingsListManager(m_FileSettings, m_TempFileName);
        }

IEnumerableExtensionsTest.cs
+3
/Common/CommonTest/Extensions/System/Collections/Generic/IEnumerableExtensionsTest.cs
#if !VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.Linq;
        #endregion
    }
}
#endif

FilePathLogicCFTest.cs
-4
+8
/Common/CommonTest/FileLogic/FilePathLogicCFTest.cs
using Core.Api.Application;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.FileLogic
{
        [SetUp]
        public void SetUp()
        {
#if !VNEXT_TARGET
            m_FilePathLogicCF = new FilePathLogicCF();
#else
            m_FilePathLogicCF = new FilePathLogic();
#endif
            TestHelper.CreateAndAddServiceMock<IMessageBoxServiceCF>();
            TestHelper.CreateAndAddServiceStub<IMessageBoxServiceCF>();
            ICoreApplication coreApp = TestHelper.CreateAndAddServiceMock<ICoreApplication>();
            coreApp.Stub(x => x.StartupPath).Return(m_iXPath);
            ICoreApplication coreApp = TestHelper.CreateAndAddServiceStub<ICoreApplication>();
            coreApp.StartupPath.Returns(m_iXPath);
        }
        [TearDown]

AnimatedGifHelperTest.cs
+2
/Common/CommonTest/Graphics/AnimatedGifHelperTest.cs
        {
            AnimatedGifHelper helper = new AnimatedGifHelper();
            BitmapSource composition = null;
#if !VNEXT_TARGET
            using (new Neo.ApplicationFramework.Utilities.Measurement.Stopwatch("It took {0} to generate animated dog composed bitmap"))
#endif
            {
                using (FileStream file = new FileStream(m_AnimatedDogFilePath, FileMode.Open, FileAccess.Read))
                {

BitmapHelperTest.cs
+1
/Common/CommonTest/Graphics/BitmapHelperTest.cs
namespace Neo.ApplicationFramework.Common.Graphics
{
    [TestFixture]
    [Apartment(System.Threading.ApartmentState.STA)]
    public class BitmapHelperTest
    {
        private readonly Size m_DesiredThumbnailSize = new Size(100, 100);

HarrisDialogViewModelTest.cs
-2
+2
/Common/CommonTest/HarrisStyleDialog/HarrisDialogViewModelTest.cs
using System;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.HarrisStyleDialog
{
        [SetUp]
        public void SetUp()
        {
            m_HarrisDialogViewModel = new HarrisDialogViewModel(MockRepository.GenerateStub<IBrandServiceIde>().ToILazy());
            m_HarrisDialogViewModel = new HarrisDialogViewModel(Substitute.For<IBrandServiceIde>().ToILazy());
        }
        [Test]

KeyboardLayoutInfoTest.cs
-2
+11
/Common/CommonTest/Keyboard/KeyboardLayoutInfoTest.cs
        {
            string testDirectory = TestHelper.CurrentDirectory;
#if DEBUG
            const string relativeToLayoutFileFolder = @".\..\..\..\..\Output\Debug";
            const string relativeToLayoutFileFolder = @"..\..\..\..\Output\Debug";
#else
            const string relativeToLayoutFileFolder = @".\..\..\..\..\Output\Release";
            const string relativeToLayoutFileFolder = @"..\..\..\..\Output\Release";
#endif
#if !VNEXT_TARGET
            string currentDirectory = Path.Combine(testDirectory, relativeToLayoutFileFolder);
#else
            string currentDirectory = Path.Combine(testDirectory, @"..\..\", relativeToLayoutFileFolder);
#endif
            m_LayoutFilesFolderPath = Path.Combine(currentDirectory, ApplicationConstants.KeyboardLayoutsFolder);
            Assert.IsTrue(Directory.Exists(m_LayoutFilesFolderPath));
#if VNEXT_TARGET
            TestHelper.SetupServicePlatformFactory<IKeyboardHelper>(new KeyboardHelper());
#else
            TestHelper.SetupServicePlatformFactory<IKeyboardHelper>(new KeyboardHelperCF());
#endif
        }
        [Test]

MultiTextBindingsAndResourceItemsManagerTest.cs
-33
+20
/Common/CommonTest/MultiLanguage/MultiTextBindingsAndResourceItemsManagerTest.cs
using System;
using System.Collections;
using System.ComponentModel;
using System.Windows.Data;
using Neo.ApplicationFramework.Common.Dynamics;
using Neo.ApplicationFramework.Controls.WindowsControls;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.MultiLanguage
{
            m_TextIDServiceStub = TestHelper.AddServiceStub<ITextIdService>();
            m_GlobalSelectionServiceStub = TestHelper.AddServiceStub<IGlobalSelectionService>();
            m_DesignerResourceItem = MockRepository.GenerateStub<IDesignerResourceItem>();
            m_DesignerResourceItem = Substitute.For<IDesignerResourceItem>();
            m_DesignerResourceItem.ObjectName = ComboBoxName;
            m_DesignerResourceItem.PropertyName = FirstTextPropertyName;
            m_DesignerResourceItem.CurrentValue = FirstTextValue;
            m_MultiLanguageServiceStub.Stub(x => x.AddResourceItem(string.Empty, ComboBoxName, FirstTextPropertyName, FirstTextValue)).IgnoreArguments().Return(m_DesignerResourceItem);
            m_MultiLanguageServiceStub.AddResourceItem(string.Empty, ComboBoxName, FirstTextPropertyName, FirstTextValue)
                .Returns(m_DesignerResourceItem);
            m_ComboBox = new ComboBox();
            m_ComboBox.Name = ComboBoxName;
        [Test]
        public void SettingTextUnhooksPreviousBindingList()
        {
            MockRepository mockRepository = new MockRepository();
            IBindingList bindingListMock = Substitute.For<IBindingList>();
            bindingListMock.ReceivedWithAnyArgs(1).ListChanged -= null;
            bindingListMock.ReceivedWithAnyArgs().ListChanged += null;
            IBindingList bindingListMock = mockRepository.StrictMultiMock<IBindingList>(typeof(IList));
            bindingListMock.Expect(x => x.ListChanged -= null).IgnoreArguments().Repeat.Once();
            bindingListMock.Expect(x => x.ListChanged += null).IgnoreArguments().Repeat.Any();
            bindingListMock.Replay();
            m_MultiTextBindingsAndResourceItemsManager.Texts = bindingListMock;
            m_MultiTextBindingsAndResourceItemsManager.Texts = new BindingList<string>();
            bindingListMock.VerifyAllExpectations();
        }
        [Test]
        public void SettingTextHooksupNewBindingList()
        {
            MockRepository mockRepository = new MockRepository();
            IBindingList bindingListMock = mockRepository.StrictMultiMock<IBindingList>(typeof(IList));
            bindingListMock.Expect(x => x.ListChanged += null).IgnoreArguments().Repeat.Once();
            bindingListMock.Replay();
            var count = 0;
            IBindingList bindingListMock = Substitute.For<IBindingList>();
            //bindingListMock.ListChanged += (Arg.Any<object>(), args) => count++;
            m_MultiTextBindingsAndResourceItemsManager.Texts = bindingListMock;
            bindingListMock.VerifyAllExpectations();
            Assert.AreEqual(1, count);
        }
        [Test]
        public void DisposingInstanceUnhooksBindingList()
        {
            MockRepository mockRepository = new MockRepository();
            IBindingList bindingListMock = Substitute.For<IBindingList>();
            bindingListMock.ReceivedWithAnyArgs(1).ListChanged -= null;
            bindingListMock.ReceivedWithAnyArgs().ListChanged += null;
            IBindingList bindingListMock = mockRepository.StrictMultiMock<IBindingList>(typeof(IList));
            bindingListMock.Expect(x => x.ListChanged -= null).IgnoreArguments().Repeat.Once();
            bindingListMock.Expect(x => x.ListChanged += null).IgnoreArguments().Repeat.Any();
            bindingListMock.Replay();
            m_MultiTextBindingsAndResourceItemsManager.Texts = bindingListMock;
            ((IDisposable)m_MultiTextBindingsAndResourceItemsManager).Dispose();
            bindingListMock.VerifyAllExpectations();
        }
        [Test]
        public void ChangingTextUpdatesResourceItem()
        {
            m_MultiLanguageServiceStub.Stub(x => x.FindResourceItems(string.Empty, ComboBoxName)).Return(new IDesignerResourceItem[] { m_DesignerResourceItem });
            m_MultiLanguageServiceStub.FindResourceItems(string.Empty, ComboBoxName).Returns(new IDesignerResourceItem[] { m_DesignerResourceItem });
            
            StringInterval stringInterval = (StringInterval)m_MultiTextBindingsAndResourceItemsManager.Texts[0];
            stringInterval.Value = "New Test 1";
            MultiBinding multiBinding = BindingOperations.GetMultiBinding(m_ComboBox, ComboBox.TextsProperty);
            Assert.AreEqual(2, multiBinding.Bindings.Count);
            m_MultiLanguageServiceStub.AssertWasCalled(x => x.AddResourceItem(string.Empty, ComboBoxName, SecondTextPropertyName, SecondTextValue), options => options.Repeat.Once());
            m_MultiLanguageServiceStub.Received(1).AddResourceItem(string.Empty, ComboBoxName, SecondTextPropertyName, SecondTextValue);
        }
        [Test]
        {
            m_MultiTextBindingsAndResourceItemsManager.Texts.Add(new StringInterval() { Value = SecondTextValue });
            IDesignerResourceItem secondDesignerResourceItem = MockRepository.GenerateStub<IDesignerResourceItem>();
            IDesignerResourceItem secondDesignerResourceItem = Substitute.For<IDesignerResourceItem>();
            secondDesignerResourceItem.ObjectName = ComboBoxName;
            secondDesignerResourceItem.PropertyName = SecondTextPropertyName;
            secondDesignerResourceItem.CurrentValue = SecondTextValue;
            m_MultiLanguageServiceStub.Stub(x => x.FindResourceItems(string.Empty, ComboBoxName)).Return(new IDesignerResourceItem[] { m_DesignerResourceItem, secondDesignerResourceItem });
            m_MultiLanguageServiceStub.FindResourceItems(string.Empty, ComboBoxName).Returns(new IDesignerResourceItem[] { m_DesignerResourceItem, secondDesignerResourceItem });
            m_MultiTextBindingsAndResourceItemsManager.Texts.RemoveAt(0);
            Assert.AreEqual(1, multiBinding.Bindings.Count);
            Assert.AreEqual(FirstTextPropertyName, secondDesignerResourceItem.PropertyName);
            m_MultiLanguageServiceStub.AssertWasCalled(x => x.RemoveResourceItem(m_DesignerResourceItem), options => options.Repeat.Once());
            m_MultiLanguageServiceStub.Received(1).RemoveResourceItem(m_DesignerResourceItem);
        }
        [Test]
            MultiBinding multiBinding = BindingOperations.GetMultiBinding(m_ComboBox, ComboBox.TextsProperty);
            Assert.AreEqual(0, multiBinding.Bindings.Count);
            m_MultiLanguageServiceStub.AssertWasCalled(x => x.RemoveResourceItem(m_DesignerResourceItem), options => options.Repeat.Once());
            m_MultiLanguageServiceStub.Received(1).RemoveResourceItem(m_DesignerResourceItem);
        }
    }
}

ColumnWidthCalculatorTest.cs
-4
+5
/Common/CommonTest/Printer/GdiPrinter/ColumnWidthCalculatorTest.cs
using Neo.ApplicationFramework.Common.Printer.Document;
using Neo.ApplicationFramework.Common.Printer.GdiPrinter.NativeWrappers;
using Neo.ApplicationFramework.Interfaces.Printer;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Printer.GdiPrinter
{
        [SetUp]
        public void Setup()
        {
            m_GdiWrapperMock = MockRepository.GenerateMock<IGdiWrapper>();
            m_GdiWrapperMock = Substitute.For<IGdiWrapper>();
            // Use a dpi of 72 since this will translate 1:1 between points (defined as 1/72 of an inch)
            // and pixels.
            m_GdiWrapperMock.Stub(m => m.GetDeviceCaps(GdiConstants.LOGPIXELSY)).Return(72);
            m_GdiWrapperMock.GetDeviceCaps(GdiConstants.LOGPIXELSY).Returns(72);
        }
        [Test]
            // multiple of 72 (points are defined as 1/72 inches). A dpi of 144 means each points translates
            // to two pixels
            int dpi = 144; 
            m_GdiWrapperMock.Stub(m => m.GetDeviceCaps(GdiConstants.LOGPIXELSY)).Return(dpi).Repeat.Any();
            m_GdiWrapperMock.GetDeviceCaps(GdiConstants.LOGPIXELSY).Returns(dpi);
            var columns = CreateTableColumns(2);
            columns[0].Width = 200;
            IList<int> actualWidths = CalculateWidthsForColumnsAndWidth(columns, 600);
            Assert.That(actualWidths[0], Is.EqualTo(400));
            m_GdiWrapperMock.Received().GetDeviceCaps(GdiConstants.LOGPIXELSY);
        }
        private IList<int> CalculateWidthsForColumnsAndWidth(List<TableColumn> columns, int availableWidth)

GdiPrinterCFTest.cs
-26
+20
/Common/CommonTest/Printer/GdiPrinter/GdiPrinterCFTest.cs
using Neo.ApplicationFramework.Interfaces.Printer;
using Neo.ApplicationFramework.TestUtilities;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Common.Printer.GdiPrinter
{
        {
            TestHelper.ClearServices();
            m_GdiWrapperMock = MockRepository.GenerateMock<IGdiWrapper>();
            m_GdiWrapperMock.Stub(m => m.GetPageDimensions()).Return(new Rectangle(0, 0, 800, 800));
            m_GdiWrapperMock = Substitute.For<IGdiWrapper>();
            m_GdiWrapperMock.GetPageDimensions().Returns(new Rectangle(0, 0, 800, 800));
            m_GdiPrinter = new GdiPrinterCF(m_GdiWrapperMock);
            m_TwoPageReport = CreateTwoPageReport();
            m_GdiPrinter.PrintAllPages(m_TwoPageReport);
            m_GdiWrapperMock.AssertWasCalled(x => x.StartDocument(
                Arg<IPrinterDevice>.Is.Anything,
                Arg<OrientationType>.Is.Anything));
            m_GdiWrapperMock.Received().StartDocument(Arg.Any<IPrinterDevice>(), Arg.Any<OrientationType>());
        }
        [Test]
            m_GdiPrinter.PrintAllPages(m_TwoPageReport);
            m_GdiWrapperMock.AssertWasCalled(x => x.EndDocument());
            m_GdiWrapperMock.Received().EndDocument();
        }
        [Test]
            Assert.Throws<PrintException>(() => m_GdiPrinter.PrintAllPages(m_TwoPageReport));
            
            m_GdiWrapperMock.AssertWasCalled(x => x.EndDocument());
            m_GdiWrapperMock.Received().EndDocument();
        }
        [Test]
            m_GdiPrinter.PrintAllPages(m_TwoPageReport);
            m_GdiWrapperMock.AssertWasCalled(x => x.StartPage(), options => options.Repeat.Twice());
            m_GdiWrapperMock.Received(2).StartPage();
        }
        [Test]
            m_GdiPrinter.PrintAllPages(m_TwoPageReport);
            m_GdiWrapperMock.AssertWasCalled(x => x.EndPage(), options => options.Repeat.Twice());
            m_GdiWrapperMock.Received(2).EndPage();
        }
        private FlowDocument CreateTwoPageReport()
        {
            Size extentSize = new Size();
            m_GdiWrapperMock
                .Stub(x => x.GetTextExtentExPoint(
                    Arg<string>.Is.Anything,
                    Arg<int>.Is.Anything,
                    Arg<int>.Is.Anything,
                    out Arg<int>.Out(0).Dummy,
                    Arg<int[]>.Is.Anything,
                    out Arg<Size>.Out(extentSize).Dummy))
                .Return(false);
                .GetTextExtentExPoint(Arg.Any<string>(), Arg.Any<int>(), Arg.Any<int>(), out Arg.Any<int>(), Arg.Any<int[]>(), out Arg.Any<Size>())
                .Returns(x => {
                    x[3] = 0;
                    x[5] = extentSize;
                    return false; 
                });
        }
        private void StubSucessfulGetTextExtentExPoint()
        {
            Size extentSize = new Size(200, 50);
            m_GdiWrapperMock
                .Stub(x => x.GetTextExtentExPoint(
                    Arg<string>.Is.Anything,
                    Arg<int>.Is.Anything,
                    Arg<int>.Is.Anything,
                    out Arg<int>.Out(10).Dummy,
                    Arg<int[]>.Is.Anything,
                    out Arg<Size>.Out(extentSize).Dummy))
                .Return(true);
                .GetTextExtentExPoint(Arg.Any<string>(), Arg.Any<int>(), Arg.Any<int>(), out Arg.Any<int>(), Arg.Any<int[]>(), out Arg.Any<Size>())
                .Returns(x => {
                    x[3] = 10;
                    x[5] = extentSize;
                    return true;
                });
        }
    }
}

SerialPrinterCFTest.cs
-4
+4
/Common/CommonTest/Printer/SerialPrinter/SerialPrinterCFTest.cs
using Neo.ApplicationFramework.Common.Printer.Document;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Printer;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Printer.SerialPrinter
{
        [SetUp] 
        public void Setup()
        {
            m_PrinterDeviceStub = MockRepository.GenerateStub<IPrinterDevice>();
            m_PrinterDeviceStub = Substitute.For<IPrinterDevice>();
            m_PrinterDeviceStub.NewLineChar = NewLineCharType.LF;
            m_SerialPortRecorder = new SerialPortRecorder();
            m_SerialPortFactoryMock = MockRepository.GenerateMock<SerialPortFactory>();
            m_SerialPortFactoryMock.Stub(m => m.Create(null)).IgnoreArguments().Return(m_SerialPortRecorder);
            m_SerialPortFactoryMock = Substitute.For<SerialPortFactory>();
            m_SerialPortFactoryMock.Create(null).ReturnsForAnyArgs(m_SerialPortRecorder);
            m_SerialPrinter = new SerialPrinterCF(m_SerialPortFactoryMock);
            m_SerialPrinter.Device = m_PrinterDeviceStub;

RibbonAttributeContextProviderTest.cs
-4
+4
/Common/CommonTest/Ribbon/RibbonAttributeContextProviderTest.cs
using Neo.ApplicationFramework.Controls;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.PropertyAdapters
{
        public void Setup()
        {
            TestHelper.ClearServices();
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
            m_RibbonAttributeContextProvider = new RibbonAttributeContextProvider();
        }
            IRibbonContextProvider ribbonContextProvider = (IRibbonContextProvider)m_RibbonAttributeContextProvider;
            var ribbonContextContainers = ribbonContextProvider.GetRibbonContextContainers(new object[] { new ThirdPartyControlWithoutSpecifiedRibbonResourceDictionary() });
            ribbonServiceStub.AssertWasNotCalled(x => x.AddResourceDictionary(Arg<System.Windows.ResourceDictionary>.Is.Anything));
            ribbonServiceStub.DidNotReceive().AddResourceDictionary(Arg.Any<System.Windows.ResourceDictionary>());
            TestHelper.RemoveService<IRibbonService>();
        }
            IRibbonContextProvider ribbonContextProvider = (IRibbonContextProvider)m_RibbonAttributeContextProvider;
            var ribbonContextContainers = ribbonContextProvider.GetRibbonContextContainers(new object[] { new ThirdPartyControlWithSpecifiedRibbonResourceDictionary() });
            ribbonServiceStub.AssertWasCalled(x => x.AddResourceDictionary(Arg<System.Windows.ResourceDictionary>.Is.Anything));
            ribbonServiceStub.Received().AddResourceDictionary(Arg.Any<System.Windows.ResourceDictionary>());
            TestHelper.RemoveService<IRibbonService>();
        }
    }

CSharpEncryptionStrategyTest.cs
-11
+28
/Common/CommonTest/Serialization/CSharpEncryptionStrategyTest.cs
using Neo.ApplicationFramework.Common.Serialization.Encryption;
using Neo.ApplicationFramework.Common.Utilities;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Common.Serialization
{
        [SetUp]
        public void Setup() 
        {
            File = MockRepository.GeneratePartialMock<FileHelper>();
            Directory = MockRepository.GeneratePartialMock<DirectoryHelper>();
            File = Substitute.For<FileHelper>();
            Directory = Substitute.For<DirectoryHelper>();
            m_Encryptor = new TestCSharpEncryptionStrategy(File, Directory, FileStreamProvider);
            File.Stub(f => f.WriteAllText(Arg<string>.Is.Anything, Arg<string>.Is.Anything)).Do(
                new Action<string, string>((file, data) => m_FileData.Add(file, data)));
            File.Stub(f=>f.ReadAllText(Arg<string>.Is.Anything)).Do(new Func<string, string>((file) => {
                try { return m_FileData[file]; } catch { throw new FileNotFoundException(); }}));
            File.Stub(f => f.Delete(Arg<string>.Is.Anything)).Do(new Action<string>(DeleteSavedFile));
            File.Stub(f => f.Exists(Arg<string>.Is.Anything)).Do(new Func<string, bool>(file => m_SavedFiles.ContainsKey(file) || m_FileData.ContainsKey(file)));
            Directory.Stub(d => d.GetFiles(Arg<string>.Is.Anything, Arg<string>.Is.Anything)).Do(new Func<string, string, string[]>(GetFiles));
            File.When(x => x.WriteAllText(Arg.Any<string>(), Arg.Any<string>()))
                .Do(x => { m_FileData.Add((string)x[0], (string)x[1]); });
            File.ReadAllText(Arg.Any<string>()).Returns(x =>
            {
                try 
                { 
                    return m_FileData[(string)x[0]];
                } 
                catch 
                { 
                    throw new FileNotFoundException();
                }
            });
            
            File.Delete(Arg.Do<string>(DeleteSavedFile));
            File.Exists(Arg.Any<string>()).Returns(x =>
            {
                var file = (string)x[0];
                return m_SavedFiles.ContainsKey(file) || m_FileData.ContainsKey(file);
            });
            Directory.GetFiles(Arg.Any<string>(), Arg.Any<string>()).Returns(x => { return GetFiles((string)x[0], (string)x[1]); });
        }
        [TearDown]
        {
            m_Encryptor.SaveScriptFile(SampleFilename, SampleContents);
            m_Encryptor.DoDecryptFile(ToEncryptedFilename(SampleFilename));
            File.AssertWasCalled(f => f.WriteAllText(Arg<string>.Is.Equal(SampleFilename), Arg<string>.Is.Equal(SampleContents)));
            File.Received().WriteAllText(Arg.Is(SampleFilename), Arg.Is(SampleContents));
        }
        [Test]

ObjectSerializerTest.cs
-12
+12
/Common/CommonTest/Serialization/ObjectSerializerTest.cs
using System.ComponentModel.Design.Serialization;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using INameCreationService = Neo.ApplicationFramework.Interfaces.INameCreationService;
using WinForms = System.Windows.Forms;
            m_Button2 = new WinForms.Button();
            m_Button2.Name = "TestButton2";
            m_NameCreationServiceMock = MockRepository.GenerateStub<INameCreationService>();
            m_NameCreationServiceMock = Substitute.For<INameCreationService>();
            m_DesignerHostMock = MockRepository.GenerateStub<IDesignerLoaderHost>();
            m_DesignerHostMock.Stub(x => x.CreateComponent(m_Button.GetType(), m_Button.Name)).Return(m_Button);
            m_DesignerHostMock.Stub(x => x.CreateComponent(m_Button2.GetType(), m_Button2.Name)).Return(m_Button2);
            m_DesignerHostMock.Stub(x => x.CreateComponent(m_Button.GetType())).Return(m_Button);
            m_DesignerHostMock.Stub(x => x.CreateComponent(m_Button2.GetType())).Return(m_Button2);
            m_DesignerHostMock.Stub(x => x.GetService(typeof(INameCreationService))).Return(m_NameCreationServiceMock);
            m_DesignerHostMock.Stub(x => x.Container).Return(m_Form.Container);
            m_DesignerHostMock = Substitute.For<IDesignerLoaderHost>();
            m_DesignerHostMock.CreateComponent(m_Button.GetType(), m_Button.Name).Returns(m_Button);
            m_DesignerHostMock.CreateComponent(m_Button2.GetType(), m_Button2.Name).Returns(m_Button2);
            m_DesignerHostMock.CreateComponent(m_Button.GetType()).Returns(m_Button);
            m_DesignerHostMock.CreateComponent(m_Button2.GetType()).Returns(m_Button2);
            m_DesignerHostMock.GetService(typeof(INameCreationService)).Returns(m_NameCreationServiceMock);
            m_DesignerHostMock.Container.Returns(m_Form.Container);
            m_NameCreationServiceMock.Stub(x => x.CreateName(m_DesignerHostMock.Container, "TestButton")).Return("TestButton2");
            m_NameCreationServiceMock.CreateName(m_DesignerHostMock.Container, "TestButton").Returns("TestButton2");
        }
        [TearDown]
        public void DeserializeWithAllowChangeName()
        {
            string errorText = string.Empty;
            m_NameCreationServiceMock.Stub(x => x.IsUniqueAndValidName("TestButton", m_DesignerHostMock.Container, ref errorText)).Return(true);
            m_NameCreationServiceMock.IsUniqueAndValidName("TestButton", m_DesignerHostMock.Container, ref errorText).Returns(true);
            ObjectSerializer serializer = new ObjectSerializer(new SerializedObjectComponentCreator(m_DesignerHostMock, true));
            WinForms.Button button = serializer.DeseralizeString(m_SerializedButton) as WinForms.Button;
            Assert.IsNotNull(button);
        public void DeserializeWithAllowChangeNameNameConflict()
        {
            string errorText = string.Empty;
            m_NameCreationServiceMock.Stub(x => x.IsUniqueAndValidName("TestButton", m_DesignerHostMock.Container, ref errorText)).Return(false);
            m_NameCreationServiceMock.IsUniqueAndValidName("TestButton", m_DesignerHostMock.Container, ref errorText).Returns(false);
            ObjectSerializer serializer = new ObjectSerializer(new SerializedObjectComponentCreator(m_DesignerHostMock, true));
            WinForms.Button button = serializer.DeseralizeString(m_SerializedButton) as WinForms.Button;
            Assert.IsNotNull(button);

DependencyObjectPropertyBinderTestBase.cs
+2
/Common/CommonTest/Utilities/DependencyObjectPropertyBinderTests/DependencyObjectPropertyBinderTestBase.cs
namespace Neo.ApplicationFramework.Common.Utilities.DependencyObjectPropertyBinderTests
{
    [Apartment(System.Threading.ApartmentState.STA)]
    public abstract class DependencyObjectPropertyBinderTestBase<TDataSourceType>
    {
        private DataItemProxyProviderMock m_ProxyProvider;
        {
            m_DependencyObject = null;
            m_DataItemProxy = null;
            TestHelper.ClearServices();
        }
        protected void SetValueOnDataItem<TSubscriber>(TDataSourceType sourceTestValue, bool skipAsserts = false)

StringDataSourceTest.cs
-1
+1
/Common/CommonTest/Utilities/DependencyObjectPropertyBinderTests/StringDataSourceTest.cs
        {
            SetValueOnDependencyProperty<double>(double.MaxValue, true);
            Assert.That((double)((VariantValue)m_DataItemProxy.Value), Is.EqualTo(0));
            Assert.That((double)(VariantValue)m_DataItemProxy.Value, Is.EqualTo(0));
            Assert.That(Convert.ChangeType(((FrameworkElementMock<double>)m_DependencyObject).Value, typeof(string)), Is.EqualTo("0"));
        }

TaskTest.cs
-5
+4
/Common/CommonTest/Utilities/Threading/TaskTest.cs
using System;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Utilities.Threading
{
        public void Setup()
        {
            m_VoidTask = new Task(() => { });
            m_TaskScheduler = MockRepository.GenerateMock<ITaskScheduler>();
            m_TaskScheduler = Substitute.For<ITaskScheduler>();
            m_TaskScheduler
                .Stub(m => m.Schedule(null))
                .IgnoreArguments()
                .WhenCalled(invocation => ((Task)invocation.Arguments[0]).Execute());
                .When(x => x.Schedule(Arg.Any<ITask>()))
                .Do(x => ((Task)x[0]).Execute());
        }
        [Test]

ThreadPoolTaskSchedulerTest.cs
-15
+15
/Common/CommonTest/Utilities/Threading/ThreadPoolTaskSchedulerTest.cs
using System;
using System.Collections.Generic;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Utilities.Threading
{
        [SetUp]
        public void Setup()
        {
            m_ThredPoolMock = MockRepository.GenerateMock<ExtendedThreadPool>();
            m_ThredPoolMock
                .Stub(m => m.QueueUserWorkItem((ITask)null, null))
                .IgnoreArguments()
                .Return(true)
                .WhenCalled(invocation => ((Action<ITask>)invocation.Arguments[1]).Invoke((ITask)invocation.Arguments[0]));
            m_ThredPoolMock = Substitute.For<ExtendedThreadPool>();
            m_ThredPoolMock.QueueUserWorkItem(Arg.Any<ITask>(), Arg.Any<Action<ITask>>())
                .ReturnsForAnyArgs(x =>
                {
                    ((Action<ITask>)x[1]).Invoke((ITask)x[0]);
                    return true;
                });
            m_RecordedThreadPoolQueue = new List<Action>();
            m_VoidTask = new Task(() => { });
        private void MockRecordingThreadPool()
        {
            m_ThredPoolMock = MockRepository.GenerateMock<ExtendedThreadPool>();
            m_ThredPoolMock
                .Stub(m => m.QueueUserWorkItem((ITask)null, null))
                .IgnoreArguments()
                .Return(true)
                //// Adds the actions to the list so we can execute at a later time
                .WhenCalled(invocation => 
                    m_RecordedThreadPoolQueue.Add(() => ((Action<ITask>)invocation.Arguments[1]).Invoke((ITask)invocation.Arguments[0])));
            m_ThredPoolMock = Substitute.For<ExtendedThreadPool>();
            m_ThredPoolMock.QueueUserWorkItem(Arg.Any<ITask>(), Arg.Any<Action<ITask>>())
                .ReturnsForAnyArgs(x =>
                {
                    m_RecordedThreadPoolQueue.Add(() => ((Action<ITask>)x[1]).Invoke((ITask)x[0]));
                    return true;
                });
        }
    }
}

CFFormExtensionMethodsTest.cs
-5
+4
/Common/CommonTest/Utilities/CFFormExtensionMethodsTest.cs
using Neo.ApplicationFramework.Controls.Screen.Momentary;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Form = System.Windows.Forms.Form;
namespace Neo.ApplicationFramework.Common.Utilities
{
    [TestFixture]
    [Apartment(System.Threading.ApartmentState.STA)]
    public class CFFormExtensionMethodsTest
    {
        private IMainScreen m_Parent;
            m_Parent = new MainWindow();
            m_ScreenManager = TestHelper.CreateAndAddServiceMock<IScreenManager>();
            m_ScreenManager
                .Expect(screenManager => screenManager.MainScreen)
                .Return(m_Parent);
            m_ScreenManager = TestHelper.CreateAndAddServiceStub<IScreenManager>();
            m_ScreenManager.MainScreen.Returns(m_Parent);
            TestHelper.AddService(typeof(INativeAPI), new NativeAPI());
        }

ComponentPropertyBinderTest.cs
-9
+13
/Common/CommonTest/Utilities/ComponentPropertyBinderTest.cs
using Neo.ApplicationFramework.Common.Data;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Bindings;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Utilities
{
        [Test]
        public void GetBindingReturnsAValidBindingWhenBoundToADataItemProxy()
        {
            IDataItemProxy dataItemProxyStub = MockRepository.GenerateStub<IDataItemProxy>();
            IDataItemProxy dataItemProxyStub = Substitute.For<IDataItemProxy>();
            DynamicBinding binding = new DynamicBinding("Text", dataItemProxyStub, "Value");
        [Test]
        public void GetBindingReturnsNullWhenBoundToAMultiLanguageResourceItem()
        {
            IDesignerResourceItem resourceItemStub = MockRepository.GenerateStub<IDesignerResourceItem>();
            IDesignerResourceItem resourceItemStub = Substitute.For<IDesignerResourceItem>();
            Binding binding = new Binding("Text", resourceItemStub, "CurrentValue");
            [OneTimeSetUp]
            public void TestFixtureSetUp()
            {
                var irrelevantProvider = MockRepository.GenerateStub<IBindingSourceDescriptionProvider>();
                m_Provider = MockRepository.GenerateStub<IBindingSourceDescriptionProvider>();
                var irrelevantProvider = Substitute.For<IBindingSourceDescriptionProvider>();
                m_Provider = Substitute.For<IBindingSourceDescriptionProvider>();
                ComponentPropertyBinderCF.RegisterBindingSourceDescriptionProvider(irrelevantProvider);
                ComponentPropertyBinderCF.RegisterBindingSourceDescriptionProvider(m_Provider);
                Button button = new Button();
                button.DataBindings.Add(binding);
                Type expectedType = typeof(Int16);
                Type dummy;
                m_Provider.Stub(x => x.TryGetTypeOfSource(binding, out dummy)).Return(true).OutRef(expectedType);
                Type expectedType = typeof(short);
                m_Provider.TryGetTypeOfSource(binding, out Arg.Any<Type>())
                    .Returns(x => 
                    {
                        x[1] = expectedType;
                        return true; 
                    });
                IPropertyBinder binder = new ComponentPropertyBinder();
                Type type = binder.GetDataSourceType(button, "Visible");
                button.DataBindings.Add(binding);
                Type dummy;
                m_Provider.Stub(x => x.TryGetTypeOfSource(binding, out dummy)).Return(false);
                m_Provider.TryGetTypeOfSource(binding, out dummy).Returns(false);
                IPropertyBinder binder = new ComponentPropertyBinder();
                Assert.Throws<NotSupportedException>(() => binder.GetDataSourceType(button, "Visible"));               

DependencyObjectPropertyBinderTest.cs
-11
+17
/Common/CommonTest/Utilities/DependencyObjectPropertyBinderTest.cs
using Neo.ApplicationFramework.Interfaces.Bindings;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.TestUtilities.Utilities.DependencyObjectPropertyBinderTests.MockObjects;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Utilities
{
    [TestFixture]
    [Apartment(System.Threading.ApartmentState.STA)]
    public class DependencyObjectPropertyBinderTest
    {
        private DataItemProxyProviderMock m_ProxyProvider;
        public void TestFixtureTearDown()
        {
            TestHelper.Bindings.Wpf.ClearProviders();
            TestHelper.ClearServices();
        }
        [Test]
        [Test]
        public void GetBindingReturnsNullWhenBoundToAMultiLanguageResourceItem()
        {
            IDesignerResourceItem resourceItemStub = MockRepository.GenerateStub<IDesignerResourceItem>();
            IDesignerResourceItem resourceItemStub = Substitute.For<IDesignerResourceItem>();
            Binding binding = new Binding("CurrentValue");
            binding.Source = resourceItemStub;
    }
    [TestFixture]
    [Apartment(System.Threading.ApartmentState.STA)]
    public class DependencyObjectPropertyBinder_GetTypeOfSource_Tests
    {
        private IBindingSourceDescriptionProviderWpf m_Provider;
        public void SetUp()
        {
            var bindingService = TestHelper.AddServiceStub<IBindingService>();
            bindingService
                .Stub(mock => mock.IsSupporting(default(Binding))).IgnoreArguments()
                .Return(true);
            bindingService.IsSupporting(default(Binding)).ReturnsForAnyArgs(true);
            m_Provider = MockRepository.GenerateStub<IBindingSourceDescriptionProviderWpf>();
            m_Provider = Substitute.For<IBindingSourceDescriptionProviderWpf>();
            DependencyObjectPropertyBinder.RegisterBindingSourceDescriptionProvider(m_Provider);
        }
        public void TearDown()
        {
            TestHelper.Bindings.Wpf.ClearProviders();
            TestHelper.ClearServices();
        }
        [Test]
            BindingOperations.SetBinding(button, UIElement.VisibilityProperty, binding);
            Type expectedType = typeof(Int16);
            Type dummy;
            m_Provider.Stub(x => x.TryGetTypeOfSource(binding, button, out dummy)).Return(true).OutRef(expectedType);
            m_Provider.TryGetTypeOfSource(binding, button, out Arg.Any<Type>())
                .Returns(x =>
                {
                    x[2] = expectedType;
                    return true;
                });
            IPropertyBinder binder = new DependencyObjectPropertyBinder(MockRepository.GenerateStub<IDataItemProxyProvider>());
            IPropertyBinder binder = new DependencyObjectPropertyBinder(Substitute.For<IDataItemProxyProvider>());
            Type type = binder.GetDataSourceType(button, UIElement.VisibilityProperty.Name);
            Assert.That(type, Is.EqualTo(expectedType));
            BindingOperations.SetBinding(button, UIElement.VisibilityProperty, binding);
            Type dummy;
            m_Provider.Stub(x => x.TryGetTypeOfSource(binding, button, out dummy)).Return(false);
            m_Provider.TryGetTypeOfSource(binding, button, out dummy).Returns(false);
            IPropertyBinder binder = new DependencyObjectPropertyBinder(MockRepository.GenerateStub<IDataItemProxyProvider>());
            IPropertyBinder binder = new DependencyObjectPropertyBinder(Substitute.For<IDataItemProxyProvider>());
            Type type = binder.GetDataSourceType(button, "Visibility");
            Assert.That(type, Is.Null);

ElementHelperTest.cs
-28
+30
/Common/CommonTest/Utilities/ElementHelperTest.cs
#if !VNEXT_TARGET
using System;
using System.ComponentModel;
using System.ComponentModel.Design;
using Neo.ApplicationFramework.Tools.Alarm;
using Neo.ApplicationFramework.Tools.FunctionKey;
using Neo.ApplicationFramework.Tools.Screen.ScreenEditor;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Button = Neo.ApplicationFramework.Controls.Button;
namespace Neo.ApplicationFramework.Common.Utilities
        [SetUp]
        public void TestFixtureSetUp()
        {
            ISite siteStub = MockRepository.GenerateStub<ISite>();
            ISite siteStub = Substitute.For<ISite>();
            siteStub.Name = ScreenName;
            IComponent rootComponentStub = MockRepository.GenerateStub<IComponent>();
            IComponent rootComponentStub = Substitute.For<IComponent>();
            rootComponentStub.Site = siteStub;
            var designerHostStub = MockRepository.GenerateStub<INeoDesignerHost>();
            designerHostStub.Stub(x => x.RootComponent).Return(rootComponentStub);
            var designerHostStub = Substitute.For<INeoDesignerHost>();
            designerHostStub.RootComponent.Returns(rootComponentStub);
            
            m_ServiceProvider = MockRepository.GenerateStub<IServiceProvider>();
            m_ServiceProvider.Stub(x => x.GetService(typeof(IDesignerHost))).Return(designerHostStub);
            m_ServiceProvider.Stub(x => x.GetService(typeof(INeoDesignerHost))).Return(designerHostStub);
            m_ServiceProvider = Substitute.For<IServiceProvider>();
            m_ServiceProvider.GetService(typeof(IDesignerHost)).Returns(designerHostStub);
            m_ServiceProvider.GetService(typeof(INeoDesignerHost)).Returns(designerHostStub);
            var securityService = MockRepository.GenerateStub<ISecurityServiceCF>();
            securityService.Stub(x => x.GetSecurityGroups(null)).IgnoreArguments().Return(SecurityGroups.None);
            var securityService = Substitute.For<ISecurityServiceCF>();
            securityService.GetSecurityGroups(null).ReturnsForAnyArgs(SecurityGroups.None);
            TestHelper.AddService(securityService);
        }
            const string curveName = "Curve1";
            const string trendName = "Trend1";
            ISubItems trend = MockRepository.GenerateStub<ISubItems>();
            ISubItems curve = MockRepository.GenerateStub<ISubItems>();
            ISubItems trend = Substitute.For<ISubItems>();
            ISubItems curve = Substitute.For<ISubItems>();
            trend.Stub(x => x.Items).Return(new object[] { curve });
            trend.Stub(x => x.Parent).Return(m_ServiceProvider);
            trend.Stub(x => x.DisplayName).Return(trendName);
            trend.Items.Returns(new object[] { curve });
            trend.Parent.Returns(m_ServiceProvider);
            trend.DisplayName.Returns(trendName);
            curve.Stub(x => x.Items).Return(new object[0]);
            curve.Stub(x => x.Parent).Return(trend);
            curve.Items.Returns(new object[0]);
            curve.Parent.Returns(trend);
            curve.Stub(x => x.DisplayName).Return(curveName);
            curve.DisplayName.Returns(curveName);
            string fullName = ElementHelper.GetFullName(curve);
            TestHelper.AddServiceStub<IGlobalReferenceService>();
            var alarmServerStorage = MockRepository.GenerateStub<IAlarmServerStorage>();
            var alarmServerStorage = Substitute.For<IAlarmServerStorage>();
            var alarmServer = new AlarmServer(alarmServerStorage, 
                MockRepository.GenerateStub<IActionConsumer>().ToLazyCF(), 
                MockRepository.GenerateStub<IRootComponentService>().ToILazy(),
                MockRepository.GenerateStub<ISystemTagServiceCF>().ToILazy(),
                MockRepository.GenerateStub<IAlarmEventFactory>().ToILazy())
                Substitute.For<IActionConsumer>().ToLazyCF(), 
                Substitute.For<IRootComponentService>().ToILazy(),
                Substitute.For<ISystemTagServiceCF>().ToILazy(),
                Substitute.For<IAlarmEventFactory>().ToILazy())
            {
                Name = "AlarmServer",
                IsEnabled = true
            }
            alarmServerAlarmGroup.Name = "Default";
            var site = MockRepository.GenerateStub<ISite>();
            var site = Substitute.For<ISite>();
            site.Name = alarmServerAlarmGroup.Name;
            alarmServerAlarmGroup.Site = site;
                Value = 0
            };
            var alarmItemSite = MockRepository.GenerateStub<ISite>();
            var alarmItemSite = Substitute.For<ISite>();
            alarmItemSite.Name = alarmItem.Name;
            alarmItem.Site = alarmItemSite;
                Name = "Canvas"
            };
            var editorControl = MockRepository.GenerateStub<EditorControl>();
            var editorControl = Substitute.For<EditorControl>();
            editorControl.Name = "Editor";
            editorControl.Content = canvas;
            canvas.ServiceProvider = m_ServiceProvider;
            var functionKey = new FunctionKey(keyCode);
            var site = MockRepository.GenerateStub<ISite>();
            var site = Substitute.For<ISite>();
            site.Name = functionKey.Name;
            functionKey.Site = site;
                    Name = ScreenName
                };
                var screenSite = MockRepository.GenerateStub<ISite>();
                var screenSite = Substitute.For<ISite>();
                screenSite.Name = functionKeyContextScreen.Name;
                functionKeyContextScreen.Site = screenSite;
        }
    }
}
#endif

TypeImageExtractorTest.cs
-7
+7
/Common/CommonTest/Utilities/TypeImageExtractorTest.cs
using System.IO;
using Neo.ApplicationFramework.Controls.Symbol;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Utilities
{
        [Test]
        public void GetImageForMultiPicture()
        {
            IControlMetadata controlMetadataStub = MockRepository.GenerateStub<IControlMetadata>();
            controlMetadataStub.Stub(x => x.ImageName).Return("AnalogNumeric");
            controlMetadataStub.Stub(x => x.DisplayName).Return("Analog Numeric");
            IControlMetadata controlMetadataStub = Substitute.For<IControlMetadata>();
            controlMetadataStub.ImageName.Returns("AnalogNumeric");
            controlMetadataStub.DisplayName.Returns("Analog Numeric");
            IControlInfo controlInfoStub = MockRepository.GenerateStub<IControlInfo>();
            controlInfoStub.Stub(x => x.Metadata).Return(controlMetadataStub);
            controlInfoStub.Stub(x => x.Type).Return(typeof(Symbol));
            IControlInfo controlInfoStub = Substitute.For<IControlInfo>();
            controlInfoStub.Metadata.Returns(controlMetadataStub);
            controlInfoStub.Type.Returns(typeof(Symbol));
            
            System.Drawing.Bitmap bitmap = m_TypeImageExtractor.GetBitmap(controlInfoStub);

XamlSerializerTest.cs
-7
+6
/Common/CommonTest/Xaml/Serializer/XamlSerializerTest.cs
using Core.Api.Service;
using Neo.ApplicationFramework.Common.Converters;
using Neo.ApplicationFramework.Common.Data;
using Neo.ApplicationFramework.Common.Design;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Controls;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Design;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Xaml.Serializer
{
        {
            TestHelper.AddService<IEventBindingService>(new SampleEventBindingService(ServiceContainerCF.Instance));
            var targetService = MockRepository.GenerateMock<ITargetService>();
            var target = MockRepository.GenerateMock<ITarget>();
            target.Stub(inv => inv.Id).Return(TargetPlatform.Windows);
            targetService.Stub(inv => inv.CurrentTarget).Return(target);
            targetService.Stub(inv => inv.CurrentTargetInfo).Return(MockRepository.GenerateMock<ITargetInfo>());
            var targetService = Substitute.For<ITargetService>();
            var target = Substitute.For<ITarget>();
            target.Id.Returns(TargetPlatform.Windows);
            targetService.CurrentTarget.Returns(target);
            targetService.CurrentTargetInfo.Returns(Substitute.For<ITargetInfo>());
            TestHelper.AddService<ITargetService>(targetService);
            m_XamlSerializer = new XamlSerializer(ServiceContainerCF.Instance);

XamlWriterTest.cs
-8
+9
/Common/CommonTest/Xaml/Serializer/XamlWriterTest.cs
using Neo.ApplicationFramework.Controls.Controls;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Common.Xaml.Serializer
{
            TestHelper.AddServiceStub<IGlobalReferenceService>();
            m_AnalogNumericFX.SetBinding(m_AnalogNumericFX.GetDefaultDependencyProperty(), binding);
            var t = m_AnalogNumericFX.GetDefaultDependencyProperty();
            m_AnalogNumericFX.SetBinding(t, binding);
            m_ServiceContainer = new System.ComponentModel.Design.ServiceContainer();
            var securityServiceCF = TestHelper.CreateAndAddServiceStub<ISecurityServiceCF>();
            securityServiceCF.Stub(x => x.Groups).Return(new BindingList<ISecurityGroup>());
            securityServiceCF.Groups.Returns(new BindingList<ISecurityGroup>());
            m_TypeDescriptionProvider = new AsmMetaTypeDescriptionProviderBuilder(typeof(object))
                .Build();
            TypeDescriptor.AddProvider(m_TypeDescriptionProvider, typeof(object));
            TypeDescriptor.Refresh(typeof(SymbolIntervalMapper));
            var targetService = MockRepository.GenerateMock<ITargetService>();
            var target = MockRepository.GenerateMock<ITarget>();
            target.Stub(inv => inv.Id).Return(TargetPlatform.Windows);
            targetService.Stub(inv => inv.CurrentTarget).Return(target);
            targetService.Stub(inv => inv.CurrentTargetInfo).Return(MockRepository.GenerateMock<ITargetInfo>());
            var targetService = Substitute.For<ITargetService>();
            var target = Substitute.For<ITarget>();
            target.Id.Returns(TargetPlatform.Windows);
            targetService.CurrentTarget.Returns(target);
            targetService.CurrentTargetInfo.Returns(Substitute.For<ITargetInfo>());
            TestHelper.AddService(targetService);
            m_XamlSerializer = new XamlSerializer(m_ServiceContainer);

CommonTest.csproj
-9
+4
/Common/CommonTest/CommonTest.csproj
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\BuildingBlocks\lib\ApplicationFrameworkCF.dll</HintPath>
    </Reference>
    <Reference Include="ApplicationFrameworkIde, Version=2.20.346.0, Culture=neutral, PublicKeyToken=f9bf78ad04ede021, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
    <Reference Include="ApplicationFrameworkIde">
      <HintPath>..\..\BuildingBlocks\lib\ApplicationFrameworkIde.dll</HintPath>
    </Reference>
    <Reference Include="Castle.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\Prism.Wpf.6.3.0\lib\net45\Prism.Wpf.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Rhino.Mocks, Version=3.6.0.0, Culture=neutral, PublicKeyToken=0b3305902db7183f, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\RhinoMocks.3.6.1\lib\net\Rhino.Mocks.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="RibbonControlsLibrary, Version=4.0.0.11019, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\ThirdParty\Microsoft Ribbon for WPF\RibbonControlsLibrary.dll</HintPath>
      <Name>InterfacesCF</Name>
    </ProjectReference>
    <ProjectReference Include="..\..\Interfaces\InterfacesIde\InterfacesIde.csproj">
      <Project>{538A33E0-747A-4CEB-BF4C-435C582C68C5}</Project>
      <Project>{538a33e0-747a-4ceb-bf4c-435c582c68c5}</Project>
      <Name>InterfacesIde</Name>
    </ProjectReference>
    <ProjectReference Include="..\..\Interfaces\Interfaces\Interfaces.csproj">
      <Name>ToolsCF</Name>
    </ProjectReference>
    <ProjectReference Include="..\..\Tools\ToolsIde\ToolsIde.csproj">
      <Project>{0FCA8999-23A3-419D-952F-720929141D86}</Project>
      <Project>{0fca8999-23a3-419d-952f-720929141d86}</Project>
      <Name>ToolsIde</Name>
    </ProjectReference>
    <ProjectReference Include="..\CommonCF\CommonCF.csproj">
      <Name>CommonCF</Name>
    </ProjectReference>
    <ProjectReference Include="..\CommonIde\CommonIde.csproj">
      <Project>{85F7588F-D7C2-4152-A8F3-3C1961CEB975}</Project>
      <Project>{85f7588f-d7c2-4152-a8f3-3c1961ceb975}</Project>
      <Name>CommonIde</Name>
    </ProjectReference>
    <ProjectReference Include="..\Common\Common.csproj">

packages.config
-1
/Common/CommonTest/packages.config
  <package id="NUnit.Extension.VSProjectLoader" version="3.8.0" targetFramework="net48" />
  <package id="NUnit3TestAdapter" version="4.0.0-beta.2" targetFramework="net48" />
  <package id="Prism.Core" version="6.3.0" targetFramework="net472" />
  <package id="RhinoMocks" version="3.6.1" targetFramework="net472" />
  <package id="System.Runtime.CompilerServices.Unsafe" version="4.5.2" targetFramework="net48" />
  <package id="System.Threading.Tasks.Extensions" version="4.5.2" targetFramework="net48" />
</packages>

OpenFileDialogEx.cs
-1
+1
/Controls/ControlsIde/Dialogs/OpenFileDialogEx.cs
        [DesignerSerializationVisibility(0)]
        [Browsable(false)]
        public string[] FileNames 
        public virtual string[] FileNames 
        {
            get
            {

ControlsTest.csproj
-2
+72
/Controls/ControlsTest/.vNext/ControlsTest.csproj
  <PropertyGroup>
    <TargetFrameworks>net6.0-windows;net48</TargetFrameworks>
    <UseWindowsForms>true</UseWindowsForms>
    <UseWPF>true</UseWPF>
    <IsPackable>false</IsPackable>
    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>
    <GenerateAssemblyTitleAttribute>false</GenerateAssemblyTitleAttribute>
    <RootNamespace>Neo.ApplicationFramework.Controls</RootNamespace>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE;DEBUG;VNEXT_TARGET;VNEXT_TARGET_NEEDS_REIMPLEMENTATION;VNEXT_TARGET_INCLUDED;VNEXT_TARGET_STRUCTURE_DIFFERENCE</DefineConstants>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DefineConstants>TRACE;VNEXT_TARGET;VNEXT_TARGET_NEEDS_REIMPLEMENTATION;VNEXT_TARGET_INCLUDED;VNEXT_TARGET_STRUCTURE_DIFFERENCE</DefineConstants>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="..\**\*.cs" />
    <Compile Remove="..\ControlsIde\**\*.cs" />
    <Compile Remove="obj\**" />
    <EmbeddedResource Remove="obj\**" />
    <None Remove="obj\**" />
    <Compile Remove="..\obj\**" />
    <EmbeddedResource Remove="..\obj\**" />
    <None Remove="..\obj\**" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.8.3" />
    <PackageReference Include="NUnit" Version="3.12.0" />
    <PackageReference Include="NUnit3TestAdapter" Version="3.17.0" />
    <PackageReference Include="NUnit" Version="3.13.2" />
    <PackageReference Include="NUnit3TestAdapter" Version="4.0.0" />
    <PackageReference Include="coverlet.collector" Version="1.3.0" />
  </ItemGroup>
  <ItemGroup Condition="$(DefineConstants.Contains('NOTRELEASABLE'))">
    <PackageReference Include="Resco-Reverse-DO-NOT-RELEASE-TO-CUSTOMER" Version="1.0.1" />
  </ItemGroup>
  <ItemGroup Condition="!$(DefineConstants.Contains('NOTRELEASABLE'))">
    <Reference Include="Resco.AdvancedComboBox">
      <HintPath>..\..\..\ThirdParty\MobileFormsToolkit\Desktop\Resco.AdvancedComboBox.dll</HintPath>
    </Reference>
    <Reference Include="Resco.AdvancedList">
      <HintPath>..\..\..\ThirdParty\MobileFormsToolkit\Desktop\Resco.AdvancedList.dll</HintPath>
    </Reference>
    <Reference Include="Resco.CommonControls">
      <HintPath>..\..\..\ThirdParty\MobileFormsToolkit\Desktop\Resco.CommonControls.dll</HintPath>
    </Reference>
    <Reference Include="Resco.Core">
      <HintPath>..\..\..\ThirdParty\MobileFormsToolkit\Desktop\Resco.Core.dll</HintPath>
    </Reference>
    <Reference Include="Resco.OutlookControls">
      <HintPath>..\..\..\ThirdParty\MobileFormsToolkit\Desktop\Resco.OutlookControls.dll</HintPath>
    </Reference>
    <Reference Include="Resco.ScrollBar">
      <HintPath>..\..\..\ThirdParty\MobileFormsToolkit\Desktop\Resco.ScrollBar.dll</HintPath>
    </Reference>
    <Reference Include="Resco.SmartGrid">
      <HintPath>..\..\..\ThirdParty\MobileFormsToolkit\Desktop\Resco.SmartGrid.dll</HintPath>
    </Reference>
    <Reference Include="Resco.UIElements">
      <HintPath>..\..\..\ThirdParty\MobileFormsToolkit\Desktop\Resco.UIElements.dll</HintPath>
    </Reference>
    <Reference Include="Resco.UIElements.Controls">
      <HintPath>..\..\..\ThirdParty\MobileFormsToolkit\Desktop\Resco.UIElements.Controls.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\..\Common\Common\.vNext\Common.csproj" />
    <ProjectReference Include="..\..\..\Controls\ControlsCF\.vNext\ControlsCF.csproj" />
    <ProjectReference Include="..\..\..\Test\TestUtilities\.vNext\TestUtilities.csproj" />
    <ProjectReference Include="..\..\Controls\.vNext\Controls.csproj" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="NeoNativeSignature">
      <HintPath>..\..\..\OutputNeoNative\Release\NeoNativeSignature.dll</HintPath>
    </Reference>
  </ItemGroup>
</Project>

SelectParametersViewModelTest.cs
-8
+10
/Controls/ControlsTest/Action/ActionEditors/ViewModels/SelectParametersViewModelTest.cs
#if !VNEXT_TARGET
using Core.Controls.Api.Bindings;
using Neo.ApplicationFramework.Controls.Bindings;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Action.ActionEditors.ViewModels
{
        [Test]
        public void IfErrorIsSetIsValidReturnsFalse()
        {
            var actionParameter = MockRepository.GenerateStub<IActionParameterInfo>();
            var actionParameter = Substitute.For<IActionParameterInfo>();
            var actionParameters = new[]
            {
                actionParameter
        [Test]
        public void IfAllTagNamesSetIsValidReturnsTrue()
        {
            var actionParameter = MockRepository.GenerateStub<IActionParameterInfo>();
            var actionParameter = Substitute.For<IActionParameterInfo>();
            actionParameter.ParameterType = typeof(int);
            
            var actionParameters = new[]
        [Test]
        public void IfOneParameterIsNotSetIsValidReturnsFalse()
        {
            var actionParameter = MockRepository.GenerateStub<IActionParameterInfo>();
            var actionParameter2 = MockRepository.GenerateStub<IActionParameterInfo>();
            var actionParameter = Substitute.For<IActionParameterInfo>();
            var actionParameter2 = Substitute.For<IActionParameterInfo>();
            actionParameter.ParameterType = typeof(int);
            actionParameter2.ParameterType = typeof(int);
        [Test]
        public void IfOneParameterIsNotSetButStringIsValidReturnsTrue()
        {
            var actionParameter = MockRepository.GenerateStub<IActionParameterInfo>();
            var actionParameter2 = MockRepository.GenerateStub<IActionParameterInfo>();
            var actionParameter = Substitute.For<IActionParameterInfo>();
            var actionParameter2 = Substitute.For<IActionParameterInfo>();
            actionParameter.ParameterType = typeof(int);
            actionParameter2.ParameterType = typeof(string);
            actionParameter2.Stub(a => a.ParameterTypeAlias).Return("string");
            actionParameter2.ParameterTypeAlias.Returns("string");
            var actionParameters = new[]
            {
        }
    }
}
#endif

RibbonGroupSortComparerTest.cs
-39
+18
/Controls/ControlsTest/Action/RibbonGroupSortComparerTest.cs
#if !VNEXT_TARGET
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Resources.Texts;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Action
{
        public void SetUp()
        {
            m_Comparer = new RibbonGroupSortComparer();
            m_ActionInfoX = MockRepository.GenerateStub<IActionInfo>();
            m_ActionInfoY = MockRepository.GenerateStub<IActionInfo>();
            m_ActionInfoX = Substitute.For<IActionInfo>();
            m_ActionInfoY = Substitute.For<IActionInfo>();
        }
        [Test]
            m_ActionInfoX.GroupName = "Group name X";
            m_ActionInfoY.GroupName = "Group name Y";
            m_ActionInfoX
                .Stub(info => info.ActionName)
                .Return(TextsIde.None);
            m_ActionInfoY
                .Stub(info => info.ActionName)
                .Return("Some group");
            m_ActionInfoX.ActionName.Returns(TextsIde.None);
            m_ActionInfoY.ActionName.Returns("Some group");
            // ACT
            int result = m_Comparer.Compare(m_ActionInfoX, m_ActionInfoY);
            m_ActionInfoX.GroupName = TextsIde.ScreenActionGroup;
            m_ActionInfoY.GroupName = "Group name Y";
            m_ActionInfoX
                .Stub(info => info.ActionName)
                .Return(TextsIde.PrintScreen);
            m_ActionInfoY
                .Stub(info => info.ActionName)
                .Return(TextsIde.None);
            m_ActionInfoX.ActionName.Returns(TextsIde.PrintScreen);
            m_ActionInfoY.ActionName.Returns(TextsIde.None);
            // ACT
            int result = m_Comparer.Compare(m_ActionInfoX, m_ActionInfoY);
            m_ActionInfoX.GroupName = TextsIde.ScreenActionGroup;
            m_ActionInfoY.GroupName = TextsIde.NoneActionGroup;
            m_ActionInfoX
                .Stub(info => info.ActionName)
                .Return(TextsIde.PrintScreen);
            m_ActionInfoY
                .Stub(info => info.ActionName)
                .Return(TextsIde.None);
            m_ActionInfoX.ActionName.Returns(TextsIde.PrintScreen);
            m_ActionInfoY.ActionName.Returns(TextsIde.None);
            // ACT
            int result = m_Comparer.Compare(m_ActionInfoX, m_ActionInfoY);
            m_ActionInfoX.GroupName = null;
            m_ActionInfoY.GroupName = TextsIde.NoneActionGroup;
            m_ActionInfoX
                .Stub(info => info.ActionName)
                .Return(TextsIde.PrintScreen);
            m_ActionInfoY
                .Stub(info => info.ActionName)
                .Return(TextsIde.None);
            m_ActionInfoX.ActionName.Returns(TextsIde.PrintScreen);
            m_ActionInfoY.ActionName.Returns(TextsIde.None);
            // ACT
            int result = m_Comparer.Compare(m_ActionInfoX, m_ActionInfoY);
            m_ActionInfoX.GroupName = TextsIde.ScreenActionGroup;
            m_ActionInfoY.GroupName = "Group name Y";
            m_ActionInfoX
                .Stub(info => info.ActionName)
                .Return(TextsIde.PrintScreen);
            m_ActionInfoY
                .Stub(info => info.ActionName)
                .Return("Some group");
            m_ActionInfoX.ActionName.Returns(TextsIde.PrintScreen);
            m_ActionInfoY.ActionName.Returns("Some group");
            
            // ACT
            int result = m_Comparer.Compare(m_ActionInfoX, m_ActionInfoY);
            m_ActionInfoX.GroupName = TextsIde.TagActionGroup;
            m_ActionInfoY.GroupName = TextsIde.ScreenActionGroup;
            m_ActionInfoX
                 .Stub(info => info.ActionName)
                 .Return("X");
            m_ActionInfoY
                .Stub(info => info.ActionName)
                .Return("X");
            m_ActionInfoX.ActionName.Returns("X");
            m_ActionInfoY.ActionName.Returns("X");
            // ACT
            int result = m_Comparer.Compare(m_ActionInfoX, m_ActionInfoY);
        }
    }
}
#endif

ActionMenuHostCFTest.cs
-4
+2
/Controls/ControlsTest/ActionMenu/ActionMenuHostCFTest.cs
using Core.Api.DI.PlatformFactory;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ActionMenu
{
    {
        private ActionMenuHostCF m_ActionMenuHostCF;
       
        [SetUp]
        public void Setup()
        {
            IPlatformFactoryService platformFactoryServiceStub = TestHelper.AddServiceStub<IPlatformFactoryService>();
            platformFactoryServiceStub.Stub(x => x.Create<IActionMenu>()).Return(new ActionMenuControl());
            platformFactoryServiceStub.Create<IActionMenu>().Returns(new ActionMenuControl());
            m_ActionMenuHostCF = new ActionMenuHostCF();
        }
        

TestAlarmIemViewerPopup.cs
-14
+13
/Controls/ControlsTest/Alarm/TestAlarmIemViewerPopup.cs
using System.Drawing;
using System.Windows.Forms;
using Core.Api.Utilities;
using Neo.ApplicationFramework.Utilities;
using Neo.ApplicationFramework.Common.Graphics.Logic;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Resco.Controls.SmartGrid;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Alarm
{
        private AlarmItemViewerPopup SetupAlarmItemPopup()
        {
            AlarmViewer alarmViewer = SetupAlarmViewer();
            var auditTrailMock = MockRepository.GenerateStub<ILazy<IAuditTrailService>>();
            var alarmServer = MockRepository.GenerateStub<IAlarmServer>();
            var alarmItemRepository = MockRepository.GenerateStub<IAlarmItemRepository>();
            alarmServer.Stub(x => x.AlarmItemRepository).Return(alarmItemRepository);
            var auditTrailMock = Substitute.For<ILazy<IAuditTrailService>>();
            var alarmServer = Substitute.For<IAlarmServer>();
            var alarmItemRepository = Substitute.For<IAlarmItemRepository>();
            alarmServer.AlarmItemRepository.Returns(alarmItemRepository);
            var viewModel = new AlarmItemsViewModel(alarmViewer, null, new List<AlarmItemWrapper>
            {
                TestAlarmsItemViewModel.SetupStubItem(false, "Text #1", "Alarm1", "Group1"),
                TestAlarmsItemViewModel.SetupStubItem(true, "Woe is me", "Alarm1a", "Group2"),
            }, alarmServer);
            var nativeApi = MockRepository.GenerateMock<INativeAPI>();
            nativeApi.Stub(api => api.GetWindowLong(Arg<IntPtr>.Is.Anything, Arg<GWL_STYLE>.Is.Anything)).Return((IntPtr)WS_STYLE.WS_VISIBLE);
            var nativeApi = Substitute.For<INativeAPI>();
            nativeApi.GetWindowLong(Arg.Any<IntPtr>(), Arg.Any<GWL_STYLE>()).Returns((IntPtr)WS_STYLE.WS_VISIBLE);
            return new AlarmItemViewerPopup(viewModel, auditTrailMock, nativeApi.ToILazy(), true);
        }
        private AlarmViewer SetupAlarmViewer()
        {
            AlarmViewer alarmViewer = MockRepository.GenerateStub<AlarmViewer>();
            AlarmViewer alarmViewer = Substitute.For<AlarmViewer>();
            alarmViewer.Background = new BrushCF(Color.AliceBlue);
            alarmViewer.Foreground = new BrushCF(Color.BlanchedAlmond);
            alarmViewer.Width = 111;
            alarmViewer.Height = 222;
            alarmViewer.ForeColor = Color.Aqua;
            alarmViewer.BackColor = Color.Red;
            alarmViewer.Stub(av => av.PointToScreen(Arg<Point>.Is.Anything)).Return(new Point(8, 8));
            var smartGrid = MockRepository.GenerateStub<SmartGrid>();
            alarmViewer.Stub(av => av.AlarmGrid).Return(smartGrid);
            alarmViewer.PointToScreen(Arg.Any<Point>()).Returns(new Point(8, 8));
            var smartGrid = Substitute.For<SmartGrid>();
            alarmViewer.AlarmGrid.Returns(smartGrid);
            alarmViewer.Font = new System.Drawing.Font("Arial", 25.0f);
            var buttonControl = MockRepository.GenerateStub<ButtonControl>();
            var buttonControl = Substitute.For<ButtonControl>();
            buttonControl.Dock = DockStyle.Left;
            buttonControl.Font = alarmViewer.Font;
            alarmViewer.Stub(av => av.ButtonControl).Return(buttonControl);
            alarmViewer.ButtonControl.Returns(buttonControl);
            alarmViewer.ButtonHeight = 20;
            alarmViewer.ButtonWidth = 100;
            alarmViewer.ButtonMargin = 5;

TestAlarmsItemViewModel.cs
-10
+8
/Controls/ControlsTest/Alarm/TestAlarmsItemViewModel.cs
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Core.Api.Utilities;
using Neo.ApplicationFramework.Utilities;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Alarm
{
                SetupStubItem(true, "Woe is me", "Alarm1a", "Group2"),
            };
            var alarmServer = MockRepository.GenerateStub<IAlarmServer>();
            var alarmItemRepository = MockRepository.GenerateStub<IAlarmItemRepository>();
            alarmServer.Stub(x => x.AlarmItemRepository).Return(alarmItemRepository);
            var alarmServer = Substitute.For<IAlarmServer>();
            var alarmItemRepository = Substitute.For<IAlarmItemRepository>();
            alarmServer.AlarmItemRepository.Returns(alarmItemRepository);
            // using a null invoker blocks deferring filtering to the thread pool
            // clone the generic item list so that sorting and stuff in the view model doesn't affect the original
        public static AlarmItemWrapper SetupStubItem(bool enabled, string text, string name, string group, DateTime? enabledDate = null, DateTime? disabledDate = null)
        {
            var item = MockRepository.GenerateStub<IAlarmItem>();
            var item = Substitute.For<IAlarmItem>();
            item.IsEnabledItem = enabled;
            item.Text = text;
            item.DisplayName = name;
            item.Stub(x => x.GroupName).Return(group);
            item.Stub(x => x.ItemEnabledTime).Return(enabledDate);
            item.Stub(x => x.ItemDisabledTime).Return(disabledDate);
            item.GroupName.Returns(group);
            item.ItemEnabledTime.Returns(enabledDate);
            item.ItemDisabledTime.Returns(disabledDate);
            return new AlarmItemWrapper(item);
        }

TestSummaryAlarmControl.cs
-65
+46
/Controls/ControlsTest/Alarm/TestSummaryAlarmControl.cs
using Neo.ApplicationFramework.Controls.Alarm;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
#pragma warning disable 67 //The event is never used
        public void Setup()
        {
            IToolManager toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(true);
            toolManager.Runtime.Returns(true);
            m_AlarmServerStateServiceStub = MockRepository.GenerateStub<IAlarmServerStateService>();
            m_RemoteAlarmServerStateServiceStub = MockRepository.GenerateStub<IRemoteAlarmServerStateService>();
            m_AlarmServerStateServiceStub = Substitute.For<IAlarmServerStateService>();
            m_RemoteAlarmServerStateServiceStub = Substitute.For<IRemoteAlarmServerStateService>();
            m_SummaryAlarmControl = new SummaryAlarmControl(m_AlarmServerStateServiceStub, m_RemoteAlarmServerStateServiceStub);
        }
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Never;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.AnyActive += (s, args) => { };
            Raise.EventWith(this, new ValueChangedEventArgs(true));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
        }
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Never;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(false));
            m_AlarmServerStateServiceStub.AnyActive += (s, args) => { };
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(false));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
        }
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Never;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.AnyActive += (s, args) => { };
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
        }
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Never;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.AnyActive += (s, args) => { };
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
        }
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Always;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsTrue(m_SummaryAlarmControl.Notified, "SummaryAlarm is not shown");
            Assert.IsTrue(m_SummaryAlarmControl.IsActive, "Summary alarm is not active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Always;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(false));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(false));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Always;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsTrue(m_SummaryAlarmControl.Notified, "SummaryAlarm is not shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        }
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Always;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsTrue(m_SummaryAlarmControl.Notified, "SummaryAlarm is not shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Always;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsTrue(m_SummaryAlarmControl.Notified, "SummaryAlarm is not shown");
            Assert.IsTrue(m_SummaryAlarmControl.IsActive, "Summary alarm is not active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Always;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(false));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(false));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(false));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(false));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Active;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsTrue(m_SummaryAlarmControl.Notified, "SummaryAlarm is not shown");
            Assert.IsTrue(m_SummaryAlarmControl.IsActive, "Summary alarm is not active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Active;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(false));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(false));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Active;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Active;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Active;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.AnyActive += (s, args) => { };
            Raise.EventWith(new ValueChangedEventArgs(true));
            Assert.IsTrue(m_SummaryAlarmControl.Notified, "SummaryAlarm is not shown");
            Assert.IsTrue(m_SummaryAlarmControl.IsActive, "Summary alarm is not active");
        }
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Active;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(false));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(false));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(false));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(false));
            
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        }
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Inactive;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsTrue(m_SummaryAlarmControl.IsActive, "Summary alarm is not active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Inactive;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsTrue(m_SummaryAlarmControl.Notified, "SummaryAlarm is not shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Inactive;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(false));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(false));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Inactive;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Inactive;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsTrue(m_SummaryAlarmControl.Notified, "SummaryAlarm is not shown");
            Assert.IsTrue(m_SummaryAlarmControl.IsActive, "Summary alarm is not active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Inactive;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(false));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(false));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(false));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(false));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Acknowledged;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsTrue(m_SummaryAlarmControl.IsActive, "Summary alarm is not active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Acknowledged;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Acknowledged;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsTrue(m_SummaryAlarmControl.Notified, "SummaryAlarm is not shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Acknowledged;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(false));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Acknowledged;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Assert.IsTrue(m_SummaryAlarmControl.Notified, "SummaryAlarm is not shown");
            Assert.IsTrue(m_SummaryAlarmControl.IsActive, "Summary alarm is not active");
        {
            m_SummaryAlarmControl.Mode = AlarmServerAlarmEventsState.Acknowledged;
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(true));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyActive += null, this, new ValueChangedEventArgs(false));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyInactive += null, this, new ValueChangedEventArgs(false));
            m_AlarmServerStateServiceStub.Raise(x => x.AnyAcknowledged += null, this, new ValueChangedEventArgs(false));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(true));
            Raise.EventWith(m_AlarmServerStateServiceStub, new ValueChangedEventArgs(false));
            Assert.IsFalse(m_SummaryAlarmControl.Notified, "SummaryAlarm is shown");
            Assert.IsFalse(m_SummaryAlarmControl.IsActive, "Summary alarm is active");

AliasValueListTest.cs
+2
/Controls/ControlsTest/Alias/AliasValueListTest.cs
#if !VNEXT_TARGET
using System;
using System.ComponentModel;
using Neo.ApplicationFramework.Controls.Screen.Alias;
    }
}
#endif

AnimatedLabelHostCFTest.cs
-2
+2
/Controls/ControlsTest/AnimatedLabel/AnimatedLabelHostCFTest.cs
using Core.Api.DI.PlatformFactory;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.AnimatedLabel
{
        public void Setup()
        {
            IPlatformFactoryService platformFactoryServiceStub = TestHelper.AddServiceStub<IPlatformFactoryService>();
            platformFactoryServiceStub.Stub(x => x.Create<IAnimatedLabel>()).Return(new AnimatedLabelControl());
            platformFactoryServiceStub.Create<IAnimatedLabel>().Returns(new AnimatedLabelControl());
            m_AnimatedLabelHostCF = new AnimatedLabelHostCF();
        }

AnimatedLabelHostTest.cs
-2
+2
/Controls/ControlsTest/AnimatedLabel/AnimatedLabelHostTest.cs
using Core.Api.DI.PlatformFactory;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.AnimatedLabel
{
            TestHelper.AddServiceStub<ISecurityServiceCF>();
            IPlatformFactoryService platformFactoryServiceStub = TestHelper.AddServiceStub<IPlatformFactoryService>();
            platformFactoryServiceStub.Stub(x => x.Create<IAnimatedLabel>()).Return(new AnimatedLabelControl());
            platformFactoryServiceStub.Create<IAnimatedLabel>().Returns(new AnimatedLabelControl());
            m_AnimatedLabelHost = new AnimatedLabelHost();
        }

CommandFacadeTest.cs
+2
/Controls/ControlsTest/Commands/CommandFacadeTest.cs
#if!VNEXT_TARGET
using NUnit.Framework;
namespace Neo.ApplicationFramework.Controls.Commands
    }
}
#endif

CommandFacadeWithPrimarySelectionTests.cs
-24
+9
/Controls/ControlsTest/Commands/CommandFacadeWithPrimarySelectionTests.cs
#if !VNEXT_TARGET
using Core.Api.Service;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Commands
{
    [TestFixture]
    public class CommandFacadeWithPrimarySelectionTests
    {
        private MockRepository mockRepository;
        [SetUp]
        public void SetUp()
        {
            mockRepository = new MockRepository();
        }
        [TearDown]
            object expectedResult = "expectedResult";
            CommandFacade commandFacade = new CommandFacade();
            object actualResult;
            using ((mockRepository.Playback()))
            {
                actualResult = commandFacade.GetProperty(dummyPropertyName, expectedResult);
            }
            object actualResult = commandFacade.GetProperty(dummyPropertyName, expectedResult);
            Assert.AreEqual(expectedResult, actualResult);
        }
            object expectedResult = "expectedResult";
            CommandFacade commandFacade = new CommandFacade();
            object actualResult;
            using ((mockRepository.Playback()))
            {
                actualResult = commandFacade.GetProperty(nonExistingPropertyName, expectedResult);
            }
            object actualResult = commandFacade.GetProperty(nonExistingPropertyName, expectedResult);
            Assert.AreEqual(expectedResult, actualResult);
        }
            object expectedResult = primarySelection.Length;
            CommandFacade commandFacade = new CommandFacade();
            object actualResult;
            using ((mockRepository.Playback()))
            {
                actualResult = commandFacade.GetProperty(lengthPropertyName, dummyDefaultValue);
            }
            object actualResult = commandFacade.GetProperty(lengthPropertyName, dummyDefaultValue);
            Assert.AreEqual(expectedResult, actualResult);
        }
        private void SetupPrimarySelection(object primarySelection)
        {
            IGlobalSelectionService globalSelectionServiceMock = mockRepository.Stub<IGlobalSelectionService>();
            IGlobalSelectionService globalSelectionServiceMock = Substitute.For<IGlobalSelectionService>();
            ServiceContainerCF.Instance.Clear();
            TestHelper.AddService(typeof(IGlobalSelectionService), globalSelectionServiceMock);
            using (mockRepository.Record())
            {
                Expect.Call(globalSelectionServiceMock.PrimarySelection).Repeat.Any().Return(primarySelection);
            }
            globalSelectionServiceMock.PrimarySelection.Returns(primarySelection);
        }
    }
}
#endif

AudioComponentTest.cs
+3
/Controls/ControlsTest/ComponentLibrary/Model/AudioComponentTest.cs
#if !VNEXT_TARGET
using System.IO;
using System.Windows;
using Neo.ApplicationFramework.TestUtilities;
        }
    }
}
#endif

ComponentAllFilterTest.cs
-2
+5
/Controls/ControlsTest/ComponentLibrary/Model/ComponentAllFilterTest.cs
#if !VNEXT_TARGET
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ComponentLibrary.Model
{
        public void All_components_should_match()
        {
            Assert.That(m_UnderTest.IsMatch(null), Is.True);
            Assert.That(m_UnderTest.IsMatch(MockRepository.GenerateMock<IComponentInfo>()), Is.True);
            Assert.That(m_UnderTest.IsMatch(Substitute.For<IComponentInfo>()), Is.True);
        }
    }
}
#endif

ComponentFacadeTest.cs
-87
+96
/Controls/ControlsTest/ComponentLibrary/Model/ComponentFacadeTest.cs
#if!VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using Neo.ApplicationFramework.Common;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ComponentLibrary.Model
{
        [SetUp]
        public void SetUp()
        {
            m_Repository = MockRepository.GenerateMock<IComponentRepository>();
            m_ProgressService = MockRepository.GenerateMock<IInformationProgressService>();
            m_SymbolService = MockRepository.GenerateMock<ISymbolServiceIde>();
            m_ProjectManager = MockRepository.GenerateMock<IProjectManager>();
            m_Repository = Substitute.For<IComponentRepository>();
            m_ProgressService = Substitute.For<IInformationProgressService>();
            m_SymbolService = Substitute.For<ISymbolServiceIde>();
            m_ProjectManager = Substitute.For<IProjectManager>();
            m_DataChangeEventFired = false;
            m_UnderTest = new ComponentFacade(
        public void FindCategories_should_return_RootCategories()
        {
            // Arrange
            var rootCategories = Enumerable.Range(0, 2).Select(_ => MockRepository.GenerateMock<IComponentCategory>());
            m_Repository.Expect(x => x.FindRootCategories()).Return(rootCategories);
            var rootCategories = Enumerable.Range(0, 2).Select(_ => Substitute.For<IComponentCategory>());
            m_Repository.FindRootCategories().Returns(rootCategories);
            // Act
            var actual = m_UnderTest.FindRootCategories();
            // Assert
            Assert.That(actual, Is.SameAs(rootCategories));
            m_Repository.VerifyAllExpectations();
            m_Repository.Received().FindRootCategories();
        }
        /// <summary>
        public void FindComponentsByCategory_should_return_PagedResult()
        {
            // Arrange
            var components = Enumerable.Range(0, 10).Select(_ => MockRepository.GenerateMock<IComponentInfo>()).ToArray();
            var category = MockRepository.GenerateMock<IComponentCategory>();
            m_Repository.Expect(x => x.FindComponentsByCategory(category)).Return(components);
            var components = Enumerable.Range(0, 10).Select(_ => Substitute.For<IComponentInfo>()).ToArray();
            var category = Substitute.For<IComponentCategory>();
            m_Repository.FindComponentsByCategory(category).Returns(components);
            // Act
            var actual = m_UnderTest.FindComponentsByCategory(category, new ComponentAllFilter(), 1, 3);
            Assert.That(actual.PageNumber, Is.EqualTo(1));
            Assert.That(actual.TotalPages, Is.EqualTo(4));
            Assert.That(actual.Data, Is.EquivalentTo(components.Take(3)));
            m_Repository.VerifyAllExpectations();
            m_Repository.Received().FindComponentsByCategory(category);
        }
        /// <summary>
        public void FindPageNumber_should_return_page_number_of_component(int componentIndex, int pageSize, int expected)
        {
            // Arrange
            var components = Enumerable.Range(0, 10).Select(_ => MockRepository.GenerateMock<IComponentInfo>()).ToArray();
            var category = MockRepository.GenerateMock<IComponentCategory>();
            m_Repository.Expect(x => x.FindComponentsByCategory(category)).Return(components);
            var components = Enumerable.Range(0, 10).Select(_ => Substitute.For<IComponentInfo>()).ToArray();
            var category = Substitute.For<IComponentCategory>();
            m_Repository.FindComponentsByCategory(category).Returns(components);
            // Act
            var actual = m_UnderTest.FindPageNumber(category, new ComponentAllFilter(), components[componentIndex], pageSize);
            // Assert
            Assert.That(actual, Is.EqualTo(expected));
            m_Repository.VerifyAllExpectations();
            m_Repository.Received().FindComponentsByCategory(category);
        }
        /// <summary>
        public void CanAddComponent_should_return_true_for_some_data_formats(bool categoryReadOnly, string format, bool expected)
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            category.Expect(x => x.IsReadOnly).Return(categoryReadOnly);
            var category = Substitute.For<IComponentCategory>();
            category.IsReadOnly.Returns(categoryReadOnly);
            var dataObject = MockRepository.GenerateMock<IDataObject>();
            dataObject.Expect(i => i.GetDataPresent(format)).Return(true).Repeat.Any();
            dataObject.Expect(i => i.GetDataPresent(Arg<string>.Is.Anything)).Return(false).Repeat.Any();
            var dataObject = Substitute.For<IDataObject>();
            dataObject.GetDataPresent(format).Returns(true);
            dataObject.GetDataPresent(Arg.Any<string>()).Returns(false);
            // Act
            var actual = m_UnderTest.CanAddComponent(category, dataObject);
            // Assert
            Assert.That(actual, Is.EqualTo(expected));
            dataObject.Received().GetDataPresent(format);
            dataObject.ReceivedWithAnyArgs().GetDataPresent(Arg.Any<string>());
        }
        /// <summary>
        public void AddComponents_with_FileDrop_format_should_return_created_component()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            var category = Substitute.For<IComponentCategory>();
            var files = new[] { "FileA", "FileB" };
            var dataObject = MockRepository.GenerateMock<IDataObject>();
            dataObject.Expect(i => i.GetDataPresent(DataFormats.FileDrop)).Return(true);
            dataObject.Expect(i => i.GetData(DataFormats.FileDrop)).Return(files);
            var dataObject = Substitute.For<IDataObject>();
            dataObject.GetDataPresent(DataFormats.FileDrop).Returns(true);
            dataObject.GetData(DataFormats.FileDrop).Returns(files);
            var componentA = MockRepository.GenerateMock<IComponentInfo>();
            var componentB = MockRepository.GenerateMock<IComponentInfo>();
            m_Repository.Expect(i => i.AddComponent(category, files[0])).Return(componentA);
            m_Repository.Expect(i => i.AddComponent(category, files[1])).Return(componentB);
            var componentA = Substitute.For<IComponentInfo>();
            var componentB = Substitute.For<IComponentInfo>();
            m_Repository.AddComponent(category, files[0]).Returns(componentA);
            m_Repository.AddComponent(category, files[1]).Returns(componentB);
            var expected = new[] { componentA, componentB };
            // Act
        public void AddComponents_with_Text_format_should_return_created_component()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            var category = Substitute.For<IComponentCategory>();
            var dataObject = MockRepository.GenerateMock<IDataObject>();
            dataObject.Expect(i => i.GetDataPresent(DataFormats.Text)).Return(true).Repeat.Any();
            dataObject.Expect(i => i.GetDataPresent(Arg<string>.Is.Anything)).Return(false).Repeat.Any();
            dataObject.Expect(i => i.GetData(DataFormats.Text, false)).Return("TextData");
            var dataObject = Substitute.For<IDataObject>();
            dataObject.GetDataPresent(DataFormats.Text).Returns(true);
            dataObject.GetDataPresent(Arg.Any<string>()).Returns(false);
            dataObject.GetData(DataFormats.Text, false).Returns("TextData");
            var component = MockRepository.GenerateMock<IComponentInfo>();
            m_Repository.Expect(i => i.AddTextComponent(category, "TextData")).Return(component);
            var component = Substitute.For<IComponentInfo>();
            m_Repository.AddTextComponent(category, "TextData").Returns(component);
            var expected = new [] { component };
            // Act
            // Assert
            Assert.That(actual, Is.EquivalentTo(expected));
            Assert.That(m_DataChangeEventFired, Is.True);
            dataObject.Received().GetDataPresent(DataFormats.Text);
            dataObject.ReceivedWithAnyArgs().GetDataPresent(Arg.Any<string>());
        }
        /// <summary>
        public void AddComponents_with_ScreenDataObject_format_should_return_created_component()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            var category = Substitute.For<IComponentCategory>();
            var dataObject = MockRepository.GenerateMock<IDataObject>();
            var dataObject = Substitute.For<IDataObject>();
            var data = new ScreenDataObject();
            dataObject.Expect(i => i.GetDataPresent(ScreenDataObject.ClipboardFormat)).Return(true).Repeat.Any();
            dataObject.Expect(i => i.GetDataPresent(Arg<string>.Is.Anything)).Return(false).Repeat.Any();
            dataObject.Expect(i => i.GetData(ScreenDataObject.ClipboardFormat)).Return(data);
            dataObject.GetDataPresent(ScreenDataObject.ClipboardFormat).Returns(true);
            dataObject.GetDataPresent(Arg.Any<string>()).Returns(false);
            dataObject.GetData(ScreenDataObject.ClipboardFormat).Returns(data);
            var component = MockRepository.GenerateMock<IComponentInfo>();
            m_Repository.Expect(i => i.AddScreenObjectComponent(category, data)).Return(component);
            var component = Substitute.For<IComponentInfo>();
            m_Repository.AddScreenObjectComponent(category, data).Returns(component);
            var expected = new [] { component };
            // Act
            // Assert
            Assert.That(actual, Is.EquivalentTo(expected));
            Assert.That(m_DataChangeEventFired, Is.True);
            dataObject.Received().GetDataPresent(ScreenDataObject.ClipboardFormat);
            dataObject.ReceivedWithAnyArgs().GetDataPresent(Arg.Any<string>());
        }
        /// <summary>
        public void AddComponents_with_unknown_format_should_return_null()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            var dataObject = MockRepository.GenerateMock<IDataObject>();
            dataObject.Expect(i => i.GetDataPresent(Arg<string>.Is.Anything)).Return(false).Repeat.Any();
            var category = Substitute.For<IComponentCategory>();
            var dataObject = Substitute.For<IDataObject>();
            dataObject.GetDataPresent(Arg.Any<string>()).Returns(false);
            // Act
            var actual = m_UnderTest.AddComponents(category, dataObject);
            // Assert
            Assert.That(actual, Is.Empty);
            Assert.That(m_DataChangeEventFired, Is.False);
            dataObject.ReceivedWithAnyArgs().GetDataPresent(Arg.Any<string>());
        }
        /// <summary>
        public void AddComponents_should_return_created_component()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            var component = MockRepository.GenerateMock<IComponentInfo>();
            m_Repository.Expect(i => i.AddComponent(category, "TestFile")).Return(component);
            var category = Substitute.For<IComponentCategory>();
            var component = Substitute.For<IComponentInfo>();
            m_Repository.AddComponent(category, "TestFile").Returns(component);
            // Act
            IEnumerable<IComponentInfo> actual = m_UnderTest.AddComponents(category, new[] { "TestFile" });
        public void ImportComponents_should_return_created_category()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            var newCategory = MockRepository.GenerateMock<IComponentCategory>();
            m_Repository.Expect(i => i.ImportCategory(category, "TestFile")).Return(newCategory);
            var category = Substitute.For<IComponentCategory>();
            var newCategory = Substitute.For<IComponentCategory>();
            m_Repository.ImportCategory(category, "TestFile").Returns(newCategory);
            // Act
            var actual = m_UnderTest.ImportComponents(category, "TestFile");
        public void ExportComponent_should_call_Repository()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            m_Repository.Expect(i => i.ExportCategory(category, "TestFile"));
            var category = Substitute.For<IComponentCategory>();
            m_Repository.ExportCategory(category, "TestFile");
            // Act
            m_UnderTest.ExportComponents(category, "TestFile");
            // Assert
            m_Repository.VerifyAllExpectations();
            m_Repository.Received().ExportCategory(category, "TestFile");
        }
        /// <summary>
        public void AddCategory_should_return_created_category()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            var newCategory = MockRepository.GenerateMock<IComponentCategory>();
            m_Repository.Expect(i => i.AddCategory(category)).Return(newCategory);
            var category = Substitute.For<IComponentCategory>();
            var newCategory = Substitute.For<IComponentCategory>();
            m_Repository.AddCategory(category).Returns(newCategory);
            // Act
            var actual = m_UnderTest.AddCategory(category);
        public void DeleteCategory_should_call_Repository()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            m_Repository.Expect(i => i.DeleteCategory(category));
            var category = Substitute.For<IComponentCategory>();
            m_Repository.DeleteCategory(category);
            // Act
            var actual = m_UnderTest.DeleteCategory(category);
            // Assert
            Assert.That(actual, Is.True);
            m_Repository.VerifyAllExpectations();
            m_Repository.Received().DeleteCategory(category);
        }
        /// <summary>
        public void RenameCategory_should_return_renamed_category()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            var newCategory = MockRepository.GenerateMock<IComponentCategory>();
            m_Repository.Expect(i => i.RenameCategory(category, "NewName")).Return(newCategory);
            var category = Substitute.For<IComponentCategory>();
            var newCategory = Substitute.For<IComponentCategory>();
            m_Repository.RenameCategory(category, "NewName").Returns(newCategory);
            // Act
            var actual = m_UnderTest.RenameCategory(category, "NewName");
        public void SelectNewSymbolsFromFile_should_call_SymbolService()
        {
            // Arrange
            m_SymbolService.Expect(i => i.SelectNewSymbolsFromFile()).Return(Enumerable.Empty<string>());
            m_SymbolService.SelectNewSymbolsFromFile().Returns(Enumerable.Empty<string>());
            // Act
            m_UnderTest.SelectNewSymbolsFromFile();
            // Assert
            m_SymbolService.VerifyAllExpectations();
            m_SymbolService.Received().SelectNewSymbolsFromFile();
        }
        /// <summary>
        public void RemoveUnusedSymbols_should_call_SymbolService()
        {
            // Arrange
            m_SymbolService.Expect(i => i.RemoveUnusedSymbols());
            m_SymbolService.RemoveUnusedSymbols();
            // Act
            m_UnderTest.RemoveUnusedSymbols();
            // Assert
            m_SymbolService.VerifyAllExpectations();
            m_SymbolService.Received().RemoveUnusedSymbols();
            Assert.That(m_DataChangeEventFired, Is.True);
        }
        public void RemoveAllComponents_should_call_Repository()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            m_Repository.Expect(i => i.DeleteAllComponents(category));
            var category = Substitute.For<IComponentCategory>();
            m_Repository.DeleteAllComponents(category);
            // Act
            m_UnderTest.RemoveAllComponents(category);
            // Assert
            m_Repository.VerifyAllExpectations();
            m_Repository.Received().DeleteAllComponents(category);
            Assert.That(m_DataChangeEventFired, Is.True);
        }
        public void CanDeleteComponent_if_category_is_not_readonly(bool isReadOnly, bool expected)
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            category.Expect(i => i.IsReadOnly).Return(isReadOnly);
            var category = Substitute.For<IComponentCategory>();
            category.IsReadOnly.Returns(isReadOnly);
            var component = MockRepository.GenerateMock<IComponentInfo>();
            var component = Substitute.For<IComponentInfo>();
            // Act
            var actual = m_UnderTest.CanDeleteComponent(category, component);
        public void DeleteComponent_should_call_LibraryManager()
        {
            // Arrange
            var component = MockRepository.GenerateMock<IComponentInfo>();
            m_Repository.Expect(i => i.DeleteComponent(component));
            var component = Substitute.For<IComponentInfo>();
            m_Repository.DeleteComponent(component);
            // Act
            m_UnderTest.DeleteComponent(component);
            // Assert
            m_Repository.VerifyAllExpectations();
            m_Repository.DeleteComponent(component);
            Assert.That(m_DataChangeEventFired, Is.True);
        }
        public void CanRenameComponent_if_category_is_not_readonly(bool isReadOnly, bool expected)
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            category.Expect(i => i.IsReadOnly).Return(isReadOnly);
            var category = Substitute.For<IComponentCategory>();
            category.IsReadOnly.Returns(isReadOnly);
            var component = MockRepository.GenerateMock<IComponentInfo>();
            var component = Substitute.For<IComponentInfo>();
            // Act
            var actual = m_UnderTest.CanRenameComponent(category, component);
        public void RenameComponent_should_return_renamed_component()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            var component = MockRepository.GenerateMock<IComponentInfo>();
            var newComponent = MockRepository.GenerateMock<IComponentInfo>();
            m_Repository.Expect(i => i.RenameComponent(category, component, "NewName")).Return(newComponent);
            var category = Substitute.For<IComponentCategory>();
            var component = Substitute.For<IComponentInfo>();
            var newComponent = Substitute.For<IComponentInfo>();
            m_Repository.RenameComponent(category, component, "NewName").Returns(newComponent);
            // Act
            var actual = m_UnderTest.RenameComponent(category, component, "NewName");
        [Test]
        public void ItemsChanged_from_SymbolService_should_fire_DataChanged()
        {
            m_SymbolService.Raise(i => i.ItemsChanged += null, m_SymbolService, EventArgs.Empty);
            Raise.Event();
            Assert.That(m_DataChangeEventFired, Is.True);
        }
        public void ItemsChanged_from_SymbolService_should_not_fire_DataChanged_when_closing_project()
        {
            // Arrange
            m_ProjectManager.Expect(i => i.IsProjectClosing).Return(true);
            m_ProjectManager.IsProjectClosing.Returns(true);
            // Act
            m_SymbolService.Raise(i => i.ItemsChanged += null, m_SymbolService, EventArgs.Empty);
            Raise.Event();
            // Assert
            Assert.That(m_DataChangeEventFired, Is.False);
        }
    }
}
#endif

ComponentInfoFactoryTest.cs
-7
+10
/Controls/ControlsTest/ComponentLibrary/Model/ComponentInfoFactoryTest.cs
#if!VNEXT_TARGET
using System;
using System.IO;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ComponentLibrary.Model
{
            try
            {
                // Arrange
                var category = MockRepository.GenerateMock<IComponentCategory>();
                category.Expect(i => i.FileSystemPath).Return(".");
                var category = Substitute.For<IComponentCategory>();
                category.FileSystemPath.Returns(".");
                // Act
                var component = m_UnderTest.CreateCopyFromFile("TestComponent.txt", category);
        public void CreateFromText_should_create_TextComponent()
        {
            // Arrange
            var category = MockRepository.GenerateMock<IComponentCategory>();
            category.Expect(i => i.FileSystemPath).Return(".");
            var category = Substitute.For<IComponentCategory>();
            category.FileSystemPath.Returns(".");
            // Act
            var component = m_UnderTest.CreateFromText("SomeText", category);
                // Arrange
                var component = new ScreenObjectComponent("TestComponent.lib");
                var dataObject = (IScreenDataObject)component.CreateDataObject();
                var category = MockRepository.GenerateMock<IComponentCategory>();
                category.Expect(i => i.FileSystemPath).Return(".");
                var category = Substitute.For<IComponentCategory>();
                category.FileSystemPath.Returns(".");
                // Act
                var result = m_UnderTest.CreateFromObjectAndSave(dataObject, category);
        }
    }
}
#endif

ComponentRepositoryTest.cs
-5
+8
/Controls/ControlsTest/ComponentLibrary/Model/ComponentRepositoryTest.cs
using System;
using System.Diagnostics;
#if !VNEXT_TARGET
using System.IO;
using System.Linq;
using Core.Api.Feature;
using Neo.ApplicationFramework.Controls.ComponentLibrary.Features;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ComponentLibrary.Model
{
        {
            Directory.CreateDirectory(@"ComponentLibrary\SubCategory");
            m_FileSettings = MockRepository.GenerateMock<IFileSettingsServiceIde>();
            m_FileSettings.Expect(i => i.CommonApplicationDataFolder).Return(".");
            m_FileSettings = Substitute.For<IFileSettingsServiceIde>();
            m_FileSettings.CommonApplicationDataFolder.Returns(".");
            m_UnderTest = new ComponentRepository(m_FileSettings, new ComponentInfoFactory());
        }
            File.Copy("TestComponent.txt", @"ComponentLibrary\ComponentB.txt");
            var category = m_UnderTest.FindRootCategories().First();
            var featureService = MockRepository.GenerateMock<IFeatureSecurityServiceIde>();
            featureService.Expect(i => i.IsActivated<HidePrefixedComponentFeature>()).Return(false);
            var featureService = Substitute.For<IFeatureSecurityServiceIde>();
            featureService.IsActivated<HidePrefixedComponentFeature>().Returns(false);
            ServiceContainerCF.Instance.AddService(typeof(IFeatureSecurityServiceIde), featureService);
            // Act
        }
    }
}
#endif

ImageComponentTest.cs
+3
/Controls/ControlsTest/ComponentLibrary/Model/ImageComponentTest.cs
#if !VNEXT_TARGET
using System.IO;
using System.Windows;
using Neo.ApplicationFramework.TestUtilities;
        }
    }
}
#endif

NameComponentFilterTest.cs
-5
+6
/Controls/ControlsTest/ComponentLibrary/Model/NameComponentFilterTest.cs
#if !VNEXT_TARGET
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ComponentLibrary.Model
{
        public void SetUp()
        {
            m_NameComponentFilter = new NameComponentFilter();
            m_ComponentInfo = MockRepository.GenerateMock<IComponentInfo>();
            m_ComponentInfo = Substitute.For<IComponentInfo>();
        }
        [TestCase("Component Name", "", true)]
        public void IsMatch(string componentName, string filterText, bool expectedIsMatch)
        {
            // ARRANGE
            m_ComponentInfo
                .Stub(x => x.DisplayName)
                .Return(componentName);
            m_ComponentInfo.DisplayName.Returns(componentName);
            
            m_NameComponentFilter.Parameter = filterText;
        }
    }
}
#endif

OtherComponentTest.cs
+3
/Controls/ControlsTest/ComponentLibrary/Model/OtherComponentTest.cs
#if!VNEXT_TARGET
using System.Windows;
using Neo.ApplicationFramework.TestUtilities;
using NUnit.Framework;
    }
}
#endif

ProjectFilesCategoryTest.cs
+3
/Controls/ControlsTest/ComponentLibrary/Model/ProjectFilesCategoryTest.cs
#if !VNEXT_TARGET
using NUnit.Framework;
namespace Neo.ApplicationFramework.Controls.ComponentLibrary.Model
        }
    }
}
#endif

ScreenObjectComponentTest.cs
+3
/Controls/ControlsTest/ComponentLibrary/Model/ScreenObjectComponentTest.cs
#if !VNEXT_TARGET
using System.Windows;
using Neo.ApplicationFramework.Common;
using Neo.ApplicationFramework.TestUtilities;
        }
    }
}
#endif

ScreenObjectFilterTest.cs
+3
/Controls/ControlsTest/ComponentLibrary/Model/ScreenObjectFilterTest.cs
#if !VNEXT_TARGET
using NUnit.Framework;
namespace Neo.ApplicationFramework.Controls.ComponentLibrary.Model
        }
    }
}
#endif

StandardCategoryTest.cs
+3
/Controls/ControlsTest/ComponentLibrary/Model/StandardCategoryTest.cs
#if !VNEXT_TARGET
using System;
using System.Diagnostics;
using System.IO;
        }
    }
}
#endif

SymbolLibraryCategoryTest.cs
+3
/Controls/ControlsTest/ComponentLibrary/Model/SymbolLibraryCategoryTest.cs
#if !VNEXT_TARGET
using NUnit.Framework;
namespace Neo.ApplicationFramework.Controls.ComponentLibrary.Model
        }
    }
}
#endif

TextComponentTest.cs
+3
/Controls/ControlsTest/ComponentLibrary/Model/TextComponentTest.cs
#if !VNEXT_TARGET
using System.Windows;
using Neo.ApplicationFramework.TestUtilities;
using NUnit.Framework;
    }
}
#endif

VideoComponentTest.cs
+3
/Controls/ControlsTest/ComponentLibrary/Model/VideoComponentTest.cs
#if !VNEXT_TARGET
using System.IO;
using System.Windows;
using Neo.ApplicationFramework.TestUtilities;
        }
    }
}
#endif

CategoryTreeControlViewModelTest.cs
-127
+73
/Controls/ControlsTest/ComponentLibrary/ViewModel/CategoryTreeControlViewModelTest.cs
#if!VNEXT_TARGET
using System;
using System.ComponentModel;
using System.Linq;
using Neo.ApplicationFramework.Common.FrameworkDialogs;
using Neo.ApplicationFramework.Controls.ComponentLibrary.Model;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ComponentLibrary.ViewModel
{
        [SetUp]
        public void SetUp()
        {
            m_ComponentFacade = MockRepository.GenerateMock<IComponentFacade>();
            m_DialogService = MockRepository.GenerateMock<IDialogService>();
            var projectManager = MockRepository.GenerateMock<IProjectManager>();
            m_ComponentFacade = Substitute.For<IComponentFacade>();
            m_DialogService = Substitute.For<IDialogService>();
            var projectManager = Substitute.For<IProjectManager>();
            m_UnderTest = new CategoryTreeControlViewModel(m_ComponentFacade, m_DialogService, projectManager.ToILazy());
        }
            // Arrange
            var category = CreateTestCategoryViewModel();
            var newCategory = CreateTestCategory();
            newCategory.Expect(i => i.Name).Return("AnotherName");
            m_ComponentFacade.Expect(i => i.RenameCategory(category.Model, "NewName")).Return(newCategory);
            m_ComponentFacade.Replay();
            newCategory.Name.Returns("AnotherName");
            m_ComponentFacade.RenameCategory(category.Model, "NewName").Returns(newCategory);
            // Act
            var actual = m_UnderTest.RenameCategory(category, "NewName");
            // Assert
            m_ComponentFacade.VerifyAllExpectations();
            m_ComponentFacade.Received().RenameCategory(category.Model, "NewName");
            Assert.That(actual, Is.SameAs(newCategory));
        }
            // Arrange
            var categoryA = CreateTestCategory();
            var categoryB = CreateTestCategory();
            m_ComponentFacade.Expect(i => i.FindRootCategories()).Return(new[] { categoryA, categoryB });
            m_ComponentFacade.Replay();
            m_ComponentFacade.FindRootCategories().Returns(new[] { categoryA, categoryB });
            // Act
            m_UnderTest.Load();
            // Assert
            m_ComponentFacade.VerifyAllExpectations();
            m_ComponentFacade.Received().FindRootCategories();
            Assert.That(m_UnderTest.RootCategories.Count, Is.EqualTo(2));
            Assert.That(m_UnderTest.SelectedCategory.Model, Is.SameAs(categoryA));
        }
        public void AddComponentsCommand_should_do_nothing_when_no_file_selected()
        {
            // Arrange
            m_DialogService.Expect(i => i.ShowOpenFileDialog(null)).IgnoreArguments().Return(false);
            m_ComponentFacade.Replay();
            m_DialogService.Replay();
            m_DialogService.ShowOpenFileDialog(Arg.Any<OpenFileDialogSettings>()).ReturnsForAnyArgs(false);
            // Act
            m_UnderTest.AddComponentsCommand.Execute(CreateTestCategoryViewModel());
            // Assert
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.VerifyAllExpectations();
            m_DialogService.Received().ShowOpenFileDialog(Arg.Any<OpenFileDialogSettings>());
        }
        [Test]
                "TestFile2"
            };
            m_DialogService
                .Expect(i => i.ShowOpenFileDialog(null)).IgnoreArguments()
                .WhenCalled(
            m_DialogService.ShowOpenFileDialog(Arg.Do<OpenFileDialogSettings>(
                    invocation =>
                    {
                        var settings = (OpenFileDialogSettings)invocation.Arguments[0];
                        var settings = invocation;
                        settings.FileNames = fileNames;
                    })
                .Return(true);
            m_ComponentFacade.Expect(i => i.AddComponents(category.Model, fileNames));
            m_ComponentFacade.Replay();
            m_DialogService.Replay();
                    }))
                .Returns(true);
            m_ComponentFacade.AddComponents(category.Model, fileNames);
            // Act
            m_UnderTest.AddComponentsCommand.Execute(category);
            // Assert
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.VerifyAllExpectations();
            m_ComponentFacade.Received().AddComponents(category.Model, fileNames);
            m_DialogService.Received().ShowOpenFileDialog(Arg.Any<OpenFileDialogSettings>());
        }
        [Test]
        public void ImportComponentCommand_should_do_nothing_when_no_file_selected()
        {
            // Arrange
            m_DialogService.Expect(i => i.ShowOpenFileDialog(null)).IgnoreArguments().Return(false);
            m_ComponentFacade.Replay();
            m_DialogService.Replay();
            m_DialogService.ShowOpenFileDialog(Arg.Any<OpenFileDialogSettings>()).ReturnsForAnyArgs(false);
            // Act
            m_UnderTest.ImportComponentCommand.Execute(CreateTestCategoryViewModel());
            // Assert
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.VerifyAllExpectations();
            m_DialogService.ReceivedWithAnyArgs().ShowOpenFileDialog(Arg.Any<OpenFileDialogSettings>());
        }
        [Test]
        {
            // Arrange
            var category = CreateTestCategoryViewModel();
            m_DialogService
                .Expect(i => i.ShowOpenFileDialog(null)).IgnoreArguments()
                .WhenCalled(
            m_DialogService.ShowOpenFileDialog(Arg.Do<OpenFileDialogSettings>(
                    invocation =>
                    {
                        var settings = (OpenFileDialogSettings)invocation.Arguments[0];
                        var settings = invocation;
                        settings.FileName = "TestFile";
                    })
                .Return(true);
            m_ComponentFacade.Expect(i => i.ImportComponents(category.Model, "TestFile")).Return(null);
            m_ComponentFacade.Replay();
            m_DialogService.Replay();
                    }))
                .Returns(true);
            m_ComponentFacade.ImportComponents(category.Model, "TestFile").Returns(x => null);
            // Act
            m_UnderTest.ImportComponentCommand.Execute(category);
            // Assert
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.VerifyAllExpectations();
            m_ComponentFacade.Received().ImportComponents(category.Model, "TestFile");
            m_DialogService.ReceivedWithAnyArgs().ShowOpenFileDialog(Arg.Any<OpenFileDialogSettings>());
        }
        [Test]
            // Arrange
            var rootCategory = CreateTestCategoryViewModel();
            var category = CreateTestCategory();
            m_DialogService
                .Expect(i => i.ShowOpenFileDialog(null)).IgnoreArguments()
                .WhenCalled(
            m_DialogService.ShowOpenFileDialog(Arg.Do<OpenFileDialogSettings>(
                    invocation =>
                    {
                        var settings = (OpenFileDialogSettings)invocation.Arguments[0];
                        var settings = invocation;
                        settings.FileName = "TestFile";
                    })
                .Return(true);
            m_ComponentFacade.Expect(i => i.ImportComponents(rootCategory.Model, "TestFile")).Return(category);
            m_ComponentFacade.Replay();
            m_DialogService.Replay();
                    }))
                .Returns(true);
            m_ComponentFacade.ImportComponents(rootCategory.Model, "TestFile").Returns(category);
            // Act
            m_UnderTest.ImportComponentCommand.Execute(rootCategory);
            // Assert
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.VerifyAllExpectations();
            m_ComponentFacade.Received().ImportComponents(rootCategory.Model, "TestFile");
            m_DialogService.ReceivedWithAnyArgs().ShowOpenFileDialog(Arg.Any<OpenFileDialogSettings>());
            Assert.That(rootCategory.IsExpanded);
            Assert.That(rootCategory.SubCategories[0].IsSelected);
            Assert.That(rootCategory.SubCategories[0].Model, Is.SameAs(category));
        public void ExportComponentCommand_should_do_nothing_when_no_file_selected()
        {
            // Arrange
            m_DialogService.Expect(i => i.ShowSaveFileDialog(null)).IgnoreArguments().Return(false);
            m_ComponentFacade.Replay();
            m_DialogService.Replay();
            m_DialogService.ShowOpenFileDialog(Arg.Any<OpenFileDialogSettings>()).ReturnsForAnyArgs(false);
            // Act
            m_UnderTest.ExportComponentCommand.Execute(CreateTestCategoryViewModel());
            // Assert
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.VerifyAllExpectations();
            m_DialogService.ReceivedWithAnyArgs().ShowOpenFileDialog(Arg.Any<OpenFileDialogSettings>());
        }
        [Test]
            // Arrange
            var category = CreateTestCategoryViewModel();
            m_DialogService
                .Expect(i => i.ShowSaveFileDialog(null)).IgnoreArguments()
                .WhenCalled(
                .ShowSaveFileDialog(Arg.Do<SaveFileDialogSettings>(
                    invocation =>
                    {
                        var settings = (SaveFileDialogSettings)invocation.Arguments[0];
                        var settings = invocation;
                        settings.FileName = "TestFile";
                    })
                .Return(true);
            m_ComponentFacade.Expect(i => i.ExportComponents(category.Model, "TestFile"));
            m_ComponentFacade.Replay();
            m_DialogService.Replay();
                    }))
                .Returns(true);
            m_ComponentFacade.ExportComponents(category.Model, "TestFile");
            // Act
            m_UnderTest.ExportComponentCommand.Execute(category);
            // Assert
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.VerifyAllExpectations();
            m_ComponentFacade.ExportComponents(category.Model, "TestFile");
            m_DialogService.ReceivedWithAnyArgs().ShowSaveFileDialog(Arg.Any<SaveFileDialogSettings>());
        }
        [Test]
            var rootCategory = CreateTestCategoryViewModel();
            
            var category = CreateTestCategory();
            category.Expect(i => i.SubCategories).Return(Enumerable.Empty<IComponentCategory>());
            category.SubCategories.Returns(Enumerable.Empty<IComponentCategory>());
            m_ComponentFacade.Expect(i => i.AddCategory(rootCategory.Model)).Return(category);
            m_ComponentFacade.Replay();
            m_ComponentFacade.AddCategory(rootCategory.Model).Returns(category);
            // Act
            m_UnderTest.AddCategoryCommand.Execute(rootCategory);
            // Assert
            m_ComponentFacade.VerifyAllExpectations();
            m_ComponentFacade.Received().AddCategory(rootCategory.Model);
            Assert.That(rootCategory.IsSelected, Is.False);
            Assert.That(rootCategory.IsExpanded);
            Assert.That(rootCategory.SubCategories[0].IsSelected);
        {
            // Arrange
            var category = CreateTestCategoryViewModel();
            category.Model.Expect(i => i.IsReadOnly).Return(true);
            category.Model.IsReadOnly.Returns(true);
            // Act
            var actual = m_UnderTest.DeleteCategoryCommand.CanExecute(category);
        {
            // Arrange
            var category = CreateTestCategoryViewModel();
            category.Model.Expect(i => i.IsReadOnly).Return(false);
            category.Model.IsReadOnly.Returns(false);
            // Act
            var actual = m_UnderTest.DeleteCategoryCommand.CanExecute(category);
        public void DeleteCategoryCommand_should_do_nothing_when_user_does_not_confirm_delete()
        {
            // Arrange
            m_DialogService
                .Expect(i => i.ShowQuestion(null, null)).IgnoreArguments()
                .Return(false);
            
            m_ComponentFacade.Replay();
            m_DialogService.Replay();
            m_DialogService.ShowQuestion(Arg.Any<string>(), Arg.Any<string>()).ReturnsForAnyArgs(false);
            // Act
            m_UnderTest.DeleteCategoryCommand.Execute(CreateTestCategoryViewModel());
            // Assert
            m_DialogService.VerifyAllExpectations();
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.ReceivedWithAnyArgs().ShowQuestion(Arg.Any<string>(), Arg.Any<string>());
        }
        [Test]
            var rootCategory = CreateTestCategoryViewModel();
            var subCategory = CreateTestCategoryViewModel(rootCategory);
            rootCategory.SubCategories.Add(subCategory);
            m_DialogService
                .Expect(i => i.ShowQuestion(null, null)).IgnoreArguments()
                .Return(true);
            m_ComponentFacade.Expect(i => i.DeleteCategory(subCategory.Model)).Return(true);
            m_ComponentFacade.Replay();
            m_DialogService.Replay();
            m_DialogService.ShowQuestion(Arg.Any<string>(), Arg.Any<string>()).ReturnsForAnyArgs(true);
            m_ComponentFacade.DeleteCategory(subCategory.Model).Returns(true);
            // Act
            m_UnderTest.DeleteCategoryCommand.Execute(subCategory);
            // Assert
            m_DialogService.VerifyAllExpectations();
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.ReceivedWithAnyArgs().ShowQuestion(Arg.Any<string>(), Arg.Any<string>());
            m_ComponentFacade.Received().DeleteCategory(subCategory.Model);
            Assert.That(rootCategory.SubCategories, Is.Empty);
            Assert.That(rootCategory.IsSelected);
        }
        public void AddPicturesCommand_should_call_SelectNewSymbolsFromFile()
        {
            // Arrange
            m_ComponentFacade.Expect(i => i.SelectNewSymbolsFromFile());
            // Act
            m_UnderTest.AddPicturesCommand.Execute(CreateTestCategoryViewModelWithSymbolLibraryCategory());
            // Assert
            m_ComponentFacade.VerifyAllExpectations();
            m_ComponentFacade.Received().SelectNewSymbolsFromFile();
        }
        [Test]
        public void RemoveUnusedPicturesCommand_should_do_nothing_when_user_cancels()
        {
            // Arrange
            m_DialogService
                .Expect(i => i.ShowQuestion(null, null)).IgnoreArguments()
                .Return(false);
            m_DialogService.Replay();
            m_ComponentFacade.Replay();
            m_DialogService.ShowQuestion(Arg.Any<string>(), Arg.Any<string>()).ReturnsForAnyArgs(false);
            // Act
            m_UnderTest.RemoveUnusedPicturesCommand.Execute(CreateTestCategoryViewModelWithSymbolLibraryCategory());
            // Assert
            m_DialogService.VerifyAllExpectations();
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.ReceivedWithAnyArgs().ShowQuestion(Arg.Any<string>(), Arg.Any<string>());
        }
        [Test]
        public void RemoveUnusedPicturesCommand_should_call_RemoveUnusedSymbols_when_user_confirms()
        {
            // Arrange
            m_DialogService
                .Expect(i => i.ShowQuestion(null, null)).IgnoreArguments()
                .Return(true);
            m_ComponentFacade.Expect(i => i.RemoveUnusedSymbols());
            m_DialogService.Replay();
            m_ComponentFacade.Replay();
            m_DialogService.ShowQuestion(Arg.Any<string>(), Arg.Any<string>()).ReturnsForAnyArgs(true);
            // Act
            m_UnderTest.RemoveUnusedPicturesCommand.Execute(CreateTestCategoryViewModelWithSymbolLibraryCategory());
            // Assert
            m_DialogService.VerifyAllExpectations();
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.ReceivedWithAnyArgs().ShowQuestion(Arg.Any<string>(), Arg.Any<string>());
            m_ComponentFacade.Received().RemoveUnusedSymbols();
        }
        [Test]
        public void DeleteAllProjectFilesCommand_should_do_nothing_when_user_cancels()
        {
            // Arrange
            m_DialogService
                .Expect(i => i.ShowQuestion(null, null)).IgnoreArguments()
                .Return(false);
            m_DialogService.Replay();
            m_ComponentFacade.Replay();
            m_DialogService.ShowQuestion(Arg.Any<string>(), Arg.Any<string>()).ReturnsForAnyArgs(false);
            // Act
            m_UnderTest.DeleteAllProjectFilesCommand.Execute(CreateTestCategoryViewModelWithProjectFilesCategory());
            // Assert
            m_DialogService.VerifyAllExpectations();
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.ReceivedWithAnyArgs().ShowQuestion(Arg.Any<string>(), Arg.Any<string>());
        }
        [Test]
        {
            // Arrange
            var category = CreateTestCategoryViewModelWithProjectFilesCategory();
            m_DialogService
                .Expect(i => i.ShowQuestion(null, null)).IgnoreArguments()
                .Return(true);
            m_ComponentFacade.Expect(i => i.RemoveAllComponents(category.Model));
            m_DialogService.Replay();
            m_ComponentFacade.Replay();
            m_DialogService.ShowQuestion(Arg.Any<string>(), Arg.Any<string>()).ReturnsForAnyArgs(true);
            m_ComponentFacade.RemoveAllComponents(category.Model);
            // Act
            m_UnderTest.DeleteAllProjectFilesCommand.Execute(category);
            // Assert
            m_DialogService.VerifyAllExpectations();
            m_ComponentFacade.VerifyAllExpectations();
            m_DialogService.ReceivedWithAnyArgs().ShowQuestion(Arg.Any<string>(), Arg.Any<string>());
            m_ComponentFacade.RemoveAllComponents(category.Model);
        }
        private ComponentCategoryViewModel CreateTestCategoryViewModelWithSymbolLibraryCategory() 
        {
            return new ComponentCategoryViewModel(MockRepository.GenerateMock<SymbolLibraryCategory>(), m_UnderTest, null);
            return new ComponentCategoryViewModel(Substitute.For<SymbolLibraryCategory>(), m_UnderTest, null);
        }
        private ComponentCategoryViewModel CreateTestCategoryViewModelWithProjectFilesCategory()
        {
            return new ComponentCategoryViewModel(MockRepository.GenerateMock<ProjectFilesCategory>(), m_UnderTest, null);
            return new ComponentCategoryViewModel(Substitute.For<ProjectFilesCategory>(), m_UnderTest, null);
        }
        private IComponentCategory CreateTestCategory() 
        {
            var category = MockRepository.GenerateMock<IComponentCategory>();
            category.Expect(i => i.SubCategories).Return(Enumerable.Empty<IComponentCategory>());
            var category = Substitute.For<IComponentCategory>();
            category.SubCategories.Returns(Enumerable.Empty<IComponentCategory>());
            return category;
        }
    }
}
#endif

ComponentCategoryViewModelTest.cs
-28
+24
/Controls/ControlsTest/ComponentLibrary/ViewModel/ComponentCategoryViewModelTest.cs
#if!VNEXT_TARGET
using System.ComponentModel;
using System.Linq;
using System.Windows.Input;
using Neo.ApplicationFramework.Controls.ComponentLibrary.Model;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ComponentLibrary.ViewModel
{
        [SetUp]
        public void SetUp()
        {
            m_CommandHandler = MockRepository.GenerateMock<IComponentCategoryCommandHandler>();
            m_CommandHandler = Substitute.For<IComponentCategoryCommandHandler>();
            var subCategory = MockRepository.GenerateMock<IComponentCategory>();
            subCategory.Expect(i => i.SubCategories).Return(Enumerable.Empty<IComponentCategory>());
            var category = MockRepository.GenerateMock<IComponentCategory>();
            category.Expect(i => i.SubCategories).Return(new[] { subCategory });
            var subCategory = Substitute.For<IComponentCategory>();
            subCategory.SubCategories.Returns(Enumerable.Empty<IComponentCategory>());
            var category = Substitute.For<IComponentCategory>();
            category.SubCategories.Returns(new[] { subCategory });
            m_Parent = new ComponentCategoryViewModel("Parent");
            m_UnderTest = new ComponentCategoryViewModel(category, m_CommandHandler, m_Parent);
        [Test]
        public void Should_validate_and_fire_PropertyChanged_when_name_changed()
        {
            var category = MockRepository.GenerateMock<IComponentCategory>();
            category.Expect(i => i.Name).Return("ModifiedName");
            category.Expect(i => i.SubCategories).Return(Enumerable.Empty<IComponentCategory>());
            m_CommandHandler.Expect(i => i.RenameCategory(m_UnderTest, "SomeOtherName")).Return(category);
            m_CommandHandler.Replay();
            var category = Substitute.For<IComponentCategory>();
            category.Name.Returns("ModifiedName");
            category.SubCategories.Returns(Enumerable.Empty<IComponentCategory>());
            m_CommandHandler.RenameCategory(m_UnderTest, "SomeOtherName").Returns(category);
            Assert.That(m_UnderTest.NotifiesOn(x => x.Name).When(x => x.Name = "SomeOtherName"));
            Assert.That(m_UnderTest.Name, Is.EqualTo("ModifiedName"));
            m_CommandHandler.VerifyAllExpectations();
            m_CommandHandler.Received().RenameCategory(m_UnderTest, "SomeOtherName");
        }
        [Test]
        [Test]
        public void Should_set_CommandHandler_selection_when_selected()
        {
            m_CommandHandler.Expect(i => i.SelectedCategory).PropertyBehavior();
            m_UnderTest.IsSelected = true;
            Assert.That(m_CommandHandler.SelectedCategory, Is.SameAs(m_UnderTest));
            m_CommandHandler.VerifyAllExpectations();
        }
        [Test]
        public void Commands_should_be_relayed_from_CommandHandler()
        {
            // Arrange
            var command = MockRepository.GenerateMock<ICommand>();
            m_CommandHandler.Expect(i => i.AddComponentsCommand).Return(command);
            m_CommandHandler.Expect(i => i.ImportComponentCommand).Return(command);
            m_CommandHandler.Expect(i => i.ExportComponentCommand).Return(command);
            m_CommandHandler.Expect(i => i.AddCategoryCommand).Return(command);
            m_CommandHandler.Expect(i => i.DeleteCategoryCommand).Return(command);
            m_CommandHandler.Expect(i => i.EnterEditModeCommand).Return(command);
            m_CommandHandler.Expect(i => i.AddPicturesCommand).Return(command);
            m_CommandHandler.Expect(i => i.RemoveUnusedPicturesCommand).Return(command);
            m_CommandHandler.Expect(i => i.AddProjectFileCommand).Return(command);
            m_CommandHandler.Expect(i => i.DeleteAllProjectFilesCommand).Return(command);
            m_CommandHandler.Replay();
            var command = Substitute.For<ICommand>();
            m_CommandHandler.AddComponentsCommand.Returns(command);
            m_CommandHandler.ImportComponentCommand.Returns(command);
            m_CommandHandler.ExportComponentCommand.Returns(command);
            m_CommandHandler.AddCategoryCommand.Returns(command);
            m_CommandHandler.DeleteCategoryCommand.Returns(command);
            m_CommandHandler.EnterEditModeCommand.Returns(command);
            m_CommandHandler.AddPicturesCommand.Returns(command);
            m_CommandHandler.RemoveUnusedPicturesCommand.Returns(command);
            m_CommandHandler.AddProjectFileCommand.Returns(command);
            m_CommandHandler.DeleteAllProjectFilesCommand.Returns(command);
            // Act & Assert
            Assert.That(m_UnderTest.AddComponentsCommand, Is.SameAs(command));
            Assert.That(m_UnderTest.RemoveUnusedPicturesCommand, Is.SameAs(command));
            Assert.That(m_UnderTest.AddProjectFileCommand, Is.SameAs(command));
            Assert.That(m_UnderTest.DeleteAllProjectFilesCommand, Is.SameAs(command));
            m_CommandHandler.VerifyAllExpectations();
        }
    }
}
#endif

ComponentInfoViewModelTest.cs
-21
+20
/Controls/ControlsTest/ComponentLibrary/ViewModel/ComponentInfoViewModelTest.cs
#if!VNEXT_TARGET
using System.ComponentModel;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using Neo.ApplicationFramework.Controls.ComponentLibrary.Model;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ComponentLibrary.ViewModel
{
        [SetUp]
        public void SetUp()
        {
            m_ComponentInfo = MockRepository.GenerateMock<IComponentInfo>();
            m_ComponentInfo = Substitute.For<IComponentInfo>();
            var tcs = new TaskCompletionSource<ImageSource>();
            tcs.SetResult(null);
            m_ComponentInfo.Expect(i => i.LoadThumbnailAsync()).Return(tcs.Task);
            m_ComponentInfo.LoadThumbnailAsync().Returns(tcs.Task);
            m_CommandHandler = MockRepository.GenerateMock<IComponentInfoCommandHandler>();
            m_CommandHandler = Substitute.For<IComponentInfoCommandHandler>();
            m_UnderTest = new ComponentInfoViewModel(m_ComponentInfo, m_CommandHandler);
        }
        [Test]
        public void Should_fire_PropertyChanged()
        {
            var newComponent = MockRepository.GenerateMock<IComponentInfo>();
            newComponent.Expect(i => i.DisplayName).Return("NewName");
            m_CommandHandler.Expect(i => i.RenameComponent(m_ComponentInfo, "NewName")).Return(newComponent);
            var newComponent = Substitute.For<IComponentInfo>();
            newComponent.DisplayName.Returns("NewName");
            m_CommandHandler.RenameComponent(m_ComponentInfo, "NewName").Returns(newComponent);
            Assert.That(m_UnderTest.NotifiesOn(x => x.DisplayName).When(x => x.DisplayName = "NewName"));
            Assert.That(m_UnderTest.NotifiesOn(x => x.Size).When(x => x.Size = 200));
        {
            // Arrange
            m_UnderTest.IsEditMode = true;
            m_ComponentInfo.Expect(i => i.DisplayName).Return("TestName");
            m_CommandHandler.Expect(i => i.RenameComponent(m_ComponentInfo, "TestName")).Return(m_ComponentInfo);
            m_ComponentInfo.DisplayName.Returns("TestName");
            m_CommandHandler.RenameComponent(m_ComponentInfo, "TestName").Returns(m_ComponentInfo);
            // Act
            m_UnderTest.DisplayName = "TestName";
        public void CreateDataObject_should_call_model()
        {
            // Arrange
            var dataObject = MockRepository.GenerateMock<IDataObject>();
            m_ComponentInfo.Expect(i => i.CreateDataObject()).Return(dataObject);
            m_ComponentInfo.Replay();
            var dataObject = Substitute.For<IDataObject>();
            m_ComponentInfo.CreateDataObject().Returns(dataObject);
            // Act
            var actual = m_UnderTest.CreateDataObject();
            // Assert
            m_ComponentInfo.VerifyAllExpectations();
            m_ComponentInfo.Received().CreateDataObject();
            Assert.That(actual, Is.SameAs(dataObject));
        }
        public void Commands_should_be_relayed_from_CommandHandler()
        {
            // Arrange
            var command = MockRepository.GenerateMock<ICommand>();
            m_CommandHandler.Expect(i => i.CutComponentCommand).Return(command);
            m_CommandHandler.Expect(i => i.CopyComponentCommand).Return(command);
            m_CommandHandler.Expect(i => i.PasteComponentCommand).Return(command);
            m_CommandHandler.Expect(i => i.DeleteComponentCommand).Return(command);
            m_CommandHandler.Expect(i => i.RenameComponentCommand).Return(command);
            m_CommandHandler.Replay();
            var command = Substitute.For<ICommand>();
            m_CommandHandler.CutComponentCommand.Returns(command);
            m_CommandHandler.CopyComponentCommand.Returns(command);
            m_CommandHandler.PasteComponentCommand.Returns(command);
            m_CommandHandler.DeleteComponentCommand.Returns(command);
            m_CommandHandler.RenameComponentCommand.Returns(command);
            // Act & Assert
            Assert.That(m_UnderTest.CutComponentCommand, Is.SameAs(command));
            Assert.That(m_UnderTest.PasteComponentCommand, Is.SameAs(command));
            Assert.That(m_UnderTest.DeleteComponentCommand, Is.SameAs(command));
            Assert.That(m_UnderTest.RenameComponentCommand, Is.SameAs(command));
            m_CommandHandler.VerifyAllExpectations();
        }
    }
}
#endif

ComponentLibraryControlViewModelTest.cs
/Controls/ControlsTest/ComponentLibrary/ViewModel/ComponentLibraryControlViewModelTest.cs

PagingControlViewModelTest.cs
-10
+13
/Controls/ControlsTest/ComponentLibrary/ViewModel/PagingControlViewModelTest.cs
#if !VNEXT_TARGET
using System;
using System.ComponentModel;
using System.Windows;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ComponentLibrary.ViewModel
{
        [SetUp]
        public void SetUp()
        {
            m_MockAction = MockRepository.GenerateMock<Action<int>>();
            m_MockAction = Substitute.For<Action<int>>();
            m_UnderTest = new PagingControlViewModel(m_MockAction) { TotalPages = 3 };
        }
        public void FirstPageCommandShouldNavigateToFirstPage()
        {
            // Arrange
            m_MockAction.Expect(x => x.Invoke(1));
            m_MockAction.Invoke(1);
            m_UnderTest.PageNumber = 3;
            // Act
            // Assert
            Assert.AreEqual(1, m_UnderTest.PageNumber);
            m_MockAction.VerifyAllExpectations();
            m_MockAction.Received().Invoke(1);
        }
        [Test]
        public void PreviousPageCommandShouldNavigateToPreviousPage()
        {
            // Arrange
            m_MockAction.Expect(x => x.Invoke(2));
            m_MockAction.Invoke(2);
            m_UnderTest.PageNumber = 3;
            // Act
            // Assert
            Assert.AreEqual(2, m_UnderTest.PageNumber);
            m_MockAction.VerifyAllExpectations();
            m_MockAction.Received().Invoke(2);
        }
        [Test]
        public void NextPageCommandShouldNavigateToNextPage()
        {
            // Arrange
            m_MockAction.Expect(x => x.Invoke(2));
            m_MockAction.Invoke(2);
            m_UnderTest.PageNumber = 1;
            // Act
            // Assert
            Assert.AreEqual(2, m_UnderTest.PageNumber);
            m_MockAction.VerifyAllExpectations();
            m_MockAction.Received().Invoke(2);
        }
        [Test]
        public void LastPagecommandShouldNavigateToLastPage()
        {
            // Arrange
            m_MockAction.Expect(x => x.Invoke(3));
            m_MockAction.Invoke(3);
            m_UnderTest.PageNumber = 1;
            // Act
            // Assert
            Assert.AreEqual(3, m_UnderTest.PageNumber);
            m_MockAction.VerifyAllExpectations();
            m_MockAction.Received().Invoke(3);
        }
    }
}
#endif

ComponentLibrarySetup.cs
+2
/Controls/ControlsTest/ComponentLibrary/ComponentLibrarySetup.cs
#if!VNEXT_TARGET
using System;
using System.IO;
using System.Reflection;
        }
    }
}
#endif

ButtonTest.cs
-5
+5
/Controls/ControlsTest/Controls/ButtonTest.cs
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Controls
{
        [SetUp]
        public void Setup()
        {
            var terminalStub = MockRepository.GenerateStub<ITerminal>();
            var targetInfoStub = MockRepository.GenerateStub<ITargetInfo>();
            var terminalStub = Substitute.For<ITerminal>();
            var targetInfoStub = Substitute.For<ITargetInfo>();
            targetInfoStub.TerminalDescription = terminalStub;
            ITarget targetStub = MockRepository.GenerateStub<ITarget>();
            ITarget targetStub = Substitute.For<ITarget>();
            ITargetService targetServiceStub = TestHelper.AddServiceStub<ITargetService>();
            targetServiceStub.CurrentTarget = targetStub;
            targetServiceStub.Stub(x => x.CurrentTargetInfo).Return(targetInfoStub);
            targetServiceStub.CurrentTargetInfo.Returns(targetInfoStub);
        }
        [TearDown]

GroupCFTest.cs
-77
+54
/Controls/ControlsTest/Controls/GroupCFTest.cs
using Neo.ApplicationFramework.Common.Graphics.Logic;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Controls
{
        public void SetUp()
        {
            m_ToolManager = TestHelper.CreateAndAddServiceStub<IToolManager>();
            m_ToolManager.Stub(x => x.Runtime).Return(true);
            m_ToolManager.Runtime.Returns(true);
            ISecurityServiceCF securityServiceCF = TestHelper.CreateAndAddServiceStub<ISecurityServiceCF>();
            securityServiceCF.Stub(x => x.IsAccessGranted(null, null)).IgnoreArguments().Return(true);
            securityServiceCF.IsAccessGranted(null, null).Returns(true);
            m_InnerRectangle = new RectangleCF();
            m_InnerRectangle.Fill = new BrushCF(Color.Blue);
            InitGroups();
            System.Windows.Forms.MouseEventArgs mouseEventArgs = new System.Windows.Forms.MouseEventArgs(System.Windows.Forms.MouseButtons.Left, 1, 0, 0, 0);
            MockRepository mockRepository = new MockRepository();
            BaseObject baseObject = mockRepository.StrictMock<BaseObject>();
            using (mockRepository.Record())
            {
                Expect.Call(baseObject.HitTestIgnoreEnabled(0, 0)).Repeat.Times(2).Return(true);
                Expect.Call(baseObject.HitTest(0, 0)).Repeat.Times(2).Return(true);
                Expect.Call(baseObject.Enabled).Repeat.Times(2).Return(true);
            BaseObject baseObject = Substitute.For<BaseObject>();
            baseObject.HitTestIgnoreEnabled(0, 0).Returns(true);
            baseObject.HitTest(0, 0).Returns(true);
            baseObject.Enabled.Returns(true);
            baseObject.OnClick(mouseEventArgs);
            baseObject.OnMouseDown(mouseEventArgs);
            baseObject.OnMouseUp(mouseEventArgs);
            }
            
            using (mockRepository.Playback())
            {
            m_InnerGroup.Components.Add(baseObject);
            m_InnerGroup.OnClick(mouseEventArgs);
            m_InnerGroup.OnMouseDown(mouseEventArgs);
            m_InnerGroup.OnMouseUp(mouseEventArgs);
            }
            mockRepository.VerifyAll();
            baseObject.Received(2).HitTestIgnoreEnabled(0, 0);
            baseObject.Received(2).HitTest(0, 0);
        }
        [Test]
            System.Windows.Forms.MouseEventArgs mouseEventArgs = new System.Windows.Forms.MouseEventArgs(System.Windows.Forms.MouseButtons.Left, 1, 0, 0, 0);
            MockRepository mockRepository = new MockRepository();
            BaseObject baseObject = mockRepository.StrictMock<BaseObject>();
            IEventSubscriber eventSubscriber = mockRepository.StrictMock<IEventSubscriber>();
            BaseObject baseObject = Substitute.For<BaseObject>();
            IEventSubscriber eventSubscriber = Substitute.For<IEventSubscriber>();
            using (mockRepository.Record())
            {
                Expect.Call(baseObject.HitTestIgnoreEnabled(0, 0)).Repeat.Times(3).Return(false);
                Expect.Call(baseObject.HitTest(0, 0)).Repeat.Times(3).Return(false);
            baseObject.HitTestIgnoreEnabled(0, 0).Returns(false);
            baseObject.HitTest(0, 0).Returns(false);
            m_InnerGroup.Click += eventSubscriber.Handler;
            m_InnerGroup.MouseDown += eventSubscriber.Handler;
            m_InnerGroup.MouseUp += eventSubscriber.Handler;
            }
            
            using (mockRepository.Playback())
            {
            m_InnerGroup.Components.Add(baseObject);
            m_InnerGroup.OnClick(mouseEventArgs);
            m_InnerGroup.OnMouseDown(mouseEventArgs);
            m_InnerGroup.OnMouseUp(mouseEventArgs);
            }
            mockRepository.VerifyAll();
            baseObject.Received(3).HitTestIgnoreEnabled(0, 0);
            baseObject.Received(3).HitTest(0, 0);
            eventSubscriber.Received(3).Handler(Arg.Any<object>(), Arg.Any<EventArgs>());
        }
        [Test]
            System.Windows.Forms.MouseEventArgs mouseEventArgs = new System.Windows.Forms.MouseEventArgs(System.Windows.Forms.MouseButtons.Left, 1, 0, 0, 0);
            MockRepository mockRepository = new MockRepository();
            BaseObject baseObject = mockRepository.StrictMock<BaseObject>();
            IEventSubscriber eventSubscriber = mockRepository.StrictMock<IEventSubscriber>();
            BaseObject baseObject = Substitute.For<BaseObject>();
            IEventSubscriber eventSubscriber = Substitute.For<IEventSubscriber>();
            using (mockRepository.Record())
            {
                Expect.Call(baseObject.HitTestIgnoreEnabled(0, 0)).Repeat.Times(2).Return(true);
                Expect.Call(baseObject.HitTest(0, 0)).Repeat.Times(2).Return(true);
                Expect.Call(baseObject.Enabled).Repeat.Times(2).Return(true);
            baseObject.HitTestIgnoreEnabled(0, 0).Returns(true);
            baseObject.HitTest(0, 0).Returns(true);
            baseObject.Enabled.Returns(true);
            baseObject.OnClick(mouseEventArgs);
            baseObject.OnMouseDown(mouseEventArgs);
            baseObject.OnMouseUp(mouseEventArgs);
            eventSubscriber.Handler(m_InnerGroup, EventArgs.Empty);
            eventSubscriber.Handler(m_InnerGroup, EventArgs.Empty);
            eventSubscriber.Handler(m_InnerGroup, EventArgs.Empty);
            }
            using (mockRepository.Playback())
            {
            m_InnerGroup.Components.Add(baseObject);
            m_InnerGroup.OnClick(mouseEventArgs);
            m_InnerGroup.OnMouseDown(mouseEventArgs);
            m_InnerGroup.OnMouseUp(mouseEventArgs);
            }
            mockRepository.VerifyAll();
            baseObject.Received(2).HitTestIgnoreEnabled(0, 0);
            baseObject.Received(2).HitTest(0, 0);
            baseObject.Received().OnClick(mouseEventArgs);
            baseObject.Received().OnMouseUp(mouseEventArgs);
            baseObject.Received().OnMouseDown(mouseEventArgs);
        }
        [Test]
            System.Windows.Forms.MouseEventArgs mouseEventArgs = new System.Windows.Forms.MouseEventArgs(System.Windows.Forms.MouseButtons.Left, 1, 0, 0, 0);
            MockRepository mockRepository = new MockRepository();
            BaseObject baseObject = mockRepository.StrictMock<BaseObject>();
            IEventSubscriber eventSubscriber = mockRepository.StrictMock<IEventSubscriber>();
            BaseObject baseObject = Substitute.For<BaseObject>();
            IEventSubscriber eventSubscriber = Substitute.For<IEventSubscriber>();
            using (mockRepository.Record())
            {
                Expect.Call(baseObject.HitTestIgnoreEnabled(0, 0)).Repeat.Times(2).Return(true);
                Expect.Call(baseObject.HitTest(0, 0)).Repeat.Times(3).Return(true);
                Expect.Call(baseObject.Enabled).Repeat.Times(3).Return(false);
            baseObject.HitTestIgnoreEnabled(0, 0).Returns(true);
            baseObject.HitTest(0, 0).Returns(true);
            baseObject.Enabled.Returns(false);
            m_InnerGroup.Click += eventSubscriber.Handler;
            m_InnerGroup.MouseDown += eventSubscriber.Handler;
            eventSubscriber.Handler(m_InnerGroup, EventArgs.Empty);
            eventSubscriber.Handler(m_InnerGroup, EventArgs.Empty);
            eventSubscriber.Handler(m_InnerGroup, EventArgs.Empty);
            }
            using (mockRepository.Playback())
            {
            m_InnerGroup.Components.Add(baseObject);
            m_InnerGroup.OnClick(mouseEventArgs);
            m_InnerGroup.OnMouseDown(mouseEventArgs);
            m_InnerGroup.OnMouseUp(mouseEventArgs);
            }
            mockRepository.VerifyAll();
            baseObject.Received(2).HitTestIgnoreEnabled(0, 0);
            baseObject.Received(3).HitTest(0, 0);
            baseObject.Received().OnClick(mouseEventArgs);
            baseObject.Received().OnMouseUp(mouseEventArgs);
            baseObject.Received().OnMouseDown(mouseEventArgs);
        }
        [Test]
            System.Windows.Forms.MouseEventArgs mouseEventArgs = new System.Windows.Forms.MouseEventArgs(System.Windows.Forms.MouseButtons.Left, 1, 0, 0, 0);
            MockRepository mockRepository = new MockRepository();
            GroupCF innerGroupMock = mockRepository.StrictMock<GroupCF>();
            GroupCF innerGroupMock = Substitute.For<GroupCF>();
            using (mockRepository.Record())
            {
                Expect.Call(innerGroupMock.HitTestIgnoreEnabled(0, 0)).Repeat.Times(2).Return(true);
                Expect.Call(innerGroupMock.HitTest(0, 0)).Repeat.Times(2).Return(true);
                Expect.Call(innerGroupMock.Enabled).Repeat.Times(2).Return(true);
            innerGroupMock.HitTestIgnoreEnabled(0, 0).Returns(true);
            innerGroupMock.HitTest(0, 0).Returns(true);
            innerGroupMock.Enabled.Returns(true);
            innerGroupMock.OnClick(mouseEventArgs);
            innerGroupMock.OnMouseUp(mouseEventArgs);
            innerGroupMock.OnMouseDown(mouseEventArgs);
            }
        
            using (mockRepository.Playback())
            {
            m_OuterGroup.Components.Add(innerGroupMock);
            m_OuterGroup.OnClick(mouseEventArgs);
            m_OuterGroup.OnMouseDown(mouseEventArgs);
            m_OuterGroup.OnMouseUp(mouseEventArgs);
            }
            mockRepository.VerifyAll();
            innerGroupMock.Received(2).HitTestIgnoreEnabled(0, 0);
            innerGroupMock.Received(2).HitTest(0, 0);
            innerGroupMock.Received().OnClick(mouseEventArgs);
            innerGroupMock.Received().OnMouseUp(mouseEventArgs);
            innerGroupMock.Received().OnMouseDown(mouseEventArgs);
        }
        [Test]
            System.Windows.Forms.MouseEventArgs mouseEventArgs = new System.Windows.Forms.MouseEventArgs(System.Windows.Forms.MouseButtons.Left, 1, m_InnerGroup.Left, m_InnerGroup.Top, 0);
            MockRepository mockRepository = new MockRepository();
            BaseObject baseObject = mockRepository.StrictMock<BaseObject>();
            BaseObject baseObject = Substitute.For<BaseObject>();
            using (mockRepository.Record())
            {
                Expect.Call(baseObject.HitTestIgnoreEnabled(0, 0)).IgnoreArguments().Repeat.Any().Return(true);
                Expect.Call(baseObject.HitTest(0, 0)).IgnoreArguments().Repeat.Times(2).Return(true);
                Expect.Call(baseObject.Enabled).Repeat.Times(2).Return(true);
            baseObject.HitTestIgnoreEnabled(0, 0).Returns(true);
            baseObject.HitTest(0, 0).Returns(true);
            baseObject.Enabled.Returns(true);
            baseObject.OnClick(mouseEventArgs);
            baseObject.OnMouseUp(mouseEventArgs);
            baseObject.OnMouseDown(mouseEventArgs);
            }
            using (mockRepository.Playback())
            {
            m_InnerGroup.Components.Add(baseObject);
            m_OuterGroup.OnClick(mouseEventArgs);
            m_OuterGroup.OnMouseDown(mouseEventArgs);
            m_OuterGroup.OnMouseUp(mouseEventArgs);
            }
            mockRepository.VerifyAll();
            baseObject.Received().HitTestIgnoreEnabled(0, 0);
            baseObject.Received(2).HitTest(0, 0);
            baseObject.Received().OnClick(mouseEventArgs);
            baseObject.Received().OnMouseUp(mouseEventArgs);
            baseObject.Received().OnMouseDown(mouseEventArgs);
        }
        private void InitGroups()

GroupTest.cs
-4
+6
/Controls/ControlsTest/Controls/GroupTest.cs
#if!VNEXT_TARGET
using System;
using System.ComponentModel;
using System.Windows;
using Neo.ApplicationFramework.Controls.Screen;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.PropertyGrid;
using Neo.ApplicationFramework.TestUtilities.Brush;
using Neo.ApplicationFramework.Tools.PropertyGrid;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Controls
{
            m_WPFToCFTypeDescriptionProvider = new WPFToCFTypeDescriptionProvider(typeof(object));
            TypeDescriptor.AddProvider(m_WPFToCFTypeDescriptionProvider, typeof(object));
            m_ToolManager = MockRepository.GenerateStub<IToolManager>();
            m_ToolManager.Stub(x => x.Runtime).Return(true);
            m_ToolManager = Substitute.For<IToolManager>();
            m_ToolManager.Runtime.Returns(true);
            TestHelper.ClearServices();
            TestHelper.AddService(m_ToolManager);
        }
    }
}
#endif

ScreenWindowTest.cs
-8
+8
/Controls/ControlsTest/Controls/ScreenWindowTest.cs
using Neo.ApplicationFramework.Common.Graphics.Controls;
using Neo.ApplicationFramework.Controls.Screen;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Controls
{
        [Test]
        public void StyleIsnotSetWhenStyleNameIsSetAndScreenIsPopup()
        {
            StyleHelper styleHelperStub = MockRepository.GenerateStub<StyleHelper>();
            StyleHelper styleHelperStub = Substitute.For<StyleHelper>();
            Style roundedStyle = new Style();
            styleHelperStub.Stub(x => x.LoadStyle(m_ScreenWindow, "Rounded")).Return(roundedStyle);
            ((ScreenWindow)m_ScreenWindow).StyleHelper = styleHelperStub;
            styleHelperStub.LoadStyle(m_ScreenWindow, "Rounded").Returns(roundedStyle);
            m_ScreenWindow.StyleHelper = styleHelperStub;
            ((IScreen)m_ScreenWindow).PopupScreen = true;
            ((IScreen)m_ScreenWindow).StyleName = "Rounded";
            styleHelperStub.AssertWasNotCalled(x => x.SetStyle(m_ScreenWindow, roundedStyle));
            styleHelperStub.DidNotReceive().SetStyle(m_ScreenWindow, roundedStyle);
        }
        [Test]
        public void StyleIsNotSetWhenStyleNameIsSetAndScreenIsNotPopup()
        {
            StyleHelper styleHelperStub = MockRepository.GenerateStub<StyleHelper>();
            ((ScreenWindow)m_ScreenWindow).StyleHelper = styleHelperStub;
            StyleHelper styleHelperStub = Substitute.For<StyleHelper>();
            m_ScreenWindow.StyleHelper = styleHelperStub;
            ((IScreen)m_ScreenWindow).PopupScreen = false;
            ((IScreen)m_ScreenWindow).StyleName = "Rounded";
            styleHelperStub.AssertWasNotCalled(x => x.SetStyle(Arg.Is(m_ScreenWindow), Arg<Style>.Is.Anything));
            styleHelperStub.DidNotReceive().SetStyle(Arg.Is(m_ScreenWindow), Arg.Any<Style>());
        }
        [TestCase(ScreenWindow.DefaultScreenWindowStyleName)]

SolidColorBrushToHexConverterTest.cs
-1
+1
/Controls/ControlsTest/Controls/SolidColorBrushToHexConverterTest.cs
using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media;
using NUnit.Framework;
using System.Windows.Media;
namespace Neo.ApplicationFramework.Controls.Controls
{

ActionEditorTest.cs
+2
/Controls/ControlsTest/ControlsIde/Action/ActionEditorTest.cs
#if !VNEXT_TARGET
using NUnit.Framework;
namespace Neo.ApplicationFramework.Controls.Action
    }
}
#endif

MeterVisibilityViewModelTest.cs
-4
+4
/Controls/ControlsTest/ControlsIde/Ribbon/Context/ViewModels/Meter/MeterVisibilityViewModelTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon.Context.ViewModels.Meter
{
        [SetUp]
        public void SetUp()
        {
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
        }
        [TearDown]
        [Test]
        public void UpdateContentsSetVisibilityAndOfScaleVisabilityBasedOnPrimarySelection()
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(Controls.RenderableControl.ScaleVisibleProperty.Name, Visibility.Visible)).Return(Visibility.Visible);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(RenderableControl.TransparentProperty.Name, Visibility.Visible)).Return(Visibility.Visible);
            GlobalCommandServiceStub.GetProperty(Controls.RenderableControl.ScaleVisibleProperty.Name, Visibility.Visible).Returns(Visibility.Visible);
            GlobalCommandServiceStub.GetProperty(RenderableControl.TransparentProperty.Name, Visibility.Visible).Returns(Visibility.Visible);
            MeterVisibilityViewModel viewModel = new ExtendedMeterVisibilityViewModel().ExecuteUpdateContent();

ScreenViewModelTest.cs
-8
+8
/Controls/ControlsTest/ControlsIde/Ribbon/Context/ViewModels/Screen/ScreenViewModelTest.cs
using Neo.ApplicationFramework.Controls.Ribbon.Context.ViewModels.Screen;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon.Context.ViewModels.Screen
{
        [SetUp]
        public void SetUp()
        {
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            GlobalCommandServiceStub.Stub(x => x.ActiveScreen).Return(null);
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
            GlobalCommandServiceStub.ActiveScreen.Returns(x => null);
        }
        [TearDown]
        private void SetScreenPropertiesAndUpdateContent(bool popupValue, bool modalValue, Point pointValue, Size sizeValue, bool isCacheableValue)
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(IsCacheablePropertyName, true)).Return(isCacheableValue);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(PopupPropertyName, false)).Repeat.Any().Return(popupValue);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(ModalPropertyName, false)).Repeat.Once().Return(modalValue);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(ScreenPositionPropertyName, new Point(0, 0))).Repeat.Once().Return(pointValue);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(ScreenSizePropertyName, new Size(0, 0))).Repeat.Any().Return(sizeValue);
            GlobalCommandServiceStub.GetProperty(IsCacheablePropertyName, true).Returns(isCacheableValue);
            GlobalCommandServiceStub.GetProperty(PopupPropertyName, false).Returns(popupValue);
            GlobalCommandServiceStub.GetProperty(ModalPropertyName, false).Returns(modalValue);
            GlobalCommandServiceStub.GetProperty(ScreenPositionPropertyName, new Point(0, 0)).Returns(pointValue);
            GlobalCommandServiceStub.GetProperty(ScreenSizePropertyName, new Size(0, 0)).Returns(sizeValue);
        }
        internal class ExtendedTextBaseViewModel : ScreenViewModel

TrendValueScaleViewModelTest.cs
-6
+6
/Controls/ControlsTest/ControlsIde/Ribbon/Context/ViewModels/Trend/TrendValueScaleViewModelTest.cs
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon.Context.ViewModels.Trend
{
        [SetUp]
        public void SetUp()
        {
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
        }
        [TearDown]
        public void UpdateContentSetsTheProperties()
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(Arg<string>.Is.Equal(TrendViewer.ValueScaleMinimumProperty.Name), Arg<object>.Is.Anything)).Repeat.Once().Return((double)1D);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(Arg<string>.Is.Equal(TrendViewer.ValueScaleMaximumProperty.Name), Arg<object>.Is.Anything)).Repeat.Once().Return((double)100D);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(Arg<string>.Is.Equal(TrendViewer.ValueScaleMajorTickCountProperty.Name), Arg<object>.Is.Anything)).Repeat.Once().Return((int)10);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(Arg<string>.Is.Equal(TrendViewer.ValueScaleMinorTickCountProperty.Name), Arg<object>.Is.Anything)).Repeat.Once().Return((int)1);
            GlobalCommandServiceStub.GetProperty(Arg.Is(TrendViewer.ValueScaleMinimumProperty.Name), Arg.Any<object>()).Returns((double)1D);
            GlobalCommandServiceStub.GetProperty(Arg.Is(TrendViewer.ValueScaleMaximumProperty.Name), Arg.Any<object>()).Returns((double)100D);
            GlobalCommandServiceStub.GetProperty(Arg.Is(TrendViewer.ValueScaleMajorTickCountProperty.Name), Arg.Any<object>()).Returns(10);
            GlobalCommandServiceStub.GetProperty(Arg.Is(TrendViewer.ValueScaleMinorTickCountProperty.Name), Arg.Any<object>()).Returns(1);
            ExtendedTrendValueScaleViewModel viewModel = new ExtendedTrendValueScaleViewModel().ExecuteUpdateContent();

VisibilityViewModelTest.cs
-1
+1
/Controls/ControlsTest/ControlsIde/Ribbon/Context/ViewModels/Trend/VisibilityViewModelTest.cs
        [SetUp]
        public void SetUp()
        {
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
        }
        [TearDown]

AngularViewModelTest.cs
-7
+7
/Controls/ControlsTest/ControlsIde/Ribbon/Context/ViewModels/AngularViewModelTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon.Context.ViewModels
{
        [SetUp]
        public void RunBeforeEachTest()
        {
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
            m_SelectedCircularBar = new CircularMeter();
            GlobalSelectionServiceStub.Stub(x => x.PrimarySelection).Repeat.Any().Return(m_SelectedCircularBar);
            GlobalSelectionServiceStub.PrimarySelection.Returns(m_SelectedCircularBar);
        }
        [TearDown]
        [Test]
        public void UpdateContentSetsTheProperties()
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(CircularMeter.EndAngleProperty.Name, 0D)).Repeat.Once().Return((double)1);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(CircularMeter.StartAngleProperty.Name, 0D)).Repeat.Once().Return((double)2);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(CircularMeter.ScaleTextRotationProperty.Name, TickRotation.None)).Repeat.Once().Return(TickRotation.None);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(CircularMeter.ClockwiseProperty.Name, true)).Repeat.Once().Return(false);
            GlobalCommandServiceStub.GetProperty(CircularMeter.EndAngleProperty.Name, 0D).Returns((double)1);
            GlobalCommandServiceStub.GetProperty(CircularMeter.StartAngleProperty.Name, 0D).Returns((double)2);
            GlobalCommandServiceStub.GetProperty(CircularMeter.ScaleTextRotationProperty.Name, TickRotation.None).Returns(TickRotation.None);
            GlobalCommandServiceStub.GetProperty(CircularMeter.ClockwiseProperty.Name, true).Returns(false);
            ExtendedAngularViewModel viewModel = new ExtendedAngularViewModel().ExecuteUpdateContent();

AutoSizeDependentTextAlignmentViewModelTest.cs
-5
+5
/Controls/ControlsTest/ControlsIde/Ribbon/Context/ViewModels/AutoSizeDependentTextAlignmentViewModelTest.cs
using Neo.ApplicationFramework.Controls.Ribbon.Context.ViewModels;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon.Context.ViewModels
{
        [SetUp]
        public void SetUp()
        {
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
        }
        [TearDown]
        [TestCase(false, true)]
        public void UpdateContentSetsTheIsEnabledProperty(bool autoSize, bool expectedIsTextAlignmentEnabled)
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(AutoSizePropertyName, true)).Repeat.Once().Return(autoSize);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(TextVerticalAlignmentPropertyName, VerticalAlignment.Center)).Repeat.Once().Return(VerticalAlignment.Center);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(TextHorizontalAlignmentPropertyName, HorizontalAlignment.Center)).Repeat.Once().Return(HorizontalAlignment.Center);
            GlobalCommandServiceStub.GetProperty(AutoSizePropertyName, true).Returns(autoSize);
            GlobalCommandServiceStub.GetProperty(TextVerticalAlignmentPropertyName, VerticalAlignment.Center).Returns(VerticalAlignment.Center);
            GlobalCommandServiceStub.GetProperty(TextHorizontalAlignmentPropertyName, HorizontalAlignment.Center).Returns(HorizontalAlignment.Center);
            ExtendedAutoSizeDependentTextAlignmentViewModel viewModel = new ExtendedAutoSizeDependentTextAlignmentViewModel().ExecuteUpdateContent();

AutoSizeTextViewModelTest.cs
-18
+18
/Controls/ControlsTest/ControlsIde/Ribbon/Context/ViewModels/AutoSizeTextViewModelTest.cs
using Neo.ApplicationFramework.Controls.RibbonContent;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon.Context.ViewModels
{
            SetupDesignerStubs();
            TestHelper.AddService(DesignerEventServiceStub);
            TestHelper.AddService(ScreenDesignerViewStub);
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
        }
        private void SetupDesignerStubs()
        {
            ScreenDesignerViewStub = MockRepository.GenerateStub<IScreenDesignerView>();
            INeoDesignerHost designerHost = MockRepository.GenerateStub<INeoDesignerHost>();
            designerHost.Stub(x => x.GetService<IScreenDesignerView>()).Return(ScreenDesignerViewStub);
            ScreenDesignerViewStub = Substitute.For<IScreenDesignerView>();
            INeoDesignerHost designerHost = Substitute.For<INeoDesignerHost>();
            designerHost.GetService<IScreenDesignerView>().Returns(ScreenDesignerViewStub);
            DesignerEventServiceStub = MockRepository.GenerateStub<IDesignerEventService>();
            DesignerEventServiceStub.Stub(x => x.ActiveDesigner).Return(designerHost);
            DesignerEventServiceStub = Substitute.For<IDesignerEventService>();
            DesignerEventServiceStub.ActiveDesigner.Returns(designerHost);
        }
        [Test]
        public void UpdateContentSetsTheProperties()
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(TextPropertyName, string.Empty)).Repeat.Once().Return(TestText);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(MultiLinePropertyName, false)).Repeat.Once().Return(true);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(WordWrapPropertyName, false)).Repeat.Once().Return(true);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(AutoStretchFontPropertyName, false)).Repeat.Once().Return(true);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(AutoSizePropertyName, false)).Repeat.Once().Return(true);
            GlobalCommandServiceStub.GetProperty(TextPropertyName, string.Empty).Returns(TestText);
            GlobalCommandServiceStub.GetProperty(MultiLinePropertyName, false).Returns(true);
            GlobalCommandServiceStub.GetProperty(WordWrapPropertyName, false).Returns(true);
            GlobalCommandServiceStub.GetProperty(AutoStretchFontPropertyName, false).Returns(true);
            GlobalCommandServiceStub.GetProperty(AutoSizePropertyName, false).Returns(true);
            ExtendedAutoSizeTextBaseViewModel autoSizeTextViewModel = new ExtendedAutoSizeTextBaseViewModel();
            autoSizeTextViewModel.ExecuteUpdateContent();
        [Test]
        public void EnablingAutoSizeDisablesAutoStretchFont()
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(AutoSizePropertyName, false)).Repeat.Once().Return(true);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(AutoStretchFontPropertyName, false)).Repeat.Once().Return(false);
            GlobalCommandServiceStub.GetProperty(AutoSizePropertyName, false).Returns(true);
            GlobalCommandServiceStub.GetProperty(AutoStretchFontPropertyName, false).Returns(false);
            ExtendedAutoSizeTextBaseViewModel autoSizeTextViewModel = new ExtendedAutoSizeTextBaseViewModel();
        [Test]
        public void EnablingAutoStretchFontDisablesMultiLineAndWordWrap()
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(AutoSizePropertyName, false)).Repeat.Once().Return(false);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(AutoStretchFontPropertyName, false)).Repeat.Twice().Return(true);
            GlobalCommandServiceStub.GetProperty(AutoSizePropertyName, false).Returns(false);
            GlobalCommandServiceStub.GetProperty(AutoStretchFontPropertyName, false).Returns(true);
            ExtendedAutoSizeTextBaseViewModel autoSizeTextViewModel = new ExtendedAutoSizeTextBaseViewModel();
        [Test]
        public void DisablingAutoStretchFontAndAutoSizeEnablesWordWrapAndMultiLine()
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(AutoSizePropertyName, false)).Repeat.Once().Return(false);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(AutoStretchFontPropertyName, false)).Repeat.Twice().Return(false);
            GlobalCommandServiceStub.GetProperty(AutoSizePropertyName, false).Returns(false);
            GlobalCommandServiceStub.GetProperty(AutoStretchFontPropertyName, false).Returns(false);
            ExtendedAutoSizeTextBaseViewModel autoSizeTextViewModel = new ExtendedAutoSizeTextBaseViewModel();

PictureAlignmentViewModelTest.cs
-6
+6
/Controls/ControlsTest/ControlsIde/Ribbon/Context/ViewModels/PictureAlignmentViewModelTest.cs
using Neo.ApplicationFramework.Controls.Ribbon.Context.ViewModels.Button;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon.Context.ViewModels
{
        [SetUp]
        public void SetUp()
        {
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
        }
        [TearDown]
            bool expectedIsHorizontalRight,
            bool expectedIsHorizontalStretch)
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(PictureHorizontalAlignmentPropertyName, HorizontalAlignment.Center)).Repeat.Once().Return(horizontalAlignment);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(PictureVerticalAlignmentPropertyName, VerticalAlignment.Center)).Repeat.Once().Return(VerticalAlignment.Center);
            GlobalCommandServiceStub.GetProperty(PictureHorizontalAlignmentPropertyName, HorizontalAlignment.Center).Returns(horizontalAlignment);
            GlobalCommandServiceStub.GetProperty(PictureVerticalAlignmentPropertyName, VerticalAlignment.Center).Returns(VerticalAlignment.Center);
            ExtendedPictureAlignmentViewModel viewModel = new ExtendedPictureAlignmentViewModel().ExecuteUpdateContent();
            bool expectedIsVerticalBottom,
            bool expectedIsVerticalStretch)
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(PictureHorizontalAlignmentPropertyName, HorizontalAlignment.Center)).Repeat.Once().Return(HorizontalAlignment.Center);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(PictureVerticalAlignmentPropertyName, VerticalAlignment.Center)).Repeat.Once().Return(verticalAlignment);
            GlobalCommandServiceStub.GetProperty(PictureHorizontalAlignmentPropertyName, HorizontalAlignment.Center).Returns(HorizontalAlignment.Center);
            GlobalCommandServiceStub.GetProperty(PictureVerticalAlignmentPropertyName, VerticalAlignment.Center).Returns(verticalAlignment);
            ExtendedPictureAlignmentViewModel viewModel = new ExtendedPictureAlignmentViewModel().ExecuteUpdateContent();

TextAlignmentViewModelTest.cs
-6
+6
/Controls/ControlsTest/ControlsIde/Ribbon/Context/ViewModels/TextAlignmentViewModelTest.cs
using Neo.ApplicationFramework.Controls.Ribbon.Context.ViewModels;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon.Context.ViewModels
{
        [SetUp]
        public void SetUp()
        {
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
        }
        [TearDown]
            bool expectedIsHorizontalRight,
            bool expectedIsHorizontalStretch)
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(TextHorizontalAlignmentPropertyName, HorizontalAlignment.Center)).Repeat.Once().Return(horizontalAlignment);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(TextVerticalAlignmentPropertyName, VerticalAlignment.Center)).Repeat.Once().Return(VerticalAlignment.Center);
            GlobalCommandServiceStub.GetProperty(TextHorizontalAlignmentPropertyName, HorizontalAlignment.Center).Returns(horizontalAlignment);
            GlobalCommandServiceStub.GetProperty(TextVerticalAlignmentPropertyName, VerticalAlignment.Center).Returns(VerticalAlignment.Center);
            ExtendedTextAlignmentViewModel viewModel = new ExtendedTextAlignmentViewModel().ExecuteUpdateContent();
            bool expectedIsVerticalBottom,
            bool expectedIsVerticalStretch)
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(TextHorizontalAlignmentPropertyName, HorizontalAlignment.Center)).Repeat.Once().Return(HorizontalAlignment.Center);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(TextVerticalAlignmentPropertyName, VerticalAlignment.Center)).Repeat.Once().Return(verticalAlignment);
            GlobalCommandServiceStub.GetProperty(TextHorizontalAlignmentPropertyName, HorizontalAlignment.Center).Returns(HorizontalAlignment.Center);
            GlobalCommandServiceStub.GetProperty(TextVerticalAlignmentPropertyName, VerticalAlignment.Center).Returns(verticalAlignment);
            ExtendedTextAlignmentViewModel viewModel = new ExtendedTextAlignmentViewModel().ExecuteUpdateContent();

TextViewModelTest.cs
-5
+5
/Controls/ControlsTest/ControlsIde/Ribbon/Context/ViewModels/TextViewModelTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon.Context.ViewModels
{
        [SetUp]
        public void SetUp()
        {
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
        }
        [TearDown]
        [Test]
        public void UpdateContentSetsTheProperties()
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(TextPropertyName, string.Empty)).Repeat.Once().Return(TestText);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(MultiLinePropertyName, false)).Repeat.Once().Return(true);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(WordWrapPropertyName, false)).Repeat.Once().Return(true);
            GlobalCommandServiceStub.GetProperty(TextPropertyName, string.Empty).Returns(TestText);
            GlobalCommandServiceStub.GetProperty(MultiLinePropertyName, false).Returns(true);
            GlobalCommandServiceStub.GetProperty(WordWrapPropertyName, false).Returns(true);
            ExtendedTextBaseViewModel viewModel = new ExtendedTextBaseViewModel();
            viewModel.ExecuteUpdateContent();

ValueScaleViewModelTest.cs
-6
+6
/Controls/ControlsTest/ControlsIde/Ribbon/Context/ViewModels/ValueScaleViewModelTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon.Context.ViewModels
{
        [SetUp]
        public void SetUp()
        {
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
        }
        [Test]
        public void UpdateContentSetsTheProperties()
        {
            GlobalCommandServiceStub.Stub(x => x.GetProperty(Controls.Meter.MajorTickCountProperty.Name, 0)).Repeat.Once().Return((int)10);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(Controls.Meter.MinorTickCountProperty.Name, 0)).Repeat.Once().Return((int)1);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(Controls.Meter.MaximumProperty.Name, 0.0D)).Repeat.Once().Return((double)100D);
            GlobalCommandServiceStub.Stub(x => x.GetProperty(Controls.Meter.MinimumProperty.Name, 0.0D)).Repeat.Once().Return((double)1D);
            GlobalCommandServiceStub.GetProperty(Controls.Meter.MajorTickCountProperty.Name, 0).Returns((int)10);
            GlobalCommandServiceStub.GetProperty(Controls.Meter.MinorTickCountProperty.Name, 0).Returns((int)1);
            GlobalCommandServiceStub.GetProperty(Controls.Meter.MaximumProperty.Name, 0.0D).Returns((double)100D);
            GlobalCommandServiceStub.GetProperty(Controls.Meter.MinimumProperty.Name, 0.0D).Returns((double)1D);
            ExtendedValueScaleViewModel viewModel = new ExtendedValueScaleViewModel().ExecuteUpdateContent();

ToolboxViewModelTest.cs
-20
+19
/Controls/ControlsTest/ControlsIde/Ribbon/ViewModels/ToolboxViewModelTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Events;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon.ViewModels
{
        [SetUp]
        public void SetUp()
        {
            m_ToolboxManagerService = TestHelper.CreateAndAddServiceMock<IToolboxManagerService>();
            m_ReflectionOnlyService = TestHelper.CreateAndAddServiceMock<IReflectionOnlyService>();
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            m_ToolboxManagerService = TestHelper.CreateAndAddServiceStub<IToolboxManagerService>();
            m_ReflectionOnlyService = TestHelper.CreateAndAddServiceStub<IReflectionOnlyService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
        }
        [TearDown]
        public void StubLoadOfToolBoxItems(IEnumerable<ToolboxItem> itemsToLoad)
        {
            m_ToolboxManagerService.Stub(x => x.GetToolboxItems()).Repeat.Any().Return(new ToolboxItemCollection(itemsToLoad.ToArray()));
            m_ToolboxManagerService.GetToolboxItems().Returns(new ToolboxItemCollection(itemsToLoad.ToArray()));
        }
        private ControlToolboxItem CreateToolboxItem(string displayName)
        {
            IControlInfo controlInfo = MockRepository.GenerateStub<IControlInfo>();
            IControlMetadata controlMetadata = MockRepository.GenerateStub<IControlMetadata>();
            controlMetadata.Stub(x => x.DisplayName).Return(displayName);
            controlInfo.Stub(x => x.Metadata).Return(controlMetadata);
            IControlInfo controlInfo = Substitute.For<IControlInfo>();
            IControlMetadata controlMetadata = Substitute.For<IControlMetadata>();
            controlMetadata.DisplayName.Returns(displayName);
            controlInfo.Metadata.Returns(controlMetadata);
            return new ControlToolboxItem(controlInfo) { DisplayName = displayName };
        }
        private void StubCheckOfAvailabilityOnToolBoxItem(ControlToolboxItem toolboxItem, bool available)
        {
            IRemoteAssembly remoteAssembly = MockRepository.GenerateStub<IRemoteAssembly>();
            remoteAssembly.Location = String.Empty;
            IRemoteAssembly remoteAssembly = Substitute.For<IRemoteAssembly>();
            remoteAssembly.Location = string.Empty;
            IRemoteType remoteType = MockRepository.GenerateStub<IRemoteType>();
            remoteType.Stub(x => x.FullName).Return(toolboxItem.DisplayName);
            remoteType.Stub(x => x.Assembly).Return(remoteAssembly);
            IRemoteType remoteType = Substitute.For<IRemoteType>();
            remoteType.FullName.Returns(toolboxItem.DisplayName);
            remoteType.Assembly.Returns(remoteAssembly);
            m_ReflectionOnlyService.Stub(x => x.GetType(toolboxItem)).Return(remoteType);
            m_ReflectionOnlyService.Stub(x => x.IsControlType(Arg<string>.Is.Anything, Arg<string>.Is.Anything)).Return(true);
            m_ReflectionOnlyService.Stub(x => x.IsControlTypeSupported(remoteType)).Return(available);
            m_ReflectionOnlyService.GetType(toolboxItem).Returns(remoteType);
            m_ReflectionOnlyService.IsControlType(Arg.Any<string>(), Arg.Any<string>()).Returns(true);
            m_ReflectionOnlyService.IsControlTypeSupported(remoteType).Returns(available);
        }
        [Test]
            Assert.That(toolboxViewModel.ToolboxItems.First().IsEnabled, Is.True);
            StubCheckOfAvailabilityOnToolBoxItem(toolBoxItem, false);
            ProjectManagerStub.Raise(x => x.ProjectOpened += null, this, new ProjectOpenedEventArgs(ProjectOriginEnum.Created));
            Raise.EventWith(ProjectManagerStub, new ProjectOpenedEventArgs(ProjectOriginEnum.Created));
            Assert.That(toolboxViewModel.ToolboxItems.Count, Is.EqualTo(0));
        }
            ToolboxViewModel toolboxViewModel = new ToolboxViewModel();
            ((ICommand)toolboxViewModel.ToolboxItems.First()).Execute(null);
            GlobalCommandServiceStub.AssertWasCalled(x => x.ActivateTool(controlToolboxItem));
            GlobalCommandServiceStub.Received().ActivateTool(controlToolboxItem);
        }
    }
}

ComPortsViewModelTest.cs
-61
+62
/Controls/ControlsTest/ControlsIde/Ribbon/ComPortsViewModelTest.cs
using Neo.ApplicationFramework.Controls.Ribbon.ViewModels;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon
{
        private void AddServices()
        {
            GlobalCommandServiceStub = MockRepository.GenerateMock<IGlobalCommandService>();
            EventBrokerServiceStub = MockRepository.GenerateMock<IEventBrokerService>();
            ObjectNotificationService = MockRepository.GenerateMock<IObjectNotificationService>();
            GlobalCommandServiceStub = Substitute.For<IGlobalCommandService>();
            EventBrokerServiceStub = Substitute.For<IEventBrokerService>();
            ObjectNotificationService = Substitute.For<IObjectNotificationService>();
            ProjectStub = MockRepository.GenerateStub<IProject>();
            ProjectStub = Substitute.For<IProject>();
            ComPortModes = new Dictionary<ComPort, PortMode>();
            ProjectStub.ComPortModes = ComPortModes;
            IProjectManager projectManagerMock = MockRepository.GenerateStub<IProjectManager>();
            IProjectManager projectManagerMock = Substitute.For<IProjectManager>();
            projectManagerMock.Project = ProjectStub;
            TestHelper.ClearServices();
            TestHelper.AddService(projectManagerMock);
            TestHelper.AddService(EventBrokerServiceStub);
            TestHelper.AddService(ObjectNotificationService);
            TestHelper.AddService(MockRepository.GenerateMock<ICommandManagerService>());
            TestHelper.AddService(Substitute.For<ICommandManagerService>());
        }
        [TearDown]
            ComPortsViewModel model = SetUpBumbleBeeTest();
            ServiceContainerCF.Instance.RemoveService(typeof(ITargetService), true);
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(ExterTrinityComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(ExterTrinityComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            //TerminalFake = new TerminalFake { ComPortModes = ExterTrinityComPorts, TerminalGroup = TerminalGroup.Default };
            SetupTargetMock();
            model.Init();
            ComPortsViewModel model = SetUpExterTrinityTest();
            ServiceContainerCF.Instance.RemoveService(typeof(ITargetService), true);
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(BumblebeeComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(BumblebeeComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            model.Init();
            model.SelectedCom1PortMode = model.Com1PortModes.Where(comPort => comPort.Name == "RS-485").First();
            ServiceContainerCF.Instance.RemoveService(typeof(ITargetService), true);
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(ExterTrinityComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(ExterTrinityComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            model.Init();
            model.SelectedCom1PortMode = model.Com1PortModes.Where(comPort => comPort.Name == "RS-485").First();
            ServiceContainerCF.Instance.RemoveService(typeof(ITargetService), true);
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(ExterTrinityComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(ExterTrinityComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            model.Init();
            model.SelectedCom1PortMode = model.Com1PortModes.First(comPort => comPort.Name == "RS-232");
            ServiceContainerCF.Instance.RemoveService(typeof(ITargetService), true);
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(ExterTrinityComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(ExterTrinityComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            model.Init();
            ComPortsViewModel model = SetUpGalvatronTest();
            ServiceContainerCF.Instance.RemoveService(typeof(ITargetService), true);
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(ExterTrinityComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(ExterTrinityComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            //TerminalFake = new TerminalFake { ComPortModes = ExterTrinityComPorts, TerminalGroup = TerminalGroup.Default };
            SetupTargetMock();
            model.Init();
            ComPortsViewModel model = SetUpExtremeTest();
            ServiceContainerCF.Instance.RemoveService(typeof(ITargetService), true);
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(ExterTrinityComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(ExterTrinityComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            model.Init();
            ComPortsViewModel model = SetUpExterTrinityTest();
            ServiceContainerCF.Instance.RemoveService(typeof(ITargetService), true);
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(GalvatronComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(GalvatronComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            model.Init();
            ComPortsViewModel model = SetUpExterTrinityTest();
            ServiceContainerCF.Instance.RemoveService(typeof(ITargetService), true);
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(ExtremeComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(ExtremeComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            model.Init();
            PortMode portMode;
            ComPortsViewModel model = SetUpGalvatronTest();
            ServiceContainerCF.Instance.RemoveService(typeof(ITargetService), true);
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(GalvatronComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(GalvatronComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            model.Init();
            Assert.That(model.ComPortModes.TryGetValue(ComPort.COM3, out portMode), Is.False);
            ProjectStub.Stub(x => x.SetComPortMode(Arg<ComPort>.Is.Anything, Arg<PortMode>.Is.Anything)).Do((Action<ComPort, PortMode>)SetComPortMode);
            ProjectStub.WhenForAnyArgs(x => x.SetComPortMode(Arg.Any<ComPort>(), Arg.Any<PortMode>()))
                .Do(y => SetComPortMode((ComPort)y[0], (PortMode)y[1]));
            ProjectStub.SetComPortMode(ComPort.COM2, PortMode.rs485);
            Assert.That(model.ComPortModes.TryGetValue(ComPort.COM2, out portMode), Is.True);
        private void FireComPortModesChanged()
        {
            ProjectStub.Raise(x => x.PropertyChanged += null, ProjectStub, new PropertyChangedEventArgs(nameof(ProjectStub.ComPortModes)));
            Raise.Event<PropertyChangedEventHandler>(ProjectStub, new PropertyChangedEventArgs(nameof(ProjectStub.ComPortModes)));
        }
        private ComPortsViewModel SetUpBumbleBeeTest()
        {
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(BumblebeeComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(BumblebeeComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            return SetUpViewModel();
        }
        private ComPortsViewModel SetUpExterTrinityTest()
        {
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(ExterTrinityComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(ExterTrinityComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            return SetUpViewModel();
        private ComPortsViewModel SetUpQTermTest()
        {
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(QTermComPorts);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(QTermComPorts);
            SetupTargetMock();
            return SetUpViewModel();
        }
        private ComPortsViewModel SetUpGalvatronTest()
        {
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(GalvatronComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(GalvatronComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            return SetUpViewModel();
        }
        private ComPortsViewModel SetUpExtremeTest()
        {
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(ExtremeComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(ExtremeComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            return SetUpViewModel();
        }
        private ComPortsViewModel SetupTxF3Test()
        {
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(TxF3ComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(TxF3ComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            return SetUpViewModel();
        }
        private ComPortsViewModel SetupTxF3ExtTest()
        {
            TerminalFake = MockRepository.GenerateStub<ITerminal>();
            TerminalFake.Stub(inv => inv.ComPortModes).Return(TxF3ExtComPorts);
            TerminalFake.Stub(inv => inv.TerminalGroup).Return(TerminalGroup.Default);
            TerminalFake = Substitute.For<ITerminal>();
            TerminalFake.ComPortModes.Returns(TxF3ExtComPorts);
            TerminalFake.TerminalGroup.Returns(TerminalGroup.Default);
            SetupTargetMock();
            return SetUpViewModel();
        }
            TargetInfo = new TargetInfo();
            TargetInfo.TerminalDescription = TerminalFake;
            TargetServiceStub = MockRepository.GenerateMock<ITargetService>();
            TargetServiceStub.Stub(x => x.CurrentTargetInfo).Return(TargetInfo);
            TargetServiceStub = Substitute.For<ITargetService>();
            TargetServiceStub.CurrentTargetInfo.Returns(TargetInfo);
            TestHelper.AddService(TargetServiceStub);
        }

RibbonViewModelTestBase.cs
-10
+8
/Controls/ControlsTest/ControlsIde/Ribbon/RibbonViewModelTestBase.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Commands;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.ControlsIde.Ribbon
{
        protected virtual void Setup()
        {
            PackUriHelper.Create(new Uri("reliable://0"));
            GlobalCommandServiceStub = MockRepository.GenerateMock<IGlobalCommandService>();
            GlobalSelectionServiceStub = MockRepository.GenerateMock<IGlobalSelectionService>();
            TargetServiceStub = MockRepository.GenerateMock<ITargetService>();
            ProjectManagerStub = MockRepository.GenerateMock<IProjectManager>();
            ScreenCacheSetupServiceStub = MockRepository.GenerateStub<IScreenCacheSetupService>();
            GlobalCommandServiceStub = Substitute.For<IGlobalCommandService>();
            GlobalSelectionServiceStub = Substitute.For<IGlobalSelectionService>();
            TargetServiceStub = Substitute.For<ITargetService>();
            ProjectManagerStub = Substitute.For<IProjectManager>();
            ScreenCacheSetupServiceStub = Substitute.For<IScreenCacheSetupService>();
            TestHelper.ClearServices();
            TestHelper.AddService(GlobalCommandServiceStub);
        protected void AssertSetPropertyInCommandServiceWasCalled<TTypeOfPropertyValue>(string propertyName, TTypeOfPropertyValue propertyValue, string undoDescription)
        {
            GlobalCommandServiceStub.AssertWasCalled(x => x.SetProperty(propertyName, propertyValue,
                undoDescription));
            GlobalCommandServiceStub.Received().SetProperty(propertyName, propertyValue, undoDescription);
        }
        protected void AssertSetPropertyInCommandServiceWasNotCalled<TTypeOfPropertyValue>(string propertyName, TTypeOfPropertyValue propertyValue, string undoDescription)
        {
            GlobalCommandServiceStub.AssertWasNotCalled(x => x.SetProperty(propertyName, propertyValue,
                undoDescription));
            GlobalCommandServiceStub.DidNotReceive().SetProperty(propertyName, propertyValue, undoDescription);
        }
        protected IGlobalCommandService RealGlobalCommandService

BindingSourceDescriptionRepresentationBuilderTest.cs
+3
/Controls/ControlsTest/DataItemBrowseControl/Builders/BindingSourceDescriptionRepresentationBuilderTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using System.Linq;
using Core.Controls.Api.Bindings.DataSources;
#endregion
    }
}
#endif

HierarchyParserTest.cs
+3
/Controls/ControlsTest/DataItemBrowseControl/Builders/HierarchyParserTest.cs
#if!VNEXT_TARGET
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
        }
    }
}
#endif

AddNewTagViewModelTest.cs
-43
+72
/Controls/ControlsTest/DataItemBrowseControl/ViewModels/AddNewTagViewModelTest.cs
#if!VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interop.DataSource;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.DataItemBrowseControl.ViewModels
{
        [SetUp]
        public void SetUp()
        {
            m_GlobalController = MockRepository.GenerateMock<IGlobalController, ISubItems>();
            m_GlobalController = Substitute.For<IGlobalController, ISubItems>();
            m_GlobalController.Name = StringConstants.Tags;
            (m_GlobalController as ISubItems).Stub(inv => inv.Items).Return(new List<object>());
            (m_GlobalController as ISubItems).Items.Returns(new List<object>());
            m_ControllerOneDataSource = MockRepository.GenerateStub<IDataItemDataSource>();
            m_ControllerOneDataSource = Substitute.For<IDataItemDataSource>();
            m_ControllerOne = MockRepository.GenerateStub<IDataSourceContainer>();
            m_ControllerOne = Substitute.For<IDataSourceContainer>();
            m_ControllerOne.Name = "Controller1";
            m_ControllerOne.Stub(x => x.DataSource).Return(m_ControllerOneDataSource);
            m_ControllerOne.DataSource.Returns(m_ControllerOneDataSource);
            m_OpcClientServiceStub = MockRepository.GenerateStub<IOpcClientServiceIde>();
            m_OpcClientServiceStub.Stub(x => x.GlobalController).Return(m_GlobalController);
            m_OpcClientServiceStub.Stub(x => x.Controllers).Return(new ExtendedBindingList<IDataSourceContainer>() { m_ControllerOne });
            m_OpcClientServiceStub = Substitute.For<IOpcClientServiceIde>();
            m_OpcClientServiceStub.GlobalController.Returns(m_GlobalController);
            m_OpcClientServiceStub.Controllers.Returns(new ExtendedBindingList<IDataSourceContainer>() { m_ControllerOne });
            m_ProtectableItemServiceStub = MockRepository.GenerateStub<IProtectableItemServiceIde>();
            m_ProtectableItemServiceStub.Stub(x => x.IsVisible(Arg<IProtectableItem>.Is.Anything)).Return(true);
            m_ProtectableItemServiceStub = Substitute.For<IProtectableItemServiceIde>();
            m_ProtectableItemServiceStub.IsVisible(Arg.Any<IProtectableItem>()).Returns(true);
            m_ProjectNameCreationServiceStub = MockRepository.GenerateStub<IMultiNameCreationService>();
            m_ProjectNameCreationServiceStub = Substitute.For<IMultiNameCreationService>();
            ServiceContainerCF.Instance.AddService<INameCreationService>(m_ProjectNameCreationServiceStub);
            ServiceContainerCF.Instance.AddService<IProjectNameCreationServiceIde>(m_ProjectNameCreationServiceStub);
        [Test]
        public void InitalizeWithEmptyNameResultsInDefaultNameWhenNoTagsExist()
        {
            m_GlobalController.Stub(x => x.DataItemBases).Return(new ReadOnlyCollection<IDataItemBase>(new List<IDataItemBase>()));
            m_ProjectNameCreationServiceStub.Stub<IProjectNameCreationServiceIde>(x => x.CreateUniqueName(Arg<string>.Is.Anything, Arg<ISubItems>.Is.Anything)).Return(AddNewTagViewModel.DefaultTagName);
            m_GlobalController.DataItemBases.Returns(new ReadOnlyCollection<IDataItemBase>(new List<IDataItemBase>()));
            m_ProjectNameCreationServiceStub.CreateUniqueName(Arg.Any<string>(), Arg.Any<ISubItems>())
                .Returns(AddNewTagViewModel.DefaultTagName);
            m_AddNewTagViewModel.InitializeName(string.Empty);
        [Test]
        public void InitalizeWithEmptyNameResultsInNextAvailableNameWhenTagsExist()
        {
            var dataItem = MockRepository.GenerateStub<IDataItemBase>();
            var dataItem = Substitute.For<IDataItemBase>();
            dataItem.Name = "MyTag1";
            m_GlobalController.Stub(x => x.DataItemBases).Return(new ReadOnlyCollection<IDataItemBase>(new List<IDataItemBase>() { dataItem }));
            m_ProjectNameCreationServiceStub.Stub(x => x.CreateUniqueName(Arg<string>.Is.Equal("MyTag1"), Arg<ISubItems>.Is.Anything)).Return("MyTag2");
            m_GlobalController.DataItemBases.Returns(new ReadOnlyCollection<IDataItemBase>(new List<IDataItemBase>() { dataItem }));
            m_ProjectNameCreationServiceStub.CreateUniqueName(Arg.Is("MyTag1"), Arg.Any<ISubItems>()).Returns("MyTag2");
            m_AddNewTagViewModel.InitializeName(string.Empty);
        [Test]
        public void SettingNameToEmptyResultsInValidationError()
        {
            m_ProjectNameCreationServiceStub.Stub(x => x.IsValidName(string.Empty)).Return(false);
            m_ProjectNameCreationServiceStub.IsValidName(string.Empty).Returns(false);
            m_AddNewTagViewModel.Name = string.Empty;
        [Test]
        public void SettingNameToInvalidNameResultsInValidationError()
        {
            m_ProjectNameCreationServiceStub.Stub(x => x.IsValidName("My Tag")).Return(false);
            m_ProjectNameCreationServiceStub.IsValidName("My Tag").Returns(false);
            m_AddNewTagViewModel.Name = "My Tag";
        public void SettingNameToValidAvailableNameResultsInNoValidationError()
        {
            string name = "MyTag";
            m_ProjectNameCreationServiceStub.Stub(x => x.IsValidName(name)).Return(true);
            m_ProjectNameCreationServiceStub.IsValidName(name).Returns(true);
            m_ProjectNameCreationServiceStub.Stub(x => x.IsUniqueAndValidName(
                                                    Arg<string>.Is.Equal(name),
                                                    Arg<ISubItems>.Is.Anything,
                                                    ref Arg<string>.Ref(Rhino.Mocks.Constraints.Is.Anything(), string.Empty).Dummy)).Return(true);
            m_ProjectNameCreationServiceStub.IsUniqueAndValidName(Arg.Is(name), Arg.Any<ISubItems>(), ref Arg.Any<string>())
                .Returns(x => {
                    x[2] = string.Empty; 
                    return true; 
                });
            m_AddNewTagViewModel.Name = name;
        public void SettingNameToValidUnavailableNameResultsInValidationError()
        {
            string name = "MyTag1";
            m_ProjectNameCreationServiceStub.Stub(x => x.IsValidName(name)).Return(true);
            m_ProjectNameCreationServiceStub.IsValidName(name).Returns(true);
            m_ProjectNameCreationServiceStub.Stub(x => x.IsUniqueAndValidName(
                                                    Arg<string>.Is.Equal(name),
                                                    Arg<ISubItems>.Is.Anything,
                                                    ref Arg<string>.Ref(Rhino.Mocks.Constraints.Is.Anything(), string.Empty).Dummy)).Return(false);
            m_ProjectNameCreationServiceStub.IsUniqueAndValidName(Arg.Is(name), Arg.Any<ISubItems>(), ref Arg.Any<string>())
                .Returns(x => {
                    x[2] = string.Empty;
                    return false;
                });
            m_AddNewTagViewModel.Name = name;
            m_AddNewTagViewModel.SelectedController = m_AddNewTagViewModel.Controllers.LastOrDefault();
            string newName = "D0";
            m_ProjectNameCreationServiceStub.Stub(x => x.RemoveIllegalCharactersInName(newName)).Return(newName);
            m_ProjectNameCreationServiceStub.RemoveIllegalCharactersInName(newName).Returns(newName);
            m_ControllerOne.Stub(x => x.ValidateAddress(Arg<string>.Is.Equal(newName), out Arg<string>.Out(newName).Dummy)).Return(true);
            m_ControllerOne.ValidateAddress(Arg.Is(newName), out Arg.Any<string>())
                .Returns(x => {
                    x[1] = newName;
                    return true;
                });
            m_AddNewTagViewModel.Name = newName;
            string newInvalidName = " D0 ";
            string newValidName = "D0";
            m_ProjectNameCreationServiceStub.Stub(x => x.RemoveIllegalCharactersInName(newInvalidName)).Return(newValidName);
            m_ProjectNameCreationServiceStub.RemoveIllegalCharactersInName(newInvalidName).Returns(newValidName);
            m_ControllerOne.Stub(x => x.ValidateAddress(Arg<string>.Is.Equal(newValidName), out Arg<string>.Out(newValidName).Dummy)).Return(true);
            m_ControllerOne.ValidateAddress(Arg.Is(newValidName), out Arg.Any<string>())
                .Returns(x => {
                    x[1] = newValidName;
                    return true;
                });
            m_AddNewTagViewModel.Name = newInvalidName;
            m_AddNewTagViewModel.SelectedController = m_AddNewTagViewModel.Controllers.LastOrDefault();
            string newName = "MyTag";
            m_ProjectNameCreationServiceStub.Stub(x => x.RemoveIllegalCharactersInName(newName)).Return(newName);
            m_ProjectNameCreationServiceStub.RemoveIllegalCharactersInName(newName).Returns(newName);
            m_ControllerOne.Stub(x => x.ValidateAddress(Arg<string>.Is.Equal(newName), out Arg<string>.Out(newName).Dummy)).Return(false);
            m_ControllerOne.ValidateAddress(Arg.Is(newName), out Arg.Any<string>())
                .Returns(x => {
                    x[1] = newName;
                    return false;
                });
            m_AddNewTagViewModel.Name = newName;
            string newName = "d0";
            string correctedAddress = "D0";
            m_ProjectNameCreationServiceStub.Stub(x => x.RemoveIllegalCharactersInName(newName)).Return(newName);
            m_ProjectNameCreationServiceStub.RemoveIllegalCharactersInName(newName).Returns(newName);
            m_ControllerOne.Stub(x => x.ValidateAddress(Arg<string>.Is.Equal(newName), out Arg<string>.Out(correctedAddress).Dummy)).Return(true);
            m_ControllerOne.ValidateAddress(Arg.Is(newName), out Arg.Any<string>())
                .Returns(x => {
                    x[1] = correctedAddress;
                    return true;
                });
            m_AddNewTagViewModel.Name = newName;
            m_AddNewTagViewModel.SelectedController = m_AddNewTagViewModel.Controllers.Last();
            string newAddress = string.Empty;
            m_ControllerOne.Stub(x => x.ValidateAddress(newAddress)).Return(true);
            m_ControllerOne.ValidateAddress(newAddress).Returns(true);
            m_AddNewTagViewModel.Address = newAddress;
            m_AddNewTagViewModel.SelectedController = m_AddNewTagViewModel.Controllers.Last();
            string newAddress = "MyAddress";
            m_ProjectNameCreationServiceStub.Stub(x => x.IsValidName(newAddress)).Return(false);
            m_ProjectNameCreationServiceStub.IsValidName(newAddress).Returns(false);
            m_AddNewTagViewModel.Address = newAddress;
            m_AddNewTagViewModel.SelectedController = m_AddNewTagViewModel.Controllers.Last();
            string newAddress = "D0";
            m_ControllerOne.Stub(x => x.ValidateAddress(newAddress)).Return(true);
            m_ControllerOneDataSource.Stub(x => x.GetDefaultDataType(Arg<string>.Is.Equal(newAddress), out Arg<BEDATATYPE>.Out(BEDATATYPE.DT_INTEGER2).Dummy)).Return(true);
            m_ControllerOne.ValidateAddress(newAddress).Returns(true);
            m_ControllerOneDataSource.GetDefaultDataType(Arg.Is(newAddress), out Arg.Any<BEDATATYPE>())
                .Returns(x => {
                    x[1] = BEDATATYPE.DT_INTEGER2;
                    return true;
                });
            m_AddNewTagViewModel.Address = newAddress;
            m_AddNewTagViewModel.SelectedDataType = m_AddNewTagViewModel.DataTypes.First();
            string newAddress = "MyTag";
            m_ControllerOne.Stub(x => x.ValidateAddress(newAddress)).Return(false);
            m_ControllerOneDataSource.Stub(x => x.GetDefaultDataType(Arg<string>.Is.Equal(newAddress), out Arg<BEDATATYPE>.Out(BEDATATYPE.DT_INTEGER2).Dummy)).Return(true);
            m_ControllerOne.ValidateAddress(newAddress).Returns(false);
            m_ControllerOneDataSource.GetDefaultDataType(Arg.Is(newAddress), out Arg.Any<BEDATATYPE>())
                .Returns(x => {
                    x[1] = BEDATATYPE.DT_INTEGER2;
                    return true;
                });
            m_AddNewTagViewModel.Address = newAddress;
        }
    }
}
#endif

BindingSourceDescriptionViewModelBaseComparerTest.cs
/Controls/ControlsTest/DataItemBrowseControl/BindingSourceDescriptionViewModelBaseComparerTest.cs

BindingSourceDescriptionViewModelTest.cs
/Controls/ControlsTest/DataItemBrowseControl/BindingSourceDescriptionViewModelTest.cs

CommittingDataSourceSelectorViewModelTest.cs
/Controls/ControlsTest/DataItemBrowseControl/CommittingDataSourceSelectorViewModelTest.cs

DataSourceSelectorDropDownViewModelTest.cs
-8
+7
/Controls/ControlsTest/DataItemBrowseControl/DataSourceSelectorDropDownViewModelTest.cs
#if!VNEXT_TARGET
using System.Collections.ObjectModel;
using System.Linq;
using Core.Controls.Api.Bindings.DataSources;
using Neo.ApplicationFramework.TestUtilities.Utilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.DataItemBrowseControl
{
            m_BindingSourceDescription = new BindingSourceDescription("Binding source description name", null, null, false);
            // Setup IDataSource
            m_DataSource = MockRepository.GenerateStub<IDataSource>();
            m_DataSource
                .Stub(ds => ds.Name)
                .Return("Data source name");
            m_DataSource = Substitute.For<IDataSource>();
            m_DataSource.Name.Returns("Data source name");
            m_DataSource
                .Stub(ds => ds.Items)
                .Return(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource.Items.Returns(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
        }
        [Test]
        }
    }
}
#endif

DataSourceSelectorViewModelBaseTest.cs
-63
+26
/Controls/ControlsTest/DataItemBrowseControl/DataSourceSelectorViewModelBaseTest.cs
#if!VNEXT_TARGET
using System;
using System.Collections;
using System.Collections.ObjectModel;
using Neo.ApplicationFramework.Controls.Commands;
using Neo.ApplicationFramework.Controls.DataItemBrowseControl.DataSourcesObservers;
using Neo.ApplicationFramework.TestUtilities.Utilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.DataItemBrowseControl
{
            // Setup data source
            IDataSource dataSource = CreateDataSource("Data source");
            dataSource
                .Stub(ds => ds.Items)
                .Return(new ObservableCollection<BindingSourceDescription> { bindingSourceDescription })
                .Repeat.Any();
            dataSource.Items.Returns(new ObservableCollection<BindingSourceDescription> { bindingSourceDescription });
            // Setup binding service
            m_DataSourcesObserver = MockRepository.GenerateStub<IDataSourcesObserver>();
            m_DataSourcesObserver
                .Expect(bs => bs.DataSources)
                .Return(new[] { dataSource });
            m_DataSourcesObserver = Substitute.For<IDataSourcesObserver>();
            m_DataSourcesObserver.DataSources.Returns(new[] { dataSource });
            // Setup data command facade
            m_DataCommandFacade = MockRepository.GenerateStub<IDataCommandFacade>();
            m_DataCommandFacade = Substitute.For<IDataCommandFacade>();
            // Setup structured binding support service
            m_StructuredBindingSupportService = MockRepository.GenerateStub<IStructuredBindingSupportService>();
            m_StructuredBindingSupportService = Substitute.For<IStructuredBindingSupportService>();
        }
        [Test]
            IDataSource firstDataSource = CreateDataSource("First data source");
            var bindingSourceDescription = CreateBindingSourceDescription("Binding source description on first data source");
            firstDataSource
                .Stub(ds => ds.Items)
                .Return(new ObservableCollection<BindingSourceDescription> { bindingSourceDescription });
            firstDataSource.Items.Returns(new ObservableCollection<BindingSourceDescription> { bindingSourceDescription });
            // Setup second data source
            IDataSource secondDataSource = CreateDataSource("Second data source");
            var secondBindingSourceDescription = CreateBindingSourceDescription("Binding source description on second data source");
            secondDataSource
                .Stub(ds => ds.Items)
                .Return(new ObservableCollection<BindingSourceDescription> { secondBindingSourceDescription });
            secondDataSource.Items.Returns(new ObservableCollection<BindingSourceDescription> { secondBindingSourceDescription });
            // Setup binding service
            m_DataSourcesObserver
                .Expect(bs => bs.DataSources)
                .Return(new[] { firstDataSource, secondDataSource }).Repeat.Any();
            m_DataSourcesObserver.DataSources.Returns(new[] { firstDataSource, secondDataSource });
            // ACT
            m_DataSourcesObserver.Raise(bs => bs.DataSourcesUpdated += null, m_DataSourcesObserver, EventArgs.Empty);
            Raise.Event();
            // ASSERT
            Assert.That(viewModel.BindingSourceDescriptions.Count, Is.EqualTo(2));
            DataSourceSelectorViewModelBaseImpl viewModel = CreateDataSourceSelectorViewModelBaseImpl(true);
            m_DataCommandFacade
                .Expect(dcf => dcf.GetBindingSourceDescription(null, null)).IgnoreArguments()
                .Return(new BindingSourceDescription());
            m_DataCommandFacade.GetBindingSourceDescription(Arg.Any<object>(), Arg.Any<string>()).Returns(new BindingSourceDescription());
            viewModel.UpdateTargets(targets, targets[0]);
            DataSourceSelectorViewModelBaseImpl viewModel = CreateDataSourceSelectorViewModelBaseImpl(true);
            m_DataCommandFacade
                .Expect(dcf => dcf.GetBindingSourceDescription(null, null)).IgnoreArguments()
                .Return(new BindingSourceDescription());
            m_DataCommandFacade.GetBindingSourceDescription(Arg.Any<object>(), Arg.Any<string>()).Returns(new BindingSourceDescription());
            viewModel.UpdateTargets(targets, targets[0]);
            DataSourceSelectorViewModelBaseImpl viewModel = CreateDataSourceSelectorViewModelBaseImpl(true);
            m_DataCommandFacade
                .Expect(dcf => dcf.GetBindingSourceDescription(null, null)).IgnoreArguments()
                .Return(new BindingSourceDescription());
            m_DataCommandFacade.GetBindingSourceDescription(Arg.Any<object>(), Arg.Any<string>()).Returns(new BindingSourceDescription());
            viewModel.UpdateTargets(targets, targets[0]);
            IDataSource dataSource = CreateDataSource("Data source");
            var bindingSourceDescription = CreateBindingSourceDescription("Binding source description");
            dataSource
                .Expect(ds => ds.IsDefault)
                .Return(false)
                .Repeat.Any();
            dataSource.IsDefault.Returns(false);
            dataSource
                .Expect(ds => ds.Items)
                .Return(new ObservableCollection<BindingSourceDescription> { bindingSourceDescription })
                .Repeat.Any();
            dataSource.Items.Returns(new ObservableCollection<BindingSourceDescription> { bindingSourceDescription });
            // Setup binding service
            m_DataSourcesObserver
                .Expect(bs => bs.DataSources)
                .Return(new[] { dataSource })
                .Repeat.Any();
            m_DataSourcesObserver.DataSources.Returns(new[] { dataSource });
            // Populate class with data sources
            m_DataSourcesObserver.Raise(bs => bs.DataSourcesUpdated += null, m_DataSourcesObserver, EventArgs.Empty);
            Raise.Event();
            // ACT
            bool canBindUsingText = viewModel.EnterKeyCommand.CanExecute(null);
            // ASSERT
            Assert.That(canBindUsingText, Is.False);
            dataSource.VerifyAllExpectations();
        }
        [Test]
            IDataSource dataSource = CreateDataSource("Data source");
            var bindingSourceDescription = CreateBindingSourceDescription("Binding source description");
            dataSource
                .Expect(ds => ds.IsDefault)
                .Return(true)
                .Repeat.Any();
            dataSource.IsDefault.Returns(true);
            dataSource
                .Expect(ds => ds.Items)
                .Return(new ObservableCollection<BindingSourceDescription> { bindingSourceDescription })
                .Repeat.Any();
            dataSource.Items.Returns(new ObservableCollection<BindingSourceDescription> { bindingSourceDescription });
            // Setup binding service
            m_DataSourcesObserver
                .Expect(bs => bs.DataSources)
                .Return(new[] { dataSource })
                .Repeat.Any();
            m_DataSourcesObserver.DataSources.Returns(new[] { dataSource });
            // Populate class with data sources
            m_DataSourcesObserver.Raise(bs => bs.DataSourcesUpdated += null, m_DataSourcesObserver, EventArgs.Empty);
            Raise.Event();
            // ACT
            bool canBindUsingText = viewModel.EnterKeyCommand.CanExecute(null);
            // ASSERT
            Assert.That(canBindUsingText, Is.True);
            dataSource.VerifyAllExpectations();
        }
        #region Helper methods and classes
        private static IDataSource CreateDataSource(string name)
        {
            var dataSource = MockRepository.GenerateStub<IDataSource>();
            var dataSource = Substitute.For<IDataSource>();
            dataSource
                .Stub(ds => ds.Name)
                .Return(name)
                .Repeat.Any();
            dataSource.Name.Returns(name);
            return dataSource;
        }
        #endregion
    }
}
#endif

DataSourceViewModelTest.cs
-57
+26
/Controls/ControlsTest/DataItemBrowseControl/DataSourceViewModelTest.cs
#if!VNEXT_TARGET
using System.Collections.ObjectModel;
using System.Threading;
using System.Windows;
using Core.Controls.Api.Bindings.DataSources;
using Neo.ApplicationFramework.Controls.DataItemBrowseControl.Builders;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.DataItemBrowseControl
{
            m_BindingSourceDescription = CreateBindingSourceDescription("Binding source description");
            // Setup data source
            m_DataSource = MockRepository.GenerateMock<IDataSource>();
            m_DataSource = Substitute.For<IDataSource>();
            m_DataSource
                .Stub(ds => ds.Items)
                .Return(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource.Items.Returns(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource
                .Stub(ds => ds.Name)
                .Return("Data source");
            m_DataSource.Name.Returns("Data source");
        }
        [Test]
            // ASSERT
            Assert.That(name, Is.EqualTo("Data source"));
            m_DataSource.VerifyAllExpectations();
        }
        [Test]
        public void AddButtonVisibility_Visible()
        {
            // ARRANGE
            m_DataSource
                .Expect(ds => ds.IsAddSupported)
                .Return(true);
            m_DataSource.IsAddSupported.Returns(true);
            var viewModel = CreateDataSourceViewModel();
            viewModel.UpdateDataSource(m_DataSource, null);
            // ASSERT
            Assert.That(addButtonVisibility, Is.EqualTo(Visibility.Visible));
            m_DataSource.VerifyAllExpectations();
        }
        [Test]
        public void AddButtonVisibility_CollapsedDueToDataSource()
        {
            // ARRANGE
            m_DataSource
                .Stub(ds => ds.IsAddSupported)
                .Return(false);
            m_DataSource.IsAddSupported.Returns(false);
            var viewModel = CreateDataSourceViewModel();
            viewModel.UpdateDataSource(m_DataSource, null);
        public void AddButtonVisibility_CollapsedDueToViewModelConfiguration()
        {
            // ARRANGE
            m_DataSource
                .Stub(ds => ds.IsAddSupported)
                .Return(true);
            m_DataSource.IsAddSupported.Returns(true);
            var viewModel = CreateDataSourceViewModel();
            viewModel.UpdateDataSource(m_DataSource, null);
        public void AddIsSupported()
        {
            // ARRANGE
            m_DataSource
                .Stub(ds => ds.IsAddSupported)
                .Return(true);
            m_DataSource.IsAddSupported.Returns(true);
            var viewModel = CreateDataSourceViewModel();
            viewModel.UpdateDataSource(m_DataSource, null);
            m_BindingSourceDescription = CreateBindingSourceDescription("Saw1.BeepNumber");
            // Setup data source
            m_DataSource = MockRepository.GenerateMock<IDataSource>();
            m_DataSource = Substitute.For<IDataSource>();
            m_DataSource
                .Stub(ds => ds.Items)
                .Return(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource.Items.Returns(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource
                .Stub(ds => ds.Name)
                .Return("Data source");
            m_DataSource.Name.Returns("Data source");
            var viewModel = CreateDataSourceViewModel();
            viewModel.UpdateDataSource(m_DataSource, null);
            m_BindingSourceDescription = CreateBindingSourceDescription("Saw1.BeepNumber");
            // Setup data source
            m_DataSource = MockRepository.GenerateMock<IDataSource>();
            m_DataSource = Substitute.For<IDataSource>();
            m_DataSource
                .Stub(ds => ds.Items)
                .Return(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource.Items.Returns(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource
                .Stub(ds => ds.Name)
                .Return("Data source");
            m_DataSource.Name.Returns("Data source");
            var viewModel = CreateDataSourceViewModel();
            viewModel.UpdateDataSource(m_DataSource, null);
            m_BindingSourceDescription = CreateBindingSourceDescription("Saw1.BeepNumber");
            // Setup data source
            m_DataSource = MockRepository.GenerateMock<IDataSource>();
            m_DataSource = Substitute.For<IDataSource>();
            m_DataSource
                .Stub(ds => ds.Items)
                .Return(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource.Items.Returns(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource
                .Stub(ds => ds.Name)
                .Return("Data source");
            m_DataSource.Name.Returns("Data source");
            var viewModel = CreateDataSourceViewModel();
            viewModel.UpdateDataSource(m_DataSource, null);
            m_BindingSourceDescription = CreateBindingSourceDescription("Tag1");
            // Setup data source
            m_DataSource = MockRepository.GenerateMock<IDataSource>();
            m_DataSource = Substitute.For<IDataSource>();
            m_DataSource
                .Stub(ds => ds.Items)
                .Return(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource.Items.Returns(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource
                .Expect(ds => ds.Name)
                .Return("Data source");
            m_DataSource.Name.Returns("Data source");
            var viewModel = CreateDataSourceViewModel();
            viewModel.UpdateDataSource(m_DataSource, null);
            m_BindingSourceDescription = CreateBindingSourceDescription("Saw1.BeepNumber");
            // Setup data source
            m_DataSource = MockRepository.GenerateMock<IDataSource>();
            m_DataSource = Substitute.For<IDataSource>();
            m_DataSource
                .Stub(ds => ds.Items)
                .Return(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource.Items.Returns(new ObservableCollection<BindingSourceDescription> { m_BindingSourceDescription });
            m_DataSource
                .Stub(ds => ds.Name)
                .Return("Data source");
            m_DataSource.Name.Returns("Data source");
            var viewModel1 = CreateDataSourceViewModel();
            viewModel1.UpdateDataSource(m_DataSource, null);
        #endregion
    }
}
#endif

HierarchicalBindingSourceDescriptionViewModelTest.cs
-7
+10
/Controls/ControlsTest/DataItemBrowseControl/HierarchicalBindingSourceDescriptionViewModelTest.cs
#if!VNEXT_TARGET
using Core.Controls.Api.Bindings.DataSources;
using Neo.ApplicationFramework.Common.Behaviors;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.DataItemBrowseControl
{
        public void Name_2()
        {
            // ARRANGE
            var parent = MockRepository.GenerateStub<ITreeViewItem>();
            var parent = Substitute.For<ITreeViewItem>();
            var viewModel = new HierarchicalBindingSourceDescriptionViewModel("Binding source name", parent);
            // ASSERT
        public void Equals_SameInstance_2()
        {
            // ARRANGE
            var parent = MockRepository.GenerateStub<ITreeViewItem>();
            var parent = Substitute.For<ITreeViewItem>();
            var viewModel1 = new HierarchicalBindingSourceDescriptionViewModel("Binding source name", parent);
            var viewModel2 = viewModel1;
        public void Equals_FirstInstanceIsNull_2()
        {
            // ARRANGE
            var parent = MockRepository.GenerateStub<ITreeViewItem>();
            var parent = Substitute.For<ITreeViewItem>();
            HierarchicalBindingSourceDescriptionViewModel viewModel1 = null;
            var viewModel2 = new HierarchicalBindingSourceDescriptionViewModel("Binding source name", parent);
        public void Equals_SecondInstanceIsNull_2()
        {
            // ARRANGE
            var parent = MockRepository.GenerateStub<ITreeViewItem>();
            var parent = Substitute.For<ITreeViewItem>();
            var viewModel1 = new HierarchicalBindingSourceDescriptionViewModel("Binding source description", parent);
            HierarchicalBindingSourceDescriptionViewModel viewModel2 = null;
        public void Equals_SameFullName_2()
        {
            // ARRANGE
            var parent = MockRepository.GenerateStub<ITreeViewItem>();
            var parent = Substitute.For<ITreeViewItem>();
            var viewModel1 = new HierarchicalBindingSourceDescriptionViewModel("Binding source name", parent);
            var viewModel2 = new HierarchicalBindingSourceDescriptionViewModel("Binding source name", parent);
        [Test]
        public void Equals_WrongType_2()
        {
            var parent = MockRepository.GenerateStub<ITreeViewItem>();
            var parent = Substitute.For<ITreeViewItem>();
            var viewModel1 = new HierarchicalBindingSourceDescriptionViewModel("Binding source name", parent);
            var viewModel2 = new object();
        }
    }
}
#endif

InformationProgressManagerTest.cs
+2
/Controls/ControlsTest/Dialogs/InformationProgress/InformationProgressManagerTest.cs
#if!VNEXT_TARGET
using Neo.ApplicationFramework.Controls.Dialogs.InformationProgress;
using Neo.ApplicationFramework.Interfaces;
using NUnit.Framework;
        }
    }
}
#endif

TextIdDynamicsHelperTest.cs
/Controls/ControlsTest/Dynamics/TextIdDynamicsHelperTest.cs

AlarmViewerViewModelTest.cs
/Controls/ControlsTest/Logic/AlarmViewerViewModelTest.cs

AlphaNumericLogicTest.cs
/Controls/ControlsTest/Logic/AlphaNumericLogicTest.cs

CarouselMoveLogicTest.cs
/Controls/ControlsTest/NavigationControls/Carousel/CarouselMoveLogicTest.cs

AppearanceAdapterServiceTest.cs
/Controls/ControlsTest/PropertyAdapters/Appearance/AppearanceAdapterServiceTest.cs

AppearanceAdapterTest.cs
/Controls/ControlsTest/PropertyAdapters/Appearance/AppearanceAdapterTest.cs

AppearanceAdapterTestBase.cs
/Controls/ControlsTest/PropertyAdapters/Appearance/AppearanceAdapterTestBase.cs

FillInfoTest.cs
/Controls/ControlsTest/PropertyAdapters/Appearance/FillInfoTest.cs

ValidationViewModelTest.cs
-3
+5
/Controls/ControlsTest/Ribbon/Context/ViewModels/AnalogNumeric/ValidationViewModelTest.cs
#if !VNEXT_TARGET
using Neo.ApplicationFramework.Controls.Ribbon.Context.ViewModels.AnalogNumeric;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Logic
{
        [SetUp]
        public void Setup()
        {
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
            m_ValidationViewModel = new ValidationViewModel();
            m_CommandService = MockRepository.GenerateStub<IGlobalCommandService>();
            m_CommandService = Substitute.For<IGlobalCommandService>();
            m_ValidationViewModel.GlobalCommandService = m_CommandService;
        }
    }
}
#endif

ButtonPictureViewModelTest.cs
-4
+7
/Controls/ControlsTest/Ribbon/Context/ViewModels/Button/ButtonPictureViewModelTest.cs
#if !VNEXT_TARGET
using System.ComponentModel.Design;
using System.IO.Packaging;
using Neo.ApplicationFramework.Controls.Commands;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Ribbon.Context.ViewModels.Button
{
        public void SetUp()
        {
            var s = PackUriHelper.UriSchemePack;
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceMock<ISelectionService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ISelectionService>();
            m_DataCommandFacade = MockRepository.GenerateMock<IDataCommandFacade>();
            m_DataCommandFacade = Substitute.For<IDataCommandFacade>();
        }
        [TearDown]
        }
    }
}
#endif

AxisViewModelBaseTest.cs
-1
+3
/Controls/ControlsTest/Ribbon/Context/ViewModels/Chart/AxisViewModelBaseTest.cs
#if !VNEXT_TARGET
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NUnit.Framework;
        [SetUp]
        public void Setup()
        {
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
            TestHelper.AddServiceStub<IGlobalCommandService>();
            string s = System.IO.Packaging.PackUriHelper.UriSchemePack;
        }
    }
}
#endif

YAxisViewModelBaseTest.cs
-1
+3
/Controls/ControlsTest/Ribbon/Context/ViewModels/Chart/YAxisViewModelBaseTest.cs
#if !VNEXT_TARGET
using System.IO.Packaging;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
        {
            TestHelper.AddServiceStub<IGlobalCommandService>();
            string s = PackUriHelper.UriSchemePack;
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
            m_YAxisViewModelBase = new Y1AxisViewModel();
        }
        }
    }
}
#endif

PositionViewModelTest.cs
-14
+11
/Controls/ControlsTest/Ribbon/Context/ViewModels/PositionViewModelTest.cs
#if !VNEXT_TARGET
using System.IO.Packaging;
using Core.Api.Platform;
using Core.Api.ProjectTarget;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Ribbon.Context.ViewModels
{
        [SetUp]
        public void Setup()
        {
            m_TargetMock = MockRepository.GenerateMock<ITarget>();
            m_TargetMock = Substitute.For<ITarget>();
            
            m_TargetServiceMock = MockRepository.GenerateMock<ITargetService>();
            m_TargetServiceMock
                .Expect(targetServiceMock => targetServiceMock.CurrentTarget)
                .Return(m_TargetMock);
            m_TargetServiceMock = Substitute.For<ITargetService>();
            m_TargetServiceMock.CurrentTarget.Returns(m_TargetMock);
            
            m_GlobalCommandService = MockRepository.GenerateMock<IGlobalCommandService>();
            m_GlobalCommandService = Substitute.For<IGlobalCommandService>();
            TestHelper.AddService<ITargetService>(m_TargetServiceMock);
            TestHelper.AddService<IGlobalCommandService>(m_GlobalCommandService);
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
        }
        [Test]
        {
            var viewModel = new PositionViewModel();
            
            m_TargetMock
                .Expect(target => target.Id)
                .Return(TargetPlatform.Windows);
            m_TargetMock.Id.Returns(TargetPlatform.Windows);
            
            viewModel.XOne = 5.5;
            viewModel.YOne = 5.5;
        {
            var viewModel = new PositionViewModel();
            m_TargetMock
                .Expect(target => target.Id)
                .Return(TargetPlatform.WindowsCE);
            m_TargetMock.Id.Returns(TargetPlatform.WindowsCE);
            viewModel.XOne = 5.5;
            viewModel.YOne = 5.5;
        }
    }
}
#endif

SymbolPickerStateTest.cs
-17
+10
/Controls/ControlsTest/Ribbon/Context/ViewModels/SymbolPickerStateTest.cs
#if !VNEXT_TARGET
using System.ComponentModel.Design;
using Neo.ApplicationFramework.Controls.Symbol;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Ribbon.Context.ViewModels
{
        [SetUp]
        public void SetUp()
        {
            m_SelectionService = MockRepository.GenerateMock<ISelectionService>();
            m_SelectionService = Substitute.For<ISelectionService>();
            m_SymbolPickerState = new SymbolPickerState(m_SelectionService);
        }
        public void NoPrimarySelection()
        {
            // ARRANGE
            m_SelectionService
                .Stub(service => service.GetSelectedComponents())
                .Return(null);
            m_SelectionService.GetSelectedComponents().Returns(x => null);
            // ACT
            m_SymbolPickerState.Update();
        public void IsSupportingComponentLibrary()
        {
            // ARRANGE
            m_SelectionService
                .Stub(service => service.GetSelectedComponents())
                .Return(new [] {new IsSupportingComponentLibraryMock()});
            m_SelectionService.GetSelectedComponents().Returns(new [] { new IsSupportingComponentLibraryMock() });
            // ACT
            m_SymbolPickerState.Update();
        public void IsSupportingBrowseFile()
        {
            // ARRANGE
            m_SelectionService
                .Stub(service => service.GetSelectedComponents())
                .Return(new [] {new IsSupportingBrowseFileMock()});
            m_SelectionService.GetSelectedComponents().Returns(new [] { new IsSupportingBrowseFileMock() });
            // ACT
            m_SymbolPickerState.Update();
        public void IsSupportingClearSymbol()
        {
            // ARRANGE
            m_SelectionService
                .Stub(service => service.GetSelectedComponents())
                .Return(new [] {new IsSupportingClearSymbolMock()});
            m_SelectionService.GetSelectedComponents().Returns(new [] { new IsSupportingClearSymbolMock() });
            // ACT
            m_SymbolPickerState.Update();
        public void IsSupportingProjectPictures()
        {
            // ARRANGE
            m_SelectionService
                .Stub(service => service.GetSelectedComponents())
                .Return(new [] {new IsSupportingProjectPicturesMock()});
            m_SelectionService.GetSelectedComponents().Returns(new[] { new IsSupportingProjectPicturesMock() });
            // ACT
            m_SymbolPickerState.Update();
        #endregion
    }
}
#endif

KnownBrushConverterTest.cs
/Controls/ControlsTest/Ribbon/Styles/KnownBrushConverterTest.cs

RollerPanelHostBaseCFTest.cs
/Controls/ControlsTest/RollerPanel/RollerPanelHostBaseCFTest.cs

AliasConfigurationTest.cs
/Controls/ControlsTest/Screen/Alias/AliasConfigurationTest.cs

AliasDefinitionsTests.cs
/Controls/ControlsTest/Screen/Alias/AliasDefinitionsTests.cs

ScreenChangeEnterExitCriticalSectionTest.cs
/Controls/ControlsTest/Screen/ScreenChangeEnterExitCriticalSectionTest.cs

ScreenIndexerNamespaceTest.cs
/Controls/ControlsTest/Screen/ScreenIndexerNamespaceTest.cs

ComponentAdaptersTest.cs
-3
+5
/Controls/ControlsTest/Script/ComponentAdaptersTest.cs
using Neo.ApplicationFramework.Common.Graphics.Logic;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Script
{
        {
            TestHelper.UseTestWindowThreadHelper = true;
            m_ToolManager = TestHelper.CreateAndAddServiceMock<IToolManager>();
            m_ToolManager.Stub(x => x.Runtime).Return(true);
            m_ToolManager = TestHelper.CreateAndAddServiceStub<IToolManager>();
            m_ToolManager.Runtime.Returns(true);
        }
        [TearDown]
        #endregion
#if !VNEXT_TARGET
        #region ColorPropertiesBrowsableTest
        [Test]
        public void TestButtonColorPropertiesAreBrowsable()
            Assert.IsTrue(IsBrowsable(shapeAdapter, ElementsAdaptersTest.OutlineThicknessPropertyName), "Border thickness is not browsable");
        }
        #endregion
#endif
#region ButtonColorProperites
        [Test]

ElementsAdaptersTest.cs
-4
+6
/Controls/ControlsTest/Script/ElementsAdaptersTest.cs
#if !VNEXT_TARGET
using System;
using System.ComponentModel;
using System.Reflection;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.PropertyGrid;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls
{
            TypeDescriptor.AddProvider(m_WPFToCFTypeDescriptionProvider, typeof(object));
            m_ToolManager = TestHelper.CreateAndAddServiceStub<IToolManager>();
            m_ToolManager.Stub(x => x.Runtime).Return(true);
            m_ToolManager.Runtime.Returns(true);
            TestHelper.CreateAndAddServiceMock<IPropertyBinderFactory>();
            TestHelper.CreateAndAddServiceStub<IPropertyBinderFactory>();
            TestHelper.AddService<IObjectPropertyService>(new ObjectPropertyService());
            TestHelper.SetupServicePlatformFactory(MockRepository.GenerateStub<IKeyboardHelper>());
            TestHelper.SetupServicePlatformFactory(Substitute.For<IKeyboardHelper>());
            TestHelper.UseTestWindowThreadHelper = true;
        }
    }
}
#endif

MediaPlayerAdapterTest.cs
-13
+4
/Controls/ControlsTest/Script/MediaPlayerAdapterTest.cs
using Neo.ApplicationFramework.Controls.Media;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Script
{
    [TestFixture]
    public class MediaPlayerAdapterTest
    {
        private MockRepository m_Mocks = new MockRepository();
        [Test]
        public void SourceIsNullAfterSetFirstTime()
        {
        public void SourceIsNotSetWhenSettingSameAsAlreadySet()
        {
            string source = @"c:\SomeMovie.avi";
            MediaPlayer mediaPlayer = MockRepository.GenerateMock<MediaPlayer>();
            MediaPlayer mediaPlayer = Substitute.For<MediaPlayer>();
            MediaPlayerAdapter mediaPlayerAdapter = new MediaPlayerAdapter();
            mediaPlayerAdapter.AdaptedObject = mediaPlayer;
            //Set up getter to return same value as we are setting later
            mediaPlayer.Expect(x => x.Source)
                       .Return(source)
                       .Repeat.Any();
            //Setter
            mediaPlayer.Expect(x => x.Source = null)
                .IgnoreArguments()
                .Repeat.Never();
            mediaPlayer.Source.Returns(source);
            mediaPlayerAdapter.Source = source;
            mediaPlayer.VerifyAllExpectations();
            Assert.IsNotNull(mediaPlayer.Source);
        }
    }
}

ScreenAdapterTest.cs
-13
+11
/Controls/ControlsTest/Script/ScreenAdapterTest.cs
using System;
using Core.Api.DI.PlatformFactory;
using Core.Api.GlobalReference;
using Core.Api.Tools;
using Core.Api.Utilities;
using Neo.ApplicationFramework.Utilities;
using Neo.ApplicationFramework.Common.MessageFilter;
using Neo.ApplicationFramework.Common.Security;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Threading;
using Neo.ApplicationFramework.Utilities.Lazy;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Script
{
       
            var platformFactoryService = TestHelper.CreateAndAddServiceStub<IPlatformFactoryService>();
            TestHelper.AddService(typeof(INativeAPI), new NativeAPI());
            platformFactoryService.Stub(x => x.Create<DelayMouseInputMessageFilterBase>()).Return(new DelayMouseInputMessageFilter());
            platformFactoryService.Stub(x => x.Create<SecurityMessageFilterBase>()).Return(new SecurityMessageFilter());
            platformFactoryService.Create<DelayMouseInputMessageFilterBase>().Returns(new DelayMouseInputMessageFilter());
            platformFactoryService.Create<SecurityMessageFilterBase>().Returns(new SecurityMessageFilter());
            var securityService = TestHelper.CreateAndAddServiceStub<ISecurityServiceCF>();
            securityService.Stub(x => x.IsAccessGranted(null)).IgnoreArguments().Return(true);
            securityService.IsAccessGranted(Arg.Any<object>()).Returns(true);
            m_ToolManager = TestHelper.CreateAndAddServiceStub<IToolManager>();
            m_ScreenManager = TestHelper.CreateAndAddServiceStub<IScreenManager>();
            m_ScreenManager.Stub(manager => manager.CloseActiveScreen(null)).IgnoreArguments().WhenCalled(invocation => ((System.Windows.Forms.Form)invocation.Arguments[0]).Close());
            m_ScreenManager.Stub(manager => manager.StartupScreenHasBeenShown).Return(true);
            m_ScreenManager.WhenForAnyArgs(x => x.CloseActiveScreen(Arg.Any<IScreen>()))
                .Do(invocation => ((System.Windows.Forms.Form)invocation[0]).Close());
            m_ScreenManager.StartupScreenHasBeenShown.Returns(true);
            m_ToolManager.Stub(x => x.Runtime).Return(false);
            m_ToolManager.Runtime.Returns(false);
            m_Form = new Form(
                new LazyCF<IScopeService>(() => new ScopeServiceCF()), 
                new LazyWrapper<IGlobalReferenceService>(() => MockRepository.GenerateStub<IGlobalReferenceService>()), 
                new LazyWrapper<IGlobalReferenceService>(() => Substitute.For<IGlobalReferenceService>()), 
                false);
            m_ScreenManager.Stub(x => x.RegisterScreen(m_Form)).Return(true);
            m_ScreenManager.RegisterScreen(m_Form).Returns(true);
            m_ToolManager.Stub(x => x.Runtime).Return(true);
            m_ToolManager.Runtime.Returns(true);
            m_ScreenAdapter = new ScreenAdapter();
            m_ScreenAdapter.AdaptedObject = m_Form;

ScreenWindowAdapterTest.cs
-14
+10
/Controls/ControlsTest/Script/ScreenWindowAdapterTest.cs
using Core.Api.Tools;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Rhino.Mocks.Interfaces;
using Application = System.Windows.Forms.Application;
namespace Neo.ApplicationFramework.Controls.Script
            TestHelper.UseTestWindowThreadHelper = true;
            var toolManager = TestHelper.CreateAndAddServiceStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(true);
            toolManager.Runtime.Returns(true);
            m_Counter = 0;
            m_EventWasFired = false;
            m_Canvas = MockRepository.GenerateStub<Canvas>();
            m_ScreenWindow = MockRepository.GenerateStub<IScreenWindow>();
            m_ScreenWindow.Stub(x => x.Canvas).Return(m_Canvas);
            m_ScreenWindow.Stub(x => x.Name).Return(STR_TestScreen);
            m_Canvas = Substitute.For<Canvas>();
            m_ScreenWindow = Substitute.For<IScreenWindow>();
            m_ScreenWindow.Canvas.Returns(m_Canvas);
            m_ScreenWindow.Name.Returns(STR_TestScreen);
        }
        
        [Test]
            screenWindowAdapter.AdaptedObject = m_ScreenWindow;
            screenWindowAdapter.Closed += (sender, e) => m_EventWasFired = true;
            IEventRaiser eventRaiser = m_ScreenWindow.GetEventRaiser(x => x.Closed += null);
            eventRaiser.Raise(m_ScreenWindow, new EventArgs());
            Raise.Event();
            Assert.IsTrue(m_EventWasFired);
        }
            screenWindowAdapter.AdaptedObject = m_ScreenWindow;
            screenWindowAdapter.Closed += OnEventFired;
            IEventRaiser eventRaiser = m_ScreenWindow.GetEventRaiser(x => x.Closed += null);
            eventRaiser.Raise(m_ScreenWindow, new EventArgs());
            eventRaiser.Raise(m_ScreenWindow, new EventArgs());
            Raise.Event();
            Raise.Event();
            Assert.AreEqual(1, m_Counter);
        }
            screenWindowAdapter.AdaptedObject = m_ScreenWindow;
            
            screenWindowAdapter.Closing += (sender, e) => m_EventWasFired = true;
            IEventRaiser eventRaiser = m_ScreenWindow.GetEventRaiser(x => x.BeforeClosing += null);
            eventRaiser.Raise(m_ScreenWindow, new CancelEventArgs());
            Raise.EventWith(m_ScreenWindow, new CancelEventArgs());
            Assert.IsTrue(m_EventWasFired);
        }

AnimatedPictureCFTest.cs
-9
+9
/Controls/ControlsTest/Symbol/AnimatedPictureCFTest.cs
using System.Collections.Generic;
using Neo.ApplicationFramework.Common.Timers;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Symbol
{
        public void TickTest(int inputDelay, int outputDelay)
        {
            // ARRANGE
            ISymbolFrameInfo symbolFrameInfo = MockRepository.GenerateMock<ISymbolFrameInfo>();
            symbolFrameInfo.Stub(x => x.Delay).Return(new TimeSpan(0, 0, 0, 0, inputDelay));
            ISymbolFrameInfo symbolFrameInfo = Substitute.For<ISymbolFrameInfo>();
            symbolFrameInfo.Delay.Returns(new TimeSpan(0, 0, 0, 0, inputDelay));
            ISymbolInfoCF symbolInfoCF = MockRepository.GenerateMock<ISymbolInfoCF>();
            symbolInfoCF.Stub(x => x.Frames).Return(
            ISymbolInfoCF symbolInfoCF = Substitute.For<ISymbolInfoCF>();
            symbolInfoCF.Frames.Returns(
                new List<ISymbolFrameInfo>
                {
                    symbolFrameInfo
                });
            INativeBitmap nativeBitmap = MockRepository.GenerateMock<INativeBitmap>();
            nativeBitmap.Stub(x => x.Information).Return(symbolInfoCF);
            INativeBitmap nativeBitmap = Substitute.For<INativeBitmap>();
            nativeBitmap.Information.Returns(symbolInfoCF);
            var symbolService = MockRepository.GenerateMock<ISymbolServiceCF>();
            symbolService.Stub(x => x.GetAnimationSymbol("MockName")).Return(nativeBitmap);
            var symbolService = Substitute.For<ISymbolServiceCF>();
            symbolService.GetAnimationSymbol("MockName").Returns(nativeBitmap);
            var timer = new ManualTimer();

TagMonitorDataServiceCFTest.cs
-3
+3
/Controls/ControlsTest/TagMonitor/TagMonitorDataServiceCFTest.cs
using System.Collections.Generic;
using System.Linq;
using Neo.ApplicationFramework.Interfaces.TagMonitor;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.TagMonitor
{
        [SetUp]
        public void SetUp()
        {
            var fileHelper = MockRepository.GenerateMock<ITagMonitorDataFileHelper>();
            fileHelper.Stub(x => x.ReadTagMonitorTagsFromFile()).Return(new Dictionary<string, IList<string>>());
            var fileHelper = Substitute.For<ITagMonitorDataFileHelper>();
            fileHelper.ReadTagMonitorTagsFromFile().Returns(new Dictionary<string, IList<string>>());
            m_TagMonitorDataService = new TagMonitorDataServiceCF(fileHelper);
            m_TagMonitorDataService.AddTag(TagMonitor1, Tag1);
            m_TagMonitorDataService.AddTag(TagMonitor1, Tag2);

StyleCreatorTest.cs
+2
/Controls/ControlsTest/Template/StyleCreatorTest.cs
#if!VNEXT_TARGET
using System.Linq;
using Neo.ApplicationFramework.Controls.PropertyAdapters.Appearance;
using NUnit.Framework;
        }
    }
}
#endif

ColumnOrderComparerTest.cs
+3
/Controls/ControlsTest/TextIdBrowser/ColumnOrderComparerTest.cs
#if!VNEXT_TARGET
using System.Collections.Generic;
using System.ComponentModel;
using NUnit.Framework;
        }
    }
}
#endif

SelectFirstIfNoSelectedBehaviorTest.cs
+3
/Controls/ControlsTest/TextIdBrowser/SelectFirstIfNoSelectedBehaviorTest.cs
#if!VNEXT_TARGET
using System.Windows;
using Neo.ApplicationFramework.Controls.DataGrids;
using NUnit.Framework;
        }
    }
}
#endif

TextIdBrowserControlTest.cs
-63
+35
/Controls/ControlsTest/TextIdBrowser/TextIdBrowserControlTest.cs
#if!VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.ComponentModel.Design;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.Tools.UndoManager;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.TextIdBrowser
{
        [SetUp]
        public void TestFixtureSetUp()
        {
            m_SelectionService = MockRepository.GenerateMock<ISelectionService>();
            m_SelectionService = Substitute.For<ISelectionService>();
            // Setup project
            m_Project = MockRepository.GenerateStub<IProject>();
            m_Project = Substitute.For<IProject>();
            m_Project.VisibleLanguageColumns = new List<string>
            {
                TextsIde.DefaultText
            };
            // Setup languages
            var languageInfo1 = MockRepository.GenerateStub<ILanguageInfo>();
            var languageInfo1 = Substitute.For<ILanguageInfo>();
            languageInfo1.Name = "Language 1";
            var languageInfo2 = MockRepository.GenerateStub<ILanguageInfo>();
            var languageInfo2 = Substitute.For<ILanguageInfo>();
            languageInfo2.Name = "Language 2";
            // Setup multi language service
            m_MultiLanguageService = MockRepository.GenerateStub<IMultiLanguageService>();
            m_MultiLanguageService
                .Stub(service => service.Languages)
                .Return(new ExtendedBindingList<ILanguageInfo>
            m_MultiLanguageService = Substitute.For<IMultiLanguageService>();
            m_MultiLanguageService.Languages
                .Returns(new ExtendedBindingList<ILanguageInfo>
                    {
                        languageInfo1,
                        languageInfo2
                    });
            // Setup text id service
            m_TextIdService = MockRepository.GenerateStub<ITextIdService>();
            m_TextIdService
                .Stub(service => service.TextIDResourceItems)
                .Return(new[]
            m_TextIdService = Substitute.For<ITextIdService>();
            m_TextIdService.TextIDResourceItems
                .Returns(new[]
                    {
                       TextIdBrowserPopupViewModelTest.CreateTextIdResourceItem(1, 2)
                    });
            // Setup global reference service
            m_GlobalReferenceService = MockRepository.GenerateStub<IGlobalReferenceService>();
            m_GlobalReferenceService
                .Stub(service => service.GetObject<object>(null)).IgnoreArguments()
                .Return(new TextIdBrowserPopupViewModelTest.DependencyObjectStub());
            m_GlobalReferenceService = Substitute.For<IGlobalReferenceService>();
            m_GlobalReferenceService.GetObject<object>(Arg.Any<string>())
                .Returns(new TextIdBrowserPopupViewModelTest.DependencyObjectStub());
            // Set up binding service
            m_BindingService = MockRepository.GenerateStub<IBindingService>();
            m_BindingService = Substitute.For<IBindingService>();
        }
        [TearDown]
        public void TearDown()
        {
            m_SelectionService.BackToRecord();
            m_SelectionService.Replay();
        }
        [Test]
        {
            DependencyObject label = new Label();
            var designerResourceItem = MockRepository.GenerateStub<IDesignerResourceItem>();
            var designerResourceItem = Substitute.For<IDesignerResourceItem>();
            Binding resourceBinding = new Binding();
            resourceBinding.Path = new PropertyPath("CurrentValue");
        public void UndoIsRegisteredForMultiSelectedTextItemObjects()
        {
            //SETUP
            var label1 = MockRepository.GenerateMock<TestLabel>();
            var label1 = Substitute.For<TestLabel>();
            var label2 = new Label();
            var label3 = new Label();
            var selectedList = new List<Label>() { label1, label2, label3 };
            m_SelectionService.Stub(x => x.GetSelectedComponents())
                              .Return(selectedList);
            m_SelectionService.GetSelectedComponents().Returns(selectedList);
            var screenUndoService = MockRepository.GenerateMock<IScreenUndoService>();
            screenUndoService.Expect(x => x.OpenParentUndo(null))
                             .IgnoreArguments()
                             .Return(new ParentUndoUnit(UndoDescription, screenUndoService))
                             .Repeat.Once();
            screenUndoService.Expect(x => x.RegisterUndoUnit(null))
                             .IgnoreArguments()
                             .Repeat.Times(4);      //Once per selected item and once for the parent (3 + 1 = 4)
            screenUndoService.Expect(x => x.CloseParentUndo(null))
                             .IgnoreArguments()
                             .Repeat.Once();
            var screenUndoService = Substitute.For<IScreenUndoService>();
            screenUndoService.OpenParentUndo(Arg.Any<string>()).Returns(new ParentUndoUnit(UndoDescription, screenUndoService));
            label1.Stub(x => x.GetService(typeof(IScreenUndoService)))
                  .Return(screenUndoService);
            label1.GetService(typeof(IScreenUndoService)).Returns(screenUndoService);
            TextIdBrowserControl textIdBrowserControl = new TextIdBrowserControl(m_SelectionService.ToILazy())
            {
            textIdBrowserControl.RegisterUndoUnitsAndUpdateTexts();
            //ASERT
            screenUndoService.VerifyAllExpectations();
            screenUndoService.ReceivedWithAnyArgs().OpenParentUndo(Arg.Any<string>());
            screenUndoService.ReceivedWithAnyArgs(4).RegisterUndoUnit(Arg.Any<IUndoUnit>());
            screenUndoService.ReceivedWithAnyArgs(1).CloseParentUndo(Arg.Any<IParentUndoUnit>());
        }
        [Test]
        public void UndoIsRegisteredForMultiSelectedNonTextItemObjects()
        {
            //SETUP
            var analogNumeric1 = MockRepository.GenerateMock<TestAnalogNumericFX>();
            var analogNumeric1 = Substitute.For<TestAnalogNumericFX>();
            var analogNumeric2 = new AnalogNumericFX();
            var analogNumeric3 = new AnalogNumericFX();
            var selectedList = new List<AnalogNumericFX>() { analogNumeric1, analogNumeric2, analogNumeric3 };
            m_SelectionService.Stub(x => x.GetSelectedComponents())
                              .Return(selectedList);
            var screenUndoService = MockRepository.GenerateMock<IScreenUndoService>();
            screenUndoService.Expect(x => x.OpenParentUndo(null))
                             .IgnoreArguments()
                             .Return(new ParentUndoUnit(UndoDescription, screenUndoService))
                             .Repeat.Once();
            screenUndoService.Expect(x => x.CreatePropertyUndoUnit(null, string.Empty, string.Empty))
                             .IgnoreArguments()
                             .Repeat.Times(3);
            screenUndoService.Expect(x => x.CloseParentUndo(null))
                             .IgnoreArguments()
                             .Repeat.Once();
            m_SelectionService.GetSelectedComponents().Returns(selectedList);
            screenUndoService.Expect(x => x.RegisterUndoUnit(null))
                             .IgnoreArguments()
                             .Repeat.Once();      //Once for the parent
            var screenUndoService = Substitute.For<IScreenUndoService>();
            screenUndoService.OpenParentUndo(Arg.Any<string>()).Returns(new ParentUndoUnit(UndoDescription, screenUndoService));
            analogNumeric1.Stub(x => x.GetService(typeof(IScreenUndoService)))
                  .Return(screenUndoService);
            analogNumeric1.GetService(typeof(IScreenUndoService)).Returns(screenUndoService);
            TextIdBrowserControl textIdBrowserControl = new TextIdBrowserControl(m_SelectionService.ToILazy())
            {
            textIdBrowserControl.RegisterUndoUnitsAndUpdateTexts();
            //ASERT
            screenUndoService.VerifyAllExpectations();
            screenUndoService.ReceivedWithAnyArgs(1).OpenParentUndo(Arg.Any<string>());
            screenUndoService.ReceivedWithAnyArgs(3).CreatePropertyUndoUnit(Arg.Any<FrameworkElement>(), Arg.Any<string>(), Arg.Any<string>());
            screenUndoService.ReceivedWithAnyArgs(1).CloseParentUndo(Arg.Any<IParentUndoUnit>());
            screenUndoService.ReceivedWithAnyArgs(1).RegisterUndoUnit(Arg.Any<IUndoUnit>());
        }
    }
    }
}
#endif

TextIdBrowserPopupViewModelTest.cs
-49
+37
/Controls/ControlsTest/TextIdBrowser/TextIdBrowserPopupViewModelTest.cs
#if!VNEXT_TARGET
using System.Collections.Generic;
using System.ComponentModel.Design;
using System.Linq;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.TextIdBrowser
{
        public void SetUp()
        {
            // Setup project
            m_Project = MockRepository.GenerateStub<IProject>();
            m_Project = Substitute.For<IProject>();
            m_Project.VisibleLanguageColumns = new List<string>
            {
                TextsIde.DefaultText
            };
            // Setup languages
            var languageInfo1 = MockRepository.GenerateStub<ILanguageInfo>();
            var languageInfo1 = Substitute.For<ILanguageInfo>();
            languageInfo1.Name = "Language 1";
            var languageInfo2 = MockRepository.GenerateStub<ILanguageInfo>();
            var languageInfo2 = Substitute.For<ILanguageInfo>();
            languageInfo2.Name = "Language 2";
            // Setup multi language service
            m_MultiLanguageService = MockRepository.GenerateStub<IMultiLanguageService>();
            m_MultiLanguageService
                .Stub(service => service.Languages)
                .Return(new ExtendedBindingList<ILanguageInfo>
            m_MultiLanguageService = Substitute.For<IMultiLanguageService>();
            m_MultiLanguageService.Languages
                .Returns(new ExtendedBindingList<ILanguageInfo>
                    {
                        languageInfo1,
                        languageInfo2
            var resourceItem3 = CreateTextIdResourceItem(3, 2);
            // Setup text id service
            m_TextIdService = MockRepository.GenerateStub<ITextIdService>();
            m_TextIdService
                .Stub(service => service.TextIDResourceItems)
                .Return(new[]
            m_TextIdService = Substitute.For<ITextIdService>();
            m_TextIdService.TextIDResourceItems
                .Returns(new[]
                    {
                        resourceItem1,
                        resourceItem2,
                    });
            // Setup global reference service
            m_GlobalReferenceService = MockRepository.GenerateStub<IGlobalReferenceService>();
            m_GlobalReferenceService
                .Stub(service => service.GetObject<object>(null)).IgnoreArguments()
                .Return(new DependencyObjectStub());
            m_GlobalReferenceService = Substitute.For<IGlobalReferenceService>();
            m_GlobalReferenceService.GetObject<object>(Arg.Any<string>()).Returns(new DependencyObjectStub());
            // Setup multi-language property binder
            m_MultiLanguagePropertyBinder = MockRepository.GenerateStub<IMultiLanguagePropertyBinder>();
            m_MultiLanguagePropertyBinder = Substitute.For<IMultiLanguagePropertyBinder>();
            // Set up binding service
            m_BindingService = MockRepository.GenerateStub<IBindingService>();
            m_BindingService = Substitute.For<IBindingService>();
            
            // Setup GlobalSelectionService
            m_GlobalSelectionService = MockRepository.GenerateStub<IGlobalSelectionService>();
            m_GlobalSelectionService = Substitute.For<IGlobalSelectionService>();
            // Setup CommandManagerService
            m_CommandManagerService = MockRepository.GenerateStub<ICommandManagerService>();
            m_CommandManagerService = Substitute.For<ICommandManagerService>();
            // Setup StructuredBindingSupportService
            m_StructuredBindingSupportService = MockRepository.GenerateStub<IStructuredBindingSupportService>();
            m_StructuredBindingSupportService = Substitute.For<IStructuredBindingSupportService>();
            m_DataSourcesObserver = MockRepository.GenerateStub<IDataSourcesObserver>();
            m_DataSourcesObserver = Substitute.For<IDataSourcesObserver>();
            // Populate service locator
            TestHelper.AddService<IStructuredBindingSupportService>(m_StructuredBindingSupportService);
            TestHelper.AddServiceStub<IDesignerEventService>();
            bool isClosed = false;
            viewModel.RequestClose += (sender, e) => isClosed = true;
            m_TextIdService
                .Expect(service => service.CreateTextIDResourceItem())
                .Return(MockRepository.GenerateStub<ITextIDResourceItem>())
                .Repeat.Once();
            m_TextIdService.CreateTextIDResourceItem().Returns(Substitute.For<ITextIDResourceItem>());
            // ASSERT
            Assert.That(viewModel.TextIds.DynamicCollection.Count(), Is.EqualTo(3));
            viewModel.AddCommand.Execute(null);
            // ASSERT
            m_TextIdService.VerifyAllExpectations();
            m_TextIdService.Received(1).CreateTextIDResourceItem();
            Assert.That(viewModel.TextIds.DynamicCollection.Count(), Is.EqualTo(4));
            Assert.That(isClosed, Is.False);
        }
            bool isClosed = false;
            viewModel.RequestClose += (sender, e) => isClosed = true;
            var textIdDesignerResourceItem = MockRepository.GenerateStub<ITextIDDesignerResourceItem>();
            var textIdDesignerResourceItem = Substitute.For<ITextIDDesignerResourceItem>();
            textIdDesignerResourceItem.PropertyName = TextPropertyName;
            textIdDesignerResourceItem.TextID = 1;
            m_MultiLanguagePropertyBinder
                .Expect(binder => binder.ResetTextIDBinding(null, null)).IgnoreArguments()
                .Repeat.Once();
            m_MultiLanguagePropertyBinder.ResetTextIDBinding(Arg.Any<object>(), Arg.Any<string>());
            // ACT
            viewModel.SetCurrentBoundItem(textIdDesignerResourceItem);
            viewModel.ResetCommand.Execute(null);
            // ASSERT
            m_MultiLanguagePropertyBinder.VerifyAllExpectations();
            m_MultiLanguagePropertyBinder.ReceivedWithAnyArgs(1).ResetTextIDBinding(Arg.Any<object>(), Arg.Any<string>());
            Assert.That(isClosed, Is.True);
        }
        
            // ARRANGE
            TextIdBrowserPopupViewModel viewModel = GetTextIdBrowserPopupViewModel();
            var textIdDesignerResourceItem = MockRepository.GenerateStub<ITextIDDesignerResourceItem>();
            var textIdDesignerResourceItem = Substitute.For<ITextIDDesignerResourceItem>();
            textIdDesignerResourceItem.PropertyName = TextPropertyName;
            textIdDesignerResourceItem.TextID = 1;
            bool isClosed = false;
            viewModel.RequestClose += (sender, e) => isClosed = true;
            var textIdDesignerResourceItem = MockRepository.GenerateStub<ITextIDDesignerResourceItem>();
            var textIdDesignerResourceItem = Substitute.For<ITextIDDesignerResourceItem>();
            textIdDesignerResourceItem.PropertyName = TextPropertyName;
            textIdDesignerResourceItem.TextID = 1;
            m_MultiLanguagePropertyBinder
                .Expect(binder => binder.BindToTextID(null, null, 0)).IgnoreArguments()
                .Repeat.Once();
            m_MultiLanguagePropertyBinder.BindToTextID(Arg.Any<object>(), Arg.Any<string>(), Arg.Any<uint>());
            // ACT
            viewModel.SetCurrentBoundItem(textIdDesignerResourceItem);
            viewModel.OkCommand.Execute(null);
            // ASSERT
            m_MultiLanguagePropertyBinder.VerifyAllExpectations();
            m_MultiLanguagePropertyBinder.ReceivedWithAnyArgs(1).BindToTextID(Arg.Any<object>(), Arg.Any<string>(), Arg.Any<uint>());
            Assert.That(isClosed, Is.True);
        }
            // ARRANGE
            TextIdBrowserPopupViewModel viewModel = GetTextIdBrowserPopupViewModel();
            var textIdDesignerResourceItem = MockRepository.GenerateStub<ITextIDDesignerResourceItem>();
            var textIdDesignerResourceItem = Substitute.For<ITextIDDesignerResourceItem>();
            textIdDesignerResourceItem.PropertyName = TextPropertyName;
            textIdDesignerResourceItem.TextID = 1;
        public void TextIdDynamicsTargetMustBeDependencyObject()
        {
            // ARRANGE
            IDesignerResourceItem designerResourceItem = MockRepository.GenerateStub<IDesignerResourceItem>();
            IAlarmServer alarmServer = MockRepository.GenerateStub<IAlarmServer>();
            IDesignerResourceItem designerResourceItem = Substitute.For<IDesignerResourceItem>();
            IAlarmServer alarmServer = Substitute.For<IAlarmServer>();
            designerResourceItem.DesignerName = "AlarmServer";
            designerResourceItem.ObjectName = "Default";
            designerResourceItem.PropertyName = "Text";
            IGlobalReferenceService globalReferenceService = MockRepository.GenerateStub<IGlobalReferenceService>();
            globalReferenceService
                .Stub(service => service.GetObject<object>(null)).IgnoreArguments()
                .Return(alarmServer);
            IGlobalReferenceService globalReferenceService = Substitute.For<IGlobalReferenceService>();
            globalReferenceService.GetObject<object>(Arg.Any<string>()).Returns(alarmServer);
            m_GlobalReferenceService = globalReferenceService;
        internal static ITextIDResourceItem CreateTextIdResourceItem(uint id, int languageValueCount)
        {
            var textIdResourceItem = MockRepository.GenerateStub<ITextIDResourceItem>();
            var textIdResourceItem = Substitute.For<ITextIDResourceItem>();
            // Set id
            textIdResourceItem.TextID = id;
                languageValues.Add(key, value);
            }
            textIdResourceItem
                .Stub(item => item.LanguageValues)
                .Return(languageValues);
            textIdResourceItem.LanguageValues.Returns(languageValues);
            return textIdResourceItem;
        }
        }
    }
}
#endif

TextIdResourceItemViewModelTest.cs
-17
+15
/Controls/ControlsTest/TextIdBrowser/TextIdResourceItemViewModelTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using System.Linq;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.TextIdBrowser
{
        [SetUp]
        public void SetUp()
        {
            m_TextIdResourceItem = MockRepository.GenerateStub<ITextIDResourceItem>();
            m_TextIdResourceItem = Substitute.For<ITextIDResourceItem>();
        }
        public void Translations()
        {
            // ARRANGE
            m_TextIdResourceItem
                .Stub(textIdResourceItem => textIdResourceItem.LanguageValues)
                .Return(new Dictionary<string, object>
            m_TextIdResourceItem.LanguageValues
                .Returns(new Dictionary<string, object>
                    {
                        { "some language 1", "some translation 1"},
                        { "some language 2", "some translation 2"},
        public void GetKnownTranslations()
        {
            // ARRANGE
            m_TextIdResourceItem
                .Stub(textIdResourceItem => textIdResourceItem.LanguageValues)
                .Return(new Dictionary<string, object>
            m_TextIdResourceItem.LanguageValues
                .Returns(new Dictionary<string, object>
                    {
                        { "some language 1", "some translation 1"},
                        { "some language 2", "some translation 2"},
        [Test]
        public void GetUnknownTranslations()
        {
            m_TextIdResourceItem
                .Stub(textIdResourceItem => textIdResourceItem.LanguageValues)
                .Return(new Dictionary<string, object>
            m_TextIdResourceItem.LanguageValues
                .Returns(new Dictionary<string, object>
                    {
                        { "some language", "some translation"}
                    });
        public void SetKnownTranslations()
        {
            // ARRANGE
            m_TextIdResourceItem
                .Stub(textIdResourceItem => textIdResourceItem.LanguageValues)
                .Return(new Dictionary<string, object>
            m_TextIdResourceItem.LanguageValues
                .Returns(new Dictionary<string, object>
                    {
                        { "some language 1", "some translation 1"},
                        { "some language 2", "some translation 2"},
        public void SetUnknownTranslations()
        {
            // ARRANGE
            m_TextIdResourceItem
                .Stub(textIdResourceItem => textIdResourceItem.LanguageValues)
                .Return(new Dictionary<string, object>
            m_TextIdResourceItem.LanguageValues
                .Returns(new Dictionary<string, object>
                    {
                        { "some language", "some translation"}
                    });
        }
    }
}
#endif

TouchComboBoxHostCFTest.cs
-2
+2
/Controls/ControlsTest/TouchComboBox/TouchComboBoxHostCFTest.cs
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.TouchComboBox
{
            TestHelper.AddServiceStub<ISecurityServiceCF>();
            IPlatformFactoryService platformFactoryServiceStub = TestHelper.AddServiceStub<IPlatformFactoryService>();
            platformFactoryServiceStub.Stub(x => x.Create<ITouchComboBox>()).Return(new TouchComboBoxControl());
            platformFactoryServiceStub.Create<ITouchComboBox>().Returns(new TouchComboBoxControl());
            m_TouchComboBoxHostCF = new TouchComboBoxHostCF();
        }

TouchListBoxHostCFTest.cs
-3
+12
/Controls/ControlsTest/TouchListBox/TouchListBoxHostCFTest.cs
using Core.Api.DI.PlatformFactory;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.TouchListBox
{
        [SetUp]
        public void Setup()
        {
            var checkBoxCell = new CheckBoxCell();
            var touchListBoxControl = new TouchListBoxControl();
            IPlatformFactoryService platformFactoryServiceStub = TestHelper.AddServiceStub<IPlatformFactoryService>();
            platformFactoryServiceStub.Stub(x => x.Create<ICheckBoxCell>()).Return(new CheckBoxCell());
            platformFactoryServiceStub.Stub(x => x.Create<ITouchListBox>()).Return(new TouchListBoxControl());
            platformFactoryServiceStub.Create<ICheckBoxCell>().Returns(checkBoxCell);
            platformFactoryServiceStub.Create<ITouchListBox>().Returns(touchListBoxControl);
            m_TouchListBoxHostCF = new TouchListBoxHostCF();
        }
        [TearDown]
        public void TearDown()
        {
            TestHelper.ClearServices();
        }
        
        [Test]
        public void SetItemHeightHigherThanMaximumResultsInItemHeightNotBeingChanged()
        {

TimeScaleViewModelTest.cs
-5
+6
/Controls/ControlsTest/Trend/TimeScaleViewModelTest.cs
#if!VNEXT_TARGET
using System.IO.Packaging;
using Neo.ApplicationFramework.Controls.Ribbon.Context.ViewModels.Trend;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using System;
using System.IO.Packaging;
namespace Neo.ApplicationFramework.Controls.Trend
{
        public void SetUp()
        {
            TestHelper.ClearServices();
            TestHelper.AddService(MockRepository.GenerateStub<ICommandManagerService>());
            TestHelper.AddService(MockRepository.GenerateStub<IGlobalCommandService>());
            TestHelper.AddService(Substitute.For<ICommandManagerService>());
            TestHelper.AddService(Substitute.For<IGlobalCommandService>());
            string s = PackUriHelper.UriSchemePack;
            m_TimeScaleViewModel = new TimeScaleViewModel();
        }
    }
}
#endif

UndoMoveLinePointsTest.cs
-6
+8
/Controls/ControlsTest/Undo/UndoMoveLinePointsTest.cs
#if!VNEXT_TARGET
using System.Windows.Shapes;
using Core.Component.Engine.Design;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Undo
{
        [SetUp]
        public void Setup()
        {
            m_NeoDesignerHost = MockRepository.GenerateStub<INeoDesignerHost>();
            m_ScreenRootDesigner = MockRepository.GenerateStub<IScreenRootDesigner>();
            m_NeoDesignerHost.Stub(x => x.RootDesigner).Return(m_ScreenRootDesigner);
            m_NeoDesignerHost = Substitute.For<INeoDesignerHost>();
            m_ScreenRootDesigner = Substitute.For<IScreenRootDesigner>();
            m_NeoDesignerHost.RootDesigner.Returns(m_ScreenRootDesigner);
        }
        private void StubPreviousAndCurrenUndoLineUnit(Line previous, Line current)
        {
            previous.Name = "previous";
            current.Name = "current";
            m_ScreenRootDesigner.Stub(x => x.FindElementByName(previous.Name)).Return(previous);
            m_ScreenRootDesigner.Stub(x => x.FindElementByName(current.Name)).Return(current);
            m_ScreenRootDesigner.FindElementByName(previous.Name).Returns(previous);
            m_ScreenRootDesigner.FindElementByName(current.Name).Returns(current);
        }
        [Test]
        }
    }
}
#endif

UndoMoveTest.cs
+2
/Controls/ControlsTest/Undo/UndoMoveTest.cs
#if!VNEXT_TARGET
using System.Windows.Controls;
using Neo.ApplicationFramework.Controls.Layout;
using Neo.ApplicationFramework.Interfaces;
        }
    }
}
#endif

UndoPropertyTest.cs
+2
/Controls/ControlsTest/Undo/UndoPropertyTest.cs
#if!VNEXT_TARGET
using System.Windows;
using System.Windows.Shapes;
using Neo.ApplicationFramework.Controls.Layout;
        }
    }
}
#endif

UndoResizeTest.cs
+2
/Controls/ControlsTest/Undo/UndoResizeTest.cs
#if!VNEXT_TARGET
using Neo.ApplicationFramework.Controls.Layout;
using Neo.ApplicationFramework.Interfaces;
using NUnit.Framework;
        }
    }
}
#endif

UndoTestBase.cs
-6
+9
/Controls/ControlsTest/Undo/UndoTestBase.cs
#if!VNEXT_TARGET
using System.Windows.Controls;
using Core.Component.Engine.Design;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Controls.Controls;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Undo
{
        {
            TestHelper.AddService<IPropertyBinderFactory>(new PropertyBinderFactory());
            m_DesignerHostStub = MockRepository.GenerateStub<INeoDesignerHost>();
            m_DesignerHostStub = Substitute.For<INeoDesignerHost>();
            ScreenRootDesignerStub = MockRepository.GenerateStub<IScreenRootDesigner>(); //TestHelper.AddServiceStub<IScreenEditorDesigner>();
            m_DesignerHostStub.Stub(x => x.RootDesigner).Return(ScreenRootDesignerStub as IDesignerBase);
            ScreenRootDesignerStub = Substitute.For<IScreenRootDesigner>(); //TestHelper.AddServiceStub<IScreenEditorDesigner>();
            m_DesignerHostStub.RootDesigner.Returns(ScreenRootDesignerStub as IDesignerBase);
            Canvas canvas = new Canvas();
            RectangleTwo.Name = RectangleTwoName;
            canvas.Children.Add(RectangleTwo);
            ScreenRootDesignerStub.Stub(x => x.FindElementByName(RectangleOneName)).Return(RectangleOne);
            ScreenRootDesignerStub.Stub(x => x.FindElementByName(RectangleTwoName)).Return(RectangleTwo);
            ScreenRootDesignerStub.FindElementByName(RectangleOneName).Returns(RectangleOne);
            ScreenRootDesignerStub.FindElementByName(RectangleTwoName).Returns(RectangleTwo);
        }
        [TearDown]
        }
    }
}
#endif

PropertiesCopyPersisterTest.cs
-14
+14
/Controls/ControlsTest/Utilities/PropertiesCopyPersisterTest.cs
#if!VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Neo.ApplicationFramework.Controls.TextIdBrowser;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Utilities
{
        [SetUp]
        public void Setup()
        {
            m_MultiLanguagePropertyBinder = MockRepository.GenerateStub<IMultiLanguagePropertyBinder>();
            m_PropertyBinderFactory = MockRepository.GenerateStub<IPropertyBinderFactory>().ToILazy();
            m_MultiLanguagePropertyBinder = Substitute.For<IMultiLanguagePropertyBinder>();
            m_PropertyBinderFactory = Substitute.For<IPropertyBinderFactory>().ToILazy();
            var terminalStub = MockRepository.GenerateStub<ITerminal>();
            var targetInfoStub = MockRepository.GenerateStub<ITargetInfo>();
            var terminalStub = Substitute.For<ITerminal>();
            var targetInfoStub = Substitute.For<ITargetInfo>();
            targetInfoStub.TerminalDescription = terminalStub;
            ITarget targetStub = MockRepository.GenerateStub<ITarget>();
            ITarget targetStub = Substitute.For<ITarget>();
            ITargetService targetServiceStub = TestHelper.AddServiceStub<ITargetService>();
            targetServiceStub.CurrentTarget = targetStub;
            targetServiceStub.Stub(x => x.CurrentTargetInfo).Return(targetInfoStub);
            targetServiceStub.CurrentTargetInfo.Returns(targetInfoStub);
            m_ScreenDesignerView = MockRepository.GenerateStub<IScreenDesignerView>();
            m_FromObject = MockRepository.GenerateMock<TestLabel>();
            m_FromObject.Stub(x => x.GetService(typeof(IScreenDesignerView)))
                  .Return(m_ScreenDesignerView);
            m_ScreenDesignerView = Substitute.For<IScreenDesignerView>();
            m_FromObject = Substitute.For<TestLabel>();
            m_FromObject.GetService(typeof(IScreenDesignerView)).Returns(m_ScreenDesignerView);
        }
        [Test]
            var propertiesCopyPersister = new PropertiesCopyPersister(m_PropertyBinderFactory,
                                                                        m_MultiLanguagePropertyBinder);
            var button = MockRepository.GenerateMock<TestButton>();
            button.Stub(x => x.GetService(typeof(IScreenDesignerView)))
                  .Return(m_ScreenDesignerView);
            var button = Substitute.For<TestButton>();
            button.GetService(typeof(IScreenDesignerView)).Returns(m_ScreenDesignerView);
            var descriptorCollection = TypeDescriptor.GetProperties(button);
            var stylePropertyDescriptor = descriptorCollection.Find(RenderableControl.StyleNamePropertyName, false);
        }
    }
}
#endif

TextBoxValidatorTest.cs
+2
/Controls/ControlsTest/Validators/TextBoxValidatorTest.cs
#if!VNEXT_TARGET
using System.Reflection;
using NUnit.Framework;
    }
}
#endif

ControlsTest.csproj
-4
+10
/Controls/ControlsTest/ControlsTest.csproj
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\BuildingBlocks\lib\ApplicationFrameworkCF.dll</HintPath>
    </Reference>
    <Reference Include="Castle.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\Castle.Core.4.4.0\lib\net45\Castle.Core.dll</HintPath>
    </Reference>
    <Reference Include="Core.Api, Version=0.0.4.0, Culture=neutral, PublicKeyToken=f9bf78ad04ede021, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\ixCore2.x.Ide.ExecutionEngine.0.0.4\lib\net48\Core.Api.dll</HintPath>
    </Reference>
    <Reference Include="DataSourceInterop, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
      <EmbedInteropTypes>False</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="Microsoft.Expression.Interactions, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\MicrosoftExpressionInteractions.3.0.40218.0\lib\net45\Microsoft.Expression.Interactions.dll</HintPath>
      <Private>True</Private>
    <Reference Include="NeoNativeSignature">
      <HintPath>..\..\OutputNeoNative\Release\NeoNativeSignature.dll</HintPath>
    </Reference>
    <Reference Include="NSubstitute, Version=4.2.0.0, Culture=neutral, PublicKeyToken=92dd2e9066daa5ca, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\NSubstitute.4.2.2\lib\net46\NSubstitute.dll</HintPath>
    </Reference>
    <Reference Include="nunit.framework, Version=3.13.2.0, Culture=neutral, PublicKeyToken=2638cd05610744eb, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\NUnit.3.13.2\lib\net45\nunit.framework.dll</HintPath>
    </Reference>
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\ThirdParty\MobileFormsToolkit\Desktop\Resco.UIElements.Controls.dll</HintPath>
    </Reference>
    <Reference Include="Rhino.Mocks, Version=3.6.0.0, Culture=neutral, PublicKeyToken=0b3305902db7183f, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\RhinoMocks.3.6.1\lib\net\Rhino.Mocks.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="RibbonControlsLibrary, Version=4.0.0.11019, Culture=neutral, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\Microsoft Ribbon for WPF\RibbonControlsLibrary.dll</HintPath>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Data.Linq" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Threading.Tasks.Extensions, Version=4.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\System.Threading.Tasks.Extensions.4.3.0\lib\portable-net45+win8+wp8+wpa81\System.Threading.Tasks.Extensions.dll</HintPath>
    </Reference>
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Windows.Interactivity, Version=4.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>

DescriptionTextBoxTest.cs
+2
/Controls/ControlsTest/DescriptionTextBoxTest.cs
#if!VNEXT_TARGET
using System.Windows;
using System.Windows.Controls;
using Neo.ApplicationFramework.Common.Utilities;
        }
    }
}
#endif

MediaPlayerSourceHelperTest.cs
-30
+22
/Controls/ControlsTest/MediaPlayerSourceHelperTest.cs
#if!VNEXT_TARGET
using System;
using System.IO;
using Core.Api.Platform;
using Neo.ApplicationFramework.Controls.ControlsIde.TestHelpers;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls
{
        [SetUp]
        public void SetUp()
        {
            m_ProjectStub = MockRepository.GenerateStub<IProject>();
            m_ProjectStub = Substitute.For<IProject>();
            m_ProjectStub.FolderPath = ProjectFolderPath;
            m_ProjectManagerStub = TestHelper.CreateAndAddServiceStub<IProjectManager>();
            m_ProjectManagerStub.Project = m_ProjectStub;
            m_CurrentTargetStub = MockRepository.GenerateStub<ITarget>();
            m_CurrentTargetStub = Substitute.For<ITarget>();
            m_TargetServiceStub = TestHelper.CreateAndAddServiceStub<ITargetService>();
            m_TargetServiceStub.CurrentTarget = m_CurrentTargetStub;
            m_GlobalCommandServiceStub = new GlobalCommandServiceFake();
            m_FileHelperMock = MockRepository.GenerateMock<FileHelper>();
            m_MessageBoxServiceIdeStub = MockRepository.GenerateStub<IMessageBoxServiceIde>();
            m_FileHelperMock = Substitute.For<FileHelper>();
            m_MessageBoxServiceIdeStub = Substitute.For<IMessageBoxServiceIde>();
            m_MediaPlayerSourceHelper = new MediaPlayerSourceHelper(
                m_TargetServiceStub.ToILazy(),
        {
            Uri uriIn = null;
            m_FileHelperMock.Expect(fileHelper => fileHelper.Copy(string.Empty, string.Empty, true)).IgnoreArguments().Repeat.Never();
            m_MediaPlayerSourceHelper.MediaSource = uriIn;
            Assert.AreEqual(uriIn, m_MediaPlayerSourceHelper.MediaSource);
            m_FileHelperMock.VerifyAllExpectations();
            m_FileHelperMock.DidNotReceive().Copy(Arg.Any<string>(), Arg.Any<string>(), true);
        }
        [Test]
            string sourcePath = Path.Combine(NonProjectFolderPath, FileName);
            Uri uriIn = new Uri(sourcePath);
            m_FileHelperMock.Expect(fileHelper => fileHelper.Copy(string.Empty, string.Empty, true)).IgnoreArguments().Repeat.Once();
            m_MediaPlayerSourceHelper.MediaSource = uriIn;
            Uri uriOut = m_MediaPlayerSourceHelper.MediaSource;
            Assert.AreEqual(false, uriOut.IsAbsoluteUri);
            Assert.AreEqual(FileName, uriOut.OriginalString);
            m_FileHelperMock.VerifyAllExpectations();
            m_FileHelperMock.ReceivedWithAnyArgs(1).Copy(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<bool>());
        }
        [Test]
            string sourcePath = Path.Combine(ProjectFilesFolderPath, FileName);
            Uri uriIn = new Uri(sourcePath);
            m_FileHelperMock.Expect(fileHelper => fileHelper.Copy(string.Empty, string.Empty, true)).IgnoreArguments().Repeat.Never();
            m_MediaPlayerSourceHelper.MediaSource = uriIn;
            Uri uriOut = m_MediaPlayerSourceHelper.MediaSource;
            Assert.AreEqual(false, uriOut.IsAbsoluteUri);
            Assert.AreEqual(FileName, uriOut.OriginalString);
            m_FileHelperMock.VerifyAllExpectations();
            m_FileHelperMock.DidNotReceiveWithAnyArgs().Copy(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<bool>());
        }
        [Test]
        {
            Uri uriIn = new Uri(FileName, UriKind.Relative);
            m_FileHelperMock.Expect(fileHelper => fileHelper.Copy(string.Empty, string.Empty, true)).IgnoreArguments().Repeat.Never();
            m_MediaPlayerSourceHelper.MediaSource = uriIn;
            Uri uriOut = m_MediaPlayerSourceHelper.MediaSource;
            Assert.AreEqual(false, uriOut.IsAbsoluteUri);
            Assert.AreEqual(FileName, uriOut.OriginalString);
            m_FileHelperMock.VerifyAllExpectations();
            m_FileHelperMock.DidNotReceiveWithAnyArgs().Copy(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<bool>());
        }
        [Test]
        {
            Uri uriIn = new Uri(InternetAddress);
            m_FileHelperMock.Expect(fileHelper => fileHelper.Copy(string.Empty, string.Empty, true)).IgnoreArguments().Repeat.Never();
            m_MediaPlayerSourceHelper.MediaSource = uriIn;
            Uri uriOut = m_MediaPlayerSourceHelper.MediaSource;
            Assert.AreEqual(true, uriOut.IsAbsoluteUri);
            Assert.AreEqual(InternetAddress, uriOut.OriginalString);
            m_FileHelperMock.VerifyAllExpectations();
            m_FileHelperMock.DidNotReceiveWithAnyArgs().Copy(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<bool>());
        }
        [Test]
        public void SearchPatternForPC()
        {
            //ASSIGN
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.Windows);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.Windows);
            //ACT
            var searchPattern = m_MediaPlayerSourceHelper.FileSearchPatterns;
        public void SearchPatternForCE()
        {
            //ASSIGN
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Stub(x => x.PlatformVersion).Return(TargetPlatformVersion.CE6);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.PlatformVersion.Returns(TargetPlatformVersion.CE6);
            //ACT
            var searchPattern = m_MediaPlayerSourceHelper.FileSearchPatterns;
        public void SearchPatternForCE8()
        {
            //ASSIGN
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Stub(x => x.PlatformVersion).Return(TargetPlatformVersion.CE8);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.PlatformVersion.Returns(TargetPlatformVersion.CE8);
            //ACT
            var searchPattern = m_MediaPlayerSourceHelper.FileSearchPatterns;
        public void OpenFileDialogFilterForPC()
        {
            //ASSIGN
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.Windows);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.Windows);
            //ACT
            var openFileDialogFilter = m_MediaPlayerSourceHelper.OpenFileDialogFilter;
        public void OpenFileDialogFilterForCE()
        {
            //ASSIGN
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Stub(x => x.PlatformVersion).Return(TargetPlatformVersion.CE6);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.PlatformVersion.Returns(TargetPlatformVersion.CE6);
            //ACT
            var openFileDialogFilter = m_MediaPlayerSourceHelper.OpenFileDialogFilter;
        public void OpenFileDialogFilterForCE8()
        {
            //ASSIGN
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Stub(x => x.PlatformVersion).Return(TargetPlatformVersion.CE8);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.PlatformVersion.Returns(TargetPlatformVersion.CE8);
            //ACT
            var openFileDialogFilter = m_MediaPlayerSourceHelper.OpenFileDialogFilter;
        }
    }
}
#endif

packages.config
-1
+3
/Controls/ControlsTest/packages.config
<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Castle.Core" version="4.4.0" targetFramework="net48" />
  <package id="CommonServiceLocator" version="1.3" targetFramework="net472" />
  <package id="Expression.Blend.Sdk" version="1.0.2" targetFramework="net472" />
  <package id="ixCore2.x.Ide.ExecutionEngine" version="0.0.4" targetFramework="net48" />
  <package id="ixCore2.x.TestUtilities" version="0.0.4" targetFramework="net48" />
  <package id="MicrosoftExpressionInteractions" version="3.0.40218.0" targetFramework="net472" />
  <package id="NSubstitute" version="4.2.2" targetFramework="net48" />
  <package id="NUnit" version="3.13.2" targetFramework="net48" />
  <package id="NUnit.Console" version="3.12.0" targetFramework="net48" />
  <package id="NUnit.ConsoleRunner" version="3.12.0" targetFramework="net48" />
  <package id="NUnit3TestAdapter" version="4.0.0-beta.2" targetFramework="net48" />
  <package id="Prism.Core" version="6.3.0" targetFramework="net472" />
  <package id="Prism.Wpf" version="6.3.0" targetFramework="net472" />
  <package id="RhinoMocks" version="3.6.1" targetFramework="net472" />
  <package id="System.Threading.Tasks.Extensions" version="4.3.0" targetFramework="net48" />
</packages>

TestUtilities.csproj
+74
/Test/TestUtilities/.vNext/TestUtilities.csproj
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net6.0-windows;net48</TargetFrameworks>
    <UseWindowsForms>true</UseWindowsForms>
    <UseWpf>true</UseWpf>
    <IsPackable>false</IsPackable>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE;DEBUG;VNEXT_TARGET;VNEXT_TARGET_NEEDS_REIMPLEMENTATION;VNEXT_TARGET_INCLUDED;VNEXT_TARGET_STRUCTURE_DIFFERENCE</DefineConstants>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DefineConstants>TRACE;VNEXT_TARGET;VNEXT_TARGET_NEEDS_REIMPLEMENTATION;VNEXT_TARGET_INCLUDED;VNEXT_TARGET_STRUCTURE_DIFFERENCE</DefineConstants>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <ItemGroup>
    <Compile Remove="obj\**" />
    <EmbeddedResource Remove="obj\**" />
    <None Remove="obj\**" />
    <Compile Remove="..\obj\**" />
    <EmbeddedResource Remove="..\obj\**" />
    <None Remove="..\obj\**" />
    
    <Compile Include="..\Brush\BrushValidator.cs" Link="Brush\BrushValidator.cs" />
    <Compile Include="..\ControllerHelper.cs" Link="ControllerHelper.cs" />
    <Compile Include="..\Extensions\System\ComponentModel\NotifyExpectation.cs" Link="Extensions\System\ComponentModel\NotifyExpectation.cs" />
    <Compile Include="..\Extensions\System\ComponentModel\NotifyPropertyChangedExtensions.cs" Link="Extensions\System\ComponentModel\NotifyPropertyChangedExtensions.cs" />
    <Compile Include="..\Extensions\System\ObjectExtensions.cs" Link="Extensions\System\ObjectExtensions.cs" />
    <Compile Include="..\Printer\GdiPrinter\BitmapPrintingHelper.cs" Link="Printer\GdiPrinter\BitmapPrintingHelper.cs" />
    <Compile Include="..\Printer\GdiPrinter\BitmapWrapperPC.cs" Link="Printer\GdiPrinter\BitmapWrapperPC.cs" />
    <Compile Include="..\SelectSwedishTestingCulture.cs" />
    <Compile Include="..\TestAttributes\NeoClearStaticStateActionAttribute.cs" Link="TestAttributes\NeoClearStaticStateActionAttribute.cs" />
    <Compile Include="..\TestHelper.cs" />
    <Compile Include="..\TestThreadHelper.cs" />
    <Compile Include="..\Threading\InvokeDirectActionConsumer.cs" Link="Threading\InvokeDirectActionConsumer.cs" />
    <Compile Include="..\Utilities\DependencyObjectPropertyBinderTests\MockObjects\DataItemProxyMock.cs" Link="Utilities\DependencyObjectPropertyBinderTests\MockObjects\DataItemProxyMock.cs" />
    <Compile Include="..\Utilities\DependencyObjectPropertyBinderTests\MockObjects\DataItemProxyProviderMock.cs" Link="Utilities\DependencyObjectPropertyBinderTests\MockObjects\DataItemProxyProviderMock.cs" />
    <Compile Include="..\Utilities\ElementCanvasHelper.cs" Link="Utilities\ElementCanvasHelper.cs" />
    <Compile Include="..\Utilities\EventAsserter.cs" Link="Utilities\EventAsserter.cs" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Core.Controls.Api" Version="3.1.0" />
    <PackageReference Include="Core.TestUtilities" Version="3.1.0" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.8.3" />
    <PackageReference Include="NSubstitute" Version="4.2.2" />
    <PackageReference Include="NUnit" Version="3.13.2" />
    <PackageReference Include="NUnit3TestAdapter" Version="4.0.0" />
    <PackageReference Include="coverlet.collector" Version="3.0.3">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\..\Common\CommonCF\.vNext\CommonCF.csproj" />
    <ProjectReference Include="..\..\..\Common\Common\.vNext\Common.csproj" />
    <ProjectReference Include="..\..\..\Controls\ControlsCF\.vNext\ControlsCF.csproj" />
    <ProjectReference Include="..\..\..\Controls\Controls\.vNext\Controls.csproj" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="DataSourceInterop">
      <HintPath>..\..\..\Interop\DataSource\BeDataSource2\Interop\DataSourceInterop.dll</HintPath>
    </Reference>
  </ItemGroup>
</Project>

BrushValidator.cs
-3
/Test/TestUtilities/Brush/BrushValidator.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Neo.ApplicationFramework.Utilities.Assertion;

ControllerHelper.cs
-21
+12
/Test/TestUtilities/ControllerHelper.cs
using System.Collections.ObjectModel;
using Core.Api.DataSource;
using Neo.ApplicationFramework.Interfaces;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.TestUtilities
{
     
        public static void CreateStubControllerWithDataItem(out IDataSourceContainer controller, out IDataItem dataItem, string controllerName, string dataItemName)
        {
            controller = MockRepository.GenerateStub<IDataSourceContainer>();
            controller = Substitute.For<IDataSourceContainer>();
            controller.Name = controllerName;
            controller.IsActive = true;
                    {
                        dataItem
                    });
            controller.Stub(x => x.DataItemBases).Return(dataItems);
            controller.DataItemBases.Returns(dataItems);
        }
        public static void CreateStubControllerWithDataItem(IGlobalDataItem globalDataItem, string controllerName, string dataItemName)
        public static IDataSourceContainer CreateStubController(out IDataSourceContainer controller, string controllerName)
        {
            controller = MockRepository.GenerateStub<IDataSourceContainer>();
            controller = Substitute.For<IDataSourceContainer>();
            controller.Name = controllerName;
            controller.IsActive = true;
            return controller;
        public static void CreateStubDataItemInStubController(IDataSourceContainer controller, out IDataItem dataItem, string dataItemName)
        {
            string fullName = string.Format("{0}.{1}", controller.Name, dataItemName);
            IDataItem newDataItem = MockRepository.GenerateStub<IDataItem>();
            newDataItem.Stub(x => x.FullName).Return(fullName);
            newDataItem.Stub(x => x.SetValueForced(null)).IgnoreArguments().WhenCalled(invocation => newDataItem.Value = ((VariantValue)invocation.Arguments[0]));
            newDataItem.Stub(x => x.IncrementAnalogValue(null))
                .IgnoreArguments()
                .WhenCalled(invocation => newDataItem.Value = (new VariantValue(newDataItem.Value)).Double + ((VariantValue)invocation.Arguments[0]).Double);
            newDataItem.Stub(x => x.Toggle()).WhenCalled(invocation => newDataItem.Value = (new VariantValue(newDataItem.Value)).Double == 0 ? 1 : 0);
            IDataItem newDataItem = Substitute.For<IDataItem>();
            newDataItem.FullName.Returns(fullName);
            newDataItem.When(x => x.SetValueForced(Arg.Any<VariantValue>()))
                .Do(y => newDataItem.Value = (VariantValue)y[0]);
            newDataItem.When(x => x.IncrementAnalogValue(Arg.Any<VariantValue>()))
                .Do(y => newDataItem.Value = (new VariantValue(newDataItem.Value)).Double + ((VariantValue)y[0]).Double);
            newDataItem.When(x => x.Toggle())
                .Do(y => newDataItem.Value = new VariantValue(newDataItem.Value).Double == 0 ? 1 : 0);
            newDataItem.Value = new VariantValue(0);
            newDataItem.DataSourceContainer = controller;
            dataItem = newDataItem;
        }
        public static IDataItem CreateStubDataItem(string dataItemName, string itemId)
        {
            IDataItem dataItem = MockRepository.GenerateStub<IDataItem>();
            dataItem.Name = dataItemName;
            dataItem.ItemID = itemId;
            dataItem.Value = new VariantValue(0);
            return dataItem;
        }
    }
}

NeoDesignerHostStub.cs
-21
+53
/Test/TestUtilities/NeoDesignerHostStub.cs
using Neo.ApplicationFramework.Tools.Screen.ScreenDesign;
using Neo.ApplicationFramework.Tools.Screen.ScreenEditor;
using Neo.ApplicationFramework.Tools.Selection;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools
{
        public static NeoDesignerHostStub CreateScreenDesignerHost(IServiceContainer serviceContainer)
        {
            IScreenRootDesigner screenRootDesigner = MockRepository.GenerateStub<IScreenRootDesigner>();
            NeoDesignerHostStub designerHost = new NeoDesignerHostStub(serviceContainer, screenRootDesigner);
            IScreenRootDesigner screenRootDesigner = Substitute.For<IScreenRootDesigner>();
            NeoDesignerHostStub designerHost = new(serviceContainer, screenRootDesigner);
            designerHost.SelectionService = new SelectionService();
            designerHost.ServiceContainer.AddService(typeof(ISelectionService), designerHost.SelectionService);
            designerHost.ScreenEditorWindow.Editor.Canvas.ServiceProvider = serviceContainer;
            designerHost.ScreenEditorWindow.Show();
            designerHost.ScreenRootDesigner.Stub(x => x.DesignerHost).Return(designerHost);
            designerHost.ScreenRootDesigner.Stub(x => x.Select(Arg<FrameworkElement>.Is.Anything)).Do(new Action<FrameworkElement>(y => designerHost.SelectionService.SetSelectedComponents(new List<object>() { y })));
            designerHost.ScreenRootDesigner.Stub(x => x.Select(Arg<FrameworkElement>.Is.Anything, Arg<SelectionTypes>.Is.Anything)).Do(new Action<FrameworkElement, SelectionTypes>((y, z) => designerHost.SelectionService.SetSelectedComponents(new List<object>() { y }, z)));
            designerHost.ScreenRootDesigner.Stub(x => x.Select(Arg<IList<FrameworkElement>>.Is.Anything, Arg<SelectionTypes>.Is.Anything)).Do(new Action<IList<FrameworkElement>, SelectionTypes>((y, z) => designerHost.SelectionService.SetSelectedComponents(y.ToList(), z)));
            designerHost.ScreenRootDesigner.Stub(x => x.SelectedElements).Do(new Func<IList<FrameworkElement>>(() => designerHost.SelectionService.GetSelectedComponents().Cast<FrameworkElement>().ToList()));
            designerHost.ScreenRootDesigner.DesignerHost.Returns(designerHost);
            designerHost.ScreenRootDesigner.Select(Arg.Do<FrameworkElement>(y =>
                designerHost.SelectionService.SetSelectedComponents(new List<object>() { y })));
            designerHost.ScreenRootDesigner
                .When(x => x.Select(Arg.Any<FrameworkElement>(), Arg.Any<SelectionTypes>()))
                .Do(y => designerHost.SelectionService.SetSelectedComponents(new List<object>() { (FrameworkElement)y[0] }, (SelectionTypes)y[1]));
            designerHost.ScreenRootDesigner
                .When(x => x.Select(Arg.Any<IList<FrameworkElement>>(), Arg.Any<SelectionTypes>()))
                .Do(y => designerHost.SelectionService.SetSelectedComponents(((IList<FrameworkElement>)y[0]).ToList(), (SelectionTypes)y[1]));
            designerHost.ScreenRootDesigner.SelectedElements
                .Returns(x =>
                    designerHost.SelectionService.GetSelectedComponents().Cast<FrameworkElement>().ToList());
            IElementChangeService changeService = MockRepository.GenerateStub<IElementChangeService>();
            IElementChangeService changeService = Substitute.For<IElementChangeService>();
            designerHost.ServiceContainer.AddService(typeof(IElementChangeService), changeService);
            designerHost.ScreenEditor = MockRepository.GenerateStub<IScreenEditor>();
            Adorner adornerStub = MockRepository.GenerateStub<Adorner>(designerHost.ScreenEditorWindow.Editor);
            designerHost.ScreenEditor.Stub(x => x.EditorAdorner).Return(adornerStub);
            designerHost.ScreenEditor.Stub(x => x.EditorCanvas).Return(designerHost.ScreenEditorWindow.Editor.Canvas);
            designerHost.ScreenEditor.Stub(x => x.AddElements(Arg<IList<FrameworkElement>>.Is.Anything)).Do(new Action<IList<FrameworkElement>>(x => designerHost.AddElementsToScreenEditor(x)));
            designerHost.ScreenEditor.Stub(x => x.RemoveElements(Arg<IList<FrameworkElement>>.Is.Anything)).Do(new Action<IList<FrameworkElement>>(x => designerHost.RemoveElementsFromScreenEditor(x)));
            designerHost.ScreenEditor = Substitute.For<IScreenEditor>();
            Adorner adornerStub = Substitute.For<Adorner>(designerHost.ScreenEditorWindow.Editor);
            
            designerHost.ScreenEditor.EditorAdorner.Returns(adornerStub);
            designerHost.ScreenEditor.EditorCanvas.Returns(designerHost.ScreenEditorWindow.Editor.Canvas);
            designerHost.ScreenEditor
                .When(x => x.AddElements(Arg.Any<IList<FrameworkElement>>()))
                .Do(y => designerHost.AddElementsToScreenEditor((IList<FrameworkElement>)y[0]));
            designerHost.ScreenEditor
                .When(x => x.RemoveElements(Arg.Any<IList<FrameworkElement>>()))
                .Do(y => designerHost.RemoveElementsFromScreenEditor((IList<FrameworkElement>)y[0]));
            designerHost.ServiceContainer.AddService(typeof(IScreenEditor), designerHost.ScreenEditor);
            designerHost.ScreenDesignerView = new ScreenDesignerView();
            designerHost.ScreenRootDesigner.Stub(x => x.DefaultView).Return(designerHost.ScreenDesignerView);
            designerHost.ScreenRootDesigner.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Do(new Func<string, FrameworkElement>(y => designerHost.ScreenDesignerView.Elements.Where(z => z.Name == y).FirstOrDefault()));
            designerHost.ScreenRootDesigner.Stub(x => x.FindElementsByName(Arg<string>.Is.Anything)).Do(new Func<string, IEnumerable<FrameworkElement>>(y => designerHost.ScreenDesignerView.Elements.Where(z => z.Name == y)));
            designerHost.ScreenRootDesigner.Stub(x => x.SelectOneElement()).Do(new System.Action(() => designerHost.SelectionService.SetSelectedComponents(new List<object>() { designerHost.ScreenDesignerView.Elements.FirstOrDefault() })));
            designerHost.ScreenRootDesigner.DefaultView.Returns(designerHost.ScreenDesignerView);
            designerHost.ScreenRootDesigner.FindElementByName(Arg.Any<string>())
                .ReturnsForAnyArgs(x =>
                {
                    return designerHost.ScreenDesignerView.Elements.FirstOrDefault(z => z.Name == (string)x[0]);
                });
            designerHost.ScreenRootDesigner.FindElementsByName(Arg.Any<string>())
                .ReturnsForAnyArgs(x =>
                {
                    return designerHost.ScreenDesignerView.Elements.Where(z => z.Name == (string)x[0]);
                });
            designerHost.ScreenRootDesigner
                .When(x => x.SelectOneElement())
                .Do(y => designerHost.SelectionService.SetSelectedComponents(
                    new List<object>()
                    {
                        designerHost.ScreenDesignerView.Elements.FirstOrDefault()
                    }));
            ((ScreenDesignerView)designerHost.ScreenDesignerView).ScreenEditor = designerHost.ScreenEditor;
            designerHost.ScreenDesignerView.Designer = designerHost.ScreenRootDesigner;
            foreach (FrameworkElement newElement in newElements)
            {
                ScreenEditorWindow.Editor.Canvas.Children.Add(newElement);
                changeService.Raise(z => z.ElementAdded += null, ScreenEditor, new ElementEventArgs(newElement, string.Empty));
                changeService.ElementAdded += Raise.EventWith(ScreenEditor, new ElementEventArgs(newElement, string.Empty));
            }
        }
            foreach (FrameworkElement element in elements)
            {
                ScreenEditorWindow.Editor.Canvas.Children.Remove(element);
                changeService.Raise(z => z.ElementRemoved += null, ScreenEditor, new ElementEventArgs(element, string.Empty));
                changeService.ElementRemoved += Raise.EventWith(ScreenEditor, new ElementEventArgs(element, string.Empty));
            }
        }

packages.config
-2
+4
/Test/TestUtilities/packages.config
<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Castle.Core" version="4.4.0" targetFramework="net48" />
  <package id="ixCore2.x.CodeGenerationUtilities" version="0.0.4" targetFramework="net48" />
  <package id="ixCore2.x.Ide.ExecutionEngine" version="0.0.4" targetFramework="net48" />
  <package id="ixCore2.x.TestUtilities" version="0.0.4" targetFramework="net48" />
  <package id="NSubstitute" version="4.2.2" targetFramework="net48" />
  <package id="NUnit" version="3.13.2" targetFramework="net48" />
  <package id="NUnit.Console" version="3.12.0" targetFramework="net48" />
  <package id="NUnit.ConsoleRunner" version="3.12.0" targetFramework="net48" />
  <package id="NUnit.Extension.NUnitV2ResultWriter" version="3.6.0" targetFramework="net472" />
  <package id="NUnit.Extension.TeamCityEventListener" version="1.0.7" targetFramework="net48" />
  <package id="NUnit.Extension.VSProjectLoader" version="3.8.0" targetFramework="net48" />
  <package id="NUnit3TestAdapter" version="4.0.0-beta.2" targetFramework="net48" />
  <package id="RhinoMocks" version="3.6.1" targetFramework="net472" />
  <package id="NUnit3TestAdapter" version="4.0.0" targetFramework="net48" />
  <package id="System.Threading.Tasks.Extensions" version="4.3.0" targetFramework="net48" />
</packages>

TestHelper.cs
-30
+21
/Test/TestUtilities/TestHelper.cs
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Controls.OpcClient.Bindings;
using Neo.ApplicationFramework.Interfaces;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.TestUtilities
{
        public static TService AddServiceStub<TService>() where TService : class
        {
            var stub = MockRepository.GenerateStub<TService>();
            var stub = Substitute.For<TService>();
            AddService(stub);
            if (factory == null)
                factory = AddServiceStub<IPlatformFactoryService>();
            factory.Stub(x => x.Create<TRequestedType>()).Return(typeImplementation);
            factory.Create<TRequestedType>().Returns(typeImplementation);
        }
        public static IProjectManager AddServiceProjectManager(MockRepository mockRepository)
#if !VNEXT_TARGET
        public static IProjectManager AddServiceProjectManager()
        {
            IProjectManager projectManager = CreateAndAddServiceMock<IProjectManager>(mockRepository);
            IProject project = MockRepository.GenerateStub<IProject>();
            IProjectManager projectManager = CreateAndAddServiceStub<IProjectManager>();
            IProject project = Substitute.For<IProject>();
            SetupResult.For(projectManager.Project).Return(project);
            projectManager.Project.Returns(project);
            return projectManager;
        }
        public static TService CreateAndAddServiceMock<TService>(MockRepository mockRepository) where TService : class
        {
            TService serviceInstance = mockRepository.DynamicMock<TService>();
            AddService(typeof(TService), serviceInstance);
            return serviceInstance;
        }
#endif
        public static TService CreateAndAddServiceMock<TService>() where TService : class
        {
            TService serviceInstance = MockRepository.GenerateMock<TService>();
            AddService(typeof(TService), serviceInstance);
            return serviceInstance;
        }
        public static TService CreateAndAddServiceStub<TService>() where TService : class
        {
            TService serviceInstance = MockRepository.GenerateStub<TService>();
            TService serviceInstance = Substitute.For<TService>();
            AddService(typeof(TService), serviceInstance);
            return serviceInstance;
        }
        }
        //Sort of expects to be executed in something like "iX\Tools\ToolsTestx86\bin\Debug\"
#if VNEXT_TARGET
        private static string SolutionDirectory => PathTools.GetParentDir(AppDomain.CurrentDomain.BaseDirectory, 6).FullName;
#else
        private static string SolutionDirectory => PathTools.GetParentDir(AppDomain.CurrentDomain.BaseDirectory, 4).FullName;
#endif
        public static class Bindings
        {
                public static void RegisterSimpleDataItemBindingSourceProvider()
                {
                    var bindingService = AddServiceStub<IBindingService>();
                    bindingService
                        .Stub(mock => mock.IsSupporting(default(Binding))).IgnoreArguments()
                        .Do(new Func<Binding, bool>(CanHandleBinding));
                    bindingService.IsSupporting(Arg.Any<Binding>())
                        .ReturnsForAnyArgs(x => CanHandleBinding((Binding)x[0]));
                    bindingService
                        .Stub(mock => mock.ProvideBindingSourceDescription(default(Binding))).IgnoreArguments()
                        .Do(new Func<Binding, BindingSourceDescription>(
                            binding => CanHandleBinding(binding) ? GetBindingSourceDescription(binding) : null));
                    bindingService.ProvideBindingSourceDescription(Arg.Any<Binding>())
                        .ReturnsForAnyArgs(x => 
                        {
                            return CanHandleBinding((Binding)x[0]) ? GetBindingSourceDescription((Binding)x[0]) : null;
                        });
                }
                private static bool CanHandleBinding(Binding binding)

TestUtilities.csproj
-6
+12
/Test/TestUtilities/TestUtilities.csproj
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\..\ThirdParty\NUnit3TestAdapter.4.0.0-beta.2\build\net35\NUnit3TestAdapter.props" Condition="Exists('..\..\ThirdParty\NUnit3TestAdapter.4.0.0-beta.2\build\net35\NUnit3TestAdapter.props')" />
  <Import Project="..\..\ThirdParty\NUnit3TestAdapter.4.0.0\build\net35\NUnit3TestAdapter.props" Condition="Exists('..\..\ThirdParty\NUnit3TestAdapter.4.0.0\build\net35\NUnit3TestAdapter.props')" />
  <Import Project="..\..\ThirdParty\NUnit.3.13.2\build\NUnit.props" Condition="Exists('..\..\ThirdParty\NUnit.3.13.2\build\NUnit.props')" />
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\BuildingBlocks\lib\ApplicationFrameworkCF.dll</HintPath>
    </Reference>
    <Reference Include="Castle.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\Castle.Core.4.4.0\lib\net45\Castle.Core.dll</HintPath>
    </Reference>
    <Reference Include="Core.Api, Version=0.0.4.0, Culture=neutral, PublicKeyToken=f9bf78ad04ede021, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\ixCore2.x.Ide.ExecutionEngine.0.0.4\lib\net48\Core.Api.dll</HintPath>
      <Private>True</Private>
      <HintPath>..\..\ThirdParty\ixCore2.x.Ide.ExecutionEngine.0.0.4\lib\net48\CoreIde.Engine.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="NSubstitute, Version=4.2.0.0, Culture=neutral, PublicKeyToken=92dd2e9066daa5ca, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\NSubstitute.4.2.2\lib\net46\NSubstitute.dll</HintPath>
    </Reference>
    <Reference Include="nunit.framework, Version=3.13.2.0, Culture=neutral, PublicKeyToken=2638cd05610744eb, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\NUnit.3.13.2\lib\net45\nunit.framework.dll</HintPath>
    </Reference>
    <Reference Include="PresentationCore" />
    <Reference Include="PresentationFramework" />
    <Reference Include="Rhino.Mocks, Version=3.6.0.0, Culture=neutral, PublicKeyToken=0b3305902db7183f, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\RhinoMocks.3.6.1\lib\net\Rhino.Mocks.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="SignatureInterfacesCF, Version=2.20.346.0, Culture=neutral, PublicKeyToken=f9bf78ad04ede021, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\BuildingBlocks\lib\SignatureInterfacesCF.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Configuration" />
    <Reference Include="System.Core" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Threading.Tasks.Extensions, Version=4.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\System.Threading.Tasks.Extensions.4.3.0\lib\portable-net45+win8+wp8+wpa81\System.Threading.Tasks.Extensions.dll</HintPath>
    </Reference>
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xaml" />
    <Reference Include="System.Xml.Linq" />
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\..\ThirdParty\NUnit.3.13.2\build\NUnit.props')" Text="$([System.String]::Format('$(ErrorText)', '..\..\ThirdParty\NUnit.3.13.2\build\NUnit.props'))" />
    <Error Condition="!Exists('..\..\ThirdParty\NUnit3TestAdapter.4.0.0-beta.2\build\net35\NUnit3TestAdapter.props')" Text="$([System.String]::Format('$(ErrorText)', '..\..\ThirdParty\NUnit3TestAdapter.4.0.0-beta.2\build\net35\NUnit3TestAdapter.props'))" />
    <Error Condition="!Exists('..\..\ThirdParty\NUnit3TestAdapter.4.0.0\build\net35\NUnit3TestAdapter.props')" Text="$([System.String]::Format('$(ErrorText)', '..\..\ThirdParty\NUnit3TestAdapter.4.0.0\build\net35\NUnit3TestAdapter.props'))" />
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.

IRequestExtensions.cs
-1
+1
/Tools/ToolsCF/WebServer/WebFramework/IRequestExtensions.cs
            DateTime lastModified = DateTime.MinValue;
            string ifModifiedSince = request.GetHeader(HeaderNames.IfModifiedSince);
            if (ifModifiedSince != null)
            if (!string.IsNullOrEmpty(ifModifiedSince))
            {
                lastModified = DateTime.Parse(ifModifiedSince);
            }

GapServiceTest.cs
-10
+8
/Tools/ToolsTest/.vNext/GapServiceTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.vNext.Gaps;
using Neo.ApplicationFramework.Tools.vNext.Gaps;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.vNext
{
        private static ILazy<IBrandService> CreateMockBrandService(string brandName)
        {
            ILazy<IBrandService> brandService = CreateLazyStub<IBrandService>();
            brandService.Value.Stub(item => item.BrandName).Return(brandName);
            brandService.Value.BrandName.Returns(brandName);
            return brandService;
        }
            bool isWpfVNextTargetFeatureActivated,
            bool isDisableGapsFeatureActivated)
        {
            var featureService = MockRepository.GenerateStub<IFeatureSecurityServiceIde>();
            var featureService = Substitute.For<IFeatureSecurityServiceIde>();
            ILazy<IBrandService> brandService = CreateLazyStub<IBrandService>();
            ILazy<ITargetService> targetService = CreateLazyStub<ITargetService>();
            featureService.Stub(item => item.IsActivated<DisableGapsFilteringFeature>())
                .Return(isDisableGapsFeatureActivated);
            featureService.Stub(item => item.IsActivated<ExperimentalWPFvNextTargetFeature>())
                .Return(isWpfVNextTargetFeatureActivated);
            featureService.IsActivated<DisableGapsFilteringFeature>().Returns(isDisableGapsFeatureActivated);
            featureService.IsActivated<ExperimentalWPFvNextTargetFeature>().Returns(isWpfVNextTargetFeatureActivated);
            return featureService;
        }
        {
            ILazy<ITargetService> targetService = CreateLazyStub<ITargetService>();
            ILazy<ITarget> target = CreateLazyStub<ITarget>();
            target.Value.Stub(item => item.Id).Return(targetPlatform);
            target.Value.Id.Returns(targetPlatform);
            targetService.Value.CurrentTarget = target.Value;
            return targetService;
        private static ILazy<T> CreateLazyStub<T>() where T : class
        {
            var lazy = MockRepository.GenerateStub<ILazy<T>>();
            lazy.Stub(l => l.Value).Return(MockRepository.GenerateStub<T>());
            var lazy = Substitute.For<ILazy<T>>();
            lazy.Value.Returns(Substitute.For<T>());
            return lazy;
        }
        

ToolsTest.csproj
+166
/Tools/ToolsTest/.vNext/ToolsTest.csproj
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net6.0-windows;net48</TargetFrameworks>
    <UseWindowsForms>true</UseWindowsForms>
    <UseWPF>true</UseWPF>
    <IsPackable>false</IsPackable>
    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>
    <GenerateAssemblyTitleAttribute>false</GenerateAssemblyTitleAttribute>
    <RootNamespace>Neo.ApplicationFramework.Tools</RootNamespace>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE;DEBUG;VNEXT_TARGET;VNEXT_TARGET_NEEDS_REIMPLEMENTATION;VNEXT_TARGET_INCLUDED;VNEXT_TARGET_STRUCTURE_DIFFERENCE</DefineConstants>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DefineConstants>TRACE;VNEXT_TARGET;VNEXT_TARGET_NEEDS_REIMPLEMENTATION;VNEXT_TARGET_INCLUDED;VNEXT_TARGET_STRUCTURE_DIFFERENCE</DefineConstants>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="..\**\*.cs" />
    <Compile Remove="*.cs" />
    <Compile Remove="obj\**" />
    <EmbeddedResource Remove="obj\**" />
    <None Remove="obj\**" />
    <Compile Remove="..\obj\**" />
    <EmbeddedResource Remove="..\obj\**" />
    <None Remove="..\obj\**" />
  </ItemGroup>
  <ItemGroup>
    <Compile Remove="..\About\FeatureConfigurationFacadeTest.cs" />
    <Compile Remove="..\About\FeatureConfigurationViewModelTest.cs" />
    <Compile Remove="..\Action\ActionEditors\ViewModels\*.cs" />
    <Compile Remove="..\Action\ActionPropPageProviderTest.cs" />
    <Compile Remove="..\Action\Validation\InvalidActionValidatorTest.cs" />
    <Compile Remove="..\Build\**\*.cs" />
    <Compile Remove="..\CommonPropertyPages\ServerPropertyPageTest.cs" />
    <Compile Remove="..\Configurations\*.cs" />
    <Compile Remove="..\ControllerManager\**\*.cs" />
    <Compile Remove="..\CreateSeries\CreateSeriesTest.cs" />
    <Compile Remove="..\CrossReference\**\*.cs" />
    <Compile Remove="..\Database\*.cs" />
    <Compile Remove="..\Design\**\*.cs" />
    <Compile Remove="..\EventMapper\EventMapperServiceTest.cs" />
    <Compile Remove="..\Event\DeadSubscriptionsRemoverTest.cs" />
    <Compile Remove="..\FileUtilities\FileSettingsToolTest.cs" />
    <Compile Remove="..\FontUsageManager\FontServiceTest.cs" />
    <Compile Remove="..\Help\*.cs" />
    <Compile Remove="..\ImportExport\*.cs" />
    <Compile Remove="..\InformationDesignerImport\**\*.cs" />
    <Compile Remove="..\Localization\*.cs" />
    <Compile Remove="..\MessageLibrary\MessageImportExportTest.cs" />
    <Compile Remove="..\MessageRecorder\*.cs" />
    <Compile Remove="..\MiniToolbar\MiniToolbarLogicTest.cs" />
    <Compile Remove="..\NavigationManager\NavigationModelTest.cs" />
    <Compile Remove="..\ObjectBrowser\*.cs" />
    <Compile Remove="..\OptionsManager\*.cs" />
    <Compile Remove="..\ProjectManager\**\*.cs" />
    <Compile Remove="..\PropertyGrid\ObjectPropertyServiceTest.cs" />
    <Compile Remove="..\Registration\KeyValidatorTest.cs" />
    <Compile Remove="..\RegistryAccess\MRUListTest.cs" />
    <Compile Remove="..\RibbonManager\**\*.cs" />
    <Compile Remove="..\Rules\InternalReferenceTest.cs" />
    <Compile Remove="..\Scheduler\SchedulerPdaTest\**\*.cs" />
    <Compile Remove="..\ScreenObjectDecorator\ScreenObjectDecoratorServiceTest.cs" />
    <Compile Remove="..\Screen\ScreenEditor\**\*.cs" />
    <Compile Remove="..\ScriptEditor\**\*.cs" />
    <Compile Remove="..\Screen\ScreenIDServiceTest.cs" />
    <Compile Remove="..\Security\FeatureSecurityServiceIdeTest.cs" />
    <Compile Remove="..\Security\FeatureSecurityToolXmlWriterTest.cs" />
    <Compile Remove="..\Security\SecuredFeatureBaseTest.cs" />
    <Compile Remove="..\Selection\SelectionServicesTest.cs" />
    <Compile Remove="..\Serialization\**\*.cs" />
    <Compile Remove="..\StructuredTags\**\*.cs" />
    <Compile Remove="..\Tag\TagUsageValidatorTest.cs" />
    <Compile Remove="..\ToolManager\ToolViewSiteTest.cs" />
    <Compile Remove="..\Transfer\*.cs" />
    <Compile Remove="..\TypeList\TypeListServiceTest.cs" />
    <Compile Remove="..\TypeNames\TestClassAvailablity.cs" />
    <Compile Remove="..\TypeReference\TypeReferenceManagerTest.cs" />
    <Compile Remove="..\UndoManager\*.cs" />
    <Compile Remove="..\UpdateManager\*.cs" />
    <Compile Remove="..\WebServer\**\*.cs" />
    <Compile Remove="..\Wizards\**\*.cs" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="..\Screen\ScreenIDsDummy.xml" Link="Screen\ScreenIDsDummy.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="..\Screen\ScreenIDsWithErrosDummy.xml" Link="Screen\ScreenIDsWithErrosDummy.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="..\TrendViewer\TestFiles\TrendDataConfigTest.xml" Link="TrendViewer\TestFiles\TrendDataConfigTest.xml" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.8.3" />
    <PackageReference Include="NSubstitute" Version="4.2.2" />
    <PackageReference Include="NUnit" Version="3.13.2" />
    <PackageReference Include="NUnit3TestAdapter" Version="4.0.0" />
    <PackageReference Include="coverlet.collector" Version="1.3.0" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\..\BuildingBlocks\Storage\Providers\SQLiteDatabase\SQLiteDatabaseCF\.vNext\SQLiteDatabaseCF.csproj" />
    <ProjectReference Include="..\..\..\Interfaces\Interfaces\.vNext\Interfaces.csproj" />
    <ProjectReference Include="..\..\..\Test\TestUtilities\.vNext\TestUtilities.csproj" />
    <ProjectReference Include="..\..\ToolsCF\.vNext\ToolsCF.csproj" />
    <ProjectReference Include="..\..\Tools\.vNext\Tools.csproj" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="CommunicationServerProtocols">
      <HintPath>..\..\..\Install\Shared\Dependencies\CommunicationServerProtocols.dll</HintPath>
    </Reference>
    <Reference Include="DataSourceInterop">
      <HintPath>..\..\..\Interop\DataSource\BeDataSource2\Interop\DataSourceInterop.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="..\Reporting\Generating\ExampleReports\2sheet5x5.xls" Link="Reporting\Generating\ExampleReports\2sheet5x5.xls">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="..\Reporting\Generating\ExampleReports\ColumnWidth.xls" Link="Reporting\Generating\ExampleReports\ColumnWidth.xls">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="..\Reporting\Generating\ExampleReports\landscapeSheetWithHPageBreak.xls" Link="Reporting\Generating\ExampleReports\landscapeSheetWithHPageBreak.xls">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="..\Reporting\Generating\ExampleReports\ReportExample1.xls" Link="Reporting\Generating\ExampleReports\ReportExample1.xls">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="..\Reporting\Generating\ExampleReports\ReportExample2.xls" Link="Reporting\Generating\ExampleReports\ReportExample2.xls">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="..\Reporting\Generating\ExampleReports\ReportExample3.xls" Link="Reporting\Generating\ExampleReports\ReportExample3.xls">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="..\Reporting\Generating\ExampleReports\ReportExample4.xls" Link="Reporting\Generating\ExampleReports\ReportExample4.xls">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="..\Reporting\Generating\ExampleReports\ReportExample5.xls" Link="Reporting\Generating\ExampleReports\ReportExample5.xls">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="..\Reporting\Generating\ExampleReports\ReportExample6.xls" Link="Reporting\Generating\ExampleReports\ReportExample6.xls">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="..\Reporting\Generating\ExampleReports\ReportForSerialDevice.xls" Link="Reporting\Generating\ExampleReports\ReportForSerialDevice.xls">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
    <EmbeddedResource Include="..\Reporting\Generating\ExampleReports\UnicodeExample.xls" Link="Reporting\Generating\ExampleReports\UnicodeExample.xls">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </EmbeddedResource>
  </ItemGroup>
</Project>

FeatureConfigurationFacadeTest.cs
-8
+8
/Tools/ToolsTest/About/FeatureConfigurationFacadeTest.cs
using System.Linq;
using Core.Api.Feature;
using Neo.ApplicationFramework.Features;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.About
{
        [SetUp]
        public void SetUp()
        {
            m_FeatureSecurityServiceIdeStub = MockRepository.GenerateStub<IFeatureSecurityServiceIde>();
            m_FeatureSecurityServiceIdeStub = Substitute.For<IFeatureSecurityServiceIde>();
        }
        [Test]
            featureList.Add(featureActive);
            featureList.Add(featureInactive);
            m_FeatureSecurityServiceIdeStub.Stub(fss => fss.GetAllFeatures()).Return(featureList);
            m_FeatureSecurityServiceIdeStub.Stub(fss => fss.GetAllFeaturesNotBranded()).Return(featureList);
            m_FeatureSecurityServiceIdeStub.Stub(fss => fss.IsActivated(typeof(TestFeatureActive))).Return(true);
            m_FeatureSecurityServiceIdeStub.Stub(fss => fss.IsActivated(typeof(TestFeatureInactive))).Return(false);
            m_FeatureSecurityServiceIdeStub.GetAllFeatures().Returns(featureList);
            m_FeatureSecurityServiceIdeStub.GetAllFeaturesNotBranded().Returns(featureList);
            m_FeatureSecurityServiceIdeStub.IsActivated(typeof(TestFeatureActive)).Returns(true);
            m_FeatureSecurityServiceIdeStub.IsActivated(typeof(TestFeatureInactive)).Returns(false);
            // ACT
            var featureConfigurationFacade = new FeatureConfigurationFacade(m_FeatureSecurityServiceIdeStub);
            bool eventWasFired = false;
            ISecuredFeature testFeature1 = new TestFeatureActive();
            m_FeatureSecurityServiceIdeStub.Stub(fss => fss.AddFeatureKey(testFeature1.InternalId)).Return(true);
            m_FeatureSecurityServiceIdeStub.AddFeatureKey(testFeature1.InternalId).Returns(true);
            var featureConfigurationFacade = new FeatureConfigurationFacade(m_FeatureSecurityServiceIdeStub);
            featureConfigurationFacade.FeaturesChanged += (sender, e) => eventWasFired = true;
            bool eventWasFired = false;
            ISecuredFeature testFeature1 = new TestFeatureActive();
            m_FeatureSecurityServiceIdeStub.Stub(fss => fss.RemoveFeature(testFeature1.InternalId)).Return(true);
            m_FeatureSecurityServiceIdeStub.RemoveFeature(testFeature1.InternalId).Returns(true);
            var featureConfigurationFacade = new FeatureConfigurationFacade(m_FeatureSecurityServiceIdeStub);
            featureConfigurationFacade.FeaturesChanged += (sender, e) => eventWasFired = true;

FeatureConfigurationViewModelTest.cs
-6
+7
/Tools/ToolsTest/About/FeatureConfigurationViewModelTest.cs
using System.Linq;
using Core.Api.Feature;
using Neo.ApplicationFramework.Utilities.Assertion;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Assert = NUnit.Framework.Assert;
namespace Neo.ApplicationFramework.Tools.About
        {
            var list = new List<Guid>();
            m_FeatureConfigurationFacade = MockRepository.GenerateStub<IFeatureConfigurationFacade>();
            m_FeatureConfigurationFacade = Substitute.For<IFeatureConfigurationFacade>();
            m_FeatureConfigurationFacade.Stub(inv => inv.GetActivatedFeaturesControlledByRegistry()).Return(list.Select(id => new FeatureDto(id, "name", "friendlyName", "description")));
            m_FeatureConfigurationFacade.Stub(inv => inv.AddFeatureKey(Arg<Guid>.Is.Anything)).WhenCalled(inv => { list.Add((Guid)inv.Arguments[0]); inv.ReturnValue = true; }).Return(true);
            m_FeatureConfigurationFacade.Stub(inv => inv.FeatureActivated(Arg<Guid>.Is.Anything)).Return(false);
            m_FeatureConfigurationFacade.GetActivatedFeaturesControlledByRegistry().Returns(list.Select(id => new FeatureDto(id, "name", "friendlyName", "description")));
            m_FeatureConfigurationFacade.AddFeatureKey(Arg.Any<Guid>())
                .Returns(inv => { list.Add((Guid)inv[0]); return true; });
            m_FeatureConfigurationFacade.FeatureActivated(Arg.Any<Guid>()).Returns(false);
        }
        [Test]
            var correctGuid = Guid.NewGuid(); // correct guid should make the add work
            viewModel.InputGuid = correctGuid.ToString();
            viewModel.OkCommand.Execute(null); // execute the command
            m_FeatureConfigurationFacade.Raise(f => f.FeaturesChanged += null, m_FeatureConfigurationFacade, EventArgs.Empty);
            Raise.EventWith(m_FeatureConfigurationFacade, EventArgs.Empty);
            Assert.IsTrue(viewModel.Features[0].Id == correctGuid);
            Assert.IsTrue(viewModel.InputGuid == string.Empty); // the command should reset the string

ExecuteScriptViewModelTest.cs
-8
+8
/Tools/ToolsTest/Action/ActionEditors/ViewModels/ExecuteScriptViewModelTest.cs
using Neo.ApplicationFramework.Controls.Action.ActionEditors;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Action.ActionEditors.ViewModels
{
            ScriptModule.ScriptModule scriptModule = new ScriptModule.ScriptModule();
            scriptModule.Name = "ScriptModule";
            IGlobalReferenceService globalReferenceServiceStub = MockRepository.GenerateStub<IGlobalReferenceService>();
            globalReferenceServiceStub.Stub(stub => stub.GetObjects<ScriptModule.ScriptModule>(false)).Return(new[] { scriptModule });
            globalReferenceServiceStub.Stub(stub => stub.GetObject<ScriptModule.ScriptModule>(Arg<string>.Is.Anything)).Return(scriptModule);
            IGlobalReferenceService globalReferenceServiceStub = Substitute.For<IGlobalReferenceService>();
            globalReferenceServiceStub.GetObjects<ScriptModule.ScriptModule>(false).Returns(new[] { scriptModule });
            globalReferenceServiceStub.GetObject<ScriptModule.ScriptModule>(Arg.Any<string>()).Returns(scriptModule);
            ServiceContainerCF.Instance.AddService(typeof(IGlobalReferenceService), globalReferenceServiceStub);
            IProjectItem scriptOwnerMock = MockRepository.GenerateMock<IProjectItem, IScriptOwner>();
            scriptOwnerMock.Stub(scriptOwner => ((IScriptOwner)scriptOwner).ScriptText).Return(@"
            IProjectItem scriptOwnerMock = Substitute.For<IProjectItem, IScriptOwner>();
            ((IScriptOwner)scriptOwnerMock).ScriptText.Returns(@"
                public static void StaticMethod()
                public void Method()
                public void MethodWithParam(IScriptTag param)
                public void MethodWithUnsupportedParam(CustomClass object)
                public void MethodWithSourceParam(IScriptObject sourceParam, int param2)");
            IProjectItemFinder projectItemFinderStub = MockRepository.GenerateStub<IProjectItemFinder>();
            projectItemFinderStub.Stub(stub => stub.GetProjectItem(scriptModule)).Return(scriptOwnerMock);
            IProjectItemFinder projectItemFinderStub = Substitute.For<IProjectItemFinder>();
            projectItemFinderStub.GetProjectItem(scriptModule).Returns(scriptOwnerMock);
            ServiceContainerCF.Instance.AddService(typeof(IProjectItemFinder), projectItemFinderStub);
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();

GenerateReportViewModelTest.cs
-6
+6
/Tools/ToolsTest/Action/ActionEditors/ViewModels/GenerateReportViewModelTest.cs
using Neo.ApplicationFramework.Interfaces.Reporting;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Reporting;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Action.ActionEditors.ViewModels
{
        public virtual void SetUp()
        {
            TestHelper.ClearServices();
            TestHelper.CreateAndAddServiceMock<IObjectNotificationService>();
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<IObjectNotificationService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
            m_Reports = new Reports();
            m_FirstReport = MockRepository.GenerateStub<IReport>().With(rep => rep.Name = "Report 1");
            m_SecondReport = MockRepository.GenerateStub<IReport>().With(rep => rep.Name = "Report 2");
            m_FirstReport = Substitute.For<IReport>().With(rep => rep.Name = "Report 1");
            m_SecondReport = Substitute.For<IReport>().With(rep => rep.Name = "Report 2");
            m_Reports.ReportItems.Add(m_FirstReport);
            m_Reports.ReportItems.Add(m_SecondReport);
            IGlobalReferenceService referenceService = TestHelper.CreateAndAddServiceStub<IGlobalReferenceService>();
            referenceService.Stub(refService => refService.GetObjects<Reports>(false)).Return(new[] { m_Reports });
            referenceService.GetObjects<Reports>(false).Returns(new[] { m_Reports });
        }
        [Test]

InvalidActionValidatorTest.cs
-8
+7
/Tools/ToolsTest/Action/Validation/InvalidActionValidatorTest.cs
using Neo.ApplicationFramework.Interfaces.Constants;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.CrossReference;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Action.Validation
{
        [SetUp]
        public void Setup()
        {
            m_ErrorListService = TestHelper.CreateAndAddServiceMock<IErrorListService>();
            m_ErrorListService = TestHelper.CreateAndAddServiceStub<IErrorListService>();
            m_CrossReferenceService = TestHelper.CreateAndAddServiceStub<ICrossReferenceService>();
            m_InvalidActionValidator = new InvalidActionValidator(m_CrossReferenceService.ToILazy());
        {
            //ARRANGE
            var invalidActions = GetInvalidActions(noOfInvalidActions);
            m_CrossReferenceService.Stub(x => x.GetReferences<IActionCrossReferenceItem>(ApplicationConstantsCF.InvalidActionCategoryName)).Return(invalidActions);
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat.Times(noOfInvalidActions);
            m_CrossReferenceService.GetReferences<IActionCrossReferenceItem>(ApplicationConstantsCF.InvalidActionCategoryName).Returns(invalidActions);
            
            //ACT
            bool isValid = m_InvalidActionValidator.Validate();
            //ASSERT
            Assert.That(isValid, Is.EqualTo((noOfInvalidActions <= 0)));
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.ReceivedWithAnyArgs(noOfInvalidActions).AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
        }
        [Test]
        {
            //ARRANGE
            var invalidActions = GetInvalidActions(6, true);
            m_CrossReferenceService.Stub(x => x.GetReferences<IActionCrossReferenceItem>(ApplicationConstantsCF.InvalidActionCategoryName)).Return(invalidActions);
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat.Times(3);
            m_CrossReferenceService.GetReferences<IActionCrossReferenceItem>(ApplicationConstantsCF.InvalidActionCategoryName).Returns(invalidActions);
            //ACT
            bool isValid = m_InvalidActionValidator.Validate();
            //ASSERT
            Assert.IsFalse(isValid);
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.Received(3).AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
        }
        private IEnumerable<IActionCrossReferenceItem> GetInvalidActions(int count, bool includeDuplicates = false)

AliasActionExtensionsTest.cs
-9
+9
/Tools/ToolsTest/Action/AliasActionExtensionsTest.cs
using Neo.ApplicationFramework.Interop.DataSource;
using Neo.ApplicationFramework.Tools.Actions;
using Neo.ApplicationFramework.Tools.OpcClient;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Action
{
        {
            m_GlobalDataItem = new GlobalDataItem();
            m_ScreenStub = MockRepository.GenerateStub<IInstantiatable>();
            m_ScreenStub.Stub(x => x.GetBoundDataItem(Arg<string>.Is.Anything)).Return(m_GlobalDataItem);
            m_ScreenStub = Substitute.For<IInstantiatable>();
            m_ScreenStub.GetBoundDataItem(Arg.Any<string>()).Returns(m_GlobalDataItem);
        }
        private void InvokeActionExtension(System.Action action, VariantValue initialValue, VariantValue expectedResult, BEDATATYPE dataType = BEDATATYPE.DT_DEFAULT)
            globalDataItem.Value = initialValue;
            string actualInitialValue = globalDataItem.Value;
            var screenStub = MockRepository.GenerateStub<IInstantiatable>();
            screenStub.Stub(x => x.GetBoundDataItem(Arg<string>.Is.Anything)).Return(globalDataItem);
            var screenStub = Substitute.For<IInstantiatable>();
            screenStub.GetBoundDataItem(Arg.Any<string>()).Returns(globalDataItem);
            m_String.SetString(stringToSet, screenStub, "Alias");
            globalDataItem.Value = initialValue;
            DateTime actualInitialValue = globalDataItem.Value;
            var screenStub = MockRepository.GenerateStub<IInstantiatable>();
            screenStub.Stub(x => x.GetBoundDataItem(Arg<string>.Is.Anything)).Return(globalDataItem);
            var screenStub = Substitute.For<IInstantiatable>();
            screenStub.GetBoundDataItem(Arg.Any<string>()).Returns(globalDataItem);
            m_DateTime.SetString(dateTimeToSet.ToString(), screenStub, "Alias");
        public void AliasWithUnboundDataItemDoesNotThrow()
        {
            // ARRANGE
            var screenStub = MockRepository.GenerateStub<IInstantiatable>();
            screenStub.Stub(x => x.GetBoundDataItem(Arg<string>.Is.Anything)).Return(null);
            var screenStub = Substitute.For<IInstantiatable>();
            screenStub.GetBoundDataItem(Arg.Any<string>()).Returns(x => null);
            // ACT

CodeGeneratedActionParameterInfoPositionTest.cs
-3
+5
/Tools/ToolsTest/Action/CodeGeneratedActionParameterInfoPositionTest.cs
#if !VNEXT_TARGET
using System;
using System.CodeDom;
using Core.Api.Platform;
using Neo.ApplicationFramework.Tools.Design.CodeGeneration;
using Neo.ApplicationFramework.Tools.EventMapper;
using Neo.ApplicationFramework.Tools.OpcClient;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Action
{
            CodeGenerationHelper = CodeGenerationHelperFactory.Create(CompileUnitGenerator);
            var target = new Target(TargetPlatform.Windows, string.Empty, string.Empty);
            var targetService = MockRepository.GenerateMock<ITargetService>();
            targetService.Stub(x => x.CurrentTarget).Return(target);
            var targetService = Substitute.For<ITargetService>();
            targetService.CurrentTarget.Returns(target);
            TestHelper.AddService(targetService);
            TestHelper.AddService<IEventMapperService>(new EventMapperService(targetService.ToILazy()));
#endregion
    }
}
#endif

AlarmEventTest.cs
-72
+41
/Tools/ToolsTest/Alarm/AlarmEventTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.Alarm
{
    public class AlarmEventTest
    {
        private const string AlarmItemName = "Some alarm item name";
        private MockRepository m_Mocks;
        private IAlarmServer m_AlarmServerMock;
        private IAlarmItem m_AlarmItemMock;
        public void SetUp()
        {
            IToolManager toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(true);
            m_AlarmServerStateService = MockRepository.GenerateMock<IAlarmServerStateService>();
            toolManager.Runtime.Returns(true);
            m_AlarmServerStateService = Substitute.For<IAlarmServerStateService>();
            TestHelper.AddService<IAlarmServerStateService>(m_AlarmServerStateService);
            m_AlarmItemMock = MockRepository.GenerateMock<IAlarmItem>();
            m_AlarmItemMock = Substitute.For<IAlarmItem>();
            m_Mocks = new MockRepository();
            var alarmServerMock = m_Mocks.StrictMultiMock<IAlarmServer>(typeof(IAlarmServerEventState));
            alarmServerMock.Stub<IAlarmServer>(alarmServer => alarmServer.GetAlarmItem(AlarmItemName))
                           .Return(m_AlarmItemMock)
                           .Repeat.Any();
            alarmServerMock.Replay();
            var alarmServerMock = Substitute.For<IAlarmServer>();
            alarmServerMock.GetAlarmItem(AlarmItemName)
                           .Returns(m_AlarmItemMock);
            m_AlarmServerMock = alarmServerMock;
            ISecurityServiceCF securityService = TestHelper.AddServiceStub<ISecurityServiceCF>();
            securityService.Stub(x => x.CurrentUser).Return(string.Empty);
            securityService.CurrentUser.Returns(string.Empty);
            var dateTimeEditService = TestHelper.AddServiceStub<IDateTimeEditService>();
            dateTimeEditService.Stub(x => x.LocalTime).Return(DateTime.Now);
            dateTimeEditService.LocalTime.Returns(DateTime.Now);
        }
        [TearDown]
        public void TearDown()
        {
            m_Mocks.VerifyAll();
            TestHelper.ClearServices();
        }
        [Test]
        public void EventStateRegistrationsAreCorrectWhenShuttingOffAnActiveAlarmEvent()
        {
            m_AlarmItemMock.Expect(alarmItem => alarmItem.AcknowledgeRequired).Return(true);
            m_AlarmItemMock.AcknowledgeRequired.Returns(true);
            IAlarmEvent alarmEvent = CreateAlarmEvent(AlarmState.Active);
            m_AlarmServerStateService.Expect(x => x.UnRegisterAlarmEventState(AlarmState.Active));
            m_AlarmServerStateService.Expect(x => x.RegisterAlarmEventState(AlarmState.Inactive));
            alarmEvent.AlarmOff();
            m_AlarmServerStateService.VerifyAllExpectations();
            m_AlarmServerStateService.UnRegisterAlarmEventState(AlarmState.Active);
            m_AlarmServerStateService.RegisterAlarmEventState(AlarmState.Inactive);
        }
        [Test]
        public void EventStateRegistrationsAreCorrectWhenShuttingOffAnActiveAlarmEventWhichDoesNotrequireAcknowledge()
        {
            m_AlarmItemMock.Expect(alarmItem => alarmItem.AcknowledgeRequired).Return(false);
            m_AlarmItemMock.AcknowledgeRequired.Returns(false);
            IAlarmEvent alarmEvent = CreateAlarmEvent(AlarmState.Active);
            m_AlarmServerStateService.Expect(x => x.UnRegisterAlarmEventState(AlarmState.Active));
            m_AlarmServerStateService.Expect(x => x.RegisterAlarmEventState(AlarmState.Inactive));
            m_AlarmServerStateService.Expect(x => x.UnRegisterAlarmEventState(AlarmState.Inactive));
            m_AlarmServerStateService.Expect(x => x.RegisterAlarmEventState(AlarmState.Normal));
            alarmEvent.AlarmOff();
            m_AlarmServerStateService.VerifyAllExpectations();
            m_AlarmItemMock.VerifyAllExpectations();
            m_AlarmServerStateService.UnRegisterAlarmEventState(AlarmState.Active);
            m_AlarmServerStateService.RegisterAlarmEventState(AlarmState.Inactive);
            m_AlarmServerStateService.UnRegisterAlarmEventState(AlarmState.Inactive);
            m_AlarmServerStateService.RegisterAlarmEventState(AlarmState.Normal);
        }
        [Test]
        public void EventStateRegistrationsAreCorrectWhenShuttingOffAnAcknowledgedAlarmEvent()
        {
            m_AlarmItemMock.Expect(alarmItem => alarmItem.AcknowledgeRequired).Return(true);
            m_AlarmItemMock.AcknowledgeRequired.Returns(true);
            IAlarmEvent alarmEvent = CreateAlarmEvent(AlarmState.Acknowledge);
            m_AlarmServerStateService.Expect(x => x.UnRegisterAlarmEventState(AlarmState.Acknowledge));
            m_AlarmServerStateService.Expect(x => x.RegisterAlarmEventState(AlarmState.Inactive));
            m_AlarmServerStateService.Expect(x => x.UnRegisterAlarmEventState(AlarmState.Inactive));
            m_AlarmServerStateService.Expect(x => x.RegisterAlarmEventState(AlarmState.Normal));
            alarmEvent.AlarmOff();
            m_AlarmServerStateService.VerifyAllExpectations();
            m_AlarmServerStateService.UnRegisterAlarmEventState(AlarmState.Acknowledge);
            m_AlarmServerStateService.RegisterAlarmEventState(AlarmState.Inactive);
            m_AlarmServerStateService.UnRegisterAlarmEventState(AlarmState.Inactive);
            m_AlarmServerStateService.RegisterAlarmEventState(AlarmState.Normal);
        }
        [Test]
        public void NoEventStateRegistrationsWhenShuttingOffAnInactiveAlarm()
        {
            m_AlarmItemMock.Expect(alarmItem => alarmItem.AcknowledgeRequired).Return(true);
            m_AlarmItemMock.AcknowledgeRequired.Returns(true);
            IAlarmEvent alarmEvent = CreateAlarmEvent(AlarmState.Inactive);
            using (m_Mocks.Record())
            {
            }
            using (m_Mocks.Playback())
            {
            alarmEvent.AlarmOff();
            }
            // Assertion ?
        }
        [Test]
        public void NoEventStateRegistrationsAreCorrectWhenShuttingOffANormalAlarm()
        {
            m_AlarmItemMock.Expect(alarmItem => alarmItem.AcknowledgeRequired).Return(true);
            m_AlarmItemMock.AcknowledgeRequired.Returns(true);
            IAlarmEvent alarmEvent = CreateAlarmEvent(AlarmState.Normal);
            using (m_Mocks.Record())
            {
            }
            alarmEvent.AlarmOff();
            using (m_Mocks.Playback())
            {
                alarmEvent.AlarmOff();
            }
            // Assertion ?
        }
        #endregion
        [Test]
        public void EventStateRegistrationsAreCorrectWhenAcknowledgingAnActiveAlarmEvent()
        {
            m_AlarmItemMock.Expect(alarmItem => alarmItem.AcknowledgeRequired).Return(true);
            m_AlarmItemMock.AcknowledgeRequired.Returns(true);
            IAlarmEvent alarmEvent = CreateAlarmEvent(AlarmState.Active);
            m_AlarmServerStateService.Expect(x => x.UnRegisterAlarmEventState(AlarmState.Active));
            m_AlarmServerStateService.Expect(x => x.RegisterAlarmEventState(AlarmState.Acknowledge));
            alarmEvent.Acknowledge();
            alarmEvent.Acknowledge();
            m_AlarmServerStateService.VerifyAllExpectations();
            m_AlarmServerStateService.UnRegisterAlarmEventState(AlarmState.Active);
            m_AlarmServerStateService.RegisterAlarmEventState(AlarmState.Acknowledge);
        }
        [Test]
        public void EventStateRegistrationsAreCorrectWhenAcknowledgingAnInactiveAlarmEvent()
        {
            m_AlarmItemMock.Expect(alarmItem => alarmItem.AcknowledgeRequired).Return(true);
            m_AlarmItemMock.AcknowledgeRequired.Returns(true);
            IAlarmEvent alarmEvent = CreateAlarmEvent(AlarmState.Inactive);
            m_AlarmServerStateService.Expect(x => x.UnRegisterAlarmEventState(AlarmState.Inactive));
            m_AlarmServerStateService.Expect(x => x.RegisterAlarmEventState(AlarmState.Acknowledge));
            m_AlarmServerStateService.Expect(x => x.UnRegisterAlarmEventState(AlarmState.Acknowledge));
            m_AlarmServerStateService.Expect(x => x.RegisterAlarmEventState(AlarmState.Normal));
            alarmEvent.Acknowledge();
            alarmEvent.Acknowledge();
            m_AlarmServerStateService.VerifyAllExpectations();
            m_AlarmServerStateService.UnRegisterAlarmEventState(AlarmState.Inactive);
            m_AlarmServerStateService.RegisterAlarmEventState(AlarmState.Acknowledge);
            m_AlarmServerStateService.UnRegisterAlarmEventState(AlarmState.Acknowledge);
            m_AlarmServerStateService.RegisterAlarmEventState(AlarmState.Normal);
        }
        [Test]
        public void NoEventStateRegistrationsWhenAcknowledgingAnAcknowledgedAlarm()
        {
            m_AlarmItemMock.Expect(alarmItem => alarmItem.AcknowledgeRequired).Return(true);
            m_AlarmItemMock.AcknowledgeRequired.Returns(true);
            IAlarmEvent alarmEvent = CreateAlarmEvent(AlarmState.Acknowledge);
            using (m_Mocks.Record())
            {
            }
            alarmEvent.Acknowledge();
            using (m_Mocks.Playback())
            {
                alarmEvent.Acknowledge();
            }
            // Assertion ?
        }
        #endregion

AlarmItemAcknowledgedTest.cs
-10
+6
/Tools/ToolsTest/Alarm/AlarmItemAcknowledgedTest.cs
using System;
using Core.Component.Api.Instantiation;
using Core.Controls.Api.Designer;
using Neo.ApplicationFramework.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Storage;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.TestUtilities.Threading;
using Neo.ApplicationFramework.Threading;
using Neo.ApplicationFramework.Utilities.Lazy;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Alarm
{
        private bool m_GroupAcknowledged;
        private bool m_ServerAcknowledged;
        private bool m_AlarmDeleted;
        private MockRepository m_MockRepository;
        private IAlarmServerStorage m_AlarmServerStorage;
        [SetUp]
        public void SetUp()
        {
            m_MockRepository = new MockRepository();
            NeoDesignerProperties.IsInDesignMode = true;
            TestHelper.AddServiceStub<IAlarmServerStateService>();
            TestHelper.AddServiceStub<IStorageCacheService>();
            ISecurityServiceCF securityService = TestHelper.AddServiceStub<ISecurityServiceCF>();
            securityService.Stub(x => x.CurrentUser).Return(string.Empty);
            securityService.CurrentUser.Returns(string.Empty);
            var dateTimeEditService = TestHelper.AddServiceStub<IDateTimeEditService>();
            dateTimeEditService.Stub(x => x.LocalTime).Return(DateTime.Now);
            dateTimeEditService.LocalTime.Returns(DateTime.Now);
            m_AlarmServerStorage = m_MockRepository.Stub<IAlarmServerStorage>();
            m_AlarmServerStorage = Substitute.For<IAlarmServerStorage>();
            var eventFactory = new AlarmEventFactory();
            eventFactory.AddAlarmEventTypeProvider("AlarmEvent", () => new AlarmEvent()); // register default AlarmEvent
            m_AlarmServer = new ExtendedAlarmServer(m_AlarmServerStorage, eventFactory) { IsEnabled = true };
            public ExtendedAlarmServer(IAlarmServerStorage alarmServerStorage, IAlarmEventFactory alarmEventFactory)
               : base(alarmServerStorage, 
                     new LazyCF<IActionConsumer>(() => new InvokeDirectActionConsumer(ActionConsumerName) as IActionConsumer), 
                     MockRepository.GenerateStub<IRootComponentService>().ToILazy(),
                     MockRepository.GenerateStub<ISystemTagServiceCF>().ToILazy(),
                     Substitute.For<IRootComponentService>().ToILazy(),
                     Substitute.For<ISystemTagServiceCF>().ToILazy(),
                     alarmEventFactory.ToILazy())
            {
                base.m_Initialized = true;

AlarmItemSorterTest.cs
-4
+4
/Tools/ToolsTest/Alarm/AlarmItemSorterTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.Alarm
{
            m_AlarmGroups = new BindingList<IAlarmGroup>();
            m_AlarmItems = new BindingList<IAlarmItem>();
            m_AlarmServer = MockRepository.GenerateMock<IAlarmServer>();
            m_AlarmServer.Stub(x => x.AlarmGroups).Return(m_AlarmGroups);
            m_AlarmServer = Substitute.For<IAlarmServer>();
            m_AlarmServer.AlarmGroups.Returns(m_AlarmGroups);
            m_GlobalReferenceService = TestHelper.CreateAndAddServiceStub<IGlobalReferenceService>();
            m_GlobalReferenceService.Stub(x => x.GetObject<IAlarmServer>(ApplicationConstantsCF.AlarmServerReferenceName)).Return(m_AlarmServer).Repeat.Any();
            m_GlobalReferenceService.GetObject<IAlarmServer>(ApplicationConstantsCF.AlarmServerReferenceName).Returns(m_AlarmServer);
        }
        [TearDown]

AlarmItemTest.cs
-12
+7
/Tools/ToolsTest/Alarm/AlarmItemTest.cs
using System;
using System.ComponentModel;
using System.Windows.Controls;
using Core.Api.DataSource;
using Core.Api.Tools;
using Core.Component.Api.Instantiation;
using Neo.ApplicationFramework.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Storage;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.TestUtilities.Threading;
using Neo.ApplicationFramework.Threading;
using Neo.ApplicationFramework.Utilities.Lazy;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Alarm
{
        private bool m_ActiveAlarm;
        private AlarmServer m_AlarmServer;
        private AlarmServerStateService m_AlarmServerStateService;
        private MockRepository m_MockRepository;
        private IAlarmServerStorage m_AlarmServerStorage;
        private AlarmItem CreateNewAlarmItem()
        [SetUp]
        public void SetUp()
        {
            m_MockRepository = new MockRepository();
            IToolManager toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(true);
            toolManager.Runtime.Returns(true);
            m_AlarmServerStateService = new AlarmServerStateService();
            TestHelper.AddService<IAlarmServerStateService>(m_AlarmServerStateService);
            TestHelper.AddService<IRemoteAlarmServerStateService>(m_AlarmServerStateService);
            TestHelper.AddServiceStub<IStorageCacheService>();
            ISecurityServiceCF securityService = TestHelper.AddServiceStub<ISecurityServiceCF>();
            securityService.Stub(x => x.CurrentUser).Return(string.Empty);
            securityService.CurrentUser.Returns(string.Empty);
            var dateTimeEditService = TestHelper.AddServiceStub<IDateTimeEditService>();
            dateTimeEditService.Stub(x => x.LocalTime).Return(DateTime.Now);
            dateTimeEditService.LocalTime.Returns(DateTime.Now);
            m_AlarmServerStorage = m_MockRepository.Stub<IAlarmServerStorage>();
            m_AlarmServerStorage = Substitute.For<IAlarmServerStorage>();
            var eventFactory = new AlarmEventFactory();
            eventFactory.AddAlarmEventTypeProvider("AlarmEvent", () => new AlarmEvent()); // register default AlarmEvent
            m_AlarmServer = new ExtendedAlarmServer(m_AlarmServerStorage, eventFactory);
            public ExtendedAlarmServer(IAlarmServerStorage alarmServerStorage, IAlarmEventFactory eventFactory)
                : base(alarmServerStorage,
                      new LazyCF<IActionConsumer>(() => new InvokeDirectActionConsumer(ActionConsumerName) as IActionConsumer),
                      MockRepository.GenerateStub<IRootComponentService>().ToILazy(),
                      MockRepository.GenerateStub<ISystemTagServiceCF>().ToILazy(),
                      Substitute.For<IRootComponentService>().ToILazy(),
                      Substitute.For<ISystemTagServiceCF>().ToILazy(),
                      eventFactory.ToILazy())
            {
                base.m_Initialized = true;

AlarmServerTest.cs
-22
+34
/Tools/ToolsTest/Alarm/AlarmServerTest.cs
using Core.Api.DataSource;
using Core.Api.Tools;
using Core.Component.Api.Instantiation;
using Neo.ApplicationFramework.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Storage;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.TestUtilities.Threading;
using Neo.ApplicationFramework.Threading;
using Neo.ApplicationFramework.Utilities.Lazy;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Alarm
{
    {
        private AlarmServer m_AlarmServer;
        private AlarmServerStateService m_AlarmServerStateService;
        private MockRepository m_MockRepository;
        private IAlarmServerStorage m_AlarmServerStorage;
        private AlarmGroup m_AlarmGroup;
        [SetUp]
        public void Setup()
        {
            m_MockRepository = new MockRepository();
            IToolManager toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(true);
            toolManager.Runtime.Returns(true);
            ISecurityServiceCF securityService = TestHelper.AddServiceStub<ISecurityServiceCF>();
            securityService.Stub(x => x.CurrentUser).Return(string.Empty);
            securityService.CurrentUser.Returns(string.Empty);
            var dateTimeEditService = TestHelper.AddServiceStub<IDateTimeEditService>();
            dateTimeEditService.Stub(x => x.LocalTime).WhenCalled(y => y.ReturnValue = DateTime.Now).Return(DateTime.Now);
            dateTimeEditService.LocalTime.Returns(DateTime.Now);
            m_AlarmServerStateService = new AlarmServerStateService();
            TestHelper.AddService<IAlarmServerStateService>(m_AlarmServerStateService);
            TestHelper.AddService<IRemoteAlarmServerStateService>(m_AlarmServerStateService);
            TestHelper.AddServiceStub<IStorageCacheService>();
            m_AlarmServerStorage = m_MockRepository.Stub<IAlarmServerStorage>();
            m_AlarmServerStorage = Substitute.For<IAlarmServerStorage>();
            var eventFactory = new AlarmEventFactory();
            eventFactory.AddAlarmEventTypeProvider("AlarmEvent", () => new AlarmEvent()); // register default AlarmEvent
            m_AlarmServer = new ExtendedAlarmServer(m_AlarmServerStorage, eventFactory) { IsEnabled = true };
        public void TestOldestAcknowledgedAlarmIsDeletedAllAcknowledged()
        {
            m_AlarmServer.MaxNumberOfAlarms = 2;
            AlarmItem alarmItem = CreateNewAlarmItem();
            IAlarmEvent alarmEvent1 = new AlarmEvent(alarmItem);
            //AlarmItem alarmItem = CreateNewAlarmItem();
            IAlarmEvent alarmEvent1 = new AlarmEvent(CreateNewAlarmItem());
            alarmEvent1.Acknowledge();
            alarmItem = CreateNewAlarmItem();
            Thread.Sleep(50);
            IAlarmEvent alarmEvent2 = new AlarmEvent(alarmItem);
            //alarmItem = ;
            Thread.Sleep(100);
            IAlarmEvent alarmEvent2 = new AlarmEvent(CreateNewAlarmItem());
            alarmEvent2.Acknowledge();
            Assert.AreEqual(2, m_AlarmServer.EventCount);
            alarmItem = CreateNewAlarmItem();
            Thread.Sleep(50);
            IAlarmEvent alarmEvent3 = new AlarmEvent(alarmItem);
            //alarmItem = CreateNewAlarmItem();
            Thread.Sleep(100);
            IAlarmEvent alarmEvent3 = new AlarmEvent(CreateNewAlarmItem());
            alarmEvent3.Acknowledge();
            Thread.Sleep(100);
            // Assert
            Assert.AreEqual(2, m_AlarmServer.EventCount);
            foreach (AlarmEvent alarmEvent in m_AlarmServer.EventList)
            {
                Assert.AreEqual(AlarmState.Acknowledge, alarmEvent.State);
                //if (alarmEvent.Id == alarmEvent1.Id.ToString())
                //    Assert.Fail("Oldest acknowledged alarm not removed");
            }
            var timerStopped = false;
            var t = new System.Timers.Timer();
            t.Interval = 3000;
            t.Elapsed += (s, e) => { t.Stop(); timerStopped = true; };
            t.Start();
            foreach (AlarmEvent alarmEvent in m_AlarmServer.EventList)
            while (m_AlarmServer.EventList.Contains(alarmEvent1) && !timerStopped)//.Where(x => x.Id == alarmEvent1.Id.ToString()))
            {
                if (alarmEvent == alarmEvent1)
                    Assert.Fail("Oldest acknowledged alarm not removed");
                continue;
            }
            Assert.False(m_AlarmServer.EventList.Contains(alarmEvent1), "Oldest acknowledged alarm not removed");
        }
        [Test]
            public ExtendedAlarmServer(IAlarmServerStorage alarmServerStorage, IAlarmEventFactory alarmEventFactory)
                : base(alarmServerStorage, 
                      new LazyCF<IActionConsumer>(() => new InvokeDirectActionConsumer(ActionConsumerName) as IActionConsumer), 
                      MockRepository.GenerateStub<IRootComponentService>().ToILazy(),
                      MockRepository.GenerateStub<ISystemTagServiceCF>().ToILazy(),
                      Substitute.For<IRootComponentService>().ToILazy(),
                      Substitute.For<ISystemTagServiceCF>().ToILazy(),
                      alarmEventFactory.ToILazy())
            {
                base.m_Initialized = true;

RemoteAlarmClientTest.cs
-3
+3
/Tools/ToolsTest/Alarm/RemoteAlarmClientTest.cs
using System;
using DotNetRemoting;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.Alarm.Remoting;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Neo.ApplicationFramework.Tools.Alarm.Remoting;
namespace Neo.ApplicationFramework.Tools.Alarm
{
        {
            // ARRANGE
            var syncClient = new NeoSyncClientTest();
            var remoteAlarmServerStateService = MockRepository.GenerateStub<IRemoteAlarmServerStateService>();
            var remoteAlarmServerStateService = Substitute.For<IRemoteAlarmServerStateService>();
            var remoteAlarmClient = new RemoteAlarmClient("", 999, 999, syncClient, remoteAlarmServerStateService);
            var alarmguid = Guid.NewGuid();
            var activeTestTime = new DateTime(2016, 04, 01, 12, 30, 15);

AuditStorableItemTest.cs
-2
+2
/Tools/ToolsTest/AuditTrail/AuditStorableItemTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.AuditTrail
{
            };
            var dateTimeEditService = TestHelper.AddServiceStub<IDateTimeEditService>();
            dateTimeEditService.Stub(x => x.LocalTime).Return(DateTime.Now);
            dateTimeEditService.LocalTime.Returns(DateTime.Now);
        }
        [TearDown]

AuditTrailServiceTest.cs
-104
+57
/Tools/ToolsTest/AuditTrail/AuditTrailServiceTest.cs
using Neo.ApplicationFramework.Storage.Legacy;
using Neo.ApplicationFramework.Storage.Query;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Is = Rhino.Mocks.Constraints.Is;
namespace Neo.ApplicationFramework.Tools.AuditTrail
{
    [TestFixture]
    public class AuditTrailServiceTest
    {
        private MockRepository m_Mocks;
        private IStorage m_Storage;
        private IStorageQuery m_Query;
        private IStorageScheme m_Scheme;
        [SetUp]
        public void SetUp()
        {
            var securityService = MockRepository.GenerateStub<ISecurityServiceCF>();
            securityService.Stub(x => x.CurrentUser).Return(UserName).Repeat.Any();
            var securityService = Substitute.For<ISecurityServiceCF>();
            securityService.CurrentUser.Returns(UserName);
            TestHelper.AddService(securityService);
            var dateTimeEditService = TestHelper.AddServiceStub<IDateTimeEditService>();
            dateTimeEditService.Stub(x => x.LocalTime).Return(DateTime.Now);
            dateTimeEditService.LocalTime.Returns(DateTime.Now);
            m_Mocks = new MockRepository();
            m_Query = m_Mocks.DynamicMock<IStorageQuery>();
            m_Scheme = MockRepository.GenerateStub<IStorageScheme>();
            m_Scheme.Stub(x => x.EnsureTable(null)).IgnoreArguments().Return(true).Repeat.Any();
            m_Storage = MockRepository.GenerateStub<IStorage>();
            m_Storage.Stub(x => x.Query).Return(m_Query).Repeat.Any();
            m_Storage.Stub(x => x.Scheme).Return(m_Scheme).Repeat.Any();
            m_Query = Substitute.For<IStorageQuery>();
            m_Scheme = Substitute.For<IStorageScheme>();
            m_Scheme.EnsureTable(Arg.Any<IStorableItem>()).Returns(true);
            m_Storage = Substitute.For<IStorage>();
            m_Storage.Query.Returns(m_Query);
            m_Storage.Scheme.Returns(m_Scheme);
            m_DatabaseManagerLegacy = m_Mocks.DynamicMock<IDatabaseManagerLegacy>();
            m_DatabaseManagerLegacy = Substitute.For<IDatabaseManagerLegacy>();
            var storageCacheService = MockRepository.GenerateStub<IStorageCacheService>();
            storageCacheService.Stub(x => x.GetStorage(null)).IgnoreArguments().Return(m_Storage).Repeat.Any();
            storageCacheService.Stub(x => x.GetDatabaseManagerLegacy(null)).IgnoreArguments().Return(m_DatabaseManagerLegacy).Repeat.Any();
            var storageCacheService = Substitute.For<IStorageCacheService>();
            storageCacheService.GetStorage(Arg.Any<string>()).Returns(m_Storage);
            storageCacheService.GetDatabaseManagerLegacy(Arg.Any<string>()).Returns(m_DatabaseManagerLegacy);
            TestHelper.AddService(storageCacheService);
            TestHelper.AddService(MockRepository.GenerateStub<ISdCardCeService>());
            TestHelper.AddService(Substitute.For<ISdCardCeService>());
            m_AuditTrailService = new AuditTrailServiceCF(false);
            m_IAuditTrailService = m_AuditTrailService;
            m_AuditTrail = m_Mocks.DynamicMock<IAuditTrail>();
            m_AuditTrail.Stub(x => x.MaxSize).Return(1);
            m_AuditTrail = Substitute.For<IAuditTrail>();
            m_AuditTrail.MaxSize.Returns(1);
            m_IAuditTrailService.AuditTrail = m_AuditTrail;
        }
        {
            const string msg = "a message";
            using (m_Mocks.Record())
            {
                m_Storage.Query.Insert(null);
                LastCall.Repeat.Once().Constraints(Is.Matching<IStorableItem[]>(storableItems => storableItems.All(storableItem => ((AuditStorableItem)storableItem).Message == msg)));
            }
            using (m_Mocks.Playback())
            {
            m_IAuditTrailService.LogMessage(msg);
            m_Storage.Query.Received(1)
                .Insert(Arg.Is<IStorableItem[]>(x => x.All(storableItem => ((AuditStorableItem)storableItem).Message == msg)));
        }
        }
        [Test]
        public void LogMessageLogsUsername()
        {
            using (m_Mocks.Record())
            {
                m_Query.Insert(null);
                LastCall.Repeat.Once().Constraints(Is.Matching<IStorableItem[]>(storableItems => storableItems.All(storableItem => ((AuditStorableItem)storableItem).UserName == UserName)));
            }
            using (m_Mocks.Playback())
            {
            m_IAuditTrailService.LogMessage(string.Empty);
            m_Query.Received(1)
                .Insert(Arg.Is<IStorableItem[]>(x => x.All(storableItem => ((AuditStorableItem)storableItem).UserName == UserName)));
        }
        }
        [Test]
        public void LogMessageDoesNotLogIfAuditTrailItemDoesntExist()
        {
            m_IAuditTrailService.AuditTrail = null;
            using (m_Mocks.Record())
            {
                m_Query.Insert(null);
                LastCall.Repeat.Never();
            }
            using (m_Mocks.Playback())
            {
            m_IAuditTrailService.LogMessage(string.Empty);
            m_Query.DidNotReceiveWithAnyArgs().Insert(Arg.Any<IStorableItem[]>());
        }
        }
        [Test]
        public void LogDataItemChangedInsertsTableName()
        {
            LogDataItemChanged_VerifyAuditStorableItemProperty<IStorableItem[]>(storableItems => storableItems.All(storableItem => storableItem.TableName == TableName));
            LogDataItemChanged_VerifyAuditStorableItemProperty(storableItems => 
                storableItems.All(storableItem => storableItem.TableName == TableName));
        }
        [Test]
        public void LogDataItemChangedInsertsDateTimeNow()
        {
            LogDataItemChanged_VerifyAuditStorableItemProperty<IStorableItem[]>(storableItems => storableItems.All(storableItem => IsAlmostNow(((AuditStorableItem)storableItem).TimeStamp)));
            LogDataItemChanged_VerifyAuditStorableItemProperty(storableItems => 
                storableItems.All(storableItem => IsAlmostNow(((AuditStorableItem)storableItem).TimeStamp)));
        }
        [Test]
        public void LogDataItemChangedInsertsValueBefore()
        {
            LogDataItemChanged_VerifyAuditStorableItemProperty<IStorableItem[]>(storableItems => storableItems.All(storableItem => ((AuditStorableItem)storableItem).ValueBefore == ValueBefore));
            LogDataItemChanged_VerifyAuditStorableItemProperty(storableItems => 
                storableItems.All(storableItem => ((AuditStorableItem)storableItem).ValueBefore == ValueBefore));
        }
        [Test]
        public void LogDataItemChangedInsertsValueAfter()
        {
            LogDataItemChanged_VerifyAuditStorableItemProperty<IStorableItem[]>(storableItems => storableItems.All(storableItem => ((AuditStorableItem)storableItem).ValueAfter == ValueAfter));
            LogDataItemChanged_VerifyAuditStorableItemProperty(storableItems => 
                storableItems.All(storableItem => ((AuditStorableItem)storableItem).ValueAfter == ValueAfter));
        }
        [Test]
        public void LogDataItemChangedInsertsUserName()
        {
            LogDataItemChanged_VerifyAuditStorableItemProperty<IStorableItem[]>(storableItems => storableItems.All(storableItem => ((AuditStorableItem)storableItem).UserName == UserName));
            LogDataItemChanged_VerifyAuditStorableItemProperty(storableItems => 
                storableItems.All(storableItem => ((AuditStorableItem)storableItem).UserName == UserName));
        }
        [Test]
        public void LogDataItemChangedInsertsMessage()
        {
            LogDataItemChanged_VerifyAuditStorableItemProperty<IStorableItem[]>(storableItems => storableItems.All(storableItem => ((AuditStorableItem)storableItem).Message.Contains(DataItem)));
            LogDataItemChanged_VerifyAuditStorableItemProperty(storableItems => 
                storableItems.All(storableItem => ((AuditStorableItem)storableItem).Message.Contains(DataItem)));
        }
        [Test]
        {
            m_IAuditTrailService.AuditTrail = null;
            using (m_Mocks.Record())
            {
                m_Query.Insert(null);
                LastCall.IgnoreArguments().Repeat.Never();
            }
            using (m_Mocks.Playback())
            {
            m_IAuditTrailService.LogDataItemChanged(DataItem, new VariantValue(1), new VariantValue(2));
            }
            m_Query.DidNotReceiveWithAnyArgs().Insert(Arg.Any<IStorableItem[]>());
        }
        [Test]
        public void GetLogItemsReturnsNullIfDatabaseNotExists()
        {
            using (m_Mocks.Record())
            {
                Expect.Call(m_Storage.Query.Select(_ => Enumerable.Empty<AuditStorableItem>(), null)).IgnoreArguments().Repeat.Once().Throw(new StorageReaderException(string.Empty));
            }
            m_Query.Select(Arg.Any<Func<System.Data.IDataReader, IEnumerable<AuditStorableItem>>>(), Arg.Any<string>())
                .Returns(x => throw new StorageReaderException(string.Empty));
            using (m_Mocks.Playback())
            {
            IList<IAuditStorableItem> list = m_IAuditTrailService.GetLogItems();
                Assert.IsNull(list);
            }
            Assert.IsTrue(list == null || !list.Any());
            m_Query.ReceivedWithAnyArgs(1).Select(Arg.Any<Func<System.Data.IDataReader, IEnumerable<AuditStorableItem>>>(), Arg.Any<string>());
        }
        [Test]
        {
            NeoDesignerProperties.IsInDesignMode = true;
            using (m_Mocks.Record())
            {
                Expect.Call(m_Query.Select(_ => Enumerable.Empty<AuditStorableItem>(), null)).IgnoreArguments().Repeat.Never();
            }
            using (m_Mocks.Playback())
            {
            // Act
            IList<IAuditStorableItem> list = m_IAuditTrailService.GetLogItems(); //After executing this the m_ToolManager.Runtime stub will go back to default value true (set up in fixture set up)
            // Assert
            Assert.IsNull(list);
            }
            NeoDesignerProperties.IsInDesignMode = false;
            m_Query.DidNotReceiveWithAnyArgs().Select(Arg.Any<Func<System.Data.IDataReader, IEnumerable<AuditStorableItem>>>(), Arg.Any<string>());
        }
        [Test]
        {
            string msg = "a message";
            m_Storage.Stub(x => x.Size).Return(long.MaxValue);
            using (m_Mocks.Record())
            {
                m_Query.Insert(null);
                LastCall.Repeat.Never().IgnoreArguments();
            }
            m_Storage.Size.Returns(long.MaxValue);
            using (m_Mocks.Playback())
            {
            // Act
            m_IAuditTrailService.LogMessage(msg);
            }
            m_Query.DidNotReceiveWithAnyArgs().Insert(Arg.Any<IStorableItem[]>());
        }
        [Test]
        public void IsLogActionEnabledTest(string actionName, bool expected)
        {
            var actionList = new List<string> { "SomeAction" };
            using (m_Mocks.Record())
            {
                Expect.Call(m_AuditTrail.SuppressedLogActionNameList).Return(actionList);
            }
            m_AuditTrail.SuppressedLogActionNameList.Returns(actionList);
            using (m_Mocks.Playback())
            {
            Assert.AreEqual(expected, m_AuditTrailService.IsLogActionEnabled(actionName));
        }
        }
        private void LogDataItemChanged_VerifyAuditStorableItemProperty<T>(Predicate<T> predicate)
        {
            using (m_Mocks.Record())
        private void LogDataItemChanged_VerifyAuditStorableItemProperty(System.Linq.Expressions.Expression<Predicate<IStorableItem[]>> predicate)
        {
                m_Storage.Query.Insert(null);
                LastCall.Repeat.Once().Constraints(Is.Matching<T>(predicate));
            }
            using (m_Mocks.Playback())
            {
                m_IAuditTrailService.LogDataItemChanged(DataItem, new VariantValue(1), new VariantValue(2));
            }
            m_Storage.Query.Received(1).Insert(Arg.Is(predicate));
        }
        private static bool IsAlmostNow(DateTime dateTimeUnderTest)

AuditTrailToolIdeTest.cs
-1
+2
/Tools/ToolsTest/AuditTrail/AuditTrailToolIdeTest.cs
#if !VNEXT_TARGET
using System.Linq;
using NUnit.Framework;
        }
    }
}
#endif

UserChangedAuditTrailToolCFTest.cs
-28
+24
/Tools/ToolsTest/AuditTrail/UserChangedAuditTrailToolCFTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Events;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.AuditTrail
{
        public void SetUp()
        {
            m_NumberOfTimesCalled = 0;
            m_AuditTrailService = MockRepository.GenerateMock<IAuditTrailService>();
            m_IAuditTrail = MockRepository.GenerateMock<IAuditTrail>();
            m_AuditTrailService.Stub(x => x.LogDataItemChanged(Arg<string>.Is.Anything, Arg<string>.Is.Anything, Arg<VariantValue>.Is.Anything, Arg<VariantValue>.Is.Anything))
                .IgnoreArguments()
                .WhenCalled(
                    delegate
                    {
                        m_NumberOfTimesCalled++;
                    });
            m_AuditTrailService.Stub(x => x.AuditTrail).Return(m_IAuditTrail);
            m_SecurityService = MockRepository.GenerateStub<ISecurityServiceCF>();
            m_SecurityService.Stub(x => x.CurrentUser).Return("Kalle");
            m_AuditTrailService = Substitute.For<IAuditTrailService>();
            m_IAuditTrail = Substitute.For<IAuditTrail>();
            m_AuditTrailService
                .When(x => x.LogDataItemChanged(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<VariantValue>(), Arg.Any<VariantValue>()))
                .Do(y => m_NumberOfTimesCalled++);
            m_AuditTrailService.AuditTrail.Returns(m_IAuditTrail);
            m_SecurityService = Substitute.For<ISecurityServiceCF>();
            m_SecurityService.CurrentUser.Returns("Kalle");
            m_UserChangedAuditTrailToolCF = new UserChangedAuditTrailToolCF(m_AuditTrailService.ToILazy(), m_SecurityService.ToILazy());
        }
        public void AuditTrailOnLogin()
        {
            // ARRANGE
            m_IAuditTrail.Stub(x => x.SuppressedLogActionNameList).Return(new List<string>());
            m_AuditTrailService.Stub(x => x.LoggingEnabled).Return(true);
            m_IAuditTrail.SuppressedLogActionNameList.Returns(new List<string>());
            m_AuditTrailService.LoggingEnabled.Returns(true);
            // ACT
            ((ITool)m_UserChangedAuditTrailToolCF).Init();
            m_SecurityService.Raise(s => s.CurrentUserChanged += null, null, new CurrentUserChangedEventArgs("Adam", "Bertil", CurrentUserChangedEventArgs.UserChangedTypes.Login));
            Raise.EventWith(m_IAuditTrail, new CurrentUserChangedEventArgs("Adam", "Bertil", CurrentUserChangedEventArgs.UserChangedTypes.Login));
            // ASSERT
            Assert.AreEqual(1, m_NumberOfTimesCalled);
        public void AuditTrailOnLogout()
        {
            // ARRANGE
            m_IAuditTrail.Stub(x => x.SuppressedLogActionNameList).Return(new List<string>());
            m_AuditTrailService.Stub(x => x.LoggingEnabled).Return(true);
            m_IAuditTrail.SuppressedLogActionNameList.Returns(new List<string>());
            m_AuditTrailService.LoggingEnabled.Returns(true);
            // ACT
            ((ITool)m_UserChangedAuditTrailToolCF).Init();
            m_SecurityService.Raise(s => s.CurrentUserChanged += null, null, new CurrentUserChangedEventArgs("Adam", "Bertil", CurrentUserChangedEventArgs.UserChangedTypes.Logout));
            Raise.EventWith(new CurrentUserChangedEventArgs("Adam", "Bertil", CurrentUserChangedEventArgs.UserChangedTypes.Logout));
            // ASSERT
            Assert.AreEqual(1, m_NumberOfTimesCalled);
        public void NoAuditTrailOnLogin()
        {
            // ARRANGE
            m_IAuditTrail.Stub(x => x.SuppressedLogActionNameList).Return(new List<string> { "Login" }); //User has unselected AuditTrail on Login action
            m_AuditTrailService.Stub(x => x.LoggingEnabled).Return(true);
            m_IAuditTrail.SuppressedLogActionNameList.Returns(new List<string> { "Login" }); //User has unselected AuditTrail on Login action
            m_AuditTrailService.LoggingEnabled.Returns(true);
            // ACT
            ((ITool)m_UserChangedAuditTrailToolCF).Init();
            m_SecurityService.Raise(s => s.CurrentUserChanged += null, null, new CurrentUserChangedEventArgs("Adam", "Bertil", CurrentUserChangedEventArgs.UserChangedTypes.Login));
            Raise.EventWith(new CurrentUserChangedEventArgs("Adam", "Bertil", CurrentUserChangedEventArgs.UserChangedTypes.Login));
            // ASSERT
            Assert.AreEqual(0, m_NumberOfTimesCalled);
        public void NoAuditTrailOnLogout()
        {
            // ARRANGE
            m_IAuditTrail.Stub(x => x.SuppressedLogActionNameList).Return(new List<string> { "Logout" }); //User has unselected AuditTrail on Logout action
            m_AuditTrailService.Stub(x => x.LoggingEnabled).Return(true);
            m_IAuditTrail.SuppressedLogActionNameList.Returns(new List<string> { "Logout" }); //User has unselected AuditTrail on Logout action
            m_AuditTrailService.LoggingEnabled.Returns(true);
            // ACT
            ((ITool)m_UserChangedAuditTrailToolCF).Init();
            m_SecurityService.Raise(s => s.CurrentUserChanged += null, null, new CurrentUserChangedEventArgs("Adam", "Bertil", CurrentUserChangedEventArgs.UserChangedTypes.Logout));
            Raise.EventWith(new CurrentUserChangedEventArgs("Adam", "Bertil", CurrentUserChangedEventArgs.UserChangedTypes.Logout));
            // ASSERT
            Assert.AreEqual(0, m_NumberOfTimesCalled);
        public void AuditTrailLoggingDisabled()
        {
            // ARRANGE
            m_IAuditTrail.Stub(x => x.SuppressedLogActionNameList).Return(new List<string>());
            m_AuditTrailService.Stub(x => x.LoggingEnabled).Return(false);
            m_IAuditTrail.SuppressedLogActionNameList.Returns(new List<string>());
            m_AuditTrailService.LoggingEnabled.Returns(false);
            // ACT
            ((ITool)m_UserChangedAuditTrailToolCF).Init();
            m_SecurityService.Raise(s => s.CurrentUserChanged += null, null, new CurrentUserChangedEventArgs("Adam", "Bertil", CurrentUserChangedEventArgs.UserChangedTypes.Logout));
            Raise.EventWith(new CurrentUserChangedEventArgs("Adam", "Bertil", CurrentUserChangedEventArgs.UserChangedTypes.Logout));
            // ASSERT
            Assert.AreEqual(0, m_NumberOfTimesCalled);

ServerProjectValidatorTest.cs
-4
+5
/Tools/ToolsTest/Build/BuildManager/ProjectValidation/ServerProjectValidatorTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Security;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Build.BuildManager.ProjectValidation
{
            string assemblyDirectory = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
            string blacklistPath = Path.Combine(assemblyDirectory, "Configurations", PasswordValidator.BlacklistFileName);
            var fileSettingsServiceStub = TestHelper.AddServiceStub<IFileSettingsServiceIde>();
            fileSettingsServiceStub.Stub(x => x.FileNameInCommonApplicationDataFolder(Arg<string>.Is.Anything)).Return(blacklistPath);
            m_ErrorListService = TestHelper.CreateAndAddServiceMock<IErrorListService>();
            fileSettingsServiceStub.FileNameInCommonApplicationDataFolder(Arg.Any<string>()).Returns(blacklistPath);
            m_ErrorListService = TestHelper.CreateAndAddServiceStub<IErrorListService>();
        }
        [TearDown]
            testServerProjectValidator.ValidatePassword(password);
            m_ErrorListService.AssertWasCalled(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything), options => options.Repeat.Times(addNewCompilerErrorCount));
            m_ErrorListService.Received(addNewCompilerErrorCount)
                .AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
        }
    }
}

AllDataItemsBelongToATagTest.cs
-21
+21
/Tools/ToolsTest/Build/BuildManager/Validators/AllDataItemsBelongToATagTest.cs
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using Neo.ApplicationFramework.Tools.OpcClient;
using Neo.ApplicationFramework.Tools.OpcClient.Validation;
using Neo.ApplicationFramework.Tools.StructuredTag.Model;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Build.BuildManager.Validators
{
        {
            TestHelper.ClearServices();
            m_Messages = new List<string>();
            var opcClient = MockRepository.GenerateStub<IOpcClientServiceIde>();
            m_Controller = MockRepository.GenerateStub<IGlobalController>();
            var opcClient = Substitute.For<IOpcClientServiceIde>();
            m_Controller = Substitute.For<IGlobalController>();
            opcClient.Stub(item => item.GlobalController).Return(m_Controller);
            opcClient.GlobalController.Returns(m_Controller);
            m_DataSourceContainer = new DataSourceContainer();
            opcClient.Stub(item => item.Controllers).Return(new ExtendedBindingList<IDataSourceContainer> { m_DataSourceContainer });
            opcClient.Controllers.Returns(new ExtendedBindingList<IDataSourceContainer> { m_DataSourceContainer });
            ServiceContainerCF.Instance.AddService(opcClient);
            var errorListService = MockRepository.GenerateStub<IErrorListService>();
            errorListService.Stub(item => item.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).WhenCalled(x => m_Messages.Add(x.Arguments[0].ToString()));
            var errorListService = Substitute.For<IErrorListService>();
            errorListService.WhenForAnyArgs(x => x.AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>()))
                .Do(x => m_Messages.Add(x[0].ToString()));
            ServiceContainerCF.Instance.AddService(errorListService);
        [Test]
        public void TestValidationDoesntFindsCorrespondingStructuredTagWhenNoTagsExists()
        {
            m_Controller.Stub(item => item.GlobalStructuredTags).Return(new OwnedList<ITag>(MockRepository.GenerateStub<IComponent>()));
            m_Controller.Stub(item => item.DataItemBases).Return(new ReadOnlyCollection<IDataItemBase>(new List<IDataItemBase>()));
            m_Controller.GlobalStructuredTags.Returns(new OwnedList<ITag>(Substitute.For<IComponent>()));
            m_Controller.DataItemBases.Returns(new ReadOnlyCollection<IDataItemBase>(new List<IDataItemBase>()));
            CommonValidationDoesntFindCorrespondingTag();
        }
        private void PrepareForValidationWhenAStructuredTagExists(string subItemDataItemName)
        {
            m_Controller.Stub(item => item.DataItemBases).Return(new ReadOnlyCollection<IDataItemBase>(new List<IDataItemBase>()));
            m_Controller.DataItemBases.Returns(new ReadOnlyCollection<IDataItemBase>(new List<IDataItemBase>()));
            var instanceMapping = new StructuredTagInstanceMapping { Name = "testMapping", TypeName = "NA" };
            instanceMapping.GlobalDataItemMappings.Add(new GlobalDataItemMappingCF("testmapping"));
            instanceMapping.GlobalDataItemMappings[0].GlobalDataSubItems.Add(new GlobalDataSubItem(0, 0, new[] { "IrrelevantControllerName" }, new[] { subItemDataItemName }));
            var fakeTags = new OwnedList<ITag>(MockRepository.GenerateStub<IComponent>());
            var fakeTags = new OwnedList<ITag>(Substitute.For<IComponent>());
            var instance = new StructuredTagInstance("test", "Test", instanceMapping);
            fakeTags.Add(instance);
            m_Controller.Stub(item => item.GlobalStructuredTags).Return(fakeTags);
            m_Controller.GlobalStructuredTags.Returns(fakeTags);
        }
        private void PrepareForValidationWhenAnOrdinaryTagExists(string subItemDataItemName)
        {
            m_Controller.Stub(item => item.GlobalStructuredTags).Return(new OwnedList<ITag>(MockRepository.GenerateStub<IComponent>()));
            IGlobalDataItem globalDataItemStub = MockRepository.GenerateStub<IGlobalDataItem>();
            m_Controller.GlobalStructuredTags.Returns(new OwnedList<ITag>(Substitute.For<IComponent>()));
            IGlobalDataItem globalDataItemStub = Substitute.For<IGlobalDataItem>();
            var subItem = MockRepository.GenerateStub<IGlobalDataSubItem>();
            subItem.Stub(inv => inv.DataItems).Return(new DataItems(null) { new DataItem { Name = subItemDataItemName, ItemID = ItemId } });
            var subItem = Substitute.For<IGlobalDataSubItem>();
            subItem.DataItems.Returns(new DataItems(null) { new DataItem { Name = subItemDataItemName, ItemID = ItemId } });
            var subItems = new BindingList<IGlobalDataSubItem>() { subItem };
            globalDataItemStub.Stub(inv => inv.GlobalDataSubItems).Return(subItems);
            globalDataItemStub.GlobalDataSubItems.Returns(subItems);
            List<IGlobalDataItem> globaldataItems = new List<IGlobalDataItem>() { globalDataItemStub };
            m_Controller.Stub(item => item.DataItemBases).Return(new ReadOnlyCollection<IDataItemBase>(globaldataItems.Cast<IDataItemBase>().ToList()));
            m_Controller.DataItemBases.Returns(new ReadOnlyCollection<IDataItemBase>(globaldataItems.Cast<IDataItemBase>().ToList()));
            StructuredTagInstanceMapping instanceMapping = new StructuredTagInstanceMapping { Name = "testTagMapping", TypeName = "NA" };
            instanceMapping.GlobalDataItemMappings.Add(new GlobalDataItemMappingCF("testmapping"));
            OwnedList<ITag> fakeTags = new OwnedList<ITag>(MockRepository.GenerateStub<IComponent>());
            OwnedList<ITag> fakeTags = new OwnedList<ITag>(Substitute.For<IComponent>());
            StructuredTagInstance structInstance = new StructuredTagInstance("test", "Test", instanceMapping);
            structInstance.InstanceMapping.GlobalDataItemMappings[0].GlobalDataSubItems.Add(new GlobalDataSubItem(0, 0, new[] { "IrrelevantControllerName" }, new[] { subItemDataItemName }));
            fakeTags.Add(structInstance);
            m_Controller.Stub(item => item.GlobalStructuredTags).Return(fakeTags);
            m_Controller.GlobalStructuredTags.Returns(fakeTags);
        }
        private void CommonValidationDoesntFindCorrespondingTag()

CrossReferenceValidatorTest.cs
-36
+37
/Tools/ToolsTest/Build/BuildManager/Validators/CrossReferenceValidatorTest.cs
using System.Collections.Generic;
using System.ComponentModel;
using Core.Api.CrossReference;
using Core.Component.Engine.Design;
using Core.Api.GlobalReference;
using Core.Component.Engine.Design;
using Neo.ApplicationFramework.Common.Collections;
using Neo.ApplicationFramework.Common.CrossReference;
using Neo.ApplicationFramework.CrossReference;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.CrossReference.Validation;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Neo.ApplicationFramework.Common.CrossReference;
namespace Neo.ApplicationFramework.Tools.Build.BuildManager.Validators
{
        [SetUp]
        public void SetUp()
        {
            m_CrossReferenceQueryServiceMock = MockRepository.GenerateMock<ICrossReferenceQueryService>();
            m_CrossReferenceServiceMock = MockRepository.GenerateMock<ICrossReferenceService>();
            m_ProjectItemFinderMock = MockRepository.GenerateMock<IProjectItemFinder>();
            m_ExpressionsServiceMock = MockRepository.GenerateMock<IExpressionsService>();
            m_GlobalReferenceServiceMock = MockRepository.GenerateMock<IGlobalReferenceService>();
            m_ErrorListServiceMock = MockRepository.GenerateMock<IErrorListService>();
            m_OutputWindowServiceMock = MockRepository.GenerateStub<IOutputWindowService>();
            m_SubItemsServiceMock = MockRepository.GenerateMock<ISubItemsServiceIde>();
            m_CrossReferenceQueryServiceMock = Substitute.For<ICrossReferenceQueryService>();
            m_CrossReferenceServiceMock = Substitute.For<ICrossReferenceService>();
            m_ProjectItemFinderMock = Substitute.For<IProjectItemFinder>();
            m_ExpressionsServiceMock = Substitute.For<IExpressionsService>();
            m_GlobalReferenceServiceMock = Substitute.For<IGlobalReferenceService>();
            m_ErrorListServiceMock = Substitute.For<IErrorListService>();
            m_OutputWindowServiceMock = Substitute.For<IOutputWindowService>();
            m_SubItemsServiceMock = Substitute.For<ISubItemsServiceIde>();
            m_CrossReferencesProjectValidator = new CrossReferencesProjectValidator(
                m_CrossReferenceQueryServiceMock.ToILazy(),
                m_CrossReferenceServiceMock.ToILazy(),
        public void ValidateWhenNoCrossReferencesTest()
        {
            // Arrange
            m_CrossReferenceQueryServiceMock.Stub(x => x.GetReferences<ICrossReferenceItem>(Arg<string[]>.Is.Anything)).Return(new List<ICrossReferenceItem>());
            m_CrossReferenceServiceMock.Stub(x => x.GetReferences<ICrossReferenceItem>(Arg<string[]>.Is.Anything)).Return(new List<ICrossReferenceItem>());
            m_ProjectItemFinderMock.Stub(x => x.GetProjectItems(Arg<Func<IProjectItem, bool>>.Is.Anything)).Return(new IProjectItem[0]);
            m_ExpressionsServiceMock.Stub(x => x.Expressions).Return(new ExtendedBindingList<IExpression>());
            m_CrossReferenceQueryServiceMock.Stub(x => x.GetExpressions()).Return(new List<ICrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.Stub(x => x.GetFonts()).Return(new List<ICrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.Stub(x => x.GetTextLibraries()).Return(new List<ITextLibraryCrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.GetReferences<ICrossReferenceItem>(Arg.Any<string[]>()).Returns(new List<ICrossReferenceItem>());
            m_CrossReferenceServiceMock.GetReferences<ICrossReferenceItem>(Arg.Any<string[]>()).Returns(new List<ICrossReferenceItem>());
            m_ProjectItemFinderMock.GetProjectItems(Arg.Any<Func<IProjectItem, bool>>()).Returns(new IProjectItem[0]);
            m_ExpressionsServiceMock.Expressions.Returns(new ExtendedBindingList<IExpression>());
            m_CrossReferenceQueryServiceMock.GetExpressions().Returns(new List<ICrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.GetFonts().Returns(new List<ICrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.GetTextLibraries().Returns(new List<ITextLibraryCrossReferenceItem>());
            // Act
            var isValid = m_CrossReferencesProjectValidator.Validate();
            const string targetPropertyName = "targetPropertyName";
            string sourceFullName = StringConstants.TagsRoot + "Tag1";
            ICrossReferenceItem item = new CrossReferenceItem(targetFullName, targetPropertyName, sourceFullName);
            m_CrossReferenceQueryServiceMock.Stub(x => x.GetReferences<ICrossReferenceItem>(Arg<string[]>.Is.Anything)).Return(new List<ICrossReferenceItem> { item });
            m_CrossReferenceQueryServiceMock.GetReferences<ICrossReferenceItem>(Arg.Any<string[]>()).Returns(new List<ICrossReferenceItem> { item });
            m_ProjectItemFinderMock.Stub(x => x.GetProjectItems(Arg<Func<IProjectItem, bool>>.Is.Anything)).Return(new IProjectItem[0]);
            m_ExpressionsServiceMock.Stub(x => x.Expressions).Return(new ExtendedBindingList<IExpression>());
            m_CrossReferenceQueryServiceMock.Stub(x => x.GetExpressions()).Return(new List<ICrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.Stub(x => x.GetFonts()).Return(new List<ICrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.Stub(x => x.GetTextLibraries()).Return(new List<ITextLibraryCrossReferenceItem>());
            m_ProjectItemFinderMock.GetProjectItems(Arg.Any<Func<IProjectItem, bool>>()).Returns(new IProjectItem[0]);
            m_ExpressionsServiceMock.Expressions.Returns(new ExtendedBindingList<IExpression>());
            m_CrossReferenceQueryServiceMock.GetExpressions().Returns(new List<ICrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.GetFonts().Returns(new List<ICrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.GetTextLibraries().Returns(new List<ITextLibraryCrossReferenceItem>());
            // Act
            var isValid = m_CrossReferencesProjectValidator.Validate();
            const string designerName = StringConstants.Tags;
            const string sourceFullName = designerName + StringConstants.ObjectNameSeparator + ".Tag1";
            ICrossReferenceItem item = new CrossReferenceItem(targetFullName, targetPropertyName, sourceFullName);
            m_CrossReferenceQueryServiceMock.Stub(x => x.GetReferences<ICrossReferenceItem>(Arg<string[]>.Is.Anything)).Return(new List<ICrossReferenceItem> { item });
            m_CrossReferenceQueryServiceMock.GetReferences<ICrossReferenceItem>(Arg.Any<string[]>()).Returns(new List<ICrossReferenceItem> { item });
            // Setup an empty tag designer
            var tagDesignerProjectItem = MockRepository.GenerateMock<IDesignerProjectItem>();
            tagDesignerProjectItem.Stub(x => x.Name).Return(designerName);
            var designerHost = MockRepository.GenerateMock<INeoDesignerHost>();
            designerHost.Stub(x => x.RootComponent).Return(new Component());
            tagDesignerProjectItem.Stub(x => x.DesignerHost).Return(designerHost);
            m_ProjectItemFinderMock.Stub(x => x.GetProjectItems(Arg<Func<IProjectItem, bool>>.Is.Anything)).Return(new IProjectItem[] { tagDesignerProjectItem });
            var tagDesignerProjectItem = Substitute.For<IDesignerProjectItem>();
            tagDesignerProjectItem.Name.Returns(designerName);
            var designerHost = Substitute.For<INeoDesignerHost>();
            designerHost.RootComponent.Returns(new Component());
            tagDesignerProjectItem.DesignerHost.Returns(designerHost);
            m_ProjectItemFinderMock.GetProjectItems(Arg.Any<Func<IProjectItem, bool>>()).Returns(new IProjectItem[] { tagDesignerProjectItem });
            m_ExpressionsServiceMock.Stub(x => x.Expressions).Return(new ExtendedBindingList<IExpression>());
            m_CrossReferenceQueryServiceMock.Stub(x => x.GetExpressions()).Return(new List<ICrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.Stub(x => x.GetFonts()).Return(new List<ICrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.Stub(x => x.GetTextLibraries()).Return(new List<ITextLibraryCrossReferenceItem>());
            m_SubItemsServiceMock.Stub(x => x.GetSubItems(Arg<IComponent>.Is.Anything, Arg<Func<IComponent, bool>>.Is.Anything)).Return(new ComponentCollection(new IComponent[0]));
            m_ExpressionsServiceMock.Expressions.Returns(new ExtendedBindingList<IExpression>());
            m_CrossReferenceQueryServiceMock.GetExpressions().Returns(new List<ICrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.GetFonts().Returns(new List<ICrossReferenceItem>());
            m_CrossReferenceQueryServiceMock.GetTextLibraries().Returns(new List<ITextLibraryCrossReferenceItem>());
            m_SubItemsServiceMock.GetSubItems(Arg.Any<IComponent>(), Arg.Any<Func<IComponent, bool>>())
                .Returns(new ComponentCollection(new IComponent[0]));
            // Act
            var isValid = m_CrossReferencesProjectValidator.Validate();

CyclicExpressionValidatorTest.cs
-18
+18
/Tools/ToolsTest/Build/BuildManager/Validators/CyclicExpressionValidatorTest.cs
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Expressions.Validation;
using Neo.ApplicationFramework.Tools.Script.Validation;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Build.BuildManager.Validators
{
        [TestCase(new[] { "1", "2", "3" }, new[] { "1", "2", "3" }, new[] { "", "", "" }, false)]
        public void DetectsCircularitiesTest(string[] tags, string[] expressions, string[] tagsInExpressions, bool shouldHaveCyclic)
        {
            var v = MockRepository.GenerateStub<IOpcClientServiceIde>();
            var tise = MockRepository.GenerateStub<ITagsInScriptExtractor>();
            IGlobalDataItem t1 = MockRepository.GenerateMock<IGlobalDataItem>();
            IGlobalDataItem t2 = MockRepository.GenerateMock<IGlobalDataItem>();
            IGlobalDataItem t3 = MockRepository.GenerateMock<IGlobalDataItem>();
            IGlobalDataItem t4 = MockRepository.GenerateMock<IGlobalDataItem>();
            var v = Substitute.For<IOpcClientServiceIde>();
            var tise = Substitute.For<ITagsInScriptExtractor>();
            IGlobalDataItem t1 = Substitute.For<IGlobalDataItem>();
            IGlobalDataItem t2 = Substitute.For<IGlobalDataItem>();
            IGlobalDataItem t3 = Substitute.For<IGlobalDataItem>();
            IGlobalDataItem t4 = Substitute.For<IGlobalDataItem>();
            t1.Stub(t => t.FullName).Return(StringConstants.TagsRoot + tags[0]);
            t2.Stub(t => t.FullName).Return(StringConstants.TagsRoot + tags[1]);
            t3.Stub(t => t.FullName).Return(StringConstants.TagsRoot + tags[2]);
            t4.Stub(t => t.FullName).Return(StringConstants.TagsRoot);
            t1.Stub(t => t.ReadExpression).Return("ExpRefTag" + expressions[0]);
            t2.Stub(t => t.ReadExpression).Return("ExpRefTag" + expressions[1]);
            t3.Stub(t => t.ReadExpression).Return("ExpRefTag" + expressions[2]);
            t1.FullName.Returns(StringConstants.TagsRoot + tags[0]);
            t2.FullName.Returns(StringConstants.TagsRoot + tags[1]);
            t3.FullName.Returns(StringConstants.TagsRoot + tags[2]);
            t4.FullName.Returns(StringConstants.TagsRoot);
            t1.ReadExpression.Returns("ExpRefTag" + expressions[0]);
            t2.ReadExpression.Returns("ExpRefTag" + expressions[1]);
            t3.ReadExpression.Returns("ExpRefTag" + expressions[2]);
            tise.Stub(x => x.ExtractReferencedTags("ExpRefTag" + expressions[0])).Return(new[] { StringConstants.TagsRoot + tagsInExpressions[0] });
            tise.Stub(x => x.ExtractReferencedTags("ExpRefTag" + expressions[1])).Return(new[] { StringConstants.TagsRoot + tagsInExpressions[1] });
            tise.Stub(x => x.ExtractReferencedTags("ExpRefTag" + expressions[2])).Return(new[] { StringConstants.TagsRoot + tagsInExpressions[2] });
            tise.ExtractReferencedTags("ExpRefTag" + expressions[0]).Returns(new[] { StringConstants.TagsRoot + tagsInExpressions[0] });
            tise.ExtractReferencedTags("ExpRefTag" + expressions[1]).Returns(new[] { StringConstants.TagsRoot + tagsInExpressions[1] });
            tise.ExtractReferencedTags("ExpRefTag" + expressions[2]).Returns(new[] { StringConstants.TagsRoot + tagsInExpressions[2] });
            v.Stub(x => x.GlobalController.GetAllTags<IGlobalDataItem>(Arg<TagsPredicate>.Is.Anything)).Return(new[] { t1, t2, t3, t4 });
            v.GlobalController.GetAllTags<IGlobalDataItem>(Arg.Any<TagsPredicate>()).Returns(new[] { t1, t2, t3, t4 });
            var validator = new CyclicExpressionProjectValidator(v.ToILazy(), tise);
            bool hasCyclic = !validator.Validate();

DeprecatedTargetValidatorTest.cs
-8
+8
/Tools/ToolsTest/Build/BuildManager/Validators/DeprecatedTargetValidatorTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Terminal.Validation;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Build.BuildManager.Validators
{
        {
            TestHelper.ClearServices();
            m_ErrorListService = TestHelper.CreateAndAddServiceMock<IErrorListService>();
            m_ErrorListService = TestHelper.CreateAndAddServiceStub<IErrorListService>();
            m_ProjectManager = TestHelper.CreateAndAddServiceStub<IProjectManager>();
            m_ProjectManager.Project = TestHelper.CreateAndAddServiceStub<IProject>();
            m_ProjectManager.Project.Terminal = MockRepository.GenerateStub<ITerminal>();
            m_ProjectManager.Project.Terminal = Substitute.For<ITerminal>();
            m_TerminalManagerService = TestHelper.CreateAndAddServiceStub<ITerminalManagerService>();
            m_TerminalManagerService.Stub(service => service.GetTerminalList()).Return(new List<ITerminal>());
            m_TerminalManagerService.GetTerminalList().Returns(new List<ITerminal>());
            m_DeprecatedTargetValidator = new DeprecatedTargetValidator(m_ProjectManager.ToILazy(), m_TerminalManagerService.ToILazy());
        }
        public void ValidationFailsForDeprecatedTargets()
        {
            //ARRANGE
            m_ProjectManager.Project.Terminal.Stub(terminal => terminal.IsDeprecated).Return(true);
            m_ProjectManager.Project.Terminal.IsDeprecated.Returns(true);
            //ACT
            bool isValidated = m_DeprecatedTargetValidator.Validate();
            //ASSERT
            Assert.That(isValidated, Is.EqualTo(false));
            m_ErrorListService.AssertWasCalled(service => service.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything));
            m_ErrorListService.Received().AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
        }
        [Test]
        public void ValidationSucceedsForNonDeprecatedTargets()
        {
            //ARRANGE
            m_ProjectManager.Project.Terminal.Stub(terminal => terminal.IsDeprecated).Return(false);
            m_ProjectManager.Project.Terminal.IsDeprecated.Returns(false);
            //ACT
            bool isValidated = m_DeprecatedTargetValidator.Validate();
            //ASSERT
            Assert.That(isValidated, Is.EqualTo(true));
            m_ErrorListService.AssertWasNotCalled(service => service.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything));
            m_ErrorListService.DidNotReceiveWithAnyArgs().AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
        }
    }
}

ReferencedAssemblyValidatorTest.cs
-42
+14
/Tools/ToolsTest/Build/BuildManager/Validators/ReferencedAssemblyValidatorTest.cs
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.ProjectManager;
using Neo.ApplicationFramework.Tools.ProjectManager.Validation;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Build.BuildManager.Validators
{
        public void SetUp()
        {
            TestHelper.ClearServices();
            m_ErrorListService = TestHelper.CreateAndAddServiceMock<IErrorListService>();
            m_ErrorListService = TestHelper.CreateAndAddServiceStub<IErrorListService>();
            m_ProjectManager = TestHelper.CreateAndAddServiceStub<IProjectManager>();
            m_ProjectManager.Project = TestHelper.CreateAndAddServiceStub<IProject>();
            m_ProjectManager.Project.FolderPath = TestFolder;
            if (!string.IsNullOrEmpty(assemblyName))
                AddToCollection(assemblyName, referencedAssemblies, srcFolder);
            m_ProjectManager.Project.Stub(p => p.ReferencedAssemblies).Return(referencedAssemblies);
            m_ProjectManager.Project.ReferencedAssemblies.Returns(referencedAssemblies);
        }
        private void AddToCollection(string assemblyName, ICollection<IReferencedAssemblyInfo> referencedAssemblies,
            AddReferencedAssemblies(assemblyName: toBeDeletedFile);
            DeleteFile(Path.Combine(m_ReferencedAssemblyFolder, toBeDeletedFile));
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat
                .Once();
            //ACT
            var isValid = m_ReferencedAssemblyValidator.Validate();
            //ASSERT
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.ReceivedWithAnyArgs(1).AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
            Assert.That(isValid, Is.EqualTo(false));
        }
        {
            //ARRANGE
            var referencedAssemblies = new BindingList<IReferencedAssemblyInfo>();
            m_ProjectManager.Project.Stub(p => p.ReferencedAssemblies).Return(referencedAssemblies);
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat.Never();
            m_ProjectManager.Project.ReferencedAssemblies.Returns(referencedAssemblies);
            //ACT
            var isValid = m_ReferencedAssemblyValidator.Validate();
            //ASSERT
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.DidNotReceiveWithAnyArgs().AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
            Assert.That(isValid, Is.EqualTo(true));
        }
            //ARRANGE
            AddReferencedAssemblies(assemblyName: "controls.dll");
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat
                .Once();
            //ACT
            var isValid = m_ReferencedAssemblyValidator.Validate();
            //ASSERT
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.ReceivedWithAnyArgs(1).AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
            Assert.That(isValid, Is.EqualTo(false));
        }
            //ARRANGE
            AddReferencedAssemblies(assemblyName: "PQR.dll");
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat
                .Once();
            //ACT
            var isValid = m_ReferencedAssemblyValidator.Validate();
            //ASSERT
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.ReceivedWithAnyArgs(1).AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
            Assert.That(isValid, Is.EqualTo(false));
        }
            //ARRANGE
            AddReferencedAssemblies(assemblyName: "ABCD.dll");
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat.Never();
            //ACT
            var isValid = m_ReferencedAssemblyValidator.Validate();
            //ASSERT
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.DidNotReceiveWithAnyArgs().AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
            Assert.That(isValid, Is.EqualTo(true));
        }
            //ARRANGE
            AddReferencedAssemblies(assemblyName: "ToolsCF.dll");
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat
                .Once();
            //ACT
            var isValid = m_ReferencedAssemblyValidator.Validate();
            //ASSERT
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.ReceivedWithAnyArgs(1).AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
            Assert.That(isValid, Is.EqualTo(false));
        }
            //ARRANGE
            AddReferencedAssemblies(assemblyName: "Attributes - Copy.dll");
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat
                .Once();
            //ACT
            var isValid = m_ReferencedAssemblyValidator.Validate();
            //ASSERT
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.ReceivedWithAnyArgs(1).AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
            Assert.That(isValid, Is.EqualTo(false));
        }
            //ARRANGE
            AddReferencedAssemblies(assemblyName: "Attributes.dll");
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat
                .Once();
            //ACT
            var isValid = m_ReferencedAssemblyValidator.Validate();
            //ASSERT
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.ReceivedWithAnyArgs(1).AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
            Assert.That(isValid, Is.EqualTo(false));
        }
            //ARRANGE
            AddReferencedAssemblies(assemblyName: "Resources.dll", srcFolder: ApplicationStartupPath);
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat
                .Never();
            //ACT
            var isValid = m_ReferencedAssemblyValidator.Validate();
            //ASSERT
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.DidNotReceiveWithAnyArgs().AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
            Assert.That(isValid, Is.EqualTo(true));
        }
            });
            DeleteFile(Path.Combine(m_ReferencedAssemblyFolder, "ABCD.dll"));
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat
                .Times(6);
            //ACT
            var isValid = m_ReferencedAssemblyValidator.Validate();
            //ASSERT
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.ReceivedWithAnyArgs(6).AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
            Assert.That(isValid, Is.EqualTo(false));
        }

ScreenIDsValidatorTest.cs
-17
+14
/Tools/ToolsTest/Build/BuildManager/Validators/ScreenIDsValidatorTest.cs
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Screen;
using Neo.ApplicationFramework.Tools.Screen.ScreenId.Validation;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Build.BuildManager.Validators
{
        {
            TestHelper.ClearServices();
            m_ScreenIDXmlFileReader = MockRepository.GenerateStub<ScreenIDXmlFileReader>();
            m_ScreenIDXmlFileReader = Substitute.For<ScreenIDXmlFileReader>();
            ITargetInfo target = MockRepository.GenerateStub<ITargetInfo>();
            ITargetInfo target = Substitute.For<ITargetInfo>();
            target.ProjectPath = "";
            ITargetService targetService = TestHelper.AddServiceStub<ITargetService>();
            targetService.Stub(x => x.CurrentTargetInfo).Return(target);
            targetService.CurrentTargetInfo.Returns(target);
            m_ScreenIDsProjectValidator = new ScreenIDsProjectValidator(m_ScreenIDXmlFileReader);
            m_ErrorListService = TestHelper.CreateAndAddServiceMock<IErrorListService>();
            m_ErrorListService = TestHelper.CreateAndAddServiceStub<IErrorListService>();
        }
        [Test]
        public void WhenNoDuplicateScreenIdsIsFoundItDoesNotAddWarnings()
        {
            m_ScreenIDXmlFileReader.Stub(x => x.Load("")).IgnoreArguments().Return(new ScreenIDInformation[] { });
            m_ScreenIDXmlFileReader.Load(Arg.Any<string>()).Returns(new ScreenIDInformation[] { });
            m_ScreenIDsProjectValidator.Validate();
            m_ErrorListService.AssertWasNotCalled(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything));
            m_ErrorListService.DidNotReceiveWithAnyArgs().AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
        }
        [Test]
        public void WarnsAboutEachOfTheDuplicatedIDs()
        {
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything)).Repeat
                .Twice();
            m_ScreenIDXmlFileReader.Stub(x => x.Load("")).IgnoreArguments().Return(new[] {
            m_ScreenIDXmlFileReader.Load(Arg.Any<string>()).Returns(new[] {
                new ScreenIDInformation(1,"Screen1"),
                new ScreenIDInformation(1,"Screen2"),
                new ScreenIDInformation(3,"Screen3"),
            m_ScreenIDsProjectValidator.Validate();
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
        }
        [Test]
        {
            string expectedPartOfMessage = "Screen ID 1 was duplicated on screens Screen1 and Screen2.";
            m_ScreenIDXmlFileReader.Stub(x => x.Load("")).IgnoreArguments().Return(new[] {
            m_ScreenIDXmlFileReader.Load(Arg.Any<string>()).Returns(new[] {
                new ScreenIDInformation(1,"Screen1"),
                new ScreenIDInformation(1,"Screen2")
            });
            var actualWarningMessage = string.Empty;
            m_ErrorListService.WhenForAnyArgs(x => x.AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>()))
                .Do(y => actualWarningMessage = (string)y[0]);
            m_ScreenIDsProjectValidator.Validate();
            var actualWarningMessage = m_ErrorListService
                .GetCallsMadeOn(errorListService => errorListService.AddNewCompilerError(default(string), default(bool))).First()
                .Arguments.First() as string;
            Assert.That(actualWarningMessage, Does.Contain(expectedPartOfMessage));
        }
    }

TagsInScriptExtractorTest.cs
-9
+9
/Tools/ToolsTest/Build/BuildManager/Validators/TagsInScriptExtractorTest.cs
using System.Collections.Generic;
using Core.Api.Utilities;
using Neo.ApplicationFramework.Common.Collections;
using Neo.ApplicationFramework.Tools.Design;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.Design;
using Neo.ApplicationFramework.Tools.Script.Validation;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Build.BuildManager.Validators
{
        public void CanExtract(string script, string[] tagsInScript)
        {
            ISet<string> tags = new[] { Tag1, Tag2, Tag3, Tag4 }.ToSet();
            IExpressionsService expressionsService = MockRepository.GenerateMock<IExpressionsService>();
            var expression = MockRepository.GenerateStub<IExpression>();
            IExpressionsService expressionsService = Substitute.For<IExpressionsService>();
            var expression = Substitute.For<IExpression>();
            expression.Script = script;
            expression.Name = "E";
            expressionsService.Stub(x => x.Expressions).Return(new ExtendedBindingList<IExpression>() { expression });
            expressionsService.Expressions.Returns(new ExtendedBindingList<IExpression>() { expression });
            TagsInScriptExtractor tagsInScriptExtractor = new TagsInScriptExtractor(tags, LazyCreateNameCreationService(), expressionsService.ToILazy());
            IEnumerable<string> extractedTags = tagsInScriptExtractor.ExtractReferencedTags("E");
            return new LazyWrapper<INameCreationService>(
                () =>
                {
                    var namingConstraints = MockRepository.GenerateMock<INamingConstraints>();
                    namingConstraints.Stub(inv => inv.IsNameLengthValid(Arg<int>.Is.Anything, Arg<int>.Is.Anything, Arg<int>.Is.Anything)).Return(true);
                    namingConstraints.Stub(inv => inv.ReservedApplicationNames).Return(new HashSet<string>());
                    namingConstraints.Stub(inv => inv.ReservedSystemNames).Return(new HashSet<string>());
                    var namingConstraints = Substitute.For<INamingConstraints>();
                    namingConstraints.IsNameLengthValid(Arg.Any<int>(), Arg.Any<int>(), Arg.Any<int>()).Returns(true);
                    namingConstraints.ReservedApplicationNames.Returns(new HashSet<string>());
                    namingConstraints.ReservedSystemNames.Returns(new HashSet<string>());
                    return new NameCreationService(namingConstraints);
                });
        }

RenderableControlResourcesGeneratorTest.cs
-229
+260
/Tools/ToolsTest/Build/BuildManager/RenderableControlResourcesGeneratorTest.cs
Displayed content is truncated due to maximum viewable content limit.
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Windows;
using System.Windows.Media.Imaging;
using Core.Api.CrossReference;
using System.Drawing;
using Core.Api.Platform;
using Core.Api.ProjectTarget;
using Core.Component.Engine.Design;
using Neo.ApplicationFramework.Common.Graphics;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Build.BuildManager
{
        private IRenderableControlServiceIde m_RenderableServiceStub;
        private IDesignerProjectItem m_ProjectItemMock;
        private RenderableControlResourcesHelper m_RenderableControlResourceHelperStub;
        private MockRepository m_MockRepository;
        private List<ICrossReferenceItem> m_CrossReferenceItems;
        [SetUp]
        public void TestSetup()
        {
            m_MockRepository = new MockRepository();
            m_RenderableServiceStub = TestHelper.AddServiceStub<IRenderableControlServiceIde>();
            var targetInfo = MockRepository.GenerateStub<ITargetInfo>();
            var targetInfo = Substitute.For<ITargetInfo>();
            targetInfo.TempPath = TempPath;
            targetInfo.ProjectPath = ProjectPath;
            var target = MockRepository.GenerateStub<ITarget>();
            target.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            var target = Substitute.For<ITarget>();
            target.Id.Returns(TargetPlatform.WindowsCE);
            m_DirectoryHelperStub = MockRepository.GenerateStub<DirectoryHelper>();
            m_DirectoryHelperStub.Stub(x => x.Exists(TempPath)).Return(true);
            m_DirectoryHelperStub = Substitute.For<DirectoryHelper>();
            m_DirectoryHelperStub.Exists(TempPath).Returns(true);
            m_FileHelperStub = MockRepository.GenerateStub<FileHelper>();
            m_FileHelperStub = Substitute.For<FileHelper>();
            m_BitmapHelperMock = m_MockRepository.DynamicMock<BitmapHelperStub>();
            m_BitmapHelperMock = Substitute.For<BitmapHelperStub>();
            m_Generator = new RenderableControlResourcesGenerator(targetInfo, target, m_DirectoryHelperStub, m_FileHelperStub, m_BitmapHelperMock);
            m_ScreenRootDesignerStub = MockRepository.GenerateStub<IScreenRootDesigner>();
            m_ScreenRootDesignerStub = Substitute.For<IScreenRootDesigner>();
            m_DesignerHostStub = MockRepository.GenerateStub<INeoDesignerHost>();
            m_DesignerHostStub.Stub(x => x.RootDesigner).Return(m_ScreenRootDesignerStub);
            m_DesignerHostStub = Substitute.For<INeoDesignerHost>();
            m_DesignerHostStub.RootDesigner.Returns(m_ScreenRootDesignerStub);
            m_CrossReferenceItems = new List<ICrossReferenceItem>();
            AddCrossReferenceItem(DummyResourceFileName, DummyResourceObjectFullName);
            m_ProjectItemMock = m_MockRepository.DynamicMultiMock<IDesignerProjectItem>(typeof(ICompileUnit), typeof(ICrossReferenceItemSource));
            m_ProjectItemMock.Stub(x => x.DesignerHost).Return(m_DesignerHostStub);
            m_ProjectItemMock.Expect(x => x.Filename).Return(DesignerFileName).Repeat.Any();
            m_ProjectItemMock = Substitute.For<IDesignerProjectItem, ICompileUnit, ICrossReferenceItemSource>(); // ???
            m_ProjectItemMock.DesignerHost.Returns(m_DesignerHostStub);
            m_ProjectItemMock.Filename.Returns(DesignerFileName);
            m_RenderableControlResourceHelperStub = MockRepository.GenerateStub<RenderableControlResourcesHelper>(m_ProjectItemMock);
            m_RenderableControlResourceHelperStub = Substitute.For<RenderableControlResourcesHelper>(m_ProjectItemMock);
            ((ICrossReferenceItemSource)m_ProjectItemMock).Expect(x => x.GetReferences<ICrossReferenceItem>(CrossReferenceTypes.Renderable.ToString())).Repeat.Once().Return(m_CrossReferenceItems);
            m_MockRepository.ReplayAll();
            ((ICrossReferenceItemSource)m_ProjectItemMock).GetReferences<ICrossReferenceItem>(CrossReferenceTypes.Renderable.ToString())
                .Returns(m_CrossReferenceItems);
        }
        private void AddCrossReferenceItem(string sourceFullName, string targetFullName)
        {
            ICrossReferenceItem crossReferenceItem = MockRepository.GenerateStub<ICrossReferenceItem>();
            crossReferenceItem.Stub(x => x.SourceFullName).Return(sourceFullName);
            crossReferenceItem.Stub(x => x.TargetFullName).Return(targetFullName);
            ICrossReferenceItem crossReferenceItem = Substitute.For<ICrossReferenceItem>();
            crossReferenceItem.SourceFullName.Returns(sourceFullName);
            crossReferenceItem.TargetFullName.Returns(targetFullName);
            m_CrossReferenceItems.Add(crossReferenceItem);
        }
        [Test]
        public void WriteRenderStateResourceIfResourceDoesNotExistInZipOrAsTempFile()
        {
            var element = m_MockRepository.DynamicMultiMock<FrameworkElement>(typeof(IRenderableState), typeof(ISupportsTransparency));
            var element = Substitute.For<FrameworkElement, IRenderableState, ISupportsTransparency>();
            element.Width = 100;
            element.Height = 100;
            m_ScreenRootDesignerStub.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Return(element);
            m_ScreenRootDesignerStub.Stub(x => x.Elements).Return(new List<FrameworkElement>() { element });
            m_ScreenRootDesignerStub.FindElementByName(Arg.Any<string>()).Returns(element);
            m_ScreenRootDesignerStub.Elements.Returns(new List<FrameworkElement>() { element });
            m_BitmapHelperMock.Stub(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything)).Return(new BitmapImage()).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.WriteImageToStream(Arg<Stream>.Is.Anything, Arg<BitmapSource>.Is.Anything, Arg<BitmapEncoder>.Is.Anything)).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.SaveStreamToBitmap(Arg<Stream>.Is.Anything, Arg<string>.Is.Anything)).Return(true).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.ConvertToCETransparencyFormat(Arg.Any<BitmapSource>()).Returns(new BitmapImage());
            m_BitmapHelperMock.SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>()).Returns(true);
            m_RenderableServiceStub.Stub(x => x.TryGetLastModifiedDate(Arg<string>.Is.Anything, out Arg<DateTime>.Out(DateTime.MinValue).Dummy)).Return(false);
            m_FileHelperStub.Stub(x => x.Exists(m_DummyResourceFilePath)).Return(false);
            m_RenderableServiceStub.TryGetLastModifiedDate(Arg.Any<string>(), out Arg.Any<DateTime>())
                .Returns(x => {
                    x[1] = DateTime.MinValue;
                    return false; 
                });
            m_FileHelperStub.Exists(m_DummyResourceFilePath).Returns(false);
            m_RenderableControlResourceHelperStub.Stub(x => x.GetLayoutSlot(Arg<FrameworkElement>.Is.Anything)).Return(new Rect(0, 0, 100, 100));
            m_RenderableControlResourceHelperStub.Stub(x => x.RenderBitmap(Arg<FrameworkElement>.Is.Anything)).IgnoreArguments().Return(new Bitmap(100, 100));
            ((IRenderableState)element).Render(Arg.Any<string>()).Returns(new BitmapImage());
            m_Generator.GenerateResources(m_ProjectItemMock, false, m_RenderableControlResourceHelperStub);
            m_BitmapHelperMock.AssertWasCalled(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything));
            m_ProjectItemMock.VerifyAllExpectations();
            m_BitmapHelperMock.VerifyAllExpectations();
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).ConvertToCETransparencyFormat(Arg.Any<BitmapSource>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).WriteImageToStream(Arg.Any<Stream>(), Arg.Any<BitmapSource>(), Arg.Any<BitmapEncoder>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>());
        }
        [Test]
        public void WriteRenderStateResourceIfBothZipAndTempFileAreOutDated()
        {
            var element = m_MockRepository.DynamicMultiMock<FrameworkElement>(typeof(IRenderableState), typeof(ISupportsTransparency));
            var element = Substitute.For<FrameworkElement, IRenderableState, ISupportsTransparency>();
            var anElement = Substitute.For<FrameworkElement, IRenderable, ISupportsTransparency>();
            element.Width = 100;
            element.Height = 100;
            m_ScreenRootDesignerStub.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Return(element);
            m_ScreenRootDesignerStub.Stub(x => x.Elements).Return(new List<FrameworkElement>() { element });
            m_ScreenRootDesignerStub.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Return(m_MockRepository.DynamicMultiMock<FrameworkElement>(typeof(IRenderable), typeof(ISupportsTransparency)));
            m_ScreenRootDesignerStub.FindElementByName(Arg.Any<string>()).Returns(element, anElement);
            m_ScreenRootDesignerStub.Elements.Returns(new List<FrameworkElement>() { element });
            m_BitmapHelperMock.Stub(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything)).Return(new BitmapImage()).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.WriteImageToStream(Arg<Stream>.Is.Anything, Arg<BitmapSource>.Is.Anything, Arg<BitmapEncoder>.Is.Anything)).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.SaveStreamToBitmap(Arg<Stream>.Is.Anything, Arg<string>.Is.Anything)).Return(true).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.ConvertToCETransparencyFormat(Arg.Any<BitmapSource>()).Returns(new BitmapImage());
            m_BitmapHelperMock.SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>()).Returns(true);
            DateTime designerDate = DateTime.Now;
            m_RenderableServiceStub.Stub(x => x.TryGetLastModifiedDate(Arg<string>.Is.Anything, out Arg<DateTime>.Out(designerDate.Subtract(TimeSpan.FromDays(1))).Dummy)).Return(true);
            m_RenderableServiceStub.TryGetLastModifiedDate(Arg.Any<string>(), out Arg.Any<DateTime>())
                .Returns(x => {
                    x[1] = designerDate.Subtract(TimeSpan.FromDays(1));
                    return true; 
                });
            m_FileHelperStub.Stub(x => x.Exists(m_DummyResourceFilePath)).Return(true);
            m_FileHelperStub.Stub(x => x.GetLastWriteTime(m_DummyResourceFilePath)).Return(designerDate.Subtract(TimeSpan.FromDays(1)));
            m_FileHelperStub.Stub(x => x.Exists(m_DesignerFilePath)).Return(true);
            m_FileHelperStub.Stub(x => x.GetLastWriteTime(m_DesignerFilePath)).Return(designerDate);
            m_FileHelperStub.Exists(m_DummyResourceFilePath).Returns(true);
            m_FileHelperStub.GetLastWriteTime(m_DummyResourceFilePath).Returns(designerDate.Subtract(TimeSpan.FromDays(1)));
            m_FileHelperStub.Exists(m_DesignerFilePath).Returns(true);
            m_FileHelperStub.GetLastWriteTime(m_DesignerFilePath).Returns(designerDate);
            m_RenderableControlResourceHelperStub.Stub(x => x.GetLayoutSlot(Arg<FrameworkElement>.Is.Anything)).Return(new Rect(0, 0, 100, 100));
            m_RenderableControlResourceHelperStub.Stub(x => x.RenderBitmap(Arg<FrameworkElement>.Is.Anything)).IgnoreArguments().Return(new Bitmap(100, 100));
            ((IRenderableState)element).Render(Arg.Any<string>()).Returns(new BitmapImage());
            m_Generator.GenerateResources(m_ProjectItemMock, false, m_RenderableControlResourceHelperStub);
            m_BitmapHelperMock.AssertWasCalled(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything));
            m_ProjectItemMock.VerifyAllExpectations();
            m_BitmapHelperMock.VerifyAllExpectations();
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).ConvertToCETransparencyFormat(Arg.Any<BitmapSource>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).WriteImageToStream(Arg.Any<Stream>(), Arg.Any<BitmapSource>(), Arg.Any<BitmapEncoder>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>());
        }
        [Test]
        public void WriteRenderStateResourceIfForcedEvenIfZipAndTempFileAreUpToDate()
        {
            var element = m_MockRepository.DynamicMultiMock<FrameworkElement>(typeof(IRenderableState), typeof(ISupportsTransparency));
            var element = Substitute.For<FrameworkElement, IRenderableState, ISupportsTransparency>();
            element.Width = 100;
            element.Height = 100;
            m_ScreenRootDesignerStub.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Return(element);
            m_ScreenRootDesignerStub.Stub(x => x.Elements).Return(new List<FrameworkElement>() { element });
            m_ScreenRootDesignerStub.FindElementByName(Arg.Any<string>()).Returns(element);
            m_ScreenRootDesignerStub.Elements.Returns(new List<FrameworkElement>() { element });
            m_BitmapHelperMock.Stub(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything)).Return(new BitmapImage()).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.WriteImageToStream(Arg<Stream>.Is.Anything, Arg<BitmapSource>.Is.Anything, Arg<BitmapEncoder>.Is.Anything)).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.SaveStreamToBitmap(Arg<Stream>.Is.Anything, Arg<string>.Is.Anything)).Return(true).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.ConvertToCETransparencyFormat(Arg.Any<BitmapSource>()).Returns(new BitmapImage());
            m_BitmapHelperMock.SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>()).Returns(true);
            DateTime designerDate = DateTime.Now;
            m_RenderableServiceStub.Stub(x => x.TryGetLastModifiedDate(Arg<string>.Is.Anything, out Arg<DateTime>.Out(designerDate.Add(TimeSpan.FromDays(1))).Dummy)).Return(true);
            m_RenderableServiceStub.TryGetLastModifiedDate(Arg.Any<string>(), out Arg.Any<DateTime>())
                .Returns(x => {
                    x[1] = designerDate.Add(TimeSpan.FromDays(1));
                    return true;
                });
            m_FileHelperStub.Stub(x => x.Exists(m_DummyResourceFilePath)).Return(true);
            m_FileHelperStub.Stub(x => x.GetLastWriteTime(m_DummyResourceFilePath)).Return(designerDate.Add(TimeSpan.FromDays(1)));
            m_FileHelperStub.Stub(x => x.Exists(m_DesignerFilePath)).Return(true);
            m_FileHelperStub.Stub(x => x.GetLastWriteTime(m_DesignerFilePath)).Return(designerDate);
            m_FileHelperStub.Exists(m_DummyResourceFilePath).Returns(true);
            m_FileHelperStub.GetLastWriteTime(m_DummyResourceFilePath).Returns(designerDate.Add(TimeSpan.FromDays(1)));
            m_FileHelperStub.Exists(m_DesignerFilePath).Returns(true);
            m_FileHelperStub.GetLastWriteTime(m_DesignerFilePath).Returns(designerDate);
            m_RenderableControlResourceHelperStub.Stub(x => x.GetLayoutSlot(Arg<FrameworkElement>.Is.Anything)).Return(new Rect(0, 0, 100, 100));
            m_RenderableControlResourceHelperStub.Stub(x => x.RenderBitmap(Arg<FrameworkElement>.Is.Anything)).IgnoreArguments().Return(new Bitmap(100, 100));
            ((IRenderableState)element).Render(Arg.Any<string>()).Returns(new BitmapImage());
            m_Generator.GenerateResources(m_ProjectItemMock, true, m_RenderableControlResourceHelperStub);
            m_BitmapHelperMock.AssertWasCalled(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything));
            m_ProjectItemMock.VerifyAllExpectations();
            m_BitmapHelperMock.VerifyAllExpectations();
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).ConvertToCETransparencyFormat(Arg.Any<BitmapSource>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).WriteImageToStream(Arg.Any<Stream>(), Arg.Any<BitmapSource>(), Arg.Any<BitmapEncoder>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>());
        }
        [Test]
        public void WriteResourceWithoutTransparencyIfResourceDoesNotExistInZipOrAsTempFile()
        {
            var element = m_MockRepository.DynamicMultiMock<FrameworkElement>(typeof(IRenderable), typeof(ISupportsTransparency));
            ((ISupportsTransparency)element).Stub(x => x.RequiresTransparency).PropertyBehavior();
            var element = Substitute.For<FrameworkElement, IRenderable, ISupportsTransparency>();
            element.Width = 100;
            element.Height = 100;
            ((ISupportsTransparency)element).RequiresTransparency = true;
            m_ScreenRootDesignerStub.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Return(element);
            m_ScreenRootDesignerStub.Stub(x => x.Elements).Return(new List<FrameworkElement>() { element });
            m_ScreenRootDesignerStub.FindElementByName(Arg.Any<string>()).Returns(element);
            m_ScreenRootDesignerStub.Elements.Returns(new List<FrameworkElement>() { element });
            m_BitmapHelperMock.Stub(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything)).Return(new BitmapImage()).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.WriteImageToStream(Arg<Stream>.Is.Anything, Arg<BitmapSource>.Is.Anything, Arg<BitmapEncoder>.Is.Anything)).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.SaveStreamToBitmap(Arg<Stream>.Is.Anything, Arg<string>.Is.Anything)).Return(true).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.ConvertToCETransparencyFormat(Arg.Any<BitmapSource>()).Returns(new BitmapImage());
            m_BitmapHelperMock.WriteImageToStream(Arg.Any<Stream>(), Arg.Any<BitmapSource>(), Arg.Any<BitmapEncoder>());
            m_BitmapHelperMock.SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>()).Returns(true);
            m_RenderableServiceStub.Stub(x => x.TryGetLastModifiedDate(Arg<string>.Is.Anything, out Arg<DateTime>.Out(DateTime.MinValue).Dummy)).Return(false);
            m_FileHelperStub.Stub(x => x.Exists(m_DummyResourceFilePath)).Return(false);
            m_RenderableServiceStub.TryGetLastModifiedDate(Arg.Any<string>(), out Arg.Any<DateTime>())
                .Returns(x => {
                    x[1] = DateTime.MinValue;
                    return false;
                });
            m_FileHelperStub.Exists(m_DummyResourceFilePath).Returns(false);
            m_RenderableControlResourceHelperStub.Stub(x => x.GetLayoutSlot(Arg<FrameworkElement>.Is.Anything)).Return(new Rect(0, 0, 100, 100));
            m_RenderableControlResourceHelperStub.Stub(x => x.RenderBitmap(Arg<FrameworkElement>.Is.Anything)).IgnoreArguments().Return(new Bitmap(100, 100));
            ((IRenderable)element).Render().Returns(new BitmapImage());
            m_Generator.GenerateResources(m_ProjectItemMock, false, m_RenderableControlResourceHelperStub);
            m_BitmapHelperMock.AssertWasCalled(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything));
            m_ProjectItemMock.VerifyAllExpectations();
            m_BitmapHelperMock.VerifyAllExpectations();
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).ConvertToCETransparencyFormat(Arg.Any<BitmapSource>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).WriteImageToStream(Arg.Any<Stream>(), Arg.Any<BitmapSource>(), Arg.Any<BitmapEncoder>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>());
        }
        [Test]
        public void WriteResourceWithoutTransparencyIfBothZipAndTempFileAreOutDated()
        {
            var element = m_MockRepository.DynamicMultiMock<FrameworkElement>(typeof(IRenderable), typeof(ISupportsTransparency));
            ((ISupportsTransparency)element).Stub(x => x.RequiresTransparency).PropertyBehavior();
            var element = Substitute.For<FrameworkElement, IRenderable, ISupportsTransparency>();
            var anElement = Substitute.For<FrameworkElement, IRenderable, ISupportsTransparency>();
            element.Width = 100;
            element.Height = 100;
            ((ISupportsTransparency)element).RequiresTransparency = false;
            m_ScreenRootDesignerStub.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Return(element);
            m_ScreenRootDesignerStub.Stub(x => x.Elements).Return(new List<FrameworkElement>() { element });
            m_ScreenRootDesignerStub.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Return(m_MockRepository.DynamicMultiMock<FrameworkElement>(typeof(IRenderable), typeof(ISupportsTransparency)));
            m_ScreenRootDesignerStub.FindElementByName(Arg.Any<string>()).Returns(element);
            m_ScreenRootDesignerStub.Elements.Returns(new List<FrameworkElement>() { element });
            m_ScreenRootDesignerStub.FindElementByName(Arg.Any<string>()).Returns(anElement);
            m_BitmapHelperMock.Stub(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything)).Return(new BitmapImage()).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Stub(x => x.ConvertBitmapToBitmapSource(Arg<Bitmap>.Is.Anything)).Return(new BitmapImage()).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.WriteImageToStream(Arg<Stream>.Is.Anything, Arg<BitmapSource>.Is.Anything, Arg<BitmapEncoder>.Is.Anything)).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.SaveStreamToBitmap(Arg<Stream>.Is.Anything, Arg<string>.Is.Anything)).Return(true).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.ConvertToCETransparencyFormat(Arg.Any<BitmapSource>()).Returns(new BitmapImage());
            m_BitmapHelperMock.ConvertBitmapToBitmapSource(Arg.Any<Bitmap>()).Returns(new BitmapImage());
            m_BitmapHelperMock.SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>()).Returns(true);
            DateTime designerDate = DateTime.Now;
            m_RenderableServiceStub.Stub(x => x.TryGetLastModifiedDate(Arg<string>.Is.Anything, out Arg<DateTime>.Out(designerDate.Subtract(TimeSpan.FromDays(1))).Dummy)).Return(true);
            m_RenderableServiceStub.TryGetLastModifiedDate(Arg.Any<string>(), out Arg.Any<DateTime>())
                .Returns(x =>
                {
                    x[1] = designerDate.Subtract(TimeSpan.FromDays(1));
                    return true;
                });
            m_FileHelperStub.Stub(x => x.Exists(m_DummyResourceFilePath)).Return(true);
            m_FileHelperStub.Stub(x => x.GetLastWriteTime(m_DummyResourceFilePath)).Return(designerDate.Subtract(TimeSpan.FromDays(1)));
            m_FileHelperStub.Stub(x => x.Exists(m_DesignerFilePath)).Return(true);
            m_FileHelperStub.Stub(x => x.GetLastWriteTime(m_DesignerFilePath)).Return(designerDate);
            m_FileHelperStub.Exists(m_DummyResourceFilePath).Returns(true);
            m_FileHelperStub.GetLastWriteTime(m_DummyResourceFilePath).Returns(designerDate.Subtract(TimeSpan.FromDays(1)));
            m_FileHelperStub.Exists(m_DesignerFilePath).Returns(true);
            m_FileHelperStub.GetLastWriteTime(m_DesignerFilePath).Returns(designerDate);
            m_RenderableControlResourceHelperStub.Stub(x => x.GetLayoutSlot(Arg<FrameworkElement>.Is.Anything)).Return(new Rect(0, 0, 100, 100));
            m_RenderableControlResourceHelperStub.Stub(x => x.RenderBitmap(Arg<FrameworkElement>.Is.Anything)).IgnoreArguments().Return(new Bitmap(100, 100));
            m_RenderableControlResourceHelperStub.GetLayoutSlot(Arg.Any<FrameworkElement>()).Returns(new Rect(0, 0, 100, 100));
            m_RenderableControlResourceHelperStub.RenderBitmap(Arg.Any<FrameworkElement>()).Returns(new Bitmap(100, 100));
            m_Generator.GenerateResources(m_ProjectItemMock, false, m_RenderableControlResourceHelperStub);
            m_BitmapHelperMock.AssertWasCalled(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything));
            m_ProjectItemMock.VerifyAllExpectations();
            m_BitmapHelperMock.VerifyAllExpectations();
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).ConvertToCETransparencyFormat(Arg.Any<BitmapSource>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).ConvertBitmapToBitmapSource(Arg.Any<Bitmap>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).WriteImageToStream(Arg.Any<Stream>(), Arg.Any<BitmapSource>(), Arg.Any<BitmapEncoder>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>());
        }
        [Test]
        public void WriteResourceWithoutTransparencyIfForcedEvenIfZipAndTempFileAreUpToDate()
        {
            var element = m_MockRepository.DynamicMultiMock<FrameworkElement>(typeof(IRenderable), typeof(ISupportsTransparency));
            ((ISupportsTransparency)element).Stub(x => x.RequiresTransparency).PropertyBehavior();
            var element = Substitute.For<FrameworkElement, IRenderable, ISupportsTransparency>();
            element.Width = 100;
            element.Height = 100;
            ((ISupportsTransparency)element).RequiresTransparency = false;
            m_ScreenRootDesignerStub.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Return(element);
            m_ScreenRootDesignerStub.Stub(x => x.Elements).Return(new List<FrameworkElement>() { element });
            m_ScreenRootDesignerStub.FindElementByName(Arg.Any<string>()).Returns(element);
            m_ScreenRootDesignerStub.Elements.Returns(new List<FrameworkElement>() { element });
            m_BitmapHelperMock.Stub(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything)).Return(new BitmapImage()).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Stub(x => x.ConvertBitmapToBitmapSource(Arg<Bitmap>.Is.Anything)).Return(new BitmapImage()).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.WriteImageToStream(Arg<Stream>.Is.Anything, Arg<BitmapSource>.Is.Anything, Arg<BitmapEncoder>.Is.Anything)).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.SaveStreamToBitmap(Arg<Stream>.Is.Anything, Arg<string>.Is.Anything)).Return(true).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.ConvertToCETransparencyFormat(Arg.Any<BitmapSource>()).Returns(new BitmapImage());
            m_BitmapHelperMock.ConvertBitmapToBitmapSource(Arg.Any<Bitmap>()).Returns(new BitmapImage());
            m_BitmapHelperMock.SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>()).Returns(true);
            DateTime designerDate = DateTime.Now;
            m_RenderableServiceStub.Stub(x => x.TryGetLastModifiedDate(Arg<string>.Is.Anything, out Arg<DateTime>.Out(designerDate.Add(TimeSpan.FromDays(1))).Dummy)).Return(true);
            m_RenderableServiceStub.TryGetLastModifiedDate(Arg.Any<string>(), out Arg.Any<DateTime>())
                .Returns(x =>
                {
                    x[1] = designerDate.Add(TimeSpan.FromDays(1));
                    return true;
                });
            m_FileHelperStub.Stub(x => x.Exists(m_DummyResourceFilePath)).Return(true);
            m_FileHelperStub.Stub(x => x.GetLastWriteTime(m_DummyResourceFilePath)).Return(designerDate.Add(TimeSpan.FromDays(1)));
            m_FileHelperStub.Stub(x => x.Exists(m_DesignerFilePath)).Return(true);
            m_FileHelperStub.Stub(x => x.GetLastWriteTime(m_DesignerFilePath)).Return(designerDate);
            m_FileHelperStub.Exists(m_DummyResourceFilePath).Returns(true);
            m_FileHelperStub.GetLastWriteTime(m_DummyResourceFilePath).Returns(designerDate.Add(TimeSpan.FromDays(1)));
            m_FileHelperStub.Exists(m_DesignerFilePath).Returns(true);
            m_FileHelperStub.GetLastWriteTime(m_DesignerFilePath).Returns(designerDate);
            m_RenderableControlResourceHelperStub.Stub(x => x.GetLayoutSlot(Arg<FrameworkElement>.Is.Anything)).Return(new Rect(0, 0, 100, 100));
            m_RenderableControlResourceHelperStub.Stub(x => x.RenderBitmap(Arg<FrameworkElement>.Is.Anything)).IgnoreArguments().Return(new Bitmap(100, 100));
            m_RenderableControlResourceHelperStub.GetLayoutSlot(Arg.Any<FrameworkElement>()).Returns(new Rect(0, 0, 100, 100));
            m_RenderableControlResourceHelperStub.RenderBitmap(Arg.Any<FrameworkElement>()).Returns(new Bitmap(100, 100));
            m_Generator.GenerateResources(m_ProjectItemMock, true, m_RenderableControlResourceHelperStub);
            m_BitmapHelperMock.AssertWasCalled(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything));
            m_ProjectItemMock.VerifyAllExpectations();
            m_BitmapHelperMock.VerifyAllExpectations();
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).ConvertToCETransparencyFormat(Arg.Any<BitmapSource>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).ConvertBitmapToBitmapSource(Arg.Any<Bitmap>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).WriteImageToStream(Arg.Any<Stream>(), Arg.Any<BitmapSource>(), Arg.Any<BitmapEncoder>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>());
        }
        [Test]
        public void WriteResourceWithTransparencyIfResourceDoesNotExistInZipOrAsTempFile()
        {
            var element = m_MockRepository.DynamicMultiMock<FrameworkElement>(typeof(IRenderable), typeof(ISupportsTransparency));
            ((ISupportsTransparency)element).Stub(x => x.RequiresTransparency).PropertyBehavior();
            var element = Substitute.For<FrameworkElement, IRenderable, ISupportsTransparency>();
            element.Width = 100;
            element.Height = 100;
            ((ISupportsTransparency)element).RequiresTransparency = true;
            m_ScreenRootDesignerStub.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Return(element);
            m_ScreenRootDesignerStub.Stub(x => x.Elements).Return(new List<FrameworkElement>() { element });
            m_ScreenRootDesignerStub.FindElementByName(Arg.Any<string>()).Returns(element);
            m_ScreenRootDesignerStub.Elements.Returns(new List<FrameworkElement>() { element });
            m_BitmapHelperMock.Stub(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything)).Return(new BitmapImage()).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.WriteImageToStream(Arg<Stream>.Is.Anything, Arg<BitmapSource>.Is.Anything, Arg<BitmapEncoder>.Is.Anything)).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.SaveStreamToBitmap(Arg<Stream>.Is.Anything, Arg<string>.Is.Anything)).Return(true).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.ConvertToCETransparencyFormat(Arg.Any<BitmapSource>()).Returns(new BitmapImage());
            m_BitmapHelperMock.WriteImageToStream(Arg.Any<Stream>(), Arg.Any<BitmapSource>(), Arg.Any<BitmapEncoder>());
            m_BitmapHelperMock.SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>()).Returns(true);
            m_RenderableServiceStub.Stub(x => x.TryGetLastModifiedDate(Arg<string>.Is.Anything, out Arg<DateTime>.Out(DateTime.MinValue).Dummy)).Return(false);
            m_FileHelperStub.Stub(x => x.Exists(m_DummyResourceFilePath)).Return(false);
            m_RenderableServiceStub.TryGetLastModifiedDate(Arg.Any<string>(), out Arg.Any<DateTime>())
                .Returns(x =>
                {
                    x[1] = DateTime.MinValue;
                    return false;
                });
            m_FileHelperStub.Exists(m_DummyResourceFilePath).Returns(false);
            m_RenderableControlResourceHelperStub.Stub(x => x.GetLayoutSlot(Arg<FrameworkElement>.Is.Anything)).Return(new Rect(0, 0, 100, 100));
            m_RenderableControlResourceHelperStub.Stub(x => x.RenderBitmap(Arg<FrameworkElement>.Is.Anything)).IgnoreArguments().Return(new Bitmap(100, 100));
            ((IRenderable)element).Render().Returns(new BitmapImage());
            m_Generator.GenerateResources(m_ProjectItemMock, false, m_RenderableControlResourceHelperStub);
            m_BitmapHelperMock.AssertWasCalled(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything));
            m_ProjectItemMock.VerifyAllExpectations();
            m_BitmapHelperMock.VerifyAllExpectations();
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).ConvertToCETransparencyFormat(Arg.Any<BitmapSource>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).WriteImageToStream(Arg.Any<Stream>(), Arg.Any<BitmapSource>(), Arg.Any<BitmapEncoder>());
            m_BitmapHelperMock.ReceivedWithAnyArgs(m_CrossReferenceItems.Count).SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>());
        }
        [Test]
        public void WritesResourceWithTransparencyIfBothZipAndTempFileAreOutDated()
        {
            var element = m_MockRepository.DynamicMultiMock<FrameworkElement>(typeof(IRenderable), typeof(ISupportsTransparency));
            ((ISupportsTransparency)element).Stub(x => x.RequiresTransparency).PropertyBehavior();
            var element = Substitute.For<FrameworkElement, IRenderable, ISupportsTransparency>();
            var anElement = Substitute.For<FrameworkElement, IRenderable, ISupportsTransparency>();
            element.Width = 100;
            element.Height = 100;
            ((ISupportsTransparency)element).RequiresTransparency = true;
            m_ScreenRootDesignerStub.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Return(element);
            m_ScreenRootDesignerStub.Stub(x => x.Elements).Return(new List<FrameworkElement>() { element });
            m_ScreenRootDesignerStub.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Return(m_MockRepository.DynamicMultiMock<FrameworkElement>(typeof(IRenderable), typeof(ISupportsTransparency)));
            m_ScreenRootDesignerStub.FindElementByName(Arg.Any<string>()).Returns(element, anElement);
            m_ScreenRootDesignerStub.Elements.Returns(new List<FrameworkElement>() { element });
            m_BitmapHelperMock.Stub(x => x.ConvertToCETransparencyFormat(Arg<BitmapSource>.Is.Anything)).Return(new BitmapImage()).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.WriteImageToStream(Arg<Stream>.Is.Anything, Arg<BitmapSource>.Is.Anything, Arg<BitmapEncoder>.Is.Anything)).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.Expect(x => x.SaveStreamToBitmap(Arg<Stream>.Is.Anything, Arg<string>.Is.Anything)).Return(true).Repeat.Times(m_CrossReferenceItems.Count);
            m_BitmapHelperMock.ConvertToCETransparencyFormat(Arg.Any<BitmapSource>()).Returns(new BitmapImage());
            m_BitmapHelperMock.SaveStreamToBitmap(Arg.Any<Stream>(), Arg.Any<string>()).Returns(true);
            DateTime designerDate = DateTime.Now;
            m_RenderableServiceStub.Stub(x => x.TryGetLastModifiedDate(Arg<string>.Is.Anything, out Arg<DateTime>.Out(designerDate.Subtract(TimeSpan.FromDays(1))).Dummy)).Return(true);
            m_RenderableServiceStub.TryGetLastModifiedDate(Arg.Any<string>(), out Arg.Any<DateTime>())
                .Returns(x =>
                {
                    x[1] = designerDate.Subtract(TimeSpan.FromDays(1));
                    return true;

ServerPropertyPageTest.cs
-10
+10
/Tools/ToolsTest/CommonPropertyPages/ServerPropertyPageTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Security;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.CommonPropertyPages
{
            string assemblyDirectory = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
            string blacklistPath = Path.Combine(assemblyDirectory, "Configurations", PasswordValidator.BlacklistFileName);
            var fileSettingsServiceStub = TestHelper.AddServiceStub<IFileSettingsServiceIde>();
            fileSettingsServiceStub.Stub(x => x.FileNameInCommonApplicationDataFolder(Arg<string>.Is.Anything)).Return(blacklistPath);
            m_MessageBoxService = TestHelper.CreateAndAddServiceMock<IMessageBoxServiceIde>();
            fileSettingsServiceStub.FileNameInCommonApplicationDataFolder(Arg.Any<string>()).Returns(blacklistPath);
            m_MessageBoxService = TestHelper.CreateAndAddServiceStub<IMessageBoxServiceIde>();
        }
        [TearDown]
            var testServerPropertyPage = new TestServerPropertyPage();
            Assert.AreEqual(expectedValid, testServerPropertyPage.ValidatePassword(password));
            m_MessageBoxService.AssertWasCalled(x => x.Show(Arg<string>.Is.Anything,
                                                            Arg<string>.Is.Anything,
                                                            Arg<MessageBoxButtons>.Is.Equal(MessageBoxButtons.YesNo),
                                                            Arg<MessageBoxIcon>.Is.Equal(MessageBoxIcon.Exclamation),
                                                            Arg<MessageBoxDefaultButton>.Is.Equal(MessageBoxDefaultButton.Button2),
                                                            Arg<DialogResult>.Is.Equal(DialogResult.No)),
                                                            options => options.Repeat.Times(messageBoxShowCount));
            m_MessageBoxService.Received(messageBoxShowCount)
                .Show(Arg.Any<string>(),
                    Arg.Any<string>(),
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Exclamation,
                    MessageBoxDefaultButton.Button2,
                    DialogResult.No);
        }
    }
}

NamespaceSynchronizerTest.cs
-16
+27
/Tools/ToolsTest/ControllerManager/ServerBrowserProvider/NamespaceSynchronizerTest.cs
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Neo.ApplicationFramework.Tools.Design;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interop.DataSource;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.ControllerManager.ServerBrowseProvider;
using Neo.ApplicationFramework.Tools.Design;
using Neo.ApplicationFramework.Tools.OpcClient;
using Neo.ApplicationFramework.Tools.OpcUaClient;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ControllerManager.ServerBrowserProvider
{
        [SetUp]
        public void SetUp()
        {
            var namingConstraints = MockRepository.GenerateMock<INamingConstraints>();
            namingConstraints.Stub(inv => inv.IsNameLengthValid(Arg<int>.Is.Anything, Arg<int>.Is.Anything, Arg<int>.Is.Anything)).Return(true);
            namingConstraints.Stub(inv => inv.ReservedApplicationNames).Return(new HashSet<string>());
            namingConstraints.Stub(inv => inv.ReservedSystemNames).Return(new HashSet<string>());
            var namingConstraints = Substitute.For<INamingConstraints>();
            namingConstraints.IsNameLengthValid(Arg.Any<int>(), Arg.Any<int>(), Arg.Any<int>()).Returns(true);
            namingConstraints.ReservedApplicationNames.Returns(new HashSet<string>());
            namingConstraints.ReservedSystemNames.Returns(new HashSet<string>());
            INameCreationService nameCreationService = new NameCreationService(namingConstraints);
            TestHelper.AddService<INameCreationService>(nameCreationService);
            TestHelper.AddService<IProjectNameCreationServiceIde>(new ProjectNameCreationService(nameCreationService.ToILazy()));
            
            m_DataSourceContainerStub = MockRepository.GenerateMock<IDataSourceContainer>();
            m_DataSourceContainerStub = Substitute.For<IDataSourceContainer>();
            IOpcUaNamespaceInfos opcUaNamespaceInfos = new OpcUaNamespaceInfos();
            for (int i = 0; i < 10; i++)
            {
            }
            m_DataSourceContainerStub.Stub(m => m.OpcUaNamespaceInfos).Return(opcUaNamespaceInfos);
            m_DataSourceContainerStub.Stub(m => m.OpcUaNamespaceNameBrowseNameSeparator).Return(':');
            m_DataSourceContainerStub.OpcUaNamespaceInfos.Returns(opcUaNamespaceInfos);
            m_DataSourceContainerStub.OpcUaNamespaceNameBrowseNameSeparator.Returns(':');
            
            
            m_Namespaces = new string[] { "J0", "J1", "J2" };
        [Test]
        public void NonExistingServerSideNamespacesWithMappedDataItemsAreNotRemoved()
        {
            m_DataSourceContainerStub.Stub(m => m.DataItemBases).Return(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>(){ new DataItem("A", "NS0:Previous0", BEDATATYPE.DT_BOOLEAN, 2, 2, 2) }));
            m_DataSourceContainerStub.DataItemBases
                .Returns(new ReadOnlyObservableCollection<IDataItemBase>(
                    new ObservableCollection<IDataItemBase>()
                    {
                        new DataItem("A", "NS0:Previous0", BEDATATYPE.DT_BOOLEAN, 2, 2, 2) 
                    }));
            NamespaceSynchResult result = m_Synchronizer.Synchronize();
            bool exists = m_DataSourceContainerStub.OpcUaNamespaceInfos.Any(nsInfo => nsInfo.Name == "NS0" && nsInfo.Uri == "Previous0");
            bool isAddedToUnresolved = result.UnResolvedNamespaces.Any(nsInfo => nsInfo.Name == "NS0" && nsInfo.Uri == "Previous0");
        [Test]
        public void NonExistingServerSideNamespacesWithoutMappedDataItemsAreRemoved()
        {
            m_DataSourceContainerStub.Stub(m => m.DataItemBases).Return(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>()));
            m_DataSourceContainerStub.DataItemBases
                .Returns(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>()));
            bool existsBefore = m_DataSourceContainerStub.OpcUaNamespaceInfos.Any(nsInfo => nsInfo.Name == "NS0" && nsInfo.Uri == "Previous0");
            NamespaceSynchResult result = m_Synchronizer.Synchronize();
        [Test]
        public void ExistingNamespacesAreUnchanged()
        {
            m_DataSourceContainerStub.Stub(m => m.DataItemBases).Return(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>()));
            m_DataSourceContainerStub.DataItemBases
                .Returns(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>()));
            OpcUaNamespaceInfo shouldRemainUnchanged = new OpcUaNamespaceInfo("NS" + 40, "J0");
            m_DataSourceContainerStub.OpcUaNamespaceInfos.Add(shouldRemainUnchanged);
            var result = m_Synchronizer.Synchronize();
        [Test]
        public void NewNamespacesAreAddedOnNextFreeSlot()
        {
            m_DataSourceContainerStub.Stub(m => m.DataItemBases).Return(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>()));
            m_DataSourceContainerStub.DataItemBases
                .Returns(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>()));
            m_DataSourceContainerStub.OpcUaNamespaceInfos.Clear();
            OpcUaNamespaceInfo shouldRemainUnchanged = new OpcUaNamespaceInfo("NS" + 0, "J0");
            m_DataSourceContainerStub.OpcUaNamespaceInfos.Add(shouldRemainUnchanged);
        [Test]
        public void AllNewAndExistingServerSideNamespacesHasAnIndexToPrefixMapping()
        {
            m_DataSourceContainerStub.Stub(m => m.DataItemBases).Return(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>()));
            m_DataSourceContainerStub.DataItemBases
                .Returns(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>()));
            OpcUaNamespaceInfo shouldRemainUnchanged = new OpcUaNamespaceInfo("NS" + 40, "J0");
            m_DataSourceContainerStub.OpcUaNamespaceInfos.Add(shouldRemainUnchanged);
            NamespaceSynchResult result = m_Synchronizer.Synchronize();
        [Test]
        public void ThereIsTheSameOrMoreOfEmptyNamespaceSlotsAsBeforeSynch()
        {
            m_DataSourceContainerStub.Stub(m => m.DataItemBases).Return(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>() { new DataItem("A", "NS20:J", BEDATATYPE.DT_BOOLEAN, 2, 2, 2) }));
            m_DataSourceContainerStub.DataItemBases
                .Returns(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>() { new DataItem("A", "NS20:J", BEDATATYPE.DT_BOOLEAN, 2, 2, 2) }));
            var numberOfEmptySlotsBeforeSynch = m_DataSourceContainerStub.OpcUaNamespaceInfos.Count(nsInfo => string.IsNullOrEmpty(nsInfo.Uri));
            m_Synchronizer.Synchronize();
        [Test]
        public void IndexToPrefixMappingLeadsToSameUri()
        {
            m_DataSourceContainerStub.Stub(m => m.DataItemBases).Return(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>()));
            m_DataSourceContainerStub.DataItemBases
                .Returns(new ReadOnlyObservableCollection<IDataItemBase>(new ObservableCollection<IDataItemBase>()));
            NamespaceSynchResult result = m_Synchronizer.Synchronize();
            for (int i = 0; i < m_Namespaces.Length; i++)
            {

ControllerManagerTest.cs
-3
+3
/Tools/ToolsTest/ControllerManager/ControllerManagerTest.cs
using System.Collections.Generic;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ControllerManager
{
        [SetUp]
        public void Setup()
        {
            m_BrandService = MockRepository.GenerateStub<IBrandService>();
            m_BrandService = Substitute.For<IBrandService>();
            TestHelper.AddService(m_BrandService);
            
        [Test]
        public void PossibilityToGetControllerList()
        {
            m_BrandService.Stub(x => x.SupportedDrivers).Return(131);
            m_BrandService.SupportedDrivers.Returns(131);
            IList<IController> controllerList = m_ControllerManagerService.GetControllers();
        }
    }

CreateSeriesTest.cs
-25
+26
/Tools/ToolsTest/CreateSeries/CreateSeriesTest.cs
using Core.Api.Service;
using Core.Component.Api.Design;
using Core.Component.Engine.Design;
using Neo.ApplicationFramework.Utilities.Reflection;
using Neo.ApplicationFramework.Common.Test;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Controls.Commands;
using Neo.ApplicationFramework.Tools.MultiLanguage;
using Neo.ApplicationFramework.Tools.OpcClient;
using Neo.ApplicationFramework.Tools.Selection;
using Neo.ApplicationFramework.Utilities.Reflection;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using INameCreationService = Neo.ApplicationFramework.Interfaces.INameCreationService;
namespace Neo.ApplicationFramework.Tools.CreateSeries
        {
            TestHelper.AddServiceStub<IFastLoggingFeatureLogicService>();
            IGlobalController controllerStub = MockRepository.GenerateStub<IGlobalController>();
            controllerStub.Stub(x => x.DataItemBases).Return(new ReadOnlyCollection<IDataItemBase>(new IDataItemBase[] { }));
            IGlobalController controllerStub = Substitute.For<IGlobalController>();
            controllerStub.DataItemBases.Returns(new ReadOnlyCollection<IDataItemBase>(new IDataItemBase[] { }));
            var dataCommandFacade = MockRepository.GenerateMock<IDataCommandFacade>();
            var propertyBinderFactory = MockRepository.GenerateMock<IPropertyBinderFactory>().ToILazy();
            var dataCommandFacade = Substitute.For<IDataCommandFacade>();
            var propertyBinderFactory = Substitute.For<IPropertyBinderFactory>().ToILazy();
            TestHelper.AddService<INameCreationService>(new NameCreationService());
            var testSite = new TestSite();
            IDesignerDocument designerDocument = new DesignerDocument(
                testSite,
                MockRepository.GenerateStub<IDesignerPersistenceService>(),
                MockRepository.GenerateStub<System.ComponentModel.Design.Serialization.INameCreationService>().ToILazy(),
                Substitute.For<IDesignerPersistenceService>(),
                Substitute.For<System.ComponentModel.Design.Serialization.INameCreationService>().ToILazy(),
                () => new SelectionService(),
                new LazyWrapper<IReferenceProvider>(
                    () => new GlobalReferenceToReferenceAdapter(ServiceContainerCF.GetService<IGlobalReferenceService>())),
            ((IExtenderProviderService)m_DesignerHost).AddExtenderProvider((IExtenderProvider)Activator.CreateInstance(typeof(ExposureExtenderProvider)));
            TestHelper.AddServiceStub<ITagChangedNotificationServiceCF>();
            var opcUaServerRootComponent = MockRepository.GenerateStub<IOpcUaServerRootComponent>();
            var opcUaServerRootComponent = Substitute.For<IOpcUaServerRootComponent>();
            opcUaServerRootComponent.ExposureOption = OpcUaServerTagExposureOption.AllTagsVisible;
            var projectItem = MockRepository.GenerateStub<IDesignerProjectItem>();
            projectItem.Stub(x => x.ContainedObject).Return(opcUaServerRootComponent);
            var projectItem = Substitute.For<IDesignerProjectItem>();
            projectItem.ContainedObject.Returns(opcUaServerRootComponent);
            var projectItemFinder = TestHelper.AddServiceStub<IProjectItemFinder>();
            projectItemFinder.Stub(x => x.GetProjectItems(typeof(IOpcUaServerRootComponent))).Return(new [] { projectItem });
            projectItemFinder.GetProjectItems(typeof(IOpcUaServerRootComponent)).Returns(new [] { projectItem });
            m_OpcClientService = TestHelper.AddServiceStub<IOpcClientServiceIde>();
            m_OpcClientService.Stub(x => x.GlobalController).Return(controllerStub);
            m_OpcClientService.Stub(x => x.AddNewDataItem(Arg<string>.Is.Anything, Arg<string>.Is.Anything, Arg<IControllerBase>.Is.Anything)).Repeat.Any().Do(
                new Func<string, string, IControllerBase, IDataItemBase>(
                    (_, __, ___) => (IGlobalDataItem)m_DesignerHost.CreateComponent(typeof(TestGlobalDataItem))));
            m_OpcClientService.GlobalController.Returns(controllerStub);
            m_OpcClientService.AddNewDataItem(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<IControllerBase>())
                .ReturnsForAnyArgs(x => (IGlobalDataItem)m_DesignerHost.CreateComponent(typeof(TestGlobalDataItem)));
        }
        [TearDown]
            IDataItem secondDataItem = new DataItem();
            IDataItem thirdDataItem = new DataItem();
            IDataSourceContainer firstDataItemsDataSource = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer secondDataItemsDataSource = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer thirdDataItemsDataSource = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer firstDataItemsDataSource = Substitute.For<IDataSourceContainer>();
            IDataSourceContainer secondDataItemsDataSource = Substitute.For<IDataSourceContainer>();
            IDataSourceContainer thirdDataItemsDataSource = Substitute.For<IDataSourceContainer>();
            firstDataItem.DataSourceContainer = firstDataItemsDataSource;
            secondDataItem.DataSourceContainer = secondDataItemsDataSource;
            thirdDataItem.DataSourceContainer = thirdDataItemsDataSource;
            m_CreateSeriesService.CreateSeriesOfTags(2, 1);
            Calls calls = thirdDataItemsDataSource.GetCallsMadeOn(x => x.GetNextItemID(null, 0));
            Call firstCall = calls.First();
            Call secondCall = calls.ElementAt(1);
            Assert.That(int.Parse(firstCall.Arguments.ElementAt(1).ToString()), Is.EqualTo(expectedValueOffsetForArrayIndex1));
            Assert.That(int.Parse(secondCall.Arguments.ElementAt(1).ToString()), Is.EqualTo(expectedValueOffsetForArrayIndex2));
            var callNum = 1;
            thirdDataItemsDataSource.WhenForAnyArgs(x=> x.GetNextItemID(Arg.Any<IDataItem>(), Arg.Any<int>()))
                .Do(y => {
                    if(callNum == 1)
                        Assert.That(int.Parse(y[1].ToString()), Is.EqualTo(expectedValueOffsetForArrayIndex1));
                    else if (callNum == 2)
                        Assert.That(int.Parse(y[1].ToString()), Is.EqualTo(expectedValueOffsetForArrayIndex2));
                });
        }
        // This test's main purpose is to assure that new properties in GlobalDataItem and IGlobalDataItem, that should be included in a copy of a GlobalDataItem,

DatabaseServiceActionCrossReferenceFinderTest.cs
-7
+6
/Tools/ToolsTest/CrossReference/Finders/DatabaseServiceActionCrossReferenceFinderTest.cs
using Neo.ApplicationFramework.Interfaces.Storage;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Action;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.CrossReference.Finders
{
        public void SetUp()
        {
            TestHelper.AddServiceStub<ITargetService>();
            m_ActionServiceMock = MockRepository.GenerateMock<IActionService>();
            m_ActionServiceMock = Substitute.For<IActionService>();
            m_CrossReferenceFinder = new DatabaseServiceActionCrossReferenceFinder(m_ActionServiceMock.ToILazy());
            m_CrossReferenceContainer = MockRepository.GenerateMock<ICrossReferenceContainer>();
            m_CrossReferenceContainer = Substitute.For<ICrossReferenceContainer>();
        }
        [TearDown]
        public void TearDown()
        {
            m_CrossReferenceContainer.VerifyAllExpectations();
            TestHelper.ClearServices();
        }
            const string tableName = "DataLogger55";
            const string fileName = "fileName";
            var action = CreateDatabaseExportAction(tableName, fileName);
            m_ActionServiceMock.Stub(x => x.GetActionList(Arg<object>.Is.Anything)).Return(new ActionList { action });
            m_ActionServiceMock.Stub(x => x.GetActionInfo(Arg<string>.Is.Anything)).Return(new ActionInfo(typeof(IDatabaseImportExportService)));
            m_CrossReferenceContainer.Expect(x => x.AddReference(Arg<IActionCrossReferenceItem>.Is.Anything)).Repeat.Once();
            m_ActionServiceMock.GetActionList(Arg.Any<object>()).Returns(new ActionList { action });
            m_ActionServiceMock.GetActionInfo(Arg.Any<string>()).Returns(new ActionInfo(typeof(IDatabaseImportExportService)));
            // Act
            m_CrossReferenceFinder.FindReferences<DependencyObject, Binding>(m_CrossReferenceContainer, dependencyObject, null);
            m_CrossReferenceContainer.Received(1).AddReference(Arg.Any<IActionCrossReferenceItem>());
        }
        private IAction CreateDatabaseExportAction(string tableName, string fileName)

DataItemReferenceFinderTests.cs
-27
+16
/Tools/ToolsTest/CrossReference/Finders/DataItemReferenceFinderTests.cs
using Neo.ApplicationFramework.Tools.CrossReference.Finders;
using Neo.ApplicationFramework.Tools.Design.Bindings;
using Neo.ApplicationFramework.Tools.OpcClient.Bindings;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.CrossReference
{
        public void SetUp()
        {
            TestHelper.AddService<IPropertyBinderFactory>(new PropertyBinderFactory());
            ITarget targetStub = MockRepository.GenerateStub<ITarget>();
            ITarget targetStub = Substitute.For<ITarget>();
            var terminalStub = MockRepository.GenerateStub<ITerminal>();
            var targetInfoStub = MockRepository.GenerateStub<ITargetInfo>();
            var terminalStub = Substitute.For<ITerminal>();
            var targetInfoStub = Substitute.For<ITargetInfo>();
            targetInfoStub.TerminalDescription = terminalStub;
            ITargetService targetServiceStub = TestHelper.AddServiceStub<ITargetService>();
            targetServiceStub.CurrentTarget = targetStub;
            targetServiceStub.Stub(x => x.CurrentTargetInfo).Return(targetInfoStub);
            targetServiceStub.CurrentTargetInfo.Returns(targetInfoStub);
            m_CrossReferenceContainer = MockRepository.GenerateMock<ICrossReferenceContainerSignature>();
            m_CrossReferenceContainer = Substitute.For<ICrossReferenceContainerSignature>();
            TestHelper.Bindings.Wpf.RegisterSimpleDataItemBindingSourceProvider();
            m_ActionServiceMock = MockRepository.GenerateMock<IActionService>();
            m_ActionServiceMock = Substitute.For<IActionService>();
            m_CrossReferenceFinder = new DataItemCrossReferenceFinder(m_ActionServiceMock.ToILazy());
        }
        [TearDown]
        public void TearDown()
        {
            m_CrossReferenceContainer.VerifyAllExpectations();
            TestHelper.ClearServices();
            TestHelper.Bindings.Wpf.ClearProviders();
        }
            var bindingSourceDescription = new LocalPropertyBindingSourceDescription("MyAlias");
            m_CrossReferenceContainer
                .Expect(x => x.AddReference(new CrossReferenceItem(null, null, null)))
                .IgnoreArguments()
                .Repeat.Never();
            var button = new Button() { Name = "MyButton" };
            var binding = new LocalPropertyBindingProvider().ProvideWpfBinding(bindingSourceDescription);
            BindingOperations.SetBinding(button, Button.ValueProperty, binding);
            // Act
            m_CrossReferenceFinder.FindReferences<DependencyObject, Binding>(m_CrossReferenceContainer, button, null);
            m_CrossReferenceContainer.DidNotReceiveWithAnyArgs().AddReference(Arg.Any<CrossReferenceItem>());
        }
        [Test]
            // Arrange
            var bindingSourceDescription = DataItemBindingSourceDescription.Create(StringConstants.TagsRoot + "Tag1");
            m_CrossReferenceContainer.Expect(
                x => x.AddReference(
                    Arg<CrossReferenceItem>.Matches(
                        y => y.TargetFullName == "MyButton" && y.TargetPropertyName == "Value" && y.SourceFullName == StringConstants.TagsRoot + "Tag1"
                    )
                )
            ).Repeat.Once();
            var button = new Button() { Name = "MyButton" };
            var binding = new TagBindingProvider().ProvideWpfBinding(bindingSourceDescription);
            BindingOperations.SetBinding(button, Button.ValueProperty, binding);
            m_ActionServiceMock.Stub(x => x.GetActionList(Arg<object>.Is.Anything)).Return(new ActionList { new Action.Action()});
            m_ActionServiceMock.GetActionList(Arg.Any<object>()).Returns(new ActionList { new Action.Action()});
            // Act
            m_CrossReferenceFinder.FindReferences<DependencyObject, Binding>(m_CrossReferenceContainer, button, null);
            m_CrossReferenceContainer.Received(1)
                .AddReference(Arg.Is<CrossReferenceItem>(y => y.TargetFullName == "MyButton" && y.TargetPropertyName == "Value" 
                    && y.SourceFullName == StringConstants.TagsRoot + "Tag1"));
        }
        [Test]
        public void OtherBindingsAreNotAddedToContainer()
        {
            m_CrossReferenceContainer
                .Expect(x => x.AddReference(new CrossReferenceItem(null, null, null)))
                .IgnoreArguments()
                .Repeat.Never();
            var button = new Button() { Name = "MyButton" };
            var binding = new Binding("SomePath") { Source = new object() };
            BindingOperations.SetBinding(button, Button.ValueProperty, binding);
            m_CrossReferenceFinder.FindReferences<DependencyObject, Binding>(m_CrossReferenceContainer, button, null);
            m_CrossReferenceContainer.DidNotReceiveWithAnyArgs().AddReference(Arg.Any<CrossReferenceItem>());
        }
    }
}

ScriptTagCrossReferenceFinderTest.cs
-11
+11
/Tools/ToolsTest/CrossReference/Finders/ScriptTagCrossReferenceFinderTest.cs
using System;
using System.Linq;
using System.Text;
using Core.Api.Utilities;
using Neo.ApplicationFramework.Common.Serialization.Encryption;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Core.Api.Utilities;
namespace Neo.ApplicationFramework.Tools.CrossReference.Finders
{
    [TestFixture]
    public class ScriptTagCrossReferenceFinderTest
    {
        private readonly IProjectManager m_ProjectManager = MockRepository.GenerateStub<IProjectManager>();
        private readonly ILazy<IEncryptionStrategyFactory> m_EncryptionFactoryLazy = MockRepository.GenerateStub<IEncryptionStrategyFactory>().ToILazy();
        private readonly IOpcClientServiceIde m_OpcClientService = MockRepository.GenerateStub<IOpcClientServiceIde>();
        private readonly IProjectManager m_ProjectManager = Substitute.For<IProjectManager>();
        private readonly ILazy<IEncryptionStrategyFactory> m_EncryptionFactoryLazy = Substitute.For<IEncryptionStrategyFactory>().ToILazy();
        private readonly IOpcClientServiceIde m_OpcClientService = Substitute.For<IOpcClientServiceIde>();
        [SetUp]
        public void SetUp()
        {
            var globalController = MockRepository.GenerateStub<IGlobalController>();
            var tag1 = MockRepository.GenerateStub<IGlobalDataItem>();
            var globalController = Substitute.For<IGlobalController>();
            var tag1 = Substitute.For<IGlobalDataItem>();
            tag1.Name = "Tag1";
            var tag2 = MockRepository.GenerateStub<IGlobalDataItem>();
            var tag2 = Substitute.For<IGlobalDataItem>();
            tag2.Name = "Tag2";
            var tag3 = MockRepository.GenerateStub<IGlobalDataItem>();
            var tag3 = Substitute.For<IGlobalDataItem>();
            tag3.Name = "Tag3";
            globalController.Stub(x => x.GetAllTags<IGlobalDataItem>(TagsPredicate.Tags)).Return(
            globalController.GetAllTags<IGlobalDataItem>(TagsPredicate.Tags).Returns(
                new[]
                {
                    tag1, tag2, tag3
                });
            m_OpcClientService.Stub(x => x.GlobalController).Return(globalController);
            m_OpcClientService.GlobalController.Returns(globalController);
        }
        [Test]

CrossReferenceRenameServiceTest.cs
-44
+39
/Tools/ToolsTest/CrossReference/CrossReferenceRenameServiceTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.CrossReference;
using Neo.ApplicationFramework.Tools.CrossReference.Shell;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.CrossReference
{
        [SetUp]
        public void Setup()
        {
            m_ProjectItemFinderMock = MockRepository.GenerateMock<IProjectItemFinder>();
            m_ProjectManagerMock = MockRepository.GenerateStub<IProjectManager>();
            m_GlobalReferenceServiceMock = MockRepository.GenerateMock<IGlobalReferenceService>();
            m_CrossReferenceRebinderServiceMock = MockRepository.GenerateMock<ICrossReferenceRebinderService>();
            m_CrossReferenceServiceMock = MockRepository.GenerateMock<ICrossReferenceService>();
            m_InformationProgressServiceMock = MockRepository.GenerateMock<IInformationProgressService>();
            m_MessageBoxService = MockRepository.GenerateStub<IMessageBoxServiceIde>();
            m_ProjectItemFinderMock = Substitute.For<IProjectItemFinder>();
            m_ProjectManagerMock = Substitute.For<IProjectManager>();
            m_GlobalReferenceServiceMock = Substitute.For<IGlobalReferenceService>();
            m_CrossReferenceRebinderServiceMock = Substitute.For<ICrossReferenceRebinderService>();
            m_CrossReferenceServiceMock = Substitute.For<ICrossReferenceService>();
            m_InformationProgressServiceMock = Substitute.For<IInformationProgressService>();
            m_MessageBoxService = Substitute.For<IMessageBoxServiceIde>();
            var projectItemFinder = m_ProjectItemFinderMock.ToILazy();
            var projectManager =  m_ProjectManagerMock.ToILazy();
        [TearDown]
        public void TearDown()
        {
            m_ProjectManagerMock.VerifyAllExpectations();
            m_MessageBoxService.VerifyAllExpectations();
        }
        [Test]
            // Arrange
            string oldGroupName = "OldGroup";
            string newGroupName = "NewGroup";
            string targetFullName = "Screen1.Button";
            var textLibraryCrossReferenceItems = new List<ITextLibraryCrossReferenceItem>();
            textLibraryCrossReferenceItems.Add(new TextLibraryCrossReferenceItem("Screen1.Button", "TargetPropertyName", oldGroupName));            
            textLibraryCrossReferenceItems.Add(new TextLibraryCrossReferenceItem(targetFullName, "TargetPropertyName", oldGroupName));
            m_CrossReferenceServiceMock.Stub(serviceMock => serviceMock.GetReferences<ITextLibraryCrossReferenceItem>(Arg<string>.Is.Anything)).Return(textLibraryCrossReferenceItems);
            m_CrossReferenceServiceMock.GetReferences<ITextLibraryCrossReferenceItem>(Arg.Any<string>()).Returns(textLibraryCrossReferenceItems);
            var targetObject = new object();
            m_GlobalReferenceServiceMock.Stub<IGlobalReferenceService>(serviceMock => serviceMock.GetObject<object>(oldGroupName)).Return(targetObject);
            m_GlobalReferenceServiceMock.GetObject<object>(targetFullName).Returns(targetObject);
            var rebinder = MockRepository.GenerateMock<ICrossReferenceRebinder>();
            rebinder.Stub<ICrossReferenceRebinder>(rebinderMock => rebinderMock.Rebind(Arg<object>.Is.Anything, Arg<ICrossReferenceItem>.Is.Anything, Arg<string>.Is.Anything, Arg<string>.Is.Anything)).Return(true);
            var rebinder = Substitute.For<ICrossReferenceRebinder>();
            rebinder.Rebind(Arg.Any<object>(), Arg.Any<ICrossReferenceItem>(), Arg.Any<string>(), Arg.Any<string>()).Returns(true);
            m_CrossReferenceRebinderServiceMock.Stub<ICrossReferenceRebinderService>(serviceMock => serviceMock.GetRebinder(Arg<ICrossReferenceItem>.Is.Anything, Arg<string>.Is.Anything)).Return(rebinder);
            var designerProjectItem = MockRepository.GenerateMock<IDesignerProjectItem>();
            m_ProjectItemFinderMock.Stub<IProjectItemFinder>(finderMock => finderMock.GetProjectItem(Arg<object>.Is.Anything)).Return(designerProjectItem);
            m_CrossReferenceRebinderServiceMock.GetRebinder(Arg.Any<ICrossReferenceItem>(), Arg.Any<string>()).Returns(rebinder);
            var designerProjectItem = Substitute.For<IDesignerProjectItem>();
            m_ProjectItemFinderMock.GetProjectItem(Arg.Any<string>()).Returns(designerProjectItem);
            // Act
            m_RenamerService.UpdateNameByCrossReferences<ITextLibraryCrossReferenceItem>(oldGroupName, newGroupName, null, CrossReferenceTypes.TextLibrary.ToString());
            // Assert
            designerProjectItem.Expect(projectItemMock => projectItemMock.FireItemChanged()).Repeat.Once();
            designerProjectItem.Received(1).FireItemChanged();
        }
        [Test]
            const string oldGroupName = "OldGroup";
            const string newGroupName = "NewGroup";
            var textLibraryCrossReferenceItems = new List<ITextLibraryCrossReferenceItem>();
            m_CrossReferenceServiceMock.Stub(serviceMock => serviceMock.GetReferences<ITextLibraryCrossReferenceItem>(Arg<string>.Is.Anything)).Return(textLibraryCrossReferenceItems);
            m_CrossReferenceServiceMock.GetReferences<ITextLibraryCrossReferenceItem>(Arg.Any<string>()).Returns(textLibraryCrossReferenceItems);
            // Act
            m_RenamerService.UpdateNameByCrossReferences<ITextLibraryCrossReferenceItem>(oldGroupName, newGroupName, null, CrossReferenceTypes.TextLibrary.ToString());
            // Assert
            m_GlobalReferenceServiceMock.Expect(serviceMock => serviceMock.GetObject<object>(Arg<string>.Is.Anything)).Repeat.Never();
            m_GlobalReferenceServiceMock.DidNotReceiveWithAnyArgs().GetObject<object>(Arg.Any<string>());
        }
        [Test]
            // Arrange
            string categoryName = CrossReferenceTypes.GlobalDataItem.ToString();
            m_ProjectManagerMock.Stub(x => x.EnsureProjectSaved()).Return(true);
            m_CrossReferenceServiceMock.Stub(x => x.GetReferences<IActionCrossReferenceItem>(Arg<string>.Is.Anything)).Return(new List<IActionCrossReferenceItem>());
            m_MessageBoxService.Expect(x => x.Show(Arg<string>.Is.Anything)).Repeat.Never();
            m_ProjectManagerMock.EnsureProjectSaved().Returns(true);
            m_CrossReferenceServiceMock.GetReferences<IActionCrossReferenceItem>(Arg.Any<string>()).Returns(new List<IActionCrossReferenceItem>());
            // Act
            bool shouldBeUpdated = m_RenamerService.NameShouldBeUpdated<IActionCrossReferenceItem>(OldName, null, categoryName);
            // Assert
            Assert.IsTrue(shouldBeUpdated);
            m_MessageBoxService.DidNotReceiveWithAnyArgs().Show(Arg.Any<string>());
        }
        [Test]
            string categoryName = CrossReferenceTypes.GlobalDataItem.ToString();
            var crossReferenceItems = new List<IActionCrossReferenceItem> { new ActionCrossReferenceItem { SourceFullName = OldName } };
            m_ProjectManagerMock.Stub(x => x.IsProjectDirty).Return(true);
            m_ProjectManagerMock.Stub(x => x.SaveProject()).Return(true);
            m_ProjectManagerMock.Stub(x => x.EnsureProjectSaved()).Return(true);
            m_MessageBoxService.Stub(x => x.Show(Arg<string>.Is.Anything)).Return(DialogResult.Yes);
            m_CrossReferenceServiceMock.Stub(x => x.GetReferences<IActionCrossReferenceItem>(Arg<string>.Is.Anything)).Return(crossReferenceItems);
            m_GlobalReferenceServiceMock.Stub(x => x.GetObject<object>(Arg<string>.Is.Anything)).Return(new object());
            var crossReferenceBinderMock = MockRepository.GenerateMock<ICrossReferenceRebinder>();
            crossReferenceBinderMock.Stub(x => x.Rebind(Arg<object>.Is.Anything, Arg<ICrossReferenceItem>.Is.Anything, Arg<string>.Is.Anything, Arg<string>.Is.Anything));
            m_CrossReferenceRebinderServiceMock.Stub(x => x.GetRebinder(Arg<ICrossReferenceItem>.Is.Anything, Arg<string>.Is.Anything)).Return(crossReferenceBinderMock);
            m_MessageBoxService.Expect(x => x.Show(Arg<string>.Is.Anything)).Repeat.Twice();
            m_ProjectManagerMock.Expect(x => x.SaveProject());
            m_ProjectManagerMock.EnsureProjectSaved().Returns(true);
            m_MessageBoxService.Show(Arg.Any<string>(), Arg.Any<string>(), MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, DialogResult.OK)
                .Returns(DialogResult.Yes);
            m_CrossReferenceServiceMock.GetReferences<IActionCrossReferenceItem>(Arg.Any<string>()).Returns(crossReferenceItems);
            m_GlobalReferenceServiceMock.GetObject<object>(Arg.Any<string>()).Returns(new object());
            // Act
            bool shouldBeUpdated = m_RenamerService.NameShouldBeUpdated<IActionCrossReferenceItem>(OldName, null, categoryName);
            // Assert
            Assert.IsTrue(shouldBeUpdated);
            m_MessageBoxService.ReceivedWithAnyArgs(1)
                .Show(Arg.Any<string>(), Arg.Any<string>(), MessageBoxButtons.OKCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2, DialogResult.OK);
        }
        [Test]
        {
            // Arrange
            const string targetFullName = "TargetFullName";
            var crossReferenceRebinderMock = MockRepository.GenerateMock<ICrossReferenceRebinder>();
            crossReferenceRebinderMock.Expect(x => x.Rebind(null, null, null, null)).IgnoreArguments().Repeat.Once().Return(false);
            var crossReferenceRebinderMock = Substitute.For<ICrossReferenceRebinder>();
            crossReferenceRebinderMock.Rebind(Arg.Any<object>(), Arg.Any<ICrossReferenceItem>(), Arg.Any<string>(), Arg.Any<string>())
                .Returns(false);
            // Setup two crossreferences where the first one has an empty target.
            var crossReferenceItems = new List<ITrendViewerCrossReferenceItem>
                new TrendViewerCrossReferenceItem { SourceFullName = OldName, TargetFullName = string.Empty },
                new TrendViewerCrossReferenceItem { SourceFullName = OldName, TargetFullName = targetFullName }
            };
            m_CrossReferenceServiceMock.Stub(x => x.GetReferences<ITrendViewerCrossReferenceItem>(Arg<string>.Is.Anything)).Return(crossReferenceItems);
            m_GlobalReferenceServiceMock.Stub(x => x.GetObject<object>(targetFullName)).Return(new object());
            m_GlobalReferenceServiceMock.Stub(x => x.GetObject<object>(string.Empty)).Return(null);
            m_CrossReferenceRebinderServiceMock.Stub(x => x.GetRebinder(Arg<ITrendViewerCrossReferenceItem>.Is.Anything, Arg<string>.Is.Anything)).Return(crossReferenceRebinderMock);
            m_CrossReferenceServiceMock.GetReferences<ITrendViewerCrossReferenceItem>(Arg.Any<string>()).Returns(crossReferenceItems);
            m_GlobalReferenceServiceMock.GetObject<object>(targetFullName).Returns(new object());
            m_GlobalReferenceServiceMock.GetObject<object>(string.Empty).Returns(null);
            m_CrossReferenceRebinderServiceMock.GetRebinder(Arg.Any<ITrendViewerCrossReferenceItem>(), Arg.Any<string>())
                .Returns(crossReferenceRebinderMock);
                // Act
            bool wasUpdated = m_RenamerService.UpdateNameByCrossReferences<ITrendViewerCrossReferenceItem>(OldName, NewName, null, CrossReferenceTypes.TrendViewer.ToString());
            // Assert
            Assert.IsTrue(wasUpdated);
            crossReferenceRebinderMock.VerifyAllExpectations();
            crossReferenceRebinderMock.Rebind(Arg.Any<object>(), Arg.Any<ICrossReferenceItem>(), Arg.Any<string>(), Arg.Any<string>());
        }
    }
}

CrossReferenceStorageTest.cs
-32
+36
/Tools/ToolsTest/CrossReference/CrossReferenceStorageTest.cs
using Neo.ApplicationFramework.Tools.FontUsageManager;
using Neo.ApplicationFramework.Tools.ProjectManager;
using Neo.ApplicationFramework.Tools.Symbol.Service;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.CrossReference
{
            TestHelper.AddService<IPropertyBinderFactory>(new PropertyBinderFactory());
            
            var featureSecurityServiceIdeStub = MockRepository.GenerateStub<IFeatureSecurityServiceIde>();
            featureSecurityServiceIdeStub.Stub(x => x.IsActivated(null)).IgnoreArguments().Return(true);
            var featureSecurityServiceIdeStub = Substitute.For<IFeatureSecurityServiceIde>();
            featureSecurityServiceIdeStub.IsActivated(Arg.Any<Type>()).Returns(true);
            var gapServiceStubLazy = MockRepository.GenerateStub<ILazy<IGapService>>();
            gapServiceStubLazy.Stub(s => s.Value).Return(MockRepository.GenerateStub<IGapService>());
            gapServiceStubLazy.Value.Stub(x => x.IsSubjectConsideredGap(Arg<MemberInfo>.Is.Anything)).Return(false);
            var gapServiceStubLazy = Substitute.For<ILazy<IGapService>>();
            gapServiceStubLazy.Value.Returns(Substitute.For<IGapService>());
            gapServiceStubLazy.Value.IsSubjectConsideredGap(Arg.Any<MemberInfo>()).Returns(false);
            TestHelper.AddService<IComponentInfoFactory>(new ComponentInfoFactory());
            IToolManager toolManagerMock = MockRepository.GenerateStub<IToolManager>();
            IToolManager toolManagerMock = Substitute.For<IToolManager>();
            TestHelper.AddService<IToolManager>(toolManagerMock);
            TestHelper.AddService<IFontService>(new FontService());
            symbolServiceIde.AddSymbol(SymbolName, new SymbolInfo(true));
            ITarget target = new Target(TargetPlatform.WindowsCE, string.Empty, string.Empty);
            ITargetService targetServiceMock = MockRepository.GenerateStub<ITargetService>();
            ITargetService targetServiceMock = Substitute.For<ITargetService>();
            targetServiceMock.CurrentTarget = target;
            TestHelper.AddService<ITargetService>(targetServiceMock);
            
            BitmapSource bitmapSourceMock = MockRepository.GenerateStub<BitmapSource>();
            ISymbolService symbolServiceMock = MockRepository.GenerateStub<ISymbolService>();
            symbolServiceMock.Stub(x => x.GetSymbolFx(SymbolName)).Return(bitmapSourceMock);
            BitmapSource bitmapSourceMock = Substitute.For<BitmapSource>();
            ISymbolService symbolServiceMock = Substitute.For<ISymbolService>();
            symbolServiceMock.GetSymbolFx(SymbolName).Returns(bitmapSourceMock);
            TestHelper.AddService<ISymbolService>(symbolServiceMock);
            m_ActionService = new ActionService(featureSecurityServiceIdeStub, gapServiceStubLazy);
            IServiceContainer serviceContainer = new ServiceContainer();
            serviceContainer.AddService(typeof(IAppearanceAdapterService), new AppearanceAdapterService());
            var designerHost = MockRepository.GenerateStub<INeoDesignerHost>();
            designerHost.Stub(x => x.GetService(Arg<Type>.Is.Anything)).Do(new Func<Type, object>(serviceContainer.GetService));
            var designerHost = Substitute.For<INeoDesignerHost>();
            designerHost.GetService(Arg.Any<Type>()).ReturnsForAnyArgs(x => serviceContainer.GetService((Type)x[0]));
            serviceContainer.AddService(typeof(INeoDesignerHost), designerHost);
            serviceContainer.AddService(typeof(IDesignerHost), designerHost);
            var rootComponent = MockRepository.GenerateStub<IComponent>();
            var site = MockRepository.GenerateStub<ISite>();
            var rootComponent = Substitute.For<IComponent>();
            var site = Substitute.For<ISite>();
            site.Name = ScreenName;
            rootComponent.Site = site;
            designerHost.Stub(x => x.RootComponent).Return(rootComponent);
            designerHost.RootComponent.Returns(rootComponent);
            var globalReferenceService = MockRepository.GenerateStub<IGlobalReferenceService>();
            var globalDataItem = MockRepository.GenerateStub<IGlobalDataItem>();
            globalReferenceService.Stub(x => x.GetObject<IGlobalDataItem>(Arg<String>.Is.Anything)).Return(globalDataItem);
            var globalReferenceService = Substitute.For<IGlobalReferenceService>();
            var globalDataItem = Substitute.For<IGlobalDataItem>();
            globalReferenceService.GetObject<IGlobalDataItem>(Arg.Any<String>()).Returns(globalDataItem);
            TestHelper.AddService(typeof(IGlobalReferenceService), globalReferenceService);
            m_ElementCanvas = new ElementCanvas();
            m_ElementCanvas.ServiceProvider = serviceContainer;
            m_CrossReferenceItemSource = MockRepository.GenerateMock<IScreenDesignerProjectItemCrossReferenceItemSource>(); 
            m_CrossReferenceItemSource = Substitute.For<IScreenDesignerProjectItemCrossReferenceItemSource>(); 
            (m_CrossReferenceItemSource as IProjectItem).Name = ScreenName;
            (m_CrossReferenceItemSource as ICrossReferenceItemSource).Stub(inv => inv.Name).Return(ScreenName);
            (m_CrossReferenceItemSource as ICrossReferenceItemSource).Name.Returns(ScreenName);
            m_CrossReferenceService = TestHelper.CreateAndAddServiceStub<ICrossReferenceService>();
                CrossReferenceTypes.Recipe.ToString(),
                CrossReferenceTypes.Screen.ToString()
            };
            m_CrossReferenceService.Stub(inv => inv.GetCategoryNames()).Return(categoryNames);
            m_CrossReferenceService.Stub(inv => inv.GetCategoryNames(Arg<Func<ICrossReferenceProvider, bool>>.Is.Anything)).WhenCalled(inv => {inv.ReturnValue = categoryNames;}).Return(Enumerable.Empty<string>());
            m_CrossReferenceService.GetCategoryNames().Returns(categoryNames);
            m_CrossReferenceService.GetCategoryNames(Arg.Any<Func<ICrossReferenceProvider, bool>>())
                .Returns(categoryNames);
            
            List<ICrossReferenceProvider> providers = new List<ICrossReferenceProvider>();
            m_CrossReferenceService.Stub(inv => inv.RegisterCrossReferenceProvider(Arg<ICrossReferenceProvider>.Is.Anything)).WhenCalled(inv => providers.Add((ICrossReferenceProvider)inv.Arguments[0]));
            m_CrossReferenceService.Stub(inv => inv.GetAllProviders(Arg<Func<ICrossReferenceProvider, bool>>.Is.Anything)).WhenCalled(inv => inv.ReturnValue = providers.Where((Func<ICrossReferenceProvider, bool>)(inv.Arguments[0]))).Return(Enumerable.Empty<ICrossReferenceProvider>());
            m_CrossReferenceService.Stub(inv => inv.CreateSupportedFinders(default(ICrossReferenceItemSource))).IgnoreArguments().Return(providers.Select(item => item.CreateFinder(m_CrossReferenceItemSource)));
            m_CrossReferenceService.WhenForAnyArgs(x => x.RegisterCrossReferenceProvider(Arg.Any<ICrossReferenceProvider>()))
                .Do(inv => providers.Add((ICrossReferenceProvider)inv[0]));
            m_CrossReferenceService.GetAllProviders(Arg.Any<Func<ICrossReferenceProvider, bool>>())
                .Returns(inv => providers.Where((Func<ICrossReferenceProvider, bool>)inv[0]));
            m_CrossReferenceService.CreateSupportedFinders(Arg.Any<ICrossReferenceItemSource>())
                .Returns(providers.Select(item => item.CreateFinder(m_CrossReferenceItemSource)));
            ProviderHelper.RegisterAll(m_CrossReferenceService);
            TestHelper.AddServiceStub<IEventBrokerService>();
            TestHelper.SetupServicePlatformFactory(MockRepository.GenerateStub<IKeyboardHelper>());
            TestHelper.SetupServicePlatformFactory(Substitute.For<IKeyboardHelper>());
        }
        [TearDown]
                currentMemoryStream = new MemoryStream();
                return currentMemoryStream;
            };
            m_CrossReferenceItemSource.Stub(inv => inv.GetStreamWrite()).WhenCalled(a => a.ReturnValue=streamProvider());
            m_CrossReferenceItemSource.GetStreamWrite().Returns(a => streamProvider());
            
            m_CrossReferenceStorage.Save();
            savedData = currentMemoryStream.ToArray();
            MemoryStream loadStream = new MemoryStream(savedData);
            m_CrossReferenceItemSource.Stub(inv => inv.GetStreamRead()).Return(loadStream);
            m_CrossReferenceItemSource.GetStreamRead().Returns(loadStream);
            crossReferenceStorage.Load(checkXmlFileValidity:false);
            crossReferenceStorage.Save();
            CreateAndAddAction(screenName, actionName, eventName, button);
            m_CrossReferenceStorage.FindReferences<object, object>(Elements, null, _ => true); ;
            m_CrossReferenceStorage.FindReferences<object, object>(Elements, null, _ => true);
            ICrossReferenceContainer dataItemReferenceContainer = m_CrossReferenceStorage[CrossReferenceTypes.Screen.ToString()];
        {
            // Arrange
            Func<Stream> streamProvider = () => new MemoryStream(Encoding.UTF8.GetBytes(FileResources.CrossReferencesNoTextLibraryCategory));
            m_CrossReferenceItemSource.Stub(inv => inv.GetStreamRead()).Return(streamProvider()).Repeat.Once();
            m_CrossReferenceItemSource.GetStreamRead().Returns(streamProvider());
            // Act
            m_CrossReferenceStorage.Load();
            // Assert
            Assert.IsNotNull(m_CrossReferenceStorage[CrossReferenceTypes.TextLibrary.ToString()]);
            m_CrossReferenceItemSource.Received(1).GetStreamRead();
        }
        private void CreateAndAddAction(string sourceName, string actionName, string eventName, FrameworkElement element)

DatabaseExportActionDialogTest.cs
-12
+8
/Tools/ToolsTest/Database/DatabaseExportActionDialogTest.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using Core.Api.Platform;
using Core.Api.ProjectTarget;
using Neo.ApplicationFramework.Common.Constants;
using Neo.ApplicationFramework.Controls.DatabaseImportExport;
using Neo.ApplicationFramework.Controls.DatabaseImportExport.ViewModels;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Storage;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Database
{
        public void Setup()
        {
            TestHelper.ClearServices();
            TestHelper.CreateAndAddServiceMock<ICommandManagerService>();
            TestHelper.CreateAndAddServiceStub<ICommandManagerService>();
            m_TargetService = TestHelper.CreateAndAddServiceStub<ITargetService>();
            m_CurrentTarget = MockRepository.GenerateStub<ITarget>();
            m_CurrentTarget = Substitute.For<ITarget>();
            m_TargetService.CurrentTarget = m_CurrentTarget;
            m_DatabaseActionBaseViewModel = new DatabaseActionBaseViewModel();
        private IStorageSourceItemInfo GetSelectedStorage(string designerType, TargetPlatform targetPlatform)
        {
            m_CurrentTarget.Stub(x => x.Id).Return(targetPlatform);
            m_CurrentTarget.Id.Returns(targetPlatform);
            IStorageSourceItemInfo selectedStorage = MockRepository.GenerateStub<IStorageSourceItemInfo>();
            IStorageSourceItemInfo selectedStorage = Substitute.For<IStorageSourceItemInfo>();
            selectedStorage.Name = designerType;
            var type = MockRepository.GenerateStub<Type>();
            type.Stub(x => x.Name).Return(designerType);
            selectedStorage.Stub(x => x.DesignerType).Return(type);
            var type = Substitute.For<Type>();
            type.Name.Returns(designerType);
            selectedStorage.DesignerType.Returns(type);
            m_DatabaseActionBaseViewModel.DatabaseTableNames = new List<IStorageSourceItemInfo>
            {
                selectedStorage

DatabaseExportTest.cs
-23
+20
/Tools/ToolsTest/Database/DatabaseExportTest.cs
using Core.Api.Platform;
using Core.Api.ProjectTarget;
using Core.Api.Service;
using Neo.ApplicationFramework.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Storage;
using Neo.ApplicationFramework.Storage.Common;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Threading;
using Neo.ApplicationFramework.Utilities.Lazy;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Database
{
        [SetUp]
        public void SetUp()
        {
            m_ActionConsumer = MockRepository.GenerateMock<IActionConsumer>();
            m_ActionConsumer = Substitute.For<IActionConsumer>();
            m_SystemSettings = MockRepository.GenerateMock<ISystemSettings>();
            m_SystemSettings = Substitute.For<ISystemSettings>();
            IPlatformFactoryService platFormFactoryService = TestHelper.CreateAndAddServiceMock<IPlatformFactoryService>();
            m_FilePathLogic = MockRepository.GenerateMock<IFilePathLogic>();
            IPlatformFactoryService platFormFactoryService = TestHelper.CreateAndAddServiceStub<IPlatformFactoryService>();
            m_FilePathLogic = Substitute.For<IFilePathLogic>();
            platFormFactoryService.Stub(x => x.Create<IFilePathLogic>()).Return(m_FilePathLogic);
            platFormFactoryService.Create<IFilePathLogic>().Returns(m_FilePathLogic);
            IStorageCacheService storageCacheService = TestHelper.CreateAndAddServiceMock<IStorageCacheService>();
            IStorage storage = TestHelper.CreateAndAddServiceMock<IStorage>();
            IStorageScheme scheme = MockRepository.GenerateMock<IStorageScheme>();
            IStorageCacheService storageCacheService = TestHelper.CreateAndAddServiceStub<IStorageCacheService>();
            IStorage storage = TestHelper.CreateAndAddServiceStub<IStorage>();
            IStorageScheme scheme = Substitute.For<IStorageScheme>();
            scheme.Stub(x => x.TableExists("tableName")).IgnoreArguments().Return(true);
            storage.Stub(x => x.Scheme).IgnoreArguments().Return(scheme);
            storageCacheService.Stub(x => x.GetStorage("string")).IgnoreArguments().Return(storage);
            scheme.TableExists(Arg.Any<string>()).Returns(true);
            storage.Scheme.Returns(scheme);
            storageCacheService.GetStorage(Arg.Any<string>()).Returns(storage);
            var target = MockRepository.GenerateStub<ITarget>();
            target.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            var target = Substitute.For<ITarget>();
            target.Id.Returns(TargetPlatform.WindowsCE);
            m_DatabaseImportExportService = new DatabaseImportExportServiceCF(ServiceContainerCF.GetServiceLazy<IGlobalReferenceService>(), new LazyCF<ISystemSettings>(() => m_SystemSettings), m_ActionConsumer, true);
        }
        [Test]
        public void GetTargetPathForFileIsCalledWithCorrectParameters()
        {
            m_SystemSettings.Stub(x => x.FtpServerFriendlyNamesEnabled).Return(true);
            m_SystemSettings.Stub(x => x.FtpServerEnabled).Return(true);
            m_SystemSettings.FtpServerFriendlyNamesEnabled.Returns(true);
            m_SystemSettings.FtpServerEnabled.Returns(true);
            m_DatabaseImportExportService.Export("databaseName", "tableName", FileDirectory.ProjectFiles, "groupName", "fileName", "csvPath", false, true, false, false, false);
            m_FilePathLogic.Stub(x => x.GetTargetPathForFile(FileDirectory.ProjectFiles, "fileName", "csv", false, true, "DatabaseExport\\groupName", true)).Return("something");
            IList<object[]> argList = m_ActionConsumer.GetArgumentsForCallsMadeOn(x => x.Enqueue(() => { }));
            ((System.Action)argList[0][0])();
            m_FilePathLogic.GetTargetPathForFile(FileDirectory.ProjectFiles, "fileName", "csv", false, true, "DatabaseExport\\groupName", true).Returns("something");
            m_FilePathLogic.AssertWasCalled(x => x.GetTargetPathForFile(FileDirectory.ProjectFiles, "fileName", "csv", false, true, "DatabaseExport\\groupName", true));
            m_ActionConsumer.WhenForAnyArgs(x => x.Enqueue(Arg.Any<System.Action>())).Do(y => ((System.Action)y[0])());
            m_FilePathLogic.VerifyAllExpectations();
            m_FilePathLogic.Received()
                .GetTargetPathForFile(FileDirectory.ProjectFiles, "fileName", "csv", false, true, "DatabaseExport\\groupName", true);
        }
    }
}

DataLoggerPropertyTest.cs
-29
+31
/Tools/ToolsTest/DataLogger/DataLoggerPropertyTest.cs
#if !VNEXT_TARGET
using System;
using Core.Api.Feature;
using Neo.ApplicationFramework.Common.Features;
using Neo.ApplicationFramework.Storage.Settings;
using Neo.ApplicationFramework.Tools.Datalogger.Features;
using Neo.ApplicationFramework.Tools.Storage;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.DataLogger
{
        [Test]
        public void MinLogIntervallTest()
        {
            m_FeatureSecurityService = MockRepository.GenerateStub<IFeatureSecurityService>();
            m_FeatureSecurityService.Stub(x => x.IsActivated<FastLoggingFeatureCF>()).Return(true);
            m_ProjectManager = MockRepository.GenerateStub<IProjectManager>();
            m_ProjectManager.Stub(x => x.IsProjectOpen).Return(true);
            m_FeatureSecurityService = Substitute.For<IFeatureSecurityService>();
            m_FeatureSecurityService.IsActivated<FastLoggingFeatureCF>().Returns(true);
            m_ProjectManager = Substitute.For<IProjectManager>();
            m_ProjectManager.IsProjectOpen.Returns(true);
            m_LocallyHostedStorageProviderSettings = new LocallyHostedProjectStorageProviderSettings { StorageLocationIsSdCard = true };
            m_Project = MockRepository.GenerateStub<IProject>();
            m_Project = Substitute.For<IProject>();
            m_Project.StorageProviderSettings = m_LocallyHostedStorageProviderSettings;
            m_Project.Terminal = MockRepository.GenerateStub<ITerminal>();
            m_Project.Terminal.Stub(x => x.Name).Return("Panel PP886H");
            m_Project.Terminal = Substitute.For<ITerminal>();
            m_Project.Terminal.Name.Returns("Panel PP886H");
            m_ProjectManager.Project = m_Project;
        [Test]
        public void MinLogIntervallPanelNameTest()
        {
            m_FeatureSecurityService = MockRepository.GenerateStub<IFeatureSecurityService>();
            m_FeatureSecurityService.Stub(x => x.IsActivated<FastLoggingFeatureCF>()).Return(true);
            m_ProjectManager = MockRepository.GenerateStub<IProjectManager>();
            m_ProjectManager.Stub(x => x.IsProjectOpen).Return(true);
            m_FeatureSecurityService = Substitute.For<IFeatureSecurityService>();
            m_FeatureSecurityService.IsActivated<FastLoggingFeatureCF>().Returns(true);
            m_ProjectManager = Substitute.For<IProjectManager>();
            m_ProjectManager.IsProjectOpen.Returns(true);
            m_LocallyHostedStorageProviderSettings = new LocallyHostedProjectStorageProviderSettings { StorageLocationIsSdCard = true };
            m_Project = MockRepository.GenerateStub<IProject>();
            m_Project = Substitute.For<IProject>();
            m_Project.StorageProviderSettings = m_LocallyHostedStorageProviderSettings;
            m_Project.Terminal = MockRepository.GenerateStub<ITerminal>();
            m_Project.Terminal.Stub(x => x.Name).Return("Panel PP886M"); // Wrong name!
            m_Project.Terminal = Substitute.For<ITerminal>();
            m_Project.Terminal.Name.Returns("Panel PP886M"); // Wrong name!
            m_ProjectManager.Project = m_Project;
        [Test]
        public void MinLogIntervallFeatureTest()
        {
            m_FeatureSecurityService = MockRepository.GenerateStub<IFeatureSecurityService>();
            m_FeatureSecurityService.Stub(x => x.IsActivated<FastLoggingFeatureCF>()).Return(false); //Feature not activated
            m_ProjectManager = MockRepository.GenerateStub<IProjectManager>();
            m_ProjectManager.Stub(x => x.IsProjectOpen).Return(true);
            m_FeatureSecurityService = Substitute.For<IFeatureSecurityService>();
            m_FeatureSecurityService.IsActivated<FastLoggingFeatureCF>().Returns(false); //Feature not activated
            m_ProjectManager = Substitute.For<IProjectManager>();
            m_ProjectManager.IsProjectOpen.Returns(true);
            m_LocallyHostedStorageProviderSettings = new LocallyHostedProjectStorageProviderSettings { StorageLocationIsSdCard = true };
            m_Project = MockRepository.GenerateStub<IProject>();
            m_Project = Substitute.For<IProject>();
            m_Project.StorageProviderSettings = m_LocallyHostedStorageProviderSettings;
            m_Project.Terminal = MockRepository.GenerateStub<ITerminal>();
            m_Project.Terminal.Stub(x => x.Name).Return("Panel PP886H");
            m_Project.Terminal = Substitute.For<ITerminal>();
            m_Project.Terminal.Name.Returns("Panel PP886H");
            m_ProjectManager.Project = m_Project;
        [Test]
        public void MinLogIntervallStorageLocationTest()
        {
            m_FeatureSecurityService = MockRepository.GenerateStub<IFeatureSecurityService>();
            m_FeatureSecurityService.Stub(x => x.IsActivated<FastLoggingFeatureCF>()).Return(true);
            m_ProjectManager = MockRepository.GenerateStub<IProjectManager>();
            m_ProjectManager.Stub(x => x.IsProjectOpen).Return(true);
            m_FeatureSecurityService = Substitute.For<IFeatureSecurityService>();
            m_FeatureSecurityService.IsActivated<FastLoggingFeatureCF>().Returns(true);
            m_ProjectManager = Substitute.For<IProjectManager>();
            m_ProjectManager.IsProjectOpen.Returns(true);
            m_LocallyHostedStorageProviderSettings = new LocallyHostedProjectStorageProviderSettings { StorageLocationIsSdCard = false }; //StorageLocation is Hdd
            m_Project = MockRepository.GenerateStub<IProject>();
            m_Project = Substitute.For<IProject>();
            m_Project.StorageProviderSettings = m_LocallyHostedStorageProviderSettings;
            m_Project.Terminal = MockRepository.GenerateStub<ITerminal>();
            m_Project.Terminal.Stub(x => x.Name).Return("Panel PP886H");
            m_Project.Terminal = Substitute.For<ITerminal>();
            m_Project.Terminal.Name.Returns("Panel PP886H");
            m_ProjectManager.Project = m_Project;
        }
    }
}
#endif

DataLoggerTest.cs
-2
+1
/Tools/ToolsTest/DataLogger/DataLoggerTest.cs
using System;
using System.ComponentModel;
using Core.Api.Service;
using Core.Api.Utilities;
using Core.Component.Api.Instantiation;
using Core.Controls.Api.Designer;
using Neo.ApplicationFramework.Interfaces;
            m_StorageService = new StorageServiceCF();
            ServiceContainerCF.Instance.AddService(typeof(IStorageService), m_StorageService, true);
            TestHelper.CreateAndAddServiceMock<IDateTimeEditService>();
            TestHelper.CreateAndAddServiceStub<IDateTimeEditService>();
            m_Container = new Container();
            m_DataLogger = new DataLoggerFake();

TimeSynchronizationProjectValidatorTest.cs
-32
+31
/Tools/ToolsTest/DateTimeEdit/TimeSynchronizationProjectValidatorTest.cs
#if !VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.Linq;
using Core.Api.ProjectTarget;
using Core.Api.ProjectValidation;
using Neo.ApplicationFramework.Common.Constants;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.ProjectManager;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using System;
using System.Collections.Generic;
using System.Linq;
namespace Neo.ApplicationFramework.Tools.DateTimeEdit
{
		[SetUp]
        public void SetupUp()
        {
            m_ProjectItemFinder = MockRepository.GenerateStub<IProjectItemFinder>();
            m_ProjectItemFinder = Substitute.For<IProjectItemFinder>();
            m_DesignerProjectItems = new List<IDesignerProjectItem>();
            m_SntpClientRootComponent = MockRepository.GenerateStub<ISntpClientRootComponent>();
            m_SntpClientRootComponent = Substitute.For<ISntpClientRootComponent>();
            var projectItem = MockRepository.GenerateStub<IDesignerProjectItem>();
            var projectItem = Substitute.For<IDesignerProjectItem>();
            m_DesignerProjectItems.Add(projectItem);
            projectItem.Stub(x => x.ContainedObject).Return(m_SntpClientRootComponent);
            m_ProjectItemFinder.Stub(mock => mock.GetProjectItems(Arg<Type>.Is.Anything)).Return(m_DesignerProjectItems.ToArray());
            projectItem.ContainedObject.Returns(m_SntpClientRootComponent);
            m_ProjectItemFinder.GetProjectItems(Arg.Any<Type>()).Returns(m_DesignerProjectItems.ToArray());
            m_Validator = new TimeSynchronizationProjectValidator(m_ProjectItemFinder.ToILazy());
	        m_ErrorListService = TestHelper.CreateAndAddServiceMock<IErrorListService>();
	        m_ErrorListService = TestHelper.CreateAndAddServiceStub<IErrorListService>();
	        m_TargetService = TestHelper.CreateAndAddServiceMock<ITargetService>();
	        m_TargetService = TestHelper.CreateAndAddServiceStub<ITargetService>();
	        m_Terminal = MockRepository.GenerateStub<ITerminal>();
	        m_Terminal.Stub(x => x.SupportCloud).Do(new Func<bool>(SupportCloud));
			m_TargetService.Stub(x => x.CurrentTargetInfo.TerminalDescription).Return(m_Terminal);
	        m_Terminal = Substitute.For<ITerminal>();
	        m_Terminal.SupportCloud.Returns(m_SupportCloud);
			m_TargetService.CurrentTargetInfo.TerminalDescription.Returns(m_Terminal);
		}
		private bool SupportCloud()
        {
	        m_SupportCloud = true;
			m_ProjectItemFinder.Stub(x => x.GetProjectItem(ApplicationConstantsCF.CloudConfigurationName)).Return(new ProjectItem());
			m_ProjectItemFinder.GetProjectItem(ApplicationConstantsCF.CloudConfigurationName).Returns(new ProjectItem());
            m_Validator.Validate();
            var actualWarningMessage = m_ErrorListService
                .GetCallsMadeOn(errorListService => errorListService.AddNewCompilerError(default(string), default(bool))).First()
                .Arguments.First() as string;
            string actualWarningMessage = string.Empty;
            m_ErrorListService.AddNewCompilerError(Arg.Do<string>(x => actualWarningMessage = x), Arg.Any<bool>());
            Assert.That(actualWarningMessage, Does.Contain(TextsIde.RecommendedToUseSntpTimeSynchForCloud));
        }
        {
            m_SupportCloud = true;
			m_ProjectItemFinder.Stub(x => x.GetProjectItem(ApplicationConstantsCF.CloudConfigurationName)).Return(new ProjectItem());
            m_ProjectItemFinder.GetProjectItem(ApplicationConstantsCF.CloudConfigurationName).Returns(new ProjectItem());
            m_SntpClientRootComponent.IsEnabled = true;
            m_SntpClientRootComponent.ServerName = "wrong.server.com";
            m_Validator.Validate();
            var actualWarningMessage = m_ErrorListService
                .GetCallsMadeOn(errorListService => errorListService.AddNewCompilerError(default(string), default(bool))).First()
                .Arguments.First() as string;
            string actualWarningMessage = string.Empty;
            m_ErrorListService.AddNewCompilerError(Arg.Do<string>(x => actualWarningMessage = x), Arg.Any<bool>());
            Assert.That(actualWarningMessage, Does.Contain(TextsIde.RecommendedToUseSntpTimeSynchForCloud));
        }
        {
	        m_SupportCloud = true;
			m_ProjectItemFinder.Stub(x => x.GetProjectItem(ApplicationConstantsCF.CloudConfigurationName)).Return(new ProjectItem());
			m_ProjectItemFinder.GetProjectItem(ApplicationConstantsCF.CloudConfigurationName).Returns(new ProjectItem());
            m_SntpClientRootComponent.IsEnabled = true;
            m_SntpClientRootComponent.ServerName = ApplicationConstantsCF.DefaultSntpServer;
            m_Validator.Validate();
            m_ErrorListService.AssertWasNotCalled(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything));
            m_ErrorListService.DidNotReceiveWithAnyArgs().AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
        }
        [Test]
        {
	        m_SupportCloud = true;
			m_ProjectItemFinder.Stub(x => x.GetProjectItem(ApplicationConstantsCF.CloudConfigurationName)).Return(null);
			m_ProjectItemFinder.GetProjectItem(ApplicationConstantsCF.CloudConfigurationName).Returns(x => null);
            m_Validator.Validate();
            m_ErrorListService.AssertWasNotCalled(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything));
            m_ErrorListService.DidNotReceiveWithAnyArgs().AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
        }
	    [Test]
	    {
		    m_SupportCloud = true;
			m_ProjectItemFinder.Stub(x => x.GetProjectItem(ApplicationConstantsCF.CloudConfigurationName)).Return(new ProjectItem());
			m_ProjectItemFinder.GetProjectItem(ApplicationConstantsCF.CloudConfigurationName).Returns(new ProjectItem());
			m_Validator.Validate();
		    var actualWarningMessage = m_ErrorListService
			    .GetCallsMadeOn(errorListService => errorListService.AddNewCompilerError(default(string), default(bool))).First()
			    .Arguments.First() as string;
            string actualWarningMessage = string.Empty;
            m_ErrorListService.AddNewCompilerError(Arg.Do<string>(x => actualWarningMessage = x), Arg.Any<bool>());
            Assert.That(actualWarningMessage, Does.Contain(TextsIde.RecommendedToUseSntpTimeSynchForCloud));
	    }
		{
			m_SupportCloud = false;
			m_ProjectItemFinder.Stub(x => x.GetProjectItem(ApplicationConstantsCF.CloudConfigurationName)).Return(new ProjectItem());
			m_ProjectItemFinder.GetProjectItem(ApplicationConstantsCF.CloudConfigurationName).Returns(new ProjectItem());
			m_Validator.Validate();
			m_ErrorListService.AssertWasNotCalled(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Anything));
			m_ErrorListService.DidNotReceiveWithAnyArgs().AddNewCompilerError(Arg.Any<string>(), Arg.Any<bool>());
		}
	}
}
#endif

LocalPropertyBindingSourceProviderTest.cs
-19
+9
/Tools/ToolsTest/Design/Bindings/LocalPropertyBindingSourceProviderTest.cs
using System.ComponentModel.Design;
using Neo.ApplicationFramework.Controls.Screen.Alias;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Design.Bindings
{
        public void TestFixtureSetUp()
        {
            m_DesignerEventService = TestHelper.AddServiceStub<IDesignerEventService>();
            m_AliasConfiguration = MockRepository.GenerateStub<IAliasConfiguration>();
            m_AliasConfiguration = Substitute.For<IAliasConfiguration>();
            m_Screen = MockRepository.GenerateStub<Screen.ScreenDesign.Screen>();
            m_Screen = Substitute.For<Screen.ScreenDesign.Screen>();
            m_Screen.AliasConfiguration = m_AliasConfiguration;
            var designerHost = MockRepository.GenerateStub<IDesignerHost>();
            m_DesignerEventService
                .Stub(des => des.ActiveDesigner)
                .Return(designerHost);
            var designerHost = Substitute.For<IDesignerHost>();
            m_DesignerEventService.ActiveDesigner.Returns(designerHost);
            designerHost
                .Stub(dh => dh.RootComponent)
                .Return(m_Screen);
            designerHost.RootComponent.Returns(m_Screen);
        }
        [Test]
                AliasAction.Add);
            // Raise event
            m_AliasConfiguration
                .GetEventRaiser(tcns => tcns.AliasChanged += null)
                .Raise(m_AliasConfiguration, args);
            Raise.Event<AliasChangedEventArgs>(m_AliasConfiguration, args);
            Assert.That(eventSent, Is.True);
        }
                AliasAction.Remove);
            // Raise event
            m_AliasConfiguration
                .GetEventRaiser(tcns => tcns.AliasChanged += null)
                .Raise(m_AliasConfiguration, args);
            Raise.Event<AliasChangedEventArgs>(m_AliasConfiguration, args);
            Assert.That(eventSent, Is.True);
        }
                AliasAction.Changed);
            // Raise event
            m_AliasConfiguration
                .GetEventRaiser(tcns => tcns.AliasChanged += null)
                .Raise(m_AliasConfiguration, args);
            Raise.Event<AliasChangedEventArgs>(m_AliasConfiguration, args);
            Assert.That(eventSent, Is.True);
        }

DesignViewControlServiceTest.cs
-3
+3
/Tools/ToolsTest/Design/DesignViewControlServiceTest.cs
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Design
{
        public void Setup()
        {
            m_DesignerViewControlService = new DesignerViewControlService();
            m_ControlStub = MockRepository.GenerateMock<IDesignerViewControl>();
            m_ControlStub.Stub(x => x.Identifier).Return(Identifier);
            m_ControlStub = Substitute.For<IDesignerViewControl>();
            m_ControlStub.Identifier.Returns(Identifier);
        }
        [Test]

EventPropertyDescriptorTest.cs
-3
+2
/Tools/ToolsTest/Design/EventPropertyDescriptorTest.cs
using System;
using System.ComponentModel;
using System.ComponentModel.Design;
using Neo.ApplicationFramework.Tools.Design;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Design
{
        [Test]
        public void GetValueReturnsNullOnComponentWithoutSite()
        {
            IServiceProvider serviceProviderMock = MockRepository.GenerateMock<IServiceProvider>();
            IServiceProvider serviceProviderMock = Substitute.For<IServiceProvider>();
            SampleEventBindingService sampleEventBindingService = new SampleEventBindingService(serviceProviderMock);
            IEventBindingService eventBindingService = sampleEventBindingService as IEventBindingService;

EventMapperServiceTest.cs
-2
+2
/Tools/ToolsTest/EventMapper/EventMapperServiceTest.cs
using Neo.ApplicationFramework.Controls.Screen;
using Neo.ApplicationFramework.Controls.WebBrowser;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.EventMapper
{
        [SetUp]
        public void SetUp()
        {
			m_TargetServiceMock = MockRepository.GenerateStub<ITargetService>();
			m_TargetServiceMock = Substitute.For<ITargetService>();
            var targetService = m_TargetServiceMock.ToILazy();
			m_EventMapperService = new EventMapperService(targetService);	        
        }

FileSettingsToolTest.cs
-10
+8
/Tools/ToolsTest/FileUtilities/FileSettingsToolTest.cs
using System.Linq;
using Core.Api.Application;
using Core.Api.Service;
using Core.Api.Utilities;
using Neo.ApplicationFramework.Utilities;
using Neo.ApplicationFramework.Common.Test;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Brand;
using Neo.ApplicationFramework.Tools.Settings;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.FileUtilities
{
        [SetUp]
        public void Setup()
        {
            ICoreApplication coreApplication = MockRepository.GenerateMock<ICoreApplication>();
            ICoreApplication coreApplication = Substitute.For<ICoreApplication>();
            
            Directory.CreateDirectory(m_StartupPath);
            coreApplication.Stub(inv => inv.StartupPath).Return(m_StartupPath);
            coreApplication.StartupPath.Returns(m_StartupPath);
            TestHelper.AddService<ICoreApplication>(coreApplication);
            IBrandService brandService = new BrandTool();
            TestHelper.AddService(brandService);
            m_Product = brandService.ProductFamilyName;
            var applicationService = MockRepository.GenerateMock<IApplicationSettings>();
            var folder = MockRepository.GenerateMock<IFolderInfo>();
            folder.Stub(f => f.AppDataFolder).Return(AppDataFolder);
            folder.Stub(f => f.GetAppDataFiles(string.Empty)).Return(Enumerable.Empty<FileInfo>().ToArray());
            applicationService.Stub(inv => inv.FolderInfo).Return(folder);
            var applicationService = Substitute.For<IApplicationSettings>();
            var folder = Substitute.For<IFolderInfo>();
            folder.AppDataFolder.Returns(AppDataFolder);
            folder.GetAppDataFiles(string.Empty).Returns(Enumerable.Empty<FileInfo>().ToArray());
            applicationService.FolderInfo.Returns(folder);

FontServiceTest.cs
-17
+7
/Tools/ToolsTest/FontUsageManager/FontServiceTest.cs
using Neo.ApplicationFramework.NeoNativeSignature;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Font;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.FontUsageManager
{
    public class FontServiceTest
    {
        private IFontService m_FontService;
        private MockRepository m_MockRepository;
        private FontManager m_FontManager;
        private CachedFontManager m_CachedFontManager;
        private ElementCanvas m_Canvas;
     
        [SetUp]
        public void TestSetup()
        {
            var toolManagerMock = MockRepository.GenerateStub<IToolManager>();
            toolManagerMock.Stub(x => x.Runtime).Return(false);
            var toolManagerMock = Substitute.For<IToolManager>();
            toolManagerMock.Runtime.Returns(false);
            TestHelper.AddService<IToolManager>(toolManagerMock);
        
            m_MockRepository = new MockRepository();
            m_FontManager = m_MockRepository.StrictMock<FontManager>();
            m_FontManager = Substitute.For<FontManager>();
            m_CachedFontManager = new CachedFontManager(m_FontManager);
            m_FontService = new FontService(m_CachedFontManager);
        private void SetupRecordAndPlayback(int expectedNumberOfFontFileLookups, int expectedNumberOfUniqueFontFiles)
        {
            using (m_MockRepository.Record())
            {
                Expect.Call(((IFontManager)m_FontManager).GetFontFile(new FontManagerInfo())).IgnoreArguments().Repeat.Times(expectedNumberOfFontFileLookups).Do(new GetFontFileDelegate(GetFontFileCallback));
            }
            ((IFontManager)m_FontManager).GetFontFile(Arg.Any<FontManagerInfo>())
                .Returns(x => GetFontFileCallback((IFontManagerInfo)x[0]));
            using (m_MockRepository.Playback())
            {
            IList<string> foundFontFiles = m_FontService.GetFontFiles(m_Canvas.Children);
            Assert.AreEqual(foundFontFiles.Count, expectedNumberOfUniqueFontFiles);
            }
            ((IFontManager)m_FontManager).ReceivedWithAnyArgs(expectedNumberOfFontFileLookups).GetFontFile(Arg.Any<FontManagerInfo>());
        }
        private delegate string GetFontFileDelegate(IFontManagerInfo fontInfo);
        private string GetFontFileCallback(IFontManagerInfo fontInfo)
        {
            return

DriverHelpToolTest.cs
-11
+10
/Tools/ToolsTest/Help/DriverHelpToolTest.cs
using System;
using System.IO;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.Help.HelpGenerator.Common;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Help
{
        [SetUp]
        public void SetUp()
        {
            m_ApplicationSettings = MockRepository.GenerateMock<IApplicationSettings>();
            var folder = MockRepository.GenerateMock<IFolderInfo>();
            folder.Stub(f => f.AppDataFolder).Return(Path.GetTempPath());
            m_ApplicationSettings.Stub(inv => inv.FolderInfo).Return(folder);
            m_ApplicationSettings = Substitute.For<IApplicationSettings>();
            var folder = Substitute.For<IFolderInfo>();
            folder.AppDataFolder.Returns(Path.GetTempPath());
            m_ApplicationSettings.FolderInfo.Returns(folder);
            m_ControllerManagerServiceCf = MockRepository.GenerateMock<IControllerManagerServiceCF>();
            var controllerProtocol = MockRepository.GenerateMock<IControllerProtocol>();
            controllerProtocol.Stub(x => x.FileName).Return("Test");
            controllerProtocol.Stub(x => x.BrandName).Return("Test");
            m_ControllerManagerServiceCf.Stub(x => x.GetControllersProtocol(null)).IgnoreArguments().Return(controllerProtocol);
            m_ControllerManagerServiceCf = Substitute.For<IControllerManagerServiceCF>();
            var controllerProtocol = Substitute.For<IControllerProtocol>();
            controllerProtocol.FileName.Returns("Test");
            controllerProtocol.BrandName.Returns("Test");
            m_ControllerManagerServiceCf.GetControllersProtocol(Arg.Any<string>()).Returns(controllerProtocol);
            m_DriverHelpService = new DriverHelpService(m_ApplicationSettings, m_ControllerManagerServiceCf);
            DeleteTestVersionFile();

AlarmItemImportInfoTest.cs
-14
+15
/Tools/ToolsTest/ImportExport/AlarmItemImportInfoTest.cs
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.OpcClient;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.ImportExport
{
            m_MultiLanguageServiceCF = TestHelper.CreateAndAddServiceStub<IMultiLanguageServiceCF>();
            IToolManager toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(false);
            toolManager.Runtime.Returns(false);
            m_Controllers = new ExtendedBindingList<IDataSourceContainer>();
            m_DataItem = MockRepository.GenerateStub<IDataItem>();
            m_DataItem = Substitute.For<IDataItem>();
            m_OpcClientService = TestHelper.AddServiceStub<IOpcClientServiceIde>();
            m_OpcClientService.Stub(x => x.Controllers).Return(m_Controllers);
            m_OpcClientService.Stub(x => x.AddNewDataItem(string.Empty, string.Empty, null)).IgnoreArguments().Return(MockRepository.GenerateStub<IDataItem>());
            m_OpcClientService.Stub(x => x.AddNewDataItem(string.Empty, string.Empty, null, true, 0.0, 0.0, BEDATATYPE.DT_BIT, 0)).IgnoreArguments().Return(m_DataItem);
            m_GlobalController = MockRepository.GenerateStub<IGlobalController>();
            m_OpcClientService.Controllers.Returns(m_Controllers);
            m_OpcClientService.AddNewDataItem(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<IControllerBase>()).Returns(Substitute.For<IDataItem>());
            m_OpcClientService.AddNewDataItem(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<IControllerBase>(), 
                Arg.Any<bool>(), Arg.Any<double>(), Arg.Any<double>(), Arg.Any<BEDATATYPE>(), Arg.Any<short>())
                .Returns(m_DataItem);
            m_GlobalController = Substitute.For<IGlobalController>();
            m_GlobalController.Name = "GlobalController";
            IPollGroup pollGroup = MockRepository.GenerateStub<IPollGroup>();
            IPollGroup pollGroup = Substitute.For<IPollGroup>();
            pollGroup.Name = "DefaultPollGroup";
            m_GlobalController.Stub(x => x.PollGroups).Return(new BindingList<IPollGroup>() { pollGroup });
            m_GlobalController.PollGroups.Returns(new BindingList<IPollGroup>() { pollGroup });
            m_OpcClientService.Stub(x => x.GlobalController).Return(m_GlobalController);
            m_OpcClientService.GlobalController.Returns(m_GlobalController);
            IDataSourceContainer controller = null;
            IDataItem dataItem = null;
            globalDataItem.PollGroup = new PollGroup() { Name = "PollGroup2" };
            globalDataItem.DataItems.Add(dataItem);
            globalDataItem.AccessRights[controller.Name] = AccessRights.ReadWrite;
            m_GlobalReferenceService.Stub(x => x.GetObject<IDataItemProxySource>(StringConstants.TagsRoot + "Tag1")).Return(globalDataItem).Repeat.Any();
            m_GlobalReferenceService.GetObject<IDataItemProxySource>(StringConstants.TagsRoot + "Tag1").Returns(globalDataItem);
            ControllerHelper.CreateStubControllerWithDataItem(out controller, out dataItem, "MyController", "DataItem2");
            dataItem.ItemID = "D1";
            globalDataItem.PollGroup = new PollGroup() { Name = "PollGroup2" };
            globalDataItem.DataItems.Add(dataItem);
            globalDataItem.AccessRights[controller.Name] = AccessRights.ReadWrite;
            m_GlobalReferenceService.Stub(x => x.GetObject<IDataItemProxySource>(StringConstants.TagsRoot + "Tag2")).Return(globalDataItem2).Repeat.Any();
            m_GlobalReferenceService.GetObject<IDataItemProxySource>(StringConstants.TagsRoot + "Tag2").Returns(globalDataItem2);
            ControllerHelper.CreateStubControllerWithDataItem(out controller, out dataItem, "MyController", "DataItem3");
            dataItem.ItemID = "D1";
            globalDataItem.PollGroup = new PollGroup() { Name = "PollGroup2" };
            globalDataItem.DataItems.Add(dataItem);
            globalDataItem.AccessRights[controller.Name] = AccessRights.ReadWrite;
            m_GlobalReferenceService.Stub(x => x.GetObject<IDataItemProxySource>(StringConstants.TagsRoot + "Tag3")).Return(globalDataItem3).Repeat.Any();
            m_GlobalReferenceService.GetObject<IDataItemProxySource>(StringConstants.TagsRoot + "Tag3").Returns(globalDataItem3);
            
            m_ExistingAlarmItems = new List<IAlarmItem>();
        }

DataItemImportInfoTest.cs
-16
+19
/Tools/ToolsTest/ImportExport/DataItemImportInfoTest.cs
using Neo.ApplicationFramework.Tools.MultiLanguage;
using Neo.ApplicationFramework.Tools.OpcClient;
using Neo.ApplicationFramework.Tools.Selection;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ImportExport
{
            TestHelper.AddServiceStub<IFastLoggingFeatureLogicService>();
            IToolManager toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(false);
            toolManager.Runtime.Returns(false);
            m_Controllers = new ExtendedBindingList<IDataSourceContainer>();
            m_DataItem = MockRepository.GenerateStub<IDataItem>();
            m_DataItem = Substitute.For<IDataItem>();
            TestHelper.AddServiceStub<ITagChangedNotificationServiceCF>();
            var opcUaServerRootComponent = MockRepository.GenerateStub<IOpcUaServerRootComponent>();
            var opcUaServerRootComponent = Substitute.For<IOpcUaServerRootComponent>();
            opcUaServerRootComponent.ExposureOption = OpcUaServerTagExposureOption.AllTagsVisible;
            var projectItem = MockRepository.GenerateStub<IDesignerProjectItem>();
            projectItem.Stub(x => x.ContainedObject).Return(opcUaServerRootComponent);
            var projectItem = Substitute.For<IDesignerProjectItem>();
            projectItem.ContainedObject.Returns(opcUaServerRootComponent);
            var projectItemFinder = TestHelper.AddServiceStub<IProjectItemFinder>();
            projectItemFinder.Stub(x => x.GetProjectItems(typeof(IOpcUaServerRootComponent))).Return(new[] { projectItem });
            projectItemFinder.GetProjectItems(typeof(IOpcUaServerRootComponent)).Returns(new[] { projectItem });
            m_OpcClientService = TestHelper.AddServiceStub<IOpcClientServiceIde>();
            m_OpcClientService.Stub(x => x.Controllers).Return(m_Controllers);
            m_OpcClientService.Stub(x => x.AddNewDataItem(string.Empty, string.Empty, null)).IgnoreArguments().Return(MockRepository.GenerateStub<IDataItem>());
            m_OpcClientService.Stub(x => x.AddNewDataItem(string.Empty, string.Empty, null, true, 0.0, 0.0, BEDATATYPE.DT_BIT, 0)).IgnoreArguments().Return(m_DataItem);
            m_GlobalController = MockRepository.GenerateStub<IGlobalController>();
            m_OpcClientService.Controllers.Returns(m_Controllers);
            m_OpcClientService.AddNewDataItem(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<IControllerBase>())
                .Returns(Substitute.For<IDataItem>());
            m_OpcClientService.AddNewDataItem(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<IControllerBase>(),
                Arg.Any<bool>(), Arg.Any<double>(), Arg.Any<double>(), Arg.Any<BEDATATYPE>(), Arg.Any<short>())
                .Returns(m_DataItem);
            m_GlobalController = Substitute.For<IGlobalController>();
            m_GlobalController.Name = "GlobalController";
            IPollGroup pollGroup = MockRepository.GenerateStub<IPollGroup>();
            IPollGroup pollGroup = Substitute.For<IPollGroup>();
            pollGroup.Name = "DefaultPollGroup";
            m_GlobalController.Stub(x => x.PollGroups).Return(new BindingList<IPollGroup>() { pollGroup });
            m_GlobalController.PollGroups.Returns(new BindingList<IPollGroup>() { pollGroup });
            m_OpcClientService.Stub(x => x.GlobalController).Return(m_GlobalController);
            m_OpcClientService.GlobalController.Returns(m_GlobalController);
            m_Controllers.Clear();
            var testSite = new TestSite();
            IDesignerDocument designerDocument = new DesignerDocument(
                testSite,
                MockRepository.GenerateStub<IDesignerPersistenceService>(),
                MockRepository.GenerateStub<System.ComponentModel.Design.Serialization.INameCreationService>().ToILazy(),
                Substitute.For<IDesignerPersistenceService>(),
                Substitute.For<System.ComponentModel.Design.Serialization.INameCreationService>().ToILazy(),
                () => new SelectionService(),
                new LazyWrapper<IReferenceProvider>(
                    () => new GlobalReferenceToReferenceAdapter(ServiceContainerCF.GetService<IGlobalReferenceService>())),

ListManagerTest.cs
-118
+86
/Tools/ToolsTest/ImportExport/ListManagerTest.cs
Displayed content is truncated due to maximum viewable content limit.
using Neo.ApplicationFramework.Common.Collections;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.OpcClient;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Is = Rhino.Mocks.Constraints.Is;
namespace Neo.ApplicationFramework.Tools.ImportExport
{
        private IOpcClientServiceIde m_OpcClientService;
        private ExtendedBindingList<IDataSourceContainer> m_Controllers;
     
        [SetUp]
        public void SetUp()
        {
            MockRepository mockRepository = new MockRepository();
            m_ListManager = mockRepository.PartialMock<ListManager<DataItemImportInfo>>(MergeAction.Merge, MergeAction.All);
            m_ListManager = Substitute.For<ListManager<DataItemImportInfo>>(MergeAction.Merge, MergeAction.All);
            m_ListManager.m_GetFullNameFromProperties = GetName;
            m_ListManager.m_GetShortNameFromProperties = GetName;
            m_ListManager.m_SetShortNameInProperties = SetName;
            m_Controllers = new ExtendedBindingList<IDataSourceContainer>();
            m_OpcClientService = TestHelper.AddServiceStub<IOpcClientServiceIde>();
            m_OpcClientService.Stub(x => x.Controllers).Return(m_Controllers);
            m_OpcClientService.Controllers.Returns(m_Controllers);
            AddControllers(2);
        }
        [TearDown]
        public void TearDown()
        {
            m_ListManager.VerifyAllExpectations();
            m_Controllers.Clear();
            TestHelper.ClearServices();
        }
            IList<DataItemImportInfo> existingItems = InitExistingItems("Tag1", "Tag2", "Tag3");
            IList<Dictionary<string, string>> imports = InitImportItems("Tag1", "Tag2", "Tag3");
            m_ListManager.Expect(x => x.GetMergeAction(Arg<Dictionary<string, string>>.Is.Equal(imports[0]), ref Arg<string>.Ref(Is.Anything(), "Tag4").Dummy)).Return(MergeAction.ChangeName);
            m_ListManager.Expect(x => x.GetMergeAction(Arg<Dictionary<string, string>>.Is.Equal(imports[1]), ref Arg<string>.Ref(Is.Anything(), "Tag5").Dummy)).Return(MergeAction.ChangeName);
            m_ListManager.Expect(x => x.GetMergeAction(Arg<Dictionary<string, string>>.Is.Equal(imports[2]), ref Arg<string>.Ref(Is.Anything(), "Tag6").Dummy)).Return(MergeAction.ChangeName);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(Arg.Is(imports[0]), ref Arg.Any<string>())
                .Returns(x => {
                    x[1] = "Tag4";
                    return MergeAction.ChangeName; 
                });
            m_ListManager.GetMergeAction(Arg.Is(imports[1]), ref Arg.Any<string>())
                .Returns(x => {
                    x[1] = "Tag5";
                    return MergeAction.ChangeName;
                });
            m_ListManager.GetMergeAction(Arg.Is(imports[2]), ref Arg.Any<string>())
                .Returns(x => {
                    x[1] = "Tag6";
                    return MergeAction.ChangeName;
                });
            m_ListManager.MergeLists(existingItems, imports);
            IList<DataItemImportInfo> existingItems = InitExistingItems("Tag1", "Tag2", "Tag3");
            IList<Dictionary<string, string>> imports = InitImportItems("Tag1", "Tag2", "Tag3");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(null, ref newName)).IgnoreArguments().Return(MergeAction.OverWrite).Repeat.Any();
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(Arg.Any<Dictionary<string, string>>(), ref Arg.Any<string>())
                .Returns(MergeAction.OverWrite);
            m_ListManager.MergeLists(existingItems, imports);
            AssertMergeAction(MergeAction.OverWrite, "Tag1");
            AssertMergeAction(MergeAction.OverWrite, "Tag2");
            AssertMergeAction(MergeAction.OverWrite, "Tag3");
        }
        [Test]
            IList<DataItemImportInfo> existingItems = InitExistingItems("Tag1", "Tag2", "Tag3");
            IList<Dictionary<string, string>> imports = InitImportItems("Tag1", "Tag2", "Tag3");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(null, ref newName)).IgnoreArguments().Return(MergeAction.Skip).Repeat.Any();
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(Arg.Any<Dictionary<string, string>>(), ref Arg.Any<string>())
                .Returns(MergeAction.Skip);
            m_ListManager.MergeLists(existingItems, imports);
            IList<DataItemImportInfo> existingItems = InitExistingItems("Tag1", "Tag2", "Tag3", "Tag4");
            IList<Dictionary<string, string>> imports = InitImportItems("Tag1", "Tag3", "Tag4");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(null, ref newName)).IgnoreArguments().Return(MergeAction.Merge).Repeat.Any();
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(Arg.Any<Dictionary<string, string>>(), ref Arg.Any<string>())
                .Returns(MergeAction.Merge);
            m_ListManager.MergeLists(existingItems, imports);
            AddPropertyToItemInImportedItemsList(imports, "Tag1", "Address_1", "");
            AddPropertyToItemInImportedItemsList(imports, "Tag1", "Address_2", "");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(null, ref newName)).IgnoreArguments().Return(MergeAction.Merge).Repeat.Any();
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(Arg.Any<Dictionary<string, string>>(), ref Arg.Any<string>())
               .Returns(MergeAction.Merge);
            m_ListManager.MergeLists(existingItems, imports);
            AddPropertyToItemInImportedItemsList(imports, "Tag1", "Address_1", "C1");
            AddPropertyToItemInImportedItemsList(imports, "Tag1", "Address_2", "D1");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(null, ref newName)).IgnoreArguments().Return(MergeAction.Merge).Repeat.Any();
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(Arg.Any<Dictionary<string, string>>(), ref Arg.Any<string>())
               .Returns(MergeAction.Merge);
            m_ListManager.MergeLists(existingItems, imports);
            AddPropertyToItemInImportedItemsList(imports, "Tag3", "Address_1", "");
            AddPropertyToItemInImportedItemsList(imports, "Tag3", "Address_2", "");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(null, ref newName)).IgnoreArguments().Return(MergeAction.Merge).Repeat.Any();
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(Arg.Any<Dictionary<string, string>>(), ref Arg.Any<string>())
               .Returns(MergeAction.Merge);
            m_ListManager.MergeLists(existingItems, imports);
            AddPropertyToItemInImportedItemsList(imports, "Tag3", "Address_1", "C3");
            AddPropertyToItemInImportedItemsList(imports, "Tag3", "Address_2", "D3");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(null, ref newName)).IgnoreArguments().Return(MergeAction.Merge).Repeat.Any();
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(Arg.Any<Dictionary<string, string>>(), ref Arg.Any<string>())
               .Returns(MergeAction.Merge);
            m_ListManager.MergeLists(existingItems, imports);
            IList<Dictionary<string, string>> imports = InitImportItems("Tag1", "Tag2", "Tag3");
            string newName = "";
            m_ListManager.Expect(x => x.GetMergeAction(Arg<Dictionary<string, string>>.Is.Equal(imports[0]), ref Arg<string>.Ref(Is.Anything(), "Tag4").Dummy)).Return(MergeAction.ChangeName);
            m_ListManager.Expect(x => x.GetMergeAction(imports[1], ref newName)).Return(MergeAction.OverWrite);
            m_ListManager.Expect(x => x.GetMergeAction(imports[2], ref newName)).Return(MergeAction.Skip);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(Arg.Is(imports[0]), ref Arg.Any<string>())
                .Returns(x => {
                    x[1] = "Tag4";
                    return MergeAction.ChangeName;
                });
            m_ListManager.GetMergeAction(imports[1], ref newName).Returns(MergeAction.OverWrite);
            m_ListManager.GetMergeAction(imports[2], ref newName).Returns(MergeAction.Skip);
            m_ListManager.MergeLists(existingItems, imports);
            IList<Dictionary<string, string>> imports = InitImportItems("Tag1", "Tag2", "Tag3");
            string newName = "";
            m_ListManager.Expect(x => x.GetMergeAction(imports[0], ref newName)).Return(MergeAction.OverWrite);
            m_ListManager.Expect(x => x.GetMergeAction(imports[1], ref newName)).Return(MergeAction.Skip);
            m_ListManager.Expect(x => x.GetMergeAction(Arg<Dictionary<string, string>>.Is.Equal(imports[2]), ref Arg<string>.Ref(Is.Anything(), "Tag4").Dummy)).Return(MergeAction.ChangeName);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(imports[0], ref newName).Returns(MergeAction.OverWrite);
            m_ListManager.GetMergeAction(imports[1], ref newName).Returns(MergeAction.Skip);
            m_ListManager.GetMergeAction(Arg.Is(imports[2]), ref Arg.Any<string>())
                .Returns(x => {
                    x[1] = "Tag4";
                    return MergeAction.ChangeName;
                });
            m_ListManager.MergeLists(existingItems, imports);
            IList<Dictionary<string, string>> imports = InitImportItems("Tag1", "Tag2", "Tag3");
            string newName = "";
            m_ListManager.Expect(x => x.GetMergeAction(imports[0], ref newName)).Return(MergeAction.Skip);
            m_ListManager.Expect(x => x.GetMergeAction(Arg<Dictionary<string, string>>.Is.Equal(imports[1]), ref Arg<string>.Ref(Is.Anything(), "Tag4").Dummy)).Return(MergeAction.ChangeName);
            m_ListManager.Expect(x => x.GetMergeAction(imports[2], ref newName)).Return(MergeAction.OverWrite);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(imports[0], ref newName).Returns(MergeAction.Skip);
            m_ListManager.GetMergeAction(Arg.Is(imports[1]), ref Arg.Any<string>())
                .Returns(x => {
                    x[1] = "Tag4";
                    return MergeAction.ChangeName;
                }); 
            m_ListManager.GetMergeAction(imports[2], ref newName).Returns(MergeAction.OverWrite);
            m_ListManager.MergeLists(existingItems, imports);
            IList<Dictionary<string, string>> imports = InitImportItems("Tag2");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(Arg<Dictionary<string, string>>.Is.Equal(imports[0]), ref Arg<string>.Ref(Is.Anything(), "Tag4").Dummy)).Return(MergeAction.ChangeName);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(Arg.Is(imports[0]), ref Arg.Any<string>())
               .Returns(x => {
                   x[1] = "Tag4";
                   return MergeAction.ChangeName;
               });
            m_ListManager.MergeLists(existingItems, imports);
            IList<Dictionary<string, string>> imports = InitImportItems("Tag2");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(imports[0], ref newName)).Return(MergeAction.OverWrite);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(imports[0], ref newName).Returns(MergeAction.OverWrite);
            m_ListManager.MergeLists(existingItems, imports);
            IList<Dictionary<string, string>> imports = InitImportItems("Tag2");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(imports[0], ref newName)).Return(MergeAction.Skip);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(imports[0], ref newName).Returns(MergeAction.Skip);
            m_ListManager.MergeLists(existingItems, imports);
            IList<Dictionary<string, string>> imports = InitImportItems("Tag2", "Tag3");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(imports[1], ref newName)).Return(MergeAction.Skip);
            m_ListManager.Expect(x => x.GetMergeAction(Arg<Dictionary<string, string>>.Is.Equal(imports[0]), ref Arg<string>.Ref(Is.Anything(), "Tag3").Dummy)).Return(MergeAction.ChangeName);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(imports[1], ref newName).Returns(MergeAction.Skip);
            m_ListManager.GetMergeAction(Arg.Is(imports[0]), ref Arg.Any<string>())
               .Returns(x => {
                   x[1] = "Tag3";
                   return MergeAction.ChangeName;
               });
            m_ListManager.MergeLists(existingItems, imports);
            IList<DataItemImportInfo> existingItems = InitExistingItems("Tag1", "Tag2");
            IList<Dictionary<string, string>> imports = InitImportItems("Tag2", "Tag3", "Tag5");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(Arg<Dictionary<string, string>>.Is.Equal(imports[1]), ref Arg<string>.Ref(Is.Anything(), "Tag4").Dummy)).Return(MergeAction.ChangeName);
            m_ListManager.Expect(x => x.GetMergeAction(Arg<Dictionary<string, string>>.Is.Equal(imports[0]), ref Arg<string>.Ref(Is.Anything(), "Tag3").Dummy)).Return(MergeAction.ChangeName);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(Arg.Is(imports[1]), ref Arg.Any<string>())
               .Returns(x => {
                   x[1] = "Tag4";
                   return MergeAction.ChangeName;
               });
            m_ListManager.GetMergeAction(Arg.Is(imports[0]), ref Arg.Any<string>())
               .Returns(x => {
                   x[1] = "Tag3";
                   return MergeAction.ChangeName;
               });
            m_ListManager.MergeLists(existingItems, imports);
            IList<Dictionary<string, string>> imports = InitImportItems("Tag2", "Tag3", "Tag4");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(imports[0], ref newName)).Return(MergeAction.OverWrite);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(imports[0], ref newName).Returns(MergeAction.OverWrite);
            m_ListManager.MergeLists(existingItems, imports);
            IList<Dictionary<string, string>> imports = InitImportItems("Tag2", "Tag3", "Tag4");
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(imports[0], ref newName)).Return(MergeAction.Skip);
            m_ListManager.Expect(x => x.GetMergeAction(imports[1], ref newName)).Return(MergeAction.Skip);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(imports[0], ref newName).Returns(MergeAction.Skip);
            m_ListManager.GetMergeAction(imports[1], ref newName).Returns(MergeAction.Skip);
            m_ListManager.MergeLists(existingItems, imports);
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, false, true, false);
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(imports[0], ref newName)).Return(MergeAction.Skip);
            m_ListManager.Expect(x => x.GetMergeAction(imports[1], ref newName)).Return(MergeAction.Merge);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(imports[0], ref newName).Returns(MergeAction.Skip);
            m_ListManager.GetMergeAction(imports[1], ref newName).Returns(MergeAction.Merge);
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Default, importTagsSettings);
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, false, false, false);
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(imports[0], ref newName)).Return(MergeAction.Skip);
            m_ListManager.Expect(x => x.GetMergeAction(imports[1], ref newName)).Return(MergeAction.Merge);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(imports[0], ref newName).Returns(MergeAction.Skip);
            m_ListManager.GetMergeAction(imports[1], ref newName).Returns(MergeAction.Merge);
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Default, importTagsSettings);
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, false, true, false);
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Silent, importTagsSettings);
            IList<DataItemImportInfo> unmodifiedItems = existingItems.Except(m_ListManager.ImportedItems).Except(m_ListManager.DeletedItems).Except(m_ListManager.SkippedItems).ToList();
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, false, false, false);
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Silent, importTagsSettings);
            IList<DataItemImportInfo> unmodifiedItems = existingItems.Except(m_ListManager.ImportedItems).Except(m_ListManager.DeletedItems).Except(m_ListManager.SkippedItems).ToList();
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, false, true, false);
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Default, importTagsSettings);
            IList<DataItemImportInfo> unmodifiedItems = existingItems.Except(m_ListManager.ImportedItems).Except(m_ListManager.DeletedItems).Except(m_ListManager.SkippedItems).ToList();
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, false, false, false);
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Default, importTagsSettings);
            IList<DataItemImportInfo> unmodifiedItems = existingItems.Except(m_ListManager.ImportedItems).Except(m_ListManager.DeletedItems).Except(m_ListManager.SkippedItems).ToList();
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, false, true, false);
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Silent, importTagsSettings);
            IList<DataItemImportInfo> unmodifiedItems = existingItems.Except(m_ListManager.ImportedItems).Except(m_ListManager.DeletedItems).Except(m_ListManager.SkippedItems).ToList();
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, false, false, false);
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Silent, importTagsSettings);
            IList<DataItemImportInfo> unmodifiedItems = existingItems.Except(m_ListManager.ImportedItems).Except(m_ListManager.DeletedItems).Except(m_ListManager.SkippedItems).ToList();
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, false, true, false);
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Default, importTagsSettings);
            IList<DataItemImportInfo> unmodifiedItems = existingItems.Except(m_ListManager.ImportedItems).Except(m_ListManager.DeletedItems).Except(m_ListManager.SkippedItems).ToList();
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, false, false, false);
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(imports[0], ref newName)).Return(MergeAction.Skip);
            m_ListManager.Expect(x => x.GetMergeAction(imports[1], ref newName)).Return(MergeAction.Merge);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(imports[0], ref newName).Returns(MergeAction.Skip);
            m_ListManager.GetMergeAction(imports[1], ref newName).Returns(MergeAction.Merge);
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Default, importTagsSettings);
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, false, true, false);
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Silent, importTagsSettings);
            IList<DataItemImportInfo> unmodifiedItems = existingItems.Except(m_ListManager.ImportedItems).Except(m_ListManager.DeletedItems).Except(m_ListManager.SkippedItems).ToList();
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, false, false, false);
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Silent, importTagsSettings);
            IList<DataItemImportInfo> unmodifiedItems = existingItems.Except(m_ListManager.ImportedItems).Except(m_ListManager.DeletedItems).Except(m_ListManager.SkippedItems).ToList();
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, true, true, false);
            m_ListManager.ShowMergeConflictDialog = false;
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Silent, importTagsSettings);
            IList<DataItemImportInfo> unmodifiedItems = existingItems.Except(m_ListManager.ImportedItems).Except(m_ListManager.DeletedItems).Except(m_ListManager.SkippedItems).ToList();
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, true, false, false);
            m_ListManager.ShowMergeConflictDialog = false;
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Silent, importTagsSettings);
            IList<DataItemImportInfo> unmodifiedItems = existingItems.Except(m_ListManager.ImportedItems).Except(m_ListManager.DeletedItems).Except(m_ListManager.SkippedItems).ToList();
            IImportTagsSettings importTagsSettings = SetImportTagSettings(1, false, false, false);
            string newName = string.Empty;
            m_ListManager.Expect(x => x.GetMergeAction(imports[0], ref newName)).Return(MergeAction.Merge);
            m_ListManager.Replay();
            m_ListManager.GetMergeAction(imports[0], ref newName).Returns(MergeAction.Merge);
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Default, importTagsSettings);
            IImportTagsSettings importTagsSettings = SetImportTagSettings(1, false, false, false);            
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Silent, importTagsSettings);
            IList<DataItemImportInfo> unmodifiedItems = existingItems.Except(m_ListManager.ImportedItems).Except(m_ListManager.DeletedItems).Except(m_ListManager.SkippedItems).ToList();
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, true, false, false);
            importTagsSettings.AutomaticImportRules = "TagB* | *C* | *4";
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Default, importTagsSettings);
            Assert.AreEqual(3, m_ListManager.ImportedItems.Count, "m_ListManager.ImportedItems.Count invalid");
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, true, false, false);
            importTagsSettings.AutomaticImportRules = "TagB* | *C* | *4";
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Silent, importTagsSettings);
            Assert.AreEqual(3, m_ListManager.ImportedItems.Count, "m_ListManager.ImportedItems.Count invalid");
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, true, false, false);
            importTagsSettings.AutomaticImportRules = "TagB*";
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Default, importTagsSettings);
            Assert.AreEqual(1, m_ListManager.ImportedItems.Count, "m_ListManager.ImportedItems.Count invalid");
            IImportTagsSettings importTagsSettings = SetImportTagSettings(0, true, false, false);
            importTagsSettings.AutomaticImportRules = "TagB*";
            m_ListManager.Replay();
            m_ListManager.MergeLists(existingItems, imports, ImportMode.Silent, importTagsSettings);
            Assert.AreEqual(1, m_ListManager.ImportedItems.Count, "m_ListManager.ImportedItems.Count invalid");

AnalogDynamicsPropertyConverterTest.cs
-15
+15
/Tools/ToolsTest/InformationDesignerImport/Converters/AnalogDynamicsPropertyConverterTest.cs
using Neo.ApplicationFramework.Tools.InformationDesignerImport.ConverterManager;
using Neo.ApplicationFramework.Tools.InformationDesignerImport.ConverterManager.Converters;
using Neo.ApplicationFramework.Tools.InformationDesignerImport.ConverterManager.Converters.Helpers;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.InformationDesignerImport.Converters
{
        public void SetUp()
        {
            TestHelper.ClearServices();
            m_InformationDesignerImportService = MockRepository.GenerateStub<IInformationDesignerImportService>();
            m_InformationDesignerImportSettingsService = MockRepository.GenerateStub<IInformationDesignerImportSettingsService>();
            m_ConverterManager = MockRepository.GenerateStub<ILazy<IConverterManager>>();
            m_ConverterApiService = MockRepository.GenerateStub<ILazy<IConverterApiService>>();
            m_InformationDesignerImportService = Substitute.For<IInformationDesignerImportService>();
            m_InformationDesignerImportSettingsService = Substitute.For<IInformationDesignerImportSettingsService>();
            m_ConverterManager = Substitute.For<ILazy<IConverterManager>>();
            m_ConverterApiService = Substitute.For<ILazy<IConverterApiService>>();
            var lazyInformationDesignerImportSettingsService = MockRepository.GenerateStub<ILazy<IInformationDesignerImportSettingsService>>();
            lazyInformationDesignerImportSettingsService.Stub(x => x.Value).Return(m_InformationDesignerImportSettingsService);
            var lazyInformationDesignerImportSettingsService = Substitute.For<ILazy<IInformationDesignerImportSettingsService>>();
            lazyInformationDesignerImportSettingsService.Value.Returns(m_InformationDesignerImportSettingsService);
            m_AnalogDynamicsPropertyConverter = new AnalogDynamicsPropertyConverterFakeClass(m_InformationDesignerImportService, lazyInformationDesignerImportSettingsService, m_ConverterManager, m_ConverterApiService);
        }
        {
            // ARRANGE
            m_InformationDesignerImportSettingsService.ColorConversion = true;
            m_InformationDesignerImportService.Stub(x => x.CustomColorMap).Return(new Dictionary<int, int>());
            m_InformationDesignerImportService.CustomColorMap.Returns(new Dictionary<int, int>());
            // ACT
            m_AnalogDynamicsPropertyConverter.SetPropertyOrLogConversionSkipped(InformationDesignerBackgroundColor);
            };
            m_InformationDesignerImportSettingsService.ColorConversion = true;
            m_InformationDesignerImportService.Stub(x => x.CustomColorMap).Return(customColorMap);
            m_InformationDesignerImportService.CustomColorMap.Returns(customColorMap);
            // ACT
            m_AnalogDynamicsPropertyConverter.SetPropertyOrLogConversionSkipped(InformationDesignerBackgroundColor);
        {
            // ARRANGE
            m_InformationDesignerImportSettingsService.ColorConversion = false;
            m_InformationDesignerImportService.Stub(x => x.CustomColorMap).Return(new Dictionary<int, int>());
            m_InformationDesignerImportService.CustomColorMap.Returns(new Dictionary<int, int>());
            // ACT
            m_AnalogDynamicsPropertyConverter.SetPropertyOrLogConversionSkipped(InformationDesignerBackgroundColor);
            };
            m_InformationDesignerImportSettingsService.ColorConversion = false;
            m_InformationDesignerImportService.Stub(x => x.CustomColorMap).Return(new Dictionary<int, int>(customColorMap));
            m_InformationDesignerImportService.CustomColorMap.Returns(new Dictionary<int, int>(customColorMap));
            // ACT
            m_AnalogDynamicsPropertyConverter.SetPropertyOrLogConversionSkipped(InformationDesignerBackgroundColor);
        {
            // ARRANGE
            m_InformationDesignerImportSettingsService.ColorConversion = true;
            m_InformationDesignerImportService.Stub(x => x.CustomColorMap).Return(new Dictionary<int, int>());
            m_InformationDesignerImportService.CustomColorMap.Returns(new Dictionary<int, int>());
            // ACT
            m_AnalogDynamicsPropertyConverter.SetPropertyOrLogConversionSkipped(InformationDesignerForegroundColor);
            };
            m_InformationDesignerImportSettingsService.ColorConversion = true;
            m_InformationDesignerImportService.Stub(x => x.CustomColorMap).Return(customColorMap);
            m_InformationDesignerImportService.CustomColorMap.Returns(customColorMap);
            // ACT
            m_AnalogDynamicsPropertyConverter.SetPropertyOrLogConversionSkipped(InformationDesignerForegroundColor);
        {
            // ARRANGE
            m_InformationDesignerImportSettingsService.ColorConversion = false;
            m_InformationDesignerImportService.Stub(x => x.CustomColorMap).Return(new Dictionary<int, int>());
            m_InformationDesignerImportService.CustomColorMap.Returns(new Dictionary<int, int>());
            // ACT
            m_AnalogDynamicsPropertyConverter.SetPropertyOrLogConversionSkipped(InformationDesignerForegroundColor);
            };
            m_InformationDesignerImportSettingsService.ColorConversion = false;
            m_InformationDesignerImportService.Stub(x => x.CustomColorMap).Return(new Dictionary<int, int>(customColorMap));
            m_InformationDesignerImportService.CustomColorMap.Returns(new Dictionary<int, int>(customColorMap));
            // ACT
            m_AnalogDynamicsPropertyConverter.SetPropertyOrLogConversionSkipped(InformationDesignerForegroundColor);

ImportOptionsViewModelTest.cs
-6
+6
/Tools/ToolsTest/InformationDesignerImport/UI/ViewModels/ImportOptionsViewModelTest.cs
using System;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.InformationDesignerImport.UI.ViewModels
{
        [SetUp]
        public void SetUp()
        {
            m_InformationDesignerImportSettingsService = MockRepository.GenerateStub<IInformationDesignerImportSettingsService>();
            m_InformationDesignerImportService = MockRepository.GenerateStub<IInformationDesignerImportService>();
            m_InformationDesignerImportSettingsService = Substitute.For<IInformationDesignerImportSettingsService>();
            m_InformationDesignerImportService = Substitute.For<IInformationDesignerImportService>();
            m_InformationDesignerImportService.Stub(x => x.TargetType.IsPC).Return(false);
            m_InformationDesignerImportService.TargetType.IsPC.Returns(false);
            m_ViewModel = new ImportOptionsViewModel(
                m_InformationDesignerImportSettingsService.ToILazy(),
                m_InformationDesignerImportService.ToILazy(),
                MockRepository.GenerateStub<IBrandServiceIde>().ToILazy());
                Substitute.For<IBrandServiceIde>().ToILazy());
        }
        [Test]
            m_ViewModel.Save();
            // ASSERT
            m_InformationDesignerImportSettingsService.AssertWasCalled(x => x.Save());
            m_InformationDesignerImportSettingsService.Received().Save();
        }
    }

InformationDesignerImportSettingsServiceTest.cs
-3
+3
/Tools/ToolsTest/InformationDesignerImport/InformationDesignerImportSettingsServiceTest.cs
using Core.Api.Utilities;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.InformationDesignerImport
{
        public void DataLoaded()
        {
            // ARRANGE
            ILazy<IFileSettingsService> fileSettingsService = MockRepository.GenerateStub<ILazy<IFileSettingsService>>();
            fileSettingsService.Stub(x => x.Value.LoadUserSettings<InformationDesignerImportSettingsService.InformationDesignerImportSettingsData>()).Return(
            ILazy<IFileSettingsService> fileSettingsService = Substitute.For<ILazy<IFileSettingsService>>();
            fileSettingsService.Value.LoadUserSettings<InformationDesignerImportSettingsService.InformationDesignerImportSettingsData>().Returns(
                new InformationDesignerImportSettingsService.InformationDesignerImportSettingsData { ColorConversion = true });
            InformationDesignerImportSettingsService informationDesignerImportSettingsService = new InformationDesignerImportSettingsService(fileSettingsService);

MultiLanguageValidatorTest.cs
-4
+4
/Tools/ToolsTest/Localization/MultiLanguageValidatorTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.MultiLanguage;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Localization
{
        public void SetUp()
        {
            TestHelper.AddServiceStub<IErrorListService>();
            m_MultiLanguageService = MockRepository.GenerateStub<IMultiLanguageService>();
            m_MultiLanguageService = Substitute.For<IMultiLanguageService>();
            m_Validator = new LanguageValidator(m_MultiLanguageService.ToILazy());
        }
            var languages = new ExtendedBindingList<ILanguageInfo>();
            languages.Add(new LanguageInfo { Name = Swedish });
            languages.Add(new LanguageInfo { Name = French });
            m_MultiLanguageService.Stub(x => x.Languages).Return(languages);
            m_MultiLanguageService.Languages.Returns(languages);
            Assert.IsTrue(m_Validator.Validate());
        }
            var languages = new ExtendedBindingList<ILanguageInfo>();
            languages.Add(new LanguageInfo { Name = Swedish });
            languages.Add(new LanguageInfo { Name = Pirate });
            m_MultiLanguageService.Stub(x => x.Languages).Return(languages);
            m_MultiLanguageService.Languages.Returns(languages);
            Assert.IsTrue(m_Validator.Validate());
        }

MessageBoxLayoutHelperTest.cs
-3
+2
/Tools/ToolsTest/MessageBox/MessageBoxLayoutHelperTest.cs
using System.Linq;
using Core.Api.GlobalReference;
using Core.Api.Service;
using Neo.ApplicationFramework.Controls.Controls;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Messagebox;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.MessageBox
{
            ServiceContainerCF.Instance.AddService<INativeAPI>(new Neo.ApplicationFramework.Common.Utilities.NativeAPI()); 
            
            IGlobalReferenceService referenceServiceStub = TestHelper.CreateAndAddServiceStub<IGlobalReferenceService>();
            referenceServiceStub.Stub(x => x.GetObjects<IProjectConfiguration>()).Return(new IProjectConfiguration[0]);
            referenceServiceStub.GetObjects<IProjectConfiguration>().Returns(new IProjectConfiguration[0]);
        }
        [Test]

MessageImportExportTest.cs
-2
+2
/Tools/ToolsTest/MessageLibrary/MessageImportExportTest.cs
using Neo.ApplicationFramework.NeoNativeSignature;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.ImportExport;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.MessageLibrary
{
            m_ImportModule.Separator = ",";
            m_ImportModule.FileName = m_TempFileName;
            m_MockedExportModule = MockRepository.GenerateStub<IExportModule>();
            m_MockedExportModule = Substitute.For<IExportModule>();
        }
        [Test]

MessageRecorderServiceWithMessagesTest.cs
-25
+8
/Tools/ToolsTest/MessageRecorder/MessageRecorderServiceWithMessagesTest.cs
using System;
using System.Windows;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.MessageRecorder
{
        private const string m_Caption = "SomeCaption";
        private const int m_InitialMessageCount = 3;
        private IMessageRecorderService m_MessageRecorderService;
        private MockRepository m_MockRepository;
        private IMessageRecorderViewFactory m_MessageRecorderViewFactory;
        private IMessageRecorderView m_MessageRecorderView;
        [SetUp]
        public void SetUp()
        {
            m_MockRepository = new MockRepository();
            m_MessageRecorderView = m_MockRepository.StrictMock<IMessageRecorderView>();
            m_MessageRecorderViewFactory = m_MockRepository.Stub<IMessageRecorderViewFactory>();
            m_MessageRecorderViewFactory.CreateMessageRecorderView();
            LastCall.Return(m_MessageRecorderView);
            m_MessageRecorderView = Substitute.For<IMessageRecorderView>();
            m_MessageRecorderViewFactory = Substitute.For<IMessageRecorderViewFactory>();
            m_MessageRecorderViewFactory.CreateMessageRecorderView().Returns(m_MessageRecorderView);
            m_MessageRecorderService = new MessageRecorderService(m_MessageRecorderViewFactory);
            m_MessageRecorderService.Begin(m_Caption);
            m_MessageRecorderService.AddMessage("WarningMessage", MessageBoxImage.Warning);
        [Test]
        public void EndAndShowWillNotCallShowMessagesOnViewIfNoMessagesToShow()
        {
            using (m_MockRepository.Record())
            {
                m_MessageRecorderView.ShowMessages(m_Caption);
                LastCall.IgnoreArguments().Repeat.Never();
            }
            using (m_MockRepository.Playback())
            {
            m_MessageRecorderService.Cancel();
            m_MessageRecorderService.EndAndShow();
            m_MessageRecorderView.DidNotReceiveWithAnyArgs().ShowMessages(m_Caption);
        }
        }
        [Test]
        public void CallingEndAndShowShouldCallShowMessagesOnViewWithCaptionFromCallToBegin()
        {
            using (m_MockRepository.Record())
            {
                Expect.Call(m_MessageRecorderView.ImageMessages).PropertyBehavior();
                m_MessageRecorderView.ShowMessages(m_Caption);
            }
            m_MessageRecorderService.EndAndShow();
            using (m_MockRepository.Playback())
            {
                m_MessageRecorderService.EndAndShow();
            }
            m_MessageRecorderView.Received().ShowMessages(m_Caption);
        }
        [Test]

MessageRecorderServiceWithoutMessagesTest.cs
-25
+8
/Tools/ToolsTest/MessageRecorder/MessageRecorderServiceWithoutMessagesTest.cs
using System.Windows;
using Neo.ApplicationFramework.Interfaces;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.MessageRecorder
{
    public class MessageRecorderServiceWithoutMessagesTest
    {
        private IMessageRecorderService m_MessageRecorderService;
        private MockRepository m_MockRepository;
        private IMessageRecorderViewFactory m_MessageRecorderViewFactory;
        private IMessageRecorderView m_MessageRecorderView;
        private readonly string m_Caption = "SomeCaption";
        [SetUp]
        public void SetUp()
        {
            m_MockRepository = new MockRepository();
            m_MessageRecorderView = m_MockRepository.StrictMock<IMessageRecorderView>();
            m_MessageRecorderViewFactory = m_MockRepository.Stub<IMessageRecorderViewFactory>();
            m_MessageRecorderViewFactory.CreateMessageRecorderView();
            LastCall.Return(m_MessageRecorderView);
            m_MessageRecorderView = Substitute.For<IMessageRecorderView>();
            m_MessageRecorderViewFactory = Substitute.For<IMessageRecorderViewFactory>();
            m_MessageRecorderViewFactory.CreateMessageRecorderView().Returns(m_MessageRecorderView);
            m_MessageRecorderService = new MessageRecorderService(m_MessageRecorderViewFactory);
        }
        [Test]
        public void CallingEndAndShowWithoutCallingBeginWillNotCallShow()
        {
            using (m_MockRepository.Record())
            {
                m_MessageRecorderView.ShowMessages(string.Empty);
                LastCall.IgnoreArguments().Repeat.Never();
            }
            m_MessageRecorderService.EndAndShow();
            using (m_MockRepository.Playback())
            {
                m_MessageRecorderService.EndAndShow();
            }
            m_MessageRecorderView.DidNotReceiveWithAnyArgs().ShowMessages(Arg.Any<string>());
        }
        [Test]
        public void CallingBeginThenEndAndShowWithoutAddingMessagesWillNotCallShow()
        {
            using (m_MockRepository.Record())
            {
                m_MessageRecorderView.ShowMessages(string.Empty);
                LastCall.IgnoreArguments().Repeat.Never();
            }
            using (m_MockRepository.Playback())
            {
            m_MessageRecorderService.Begin(m_Caption);
            m_MessageRecorderService.EndAndShow();
            }
            m_MessageRecorderView.DidNotReceiveWithAnyArgs().ShowMessages(Arg.Any<string>());
        }
        [Test]

LanguageInfoValidatorTest.cs
+2
/Tools/ToolsTest/MultiLanguage/LanguageInfoValidatorTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using System.ComponentModel;
using Neo.ApplicationFramework.Interfaces;
        }
    }
}
#endif

MultiLanguageExporterTest.cs
-2
+4
/Tools/ToolsTest/MultiLanguage/MultiLanguageExporterTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.ImportExport;
using Neo.ApplicationFramework.Tools.MultiLanguage.TextID;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.MultiLanguage
{
            m_ImportModule.Separator = ",";
            m_ImportModule.FileName = m_TempFileName;
            m_MockedExportModule = MockRepository.GenerateStub<IExportModule>();
            m_MockedExportModule = Substitute.For<IExportModule>();
            m_MultiLanguageExporter = new MultiLanguageExporter<DesignerResourceItem>() as IMultiLanguageExporter;
            m_TextIDExporter = new MultiLanguageExporter<TextIDResourceItem>() as IMultiLanguageExporter;
    }
}
#endif

MultiLanguageImportByKeyStrategyTest.cs
-3
+5
/Tools/ToolsTest/MultiLanguage/MultiLanguageImportByKeyStrategyTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using System.Linq;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.MultiLanguage
{
            var resourceItems = new ResourceItemList<DesignerResourceItem, IDesignerResourceItem>();
            var multiLanguageService = MockRepository.GenerateStub<IMultiLanguageServiceIde>();
            var multiLanguageService = Substitute.For<IMultiLanguageServiceIde>();
            var strategy = new MultiLanguageImportKeyStrategy(multiLanguageService);
            var resourceItems = new ResourceItemList<DesignerResourceItem, IDesignerResourceItem>() { resourceItem };
            
            var multiLanguageService = MockRepository.GenerateStub<IMultiLanguageServiceIde>();
            var multiLanguageService = Substitute.For<IMultiLanguageServiceIde>();
            
            var strategy = new MultiLanguageImportKeyStrategy(multiLanguageService);
    }
}
#endif

MultiLanguageImporterTest.cs
-5
+6
/Tools/ToolsTest/MultiLanguage/MultiLanguageImporterTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using System.IO;
using Neo.ApplicationFramework.Common.Collections;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.ImportExport;
using Neo.ApplicationFramework.Tools.MultiLanguage.TextID;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.MultiLanguage
{
        private void TextIDTestSetup()
        {
            IExtendedBindingList<ILanguageInfo> bindingList = new ExtendedBindingList<ILanguageInfo>();
            m_MultiLanguageServiceIdeStub.Stub(x => x.Languages).Return(bindingList);
            m_MultiLanguageServiceCFStub.Stub(x => x.CreateLanguageList()).Return(bindingList);
            m_MultiLanguageServiceIdeStub.Languages.Returns(bindingList);
            m_MultiLanguageServiceCFStub.CreateLanguageList().Returns(bindingList);
            MultiLanguageServer multiLanguageServer = new MultiLanguageServer();
            m_MultiLanguageServiceIdeStub.MultiLanguageServer = multiLanguageServer;
            var languagesToImport = new List<string> { "German (Germany)", "French (France)" };
            m_TextIDMultiLanguageImporter.Import(importModule, languagesToImport, new List<IResourceItem>(), ',');
            m_MultiLanguageServiceIdeStub.AssertWasNotCalled(x => x.AddLanguage(Arg<string>.Is.Anything));
            m_MultiLanguageServiceIdeStub.DidNotReceive().AddLanguage(Arg.Any<string>());
            Assert.AreEqual(1, ((ICollection<ILanguageInfo>)m_MultiLanguageServiceIdeStub.MultiLanguageServer.Languages).Count);
        }
    }
}
#endif

MultiLanguageImportStrategyBaseTest.cs
-10
+12
/Tools/ToolsTest/MultiLanguage/MultiLanguageImportStrategyBaseTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using Neo.ApplicationFramework.Common.Collections;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.MultiLanguage
{
        [Test]
        public void ImportLanguages_calls_AddLanguage_on_MultiLanguageService()
        {
            IMultiLanguageServiceIde multiLanguageServiceIde = MockRepository.GenerateStub<IMultiLanguageServiceIde>();
            multiLanguageServiceIde.Stub(x => x.Languages)
                                   .Return(new ExtendedBindingList<ILanguageInfo>());
            IMultiLanguageServiceIde multiLanguageServiceIde = Substitute.For<IMultiLanguageServiceIde>();
            multiLanguageServiceIde.Languages.Returns(new ExtendedBindingList<ILanguageInfo>());
            MultiLanguageImportKeyStrategy strategy = new MultiLanguageImportKeyStrategy(multiLanguageServiceIde);
            strategy.ImportLanguages(new List<string> { "lang" });
            multiLanguageServiceIde.AssertWasCalled(x => x.AddLanguage("lang"));
            multiLanguageServiceIde.Received().AddLanguage("lang");
        }
        [Test]
            var languageInfos = new ExtendedBindingList<ILanguageInfo> { new LanguageInfo { Name = "sv-SE" } };
            var multiLanguageService = MockRepository.GenerateStub<IMultiLanguageServiceIde>();
            multiLanguageService.Stub(srv => srv.Languages).Return(languageInfos);
            var multiLanguageService = Substitute.For<IMultiLanguageServiceIde>();
            multiLanguageService.Languages.Returns(languageInfos);
            var strategy = new MultiLanguageImportKeyStrategy(multiLanguageService);
            strategy.ImportLanguages(languagesToImport);
            multiLanguageService.AssertWasNotCalled(x => x.AddLanguage(Arg<string>.Is.Anything));
            multiLanguageService.DidNotReceiveWithAnyArgs().AddLanguage(Arg.Any<string>());
        }
        [Test]
            var languageInfos = new ExtendedBindingList<ILanguageInfo>();
            var multiLanguageService = MockRepository.GenerateStub<IMultiLanguageServiceIde>();
            multiLanguageService.Stub(srv => srv.Languages).Return(languageInfos);
            var multiLanguageService = Substitute.For<IMultiLanguageServiceIde>();
            multiLanguageService.Languages.Returns(languageInfos);
            var strategy = new MultiLanguageImportKeyStrategy(multiLanguageService);
    }
}
#endif

MultiLanguageServerTest.cs
-4
+6
/Tools/ToolsTest/MultiLanguage/MultiLanguageServerTest.cs
#if !VNEXT_TARGET
using System;
using Core.Api.Application;
using Core.Api.Platform;
using Neo.ApplicationFramework.Common.Keyboard;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.MultiLanguage
{
        public void SetUp()
        {
            TestHelper.ClearServices();
            TestHelper.CreateAndAddServiceMock<ICoreApplication>();
            TestHelper.CreateAndAddServiceStub<ICoreApplication>();
            TestHelperExtensions.AddServiceToolManager(false);
            TestHelper.SetupServicePlatformFactory<IKeyboardHelper>(new KeyboardHelper());
            IExtendedBindingList<ILanguageInfo> bindingList = new ExtendedBindingList<ILanguageInfo>();
            IMultiLanguageServiceCF multiLanguageServiceCF = TestHelper.AddServiceStub<IMultiLanguageServiceCF>();
            multiLanguageServiceCF.Stub(x => x.CreateLanguageList()).Return(bindingList);
            multiLanguageServiceCF.CreateLanguageList().Returns(bindingList);
        }
        [OneTimeTearDown]
            string textIDExtension = ".TextIDs.lng";
            MultiLanguageServer multiLanguageServer = new MultiLanguageServer();
            multiLanguageServer.MultiLanguageService.Stub(x => x.IsTextIDEnabled()).Return(true);
            multiLanguageServer.MultiLanguageService.IsTextIDEnabled().Returns(true);
            IAdditionalStorage additionalStorage = multiLanguageServer;
            multiLanguageServer.Languages.Add(new LanguageInfo { Name = lang1, UseInRuntime = false });
        }
    }
}
#endif

MultiLanguageServiceCFTest.cs
-4
+4
/Tools/ToolsTest/MultiLanguage/MultiLanguageServiceCFTest.cs
using System;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.MultiLanguage
{
            m_IMultiLanguageServiceCF = m_MultiLanguageService = new MultiLanguageService();
            TestHelper.AddService(typeof(IMultiLanguageServiceCF), m_MultiLanguageService);
            m_MultiLanguageServer = MockRepository.GenerateStub<IMultiLanguageServer>();
            m_MultiLanguageServer = Substitute.For<IMultiLanguageServer>();
            m_ResourceItems = new ResourceItemList<DesignerResourceItem, IDesignerResourceItem>();
            m_MultiLanguageServer.Expect(srv => srv.ResourceItems).Return(m_ResourceItems).Repeat.Any();
            m_MultiLanguageServer.ResourceItems.Returns(m_ResourceItems);
            m_Languages = m_IMultiLanguageServiceCF.CreateLanguageList();
            m_MultiLanguageServer.Expect(srv => srv.Languages).Return(m_Languages).Repeat.Any();
            m_MultiLanguageServer.Languages.Returns(m_Languages);
            m_IMultiLanguageServiceCF.MultiLanguageServer = m_MultiLanguageServer;
        }

MultiLanguageServiceIdeTest.cs
-31
+37
/Tools/ToolsTest/MultiLanguage/MultiLanguageServiceIdeTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using System.ComponentModel.Design;
using Core.Component.Engine.Design;
using Neo.ApplicationFramework.NeoNativeSignature;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.MultiLanguage.TextID;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.MultiLanguage
{
        public void SetUp()
        {
            IProjectManager projectManager = TestHelper.CreateAndAddServiceStub<IProjectManager>();
            projectManager.Stub(x => x.IsProjectLoading).Return(true);
            projectManager.IsProjectLoading.Returns(true);
            m_IMultiLanguageService = m_MultiLanguageService = new MultiLanguageServiceIde();
            TestHelper.AddService(typeof(IMultiLanguageServiceCF), m_MultiLanguageService);
        private IMultiLanguageServer StubMultiLanguageServer(out IExtendedBindingList<ILanguageInfo>  languageInfos)
        {
            IMultiLanguageServer multiLanguageServer = MockRepository.GenerateStub<IMultiLanguageServer>();
            IMultiLanguageServer multiLanguageServer = Substitute.For<IMultiLanguageServer>();
            languageInfos = new ExtendedBindingList<ILanguageInfo>();
            multiLanguageServer.Stub(x => x.Languages).Return(languageInfos);
            multiLanguageServer.Languages.Returns(languageInfos);
            IResourceItemList<IDesignerResourceItem> resourceItems = new ResourceItemList<DesignerResourceItem,IDesignerResourceItem>();
            multiLanguageServer.Stub(x => x.ResourceItems).Return(resourceItems);
            multiLanguageServer.ResourceItems.Returns(resourceItems);
            return multiLanguageServer;
        }
            ResourceItemList<TextIDResourceItem, ITextIDResourceItem> textIDResourceItems;
            textIDResourceItems = new ResourceItemList<TextIDResourceItem, ITextIDResourceItem>();
            multiLanguageServer = MockRepository.GenerateStub<IMultiLanguageServer>();
            multiLanguageServer.Stub(srv => srv.ResourceItems).Return(resourceItems);
            multiLanguageServer.Stub(srv => srv.TextIDResourceItems).Return(textIDResourceItems);
            multiLanguageServer = Substitute.For<IMultiLanguageServer>();
            multiLanguageServer.ResourceItems.Returns(resourceItems);
            multiLanguageServer.TextIDResourceItems.Returns(textIDResourceItems);
            IExtendedBindingList<ILanguageInfo> languageInfos = new ExtendedBindingList<ILanguageInfo>();
            multiLanguageServer.Stub(x => x.Languages).Return(languageInfos);
            multiLanguageServer.Languages.Returns(languageInfos);
            var multiLanguageSerializer = MockRepository.GenerateMock<MultiLanguageSerializer>();
            var multiLanguageSerializer = Substitute.For<MultiLanguageSerializer>();
            m_MultiLanguageService.MultiLanguageSerializer = multiLanguageSerializer;
            m_IMultiLanguageService.MultiLanguageServer = multiLanguageServer;
            m_IMultiLanguageService.Save(filename);
            multiLanguageSerializer.AssertWasCalled(x => x.Save<DesignerResourceItem>(Arg.Is(filename), Arg<IEnumerable<IResourceItem>>.Is.NotNull));
            multiLanguageSerializer.Received().Save<DesignerResourceItem>(Arg.Is(filename), Arg.Is<IEnumerable<IResourceItem>>(x => x != null));
        }
        #endregion
        public void ImportCallsGetLanguagesAndImportOnTheMultiLanguageImporter()
        {
            const string filePath = "The file path";
            var importModuleStub = MockRepository.GenerateStub<IImportModule>();
            var importModuleStub = Substitute.For<IImportModule>();
            var languageNamesToImport = new List<string>() { "The language name" };
            var multiLanguageImporter = MockRepository.GenerateMock<MultiLanguageImporter<DesignerResourceItem>>((IMultiLanguageImportStrategy)null);
            multiLanguageImporter.Expect(importer => ((IMultiLanguageImporter)importer).Import(Arg.Is(importModuleStub), Arg.Is(languageNamesToImport), Arg<IEnumerable<IResourceItem>>.Is.NotNull, Arg.Is(','))).Repeat.Once();
            var multiLanguageImporter = Substitute.For<MultiLanguageImporter<DesignerResourceItem>>((IMultiLanguageImportStrategy)null);
            ((IMultiLanguageImporter)multiLanguageImporter).Import(Arg.Is(importModuleStub), Arg.Is(languageNamesToImport), 
                Arg.Is<IEnumerable<IResourceItem>>(x => x != null), Arg.Is(','));
            IResourceItemList<IDesignerResourceItem> resourceList = new ResourceItemList<DesignerResourceItem, IDesignerResourceItem>();
            IMultiLanguageServer multiLanguageServer = MockRepository.GenerateStub<IMultiLanguageServer>();
            multiLanguageServer.Stub(server => server.ResourceItems).Return(resourceList);
            IMultiLanguageServer multiLanguageServer = Substitute.For<IMultiLanguageServer>();
            multiLanguageServer.ResourceItems.Returns(resourceList);
            IExtendedBindingList<ILanguageInfo> languageInfos = new ExtendedBindingList<ILanguageInfo>();
            multiLanguageServer.Stub(x => x.Languages).Return(languageInfos);
            multiLanguageServer.Languages.Returns(languageInfos);
            m_IMultiLanguageService.MultiLanguageServer = multiLanguageServer;
            m_MultiLanguageService.MultiLanguageKeyImporter = multiLanguageImporter;
            m_IMultiLanguageService.Import(filePath, languageNamesToImport, MultiLanguageResourceItemTypeEnum.Designer, ',', MultiLanguageImportStrategyEnum.Key, importModuleStub);
            multiLanguageImporter.VerifyAllExpectations();
            ((IMultiLanguageImporter)multiLanguageImporter).Received(1).Import(Arg.Is(importModuleStub), Arg.Is(languageNamesToImport),
                Arg.Is<IEnumerable<IResourceItem>>(x => x != null), Arg.Is(','));
        }
        #endregion
        public void ExportCallsExportOnTheMultiLanguageExporter()
        {
            const string filePath = "The file path";
            var exportModuelStub = MockRepository.GenerateStub<IExportModule>();
            var exportModuelStub = Substitute.For<IExportModule>();
            ResourceItemList<DesignerResourceItem, IDesignerResourceItem> resourceItemsToExport = new ResourceItemList<DesignerResourceItem, IDesignerResourceItem>();
            List<string> languagesToExport = new List<string>() { "First language", "Second language" };
            var multiLanguageServer = MockRepository.GenerateStub<IMultiLanguageServer>();
            multiLanguageServer.Expect(srv => srv.ResourceItems).Return(resourceItemsToExport).Repeat.Any();
            var multiLanguageServer = Substitute.For<IMultiLanguageServer>();
            multiLanguageServer.ResourceItems.Returns(resourceItemsToExport);
            IExtendedBindingList<ILanguageInfo> languageInfos = new ExtendedBindingList<ILanguageInfo>();
            multiLanguageServer.Stub(x => x.Languages).Return(languageInfos);
            multiLanguageServer.Languages.Returns(languageInfos);
            var multiLanguageExporter = MockRepository.GenerateMock<IMultiLanguageExporter>();
            multiLanguageExporter.Expect(exporter => exporter.Export(Arg.Is(exportModuelStub), Arg<IEnumerable<IResourceItem>>.Is.NotNull, Arg.Is(languagesToExport), Arg.Is(','))).Repeat.Once();
            var multiLanguageExporter = Substitute.For<IMultiLanguageExporter>();
            multiLanguageExporter.Export(Arg.Is(exportModuelStub), Arg.Is<IEnumerable<IResourceItem>>(x => x != null), 
                Arg.Is(languagesToExport), Arg.Is(','));
            m_IMultiLanguageService.MultiLanguageServer = multiLanguageServer;
            m_MultiLanguageService.MultiLanguageExporter = multiLanguageExporter;
            m_IMultiLanguageService.Export(filePath, languagesToExport, MultiLanguageResourceItemTypeEnum.Designer, ',', exportModuelStub);
            multiLanguageExporter.VerifyAllExpectations();
            multiLanguageExporter.Received(1).Export(Arg.Is(exportModuelStub), Arg.Is<IEnumerable<IResourceItem>>(x => x != null),
                Arg.Is(languagesToExport), Arg.Is(','));
        }
        #endregion
            var systemResourceItems = new ResourceItemList<ResourceItem, IResourceItem>();
            var languageInfos = new ExtendedBindingList<ILanguageInfo>();
            var multiLanguageServer = MockRepository.GenerateStub<IMultiLanguageServer>();
            multiLanguageServer.Expect(srv => srv.ResourceItems).Return(resourceItems).Repeat.Any();
            multiLanguageServer.Expect(srv => srv.SystemResourceItems).Return(systemResourceItems).Repeat.Any();
            multiLanguageServer.Stub(x => x.Languages).Return(languageInfos);
            var multiLanguageServer = Substitute.For<IMultiLanguageServer>();
            multiLanguageServer.ResourceItems.Returns(resourceItems);
            multiLanguageServer.SystemResourceItems.Returns(systemResourceItems);
            multiLanguageServer.Languages.Returns(languageInfos);
            IDesignerEventService designerEventServiceStub = MockRepository.GenerateStub<IDesignerEventService>();
            designerEventServiceStub.Stub(x => x.ActiveDesigner).Return(new MultiLanguageRootDesigner() as INeoDesignerHost);
            IDesignerEventService designerEventServiceStub = Substitute.For<IDesignerEventService>();
            designerEventServiceStub.ActiveDesigner.Returns(new MultiLanguageRootDesigner() as INeoDesignerHost);
            TestHelper.AddService(designerEventServiceStub);
        #endregion
    }
}
#endif

ResourceItemTest.cs
-3
+3
/Tools/ToolsTest/MultiLanguage/ResourceItemTest.cs
using Neo.ApplicationFramework.Common.Collections;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.MultiLanguage
{
            var languageInfo = new LanguageInfo(ALanguage, "US");
            IExtendedBindingList<ILanguageInfo> languages = new ExtendedBindingList<ILanguageInfo>();
            languages.Add(languageInfo);
            m_MultiLanguageService.Stub(x => x.Languages).Return(languages);
            m_MultiLanguageService.Languages.Returns(languages);
            //TEST
            resourceItem.CurrentValue = "{0} Hello {1}";
            var languageInfo = new LanguageInfo(ALanguage, "US");
            IExtendedBindingList<ILanguageInfo> languages = new ExtendedBindingList<ILanguageInfo>();
            languages.Add(languageInfo);
            m_MultiLanguageService.Stub(x => x.Languages).Return(languages);
            m_MultiLanguageService.Languages.Returns(languages);
            m_MultiLanguageService.CurrentLanguage = ALanguage;
            resourceItem.ReferenceValue = "oldValue";

TestStrategy.cs
+3
/Tools/ToolsTest/MultiLanguage/TestStrategy.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using System.Linq;
using Neo.ApplicationFramework.Interfaces;
        #endregion
    }
}
#endif

NavigationModelTest.cs
-6
+7
/Tools/ToolsTest/NavigationManager/NavigationModelTest.cs
using System;
using System.Reflection;
using Core.Api.Feature;
using Core.Api.Service;
using Neo.ApplicationFramework.Interfaces.vNext.Gaps;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Action;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.NavigationManager
{
        [OneTimeSetUp]
        public void TestFixtureSetUp()
        {
            var featureSecurityServiceIdeStub = MockRepository.GenerateStub<IFeatureSecurityServiceIde>();
            featureSecurityServiceIdeStub.Stub(x => x.IsActivated(null)).IgnoreArguments().Return(true);
            var featureSecurityServiceIdeStub = Substitute.For<IFeatureSecurityServiceIde>();
            featureSecurityServiceIdeStub.IsActivated(Arg.Any<Type>()).Returns(true);
            
            var gapServiceStubLazy = MockRepository.GenerateStub<ILazy<IGapService>>();
            gapServiceStubLazy.Stub(s => s.Value).Return(MockRepository.GenerateStub<IGapService>());
            gapServiceStubLazy.Value.Stub(x => x.IsSubjectConsideredGap(Arg<MemberInfo>.Is.Anything)).Return(false);
            var gapServiceStubLazy = Substitute.For<ILazy<IGapService>>();
            gapServiceStubLazy.Value.Returns(Substitute.For<IGapService>());
            gapServiceStubLazy.Value.IsSubjectConsideredGap(Arg.Any<MemberInfo>()).Returns(false);
            ActionService actionService = new ActionService(featureSecurityServiceIdeStub, gapServiceStubLazy);
            TestHelper.AddService(typeof(IActionService), actionService);

ElementObjectTest.cs
-27
+23
/Tools/ToolsTest/ObjectBrowser/ElementObjectTest.cs
using Neo.ApplicationFramework.Controls.Screen.Design;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.Screen.ScreenDesign;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Rhino.Mocks.Interfaces;
namespace Neo.ApplicationFramework.Tools.ObjectBrowser
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Non-substitutable member", "NS1004:Argument matcher used with a non-virtual member of a class.", Justification = "By creator's design.")]
    [TestFixture]
    public class ElementObjectTest
    {
        [SetUp]
        public void SetUp()
        {
            m_SelectionService = MockRepository.GenerateStub<ISelectionService>();
            m_SelectionService = Substitute.For<ISelectionService>();
            SetupElementObject(m_SelectionService, null);
        }
        [Test]
        public void CreatingAnElementObjectHooksupSelectionChanged()
        {
            m_SelectionService = MockRepository.GenerateMock<ISelectionService>();
            m_SelectionService.Expect(x => x.SelectionChanged += null).IgnoreArguments();
            m_SelectionService = Substitute.For<ISelectionService>();
            SetupElementObject(m_SelectionService, null);
            m_SelectionService.VerifyAllExpectations();
            m_SelectionService.ReceivedWithAnyArgs().SelectionChanged += Arg.Any<EventHandler>();
        }
        [Test]
        public void DisposingAnElementObjectUnhooksSelectionChanged()
        {
            m_SelectionService = MockRepository.GenerateMock<ISelectionService>();
            m_SelectionService.Expect(x => x.SelectionChanged -= null).IgnoreArguments();
            m_SelectionService = Substitute.For<ISelectionService>();
            
            SetupElementObject(m_SelectionService, null);
            m_ElementObject.Dispose();
            m_SelectionService.VerifyAllExpectations();
            m_SelectionService.ReceivedWithAnyArgs().SelectionChanged -= Arg.Any<EventHandler>();
        }
        [Test]
        public void CreatingAnElementObjectHooksupElementChanged()
        {
            IElementChangeService elementChangeService = MockRepository.GenerateMock<IElementChangeService>();
            elementChangeService.Expect(x => x.ElementChanged += null).IgnoreArguments();
            IElementChangeService elementChangeService = Substitute.For<IElementChangeService>();
            SetupElementObject(null, elementChangeService);
            elementChangeService.VerifyAllExpectations();
            elementChangeService.ReceivedWithAnyArgs().ElementChanged += Arg.Any<PropertyChangedEventHandler>();
        }
        [Test]
        public void DisposingAnElementObjectUnhooksElementChanged()
        {
            IElementChangeService elementChangeService = MockRepository.GenerateMock<IElementChangeService>();
            elementChangeService.Expect(x => x.ElementChanged -= null).IgnoreArguments();
            IElementChangeService elementChangeService = Substitute.For<IElementChangeService>();
            
            SetupElementObject(null, elementChangeService);
            m_ElementObject.Dispose();
            elementChangeService.VerifyAllExpectations();
            elementChangeService.ReceivedWithAnyArgs().ElementChanged -= Arg.Any<PropertyChangedEventHandler>();
        }
        #endregion
        {
            m_ElementObject.IsSelected = true;
            m_SelectionService.AssertWasCalled(x => x.SetSelectedComponents(new object[] { m_Rectangle }, SelectionTypes.Add));
            m_SelectionService.Received().SetSelectedComponents(new object[] { m_Rectangle }, SelectionTypes.Add);
        }
        [Test]
            m_ElementObject.IsSelected = false;
            m_SelectionService.AssertWasCalled(x => x.SetSelectedComponents(new object[] { m_Rectangle }, SelectionTypes.Remove));
            m_SelectionService.Received().SetSelectedComponents(new object[] { m_Rectangle }, SelectionTypes.Remove);
        }
        [Test]
            m_ElementObject.IsSelected = true;
            Assert.IsFalse(m_ElementObject.IsSelected);
            m_SelectionService.AssertWasNotCalled(x => x.SetSelectedComponents(new object[] { m_Rectangle }, SelectionTypes.Add));
            m_SelectionService.DidNotReceive().SetSelectedComponents(new object[] { m_Rectangle }, SelectionTypes.Add);
        }
        [Test]
        public void IsSelectedIsSetToTrueWhenSelectionChangedIsFiredAndContainsElement()
        {
            m_SelectionService.Stub(x => x.GetComponentSelected(m_Rectangle)).Return(true);
            m_SelectionService.GetComponentSelected(m_Rectangle).Returns(true);
            IEventRaiser eventRaiser = m_SelectionService.GetEventRaiser(x => x.SelectionChanged += null);
            eventRaiser.Raise(m_SelectionService, EventArgs.Empty);
            Raise.EventWith(m_SelectionService, EventArgs.Empty);
            Assert.IsTrue(m_ElementObject.IsSelected);
        }
        {
            m_ElementObject.IsSelected = true;
            IEventRaiser eventRaiser = m_SelectionService.GetEventRaiser(x => x.SelectionChanged += null);
            eventRaiser.Raise(m_SelectionService, EventArgs.Empty);
            Raise.EventWith(m_SelectionService, EventArgs.Empty);
            Assert.IsFalse(m_ElementObject.IsSelected);
        }
        [Test]
        public void SettingZIndexOnElementSetsZIndexOnElementObject()
        {
            IElementChangeService elementChangeService = MockRepository.GenerateStub<IElementChangeService>();
            IElementChangeService elementChangeService = Substitute.For<IElementChangeService>();
            SetupElementObject(null, elementChangeService);
            Panel.SetZIndex(m_Rectangle, 22);
            IEventRaiser eventRaiser = elementChangeService.GetEventRaiser(x => x.ElementChanged += null);
            eventRaiser.Raise(m_Rectangle, new PropertyChangedEventArgs("ZIndex"));
            Raise.EventWith(m_SelectionService, new PropertyChangedEventArgs("ZIndex"));
            Assert.AreEqual(22, m_ElementObject.ZIndex);
        }
        public void ChangingElementNameWillCausePropertyChanged()
        {
            Rectangle rectangle = new Rectangle { Name = "Rectangle1" };
            INeoDesignerHost designerHostStub = MockRepository.GenerateStub<INeoDesignerHost>();
            INeoDesignerHost designerHostStub = Substitute.For<INeoDesignerHost>();
            ElementChangeService elementChangeService = new ElementChangeService(designerHostStub);
            SetupElementObject(null, elementChangeService, rectangle);

ObjectBrowserServiceTest.cs
-33
+34
/Tools/ToolsTest/ObjectBrowser/ObjectBrowserServiceTest.cs
using Neo.ApplicationFramework.Interfaces.WindowManagement;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ObjectBrowser
{
            m_ScreenDesignerView = CreateScreenDesignerView();
            m_ObjectBrowserControl = MockRepository.GenerateMock<ObjectBrowserControl>();
            m_ObjectBrowserControl = Substitute.For<ObjectBrowserControl>();
            m_ObjectBrowserService = new ObjectBrowserService(TextsIde.ObjectBrowser);
        }
        private IScreenDesignerView CreateScreenDesignerView()
        {
            IScreenDesignerView screenDesignerView = MockRepository.GenerateStub<IScreenDesignerView>();
            screenDesignerView.Stub(x => x.ObjectContextMenu).Return(null);
            IScreenDesignerView screenDesignerView = Substitute.For<IScreenDesignerView>();
            screenDesignerView.ObjectContextMenu.Returns(x => null);
            m_ElementChangeService = MockRepository.GenerateStub<IElementChangeService>();
            screenDesignerView.Stub(x => x.AddElement(Arg<FrameworkElement>.Is.Anything)).Do(new Action<FrameworkElement>(x => m_ElementChangeService.Raise(y => y.ElementAdded += null, x, new ElementEventArgs(x, "Screen1"))));
            screenDesignerView.Stub(x => x.RemoveElement(Arg<FrameworkElement>.Is.Anything)).Do(new Action<FrameworkElement>(x => m_ElementChangeService.Raise(y => y.ElementRemoved += null, x, new ElementEventArgs(x, "Screen1"))));
            m_ElementChangeService = Substitute.For<IElementChangeService>();
            screenDesignerView.WhenForAnyArgs(x => x.AddElement(Arg.Any<FrameworkElement>()))
                .Do(x => Raise.Event<ElementEventArgs>(x, new ElementEventArgs((UIElement)x[0], "Screen1")));
            screenDesignerView.WhenForAnyArgs(x => x.RemoveElement(Arg.Any<FrameworkElement>()))
                .Do(x => Raise.Event<ElementEventArgs>(x, new ElementEventArgs((UIElement)x[0], "Screen1")));
            INeoDesignerHost designerHost = MockRepository.GenerateStub<INeoDesignerHost>();
            designerHost.Stub(x => x.GetService<IElementChangeService>()).Return(m_ElementChangeService);
            INeoDesignerHost designerHost = Substitute.For<INeoDesignerHost>();
            designerHost.GetService<IElementChangeService>().Returns(m_ElementChangeService);
            IScreenRootDesigner screenRootDesigner = MockRepository.GenerateStub<IScreenRootDesigner>();
            screenRootDesigner.Stub(x => x.DesignerHost).Return(designerHost);
            IScreenRootDesigner screenRootDesigner = Substitute.For<IScreenRootDesigner>();
            screenRootDesigner.DesignerHost.Returns(designerHost);
            IScreenWindow screenWindow = MockRepository.GenerateStub<IScreenWindow>();
            screenWindow.Stub(x => x.Name).Return("Screen1");
            screenRootDesigner.Stub(x => x.ScreenWindow).Return(screenWindow);
            screenRootDesigner.Stub(x => x.RootElements).Do(new Func<IList<FrameworkElement>>(() => screenDesignerView.RootElements));
            IScreenWindow screenWindow = Substitute.For<IScreenWindow>();
            screenWindow.Name.Returns("Screen1");
            screenRootDesigner.ScreenWindow.Returns(screenWindow);
            screenRootDesigner.RootElements.Returns(screenDesignerView.RootElements);
            screenDesignerView.Designer = screenRootDesigner;
            return screenDesignerView;
            Rectangle rectangle = new Rectangle { Name = "m_Rectangle1" };
            Ellipse ellipse = new Ellipse { Name = "m_Ellipse1" };
            m_ObjectBrowserService.CreateObjectBrowserControl();
            m_ScreenDesignerView.Stub(x => x.RootElements).Return(new List<FrameworkElement>() { rectangle, ellipse });
            m_ScreenDesignerView.RootElements.Returns(new List<FrameworkElement>() { rectangle, ellipse });
            m_ObjectBrowserService.SyncWithDesignerView(m_ScreenDesignerView);
        [Test]
        public void AddingAnElementAddsItToObjects()
        {
            m_ScreenDesignerView.Stub(x => x.RootElements).Return(new List<FrameworkElement>());
            m_ScreenDesignerView.RootElements.Returns(new List<FrameworkElement>());
            m_ObjectBrowserService.SyncWithDesignerView(m_ScreenDesignerView);
            TestHelper.AddServiceStub<IWindowServiceIde>();
            m_ObjectBrowserService = new ObjectBrowserService(TextsIde.ObjectBrowser);
            m_ScreenDesignerView.Stub(x => x.RootElements).Return(new List<FrameworkElement>());
            m_ScreenDesignerView.RootElements.Returns(new List<FrameworkElement>());
            m_ObjectBrowserService.SyncWithDesignerView(m_ScreenDesignerView);
            TestHelper.AddServiceStub<IWindowServiceIde>();
            m_ObjectBrowserService = new ObjectBrowserService(TextsIde.ObjectBrowser);
            m_ScreenDesignerView.Stub(x => x.RootElements).Return(new List<FrameworkElement>());
            m_ScreenDesignerView.RootElements.Returns(new List<FrameworkElement>());
            m_ObjectBrowserService.SyncWithDesignerView(m_ScreenDesignerView);
        [Test]
        public void RemovingAnElementRemovesItFromObjects()
        {
            m_ScreenDesignerView.Stub(x => x.RootElements).Return(new List<FrameworkElement>());
            m_ScreenDesignerView.RootElements.Returns(new List<FrameworkElement>());
            m_ObjectBrowserService.SyncWithDesignerView(m_ScreenDesignerView);
        {
            Rectangle rectangle = new Rectangle { Name = "m_Rectangle1" };
            m_ScreenDesignerView.Stub(x => x.RootElements).Return(new List<FrameworkElement>() { rectangle });
            m_ScreenDesignerView.RootElements.Returns(new List<FrameworkElement>() { rectangle });
            m_ObjectBrowserService.SyncWithDesignerView(m_ScreenDesignerView);
            m_ObjectBrowserService.SyncWithDesignerView(null);
            Rectangle rectangle = new Rectangle { Name = "m_Rectangle1" };
            Ellipse ellipse = new Ellipse { Name = "m_Ellipse1" };
            m_ObjectBrowserService.CreateObjectBrowserControl();
            m_ScreenDesignerView.Stub(x => x.RootElements).Return(new List<FrameworkElement> { rectangle });
            m_ScreenDesignerView.RootElements.Returns(new List<FrameworkElement> { rectangle });
            m_ObjectBrowserService.SyncWithDesignerView(m_ScreenDesignerView);
            IScreenDesignerView anotherScreenDesignerView = CreateScreenDesignerView();
            anotherScreenDesignerView.Stub(x => x.RootElements).Return(new List<FrameworkElement>() { ellipse });
            anotherScreenDesignerView.RootElements.Returns(new List<FrameworkElement>() { ellipse });
            m_ObjectBrowserService.SyncWithDesignerView(anotherScreenDesignerView);
            Assert.AreEqual(1, ((ObjectBrowserService)m_ObjectBrowserService).RootObject.Items.Count);
        [Test]
        public void AddingAnElementToScreenUpdatesObjects()
        {
            m_ScreenDesignerView.Stub(x => x.RootElements).Return(new List<FrameworkElement>());
            m_ScreenDesignerView.RootElements.Returns(new List<FrameworkElement>());
            m_ObjectBrowserService.CreateObjectBrowserControl();
            m_ObjectBrowserService.SyncWithDesignerView(m_ScreenDesignerView);
        {
            Rectangle rectangle = new Rectangle() { Name = "m_Rectangle1" };
            m_ObjectBrowserService.CreateObjectBrowserControl();
            m_ScreenDesignerView.Stub(x => x.RootElements).Return(new List<FrameworkElement>());
            m_ScreenDesignerView.RootElements.Returns(new List<FrameworkElement>());
            m_ObjectBrowserService.SyncWithDesignerView(m_ScreenDesignerView);
            m_ObjectBrowserService.AddElement(rectangle);
            Ellipse ellipse = new Ellipse { Name = "m_Ellipse1" };
            m_ObjectBrowserService.CreateObjectBrowserControl();
            m_ScreenDesignerView.Stub(x => x.RootElements).Return(new List<FrameworkElement>() { rectangle, ellipse });
            m_ScreenDesignerView.RootElements.Returns(new List<FrameworkElement>() { rectangle, ellipse });
            m_ObjectBrowserService.SyncWithDesignerView(m_ScreenDesignerView);
            m_ScreenDesignerView.AddElement(group);
            group.Items.Add(rectangle);
            m_ElementChangeService.Raise(x => x.ParentChanged += null, m_ElementChangeService, new ElementEventArgs(rectangle, "Screen1"));
            Raise.Event<ElementEventArgs>(m_ElementChangeService, new ElementEventArgs(rectangle, "Screen1"));
            group.Items.Add(ellipse);
            m_ElementChangeService.Raise(x => x.ParentChanged += null, m_ElementChangeService, new ElementEventArgs(ellipse, "Screen1"));
            Raise.Event<ElementEventArgs>(m_ElementChangeService, new ElementEventArgs(rectangle, "Screen1"));
            Assert.AreEqual(1, ((ObjectBrowserService)m_ObjectBrowserService).RootObject.Items.Count);
            IObjectContainer objectContainer = ((ObjectBrowserService)m_ObjectBrowserService).RootObject.Items[0] as IObjectContainer;
            group.Items.Add(rectangle);
            group.Items.Add(ellipse);
            m_ObjectBrowserService.CreateObjectBrowserControl();
            m_ScreenDesignerView.Stub(x => x.RootElements).Return(new List<FrameworkElement>() { group });
            m_ScreenDesignerView.RootElements.Returns(new List<FrameworkElement>() { group });
            m_ObjectBrowserService.SyncWithDesignerView(m_ScreenDesignerView);
            group.Items.Remove(rectangle);
            m_ElementChangeService.Raise(x => x.ParentChanged += null, m_ElementChangeService, new ElementEventArgs(rectangle, "Screen1"));
            Raise.Event<ElementEventArgs>(m_ElementChangeService, new ElementEventArgs(rectangle, "Screen1"));
            group.Items.Remove(ellipse);
            m_ElementChangeService.Raise(x => x.ParentChanged += null, m_ElementChangeService, new ElementEventArgs(ellipse, "Screen1"));
            m_ElementChangeService.Raise(x => x.ElementRemoved += null, m_ElementChangeService, new ElementEventArgs(group, "Screen1"));
            Raise.Event<ElementEventArgs>(m_ElementChangeService, new ElementEventArgs(ellipse, "Screen1"));
            Raise.Event<ElementEventArgs>(m_ElementChangeService, new ElementEventArgs(group, "Screen1"));
            IObjectContainer rootObject = ((ObjectBrowserService)m_ObjectBrowserService).RootObject;
            Assert.AreEqual(2, rootObject.Items.Count);

TagBindingSourceDescriptionProviderWpfTest.cs
-5
+5
/Tools/ToolsTest/OpcClient/Bindings/TagBindingSourceDescriptionProviderWpfTest.cs
using System.Windows.Data;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Bindings;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient.Bindings
{
        [SetUp]
        public void SetUp()
        {
            m_DataItemProxyProvider = MockRepository.GenerateStub<IDataItemProxyProvider>();
            m_DataItemProxyProvider = Substitute.For<IDataItemProxyProvider>();
            m_Provider = new TagBindingSourceDescriptionProviderWpf(m_DataItemProxyProvider);
        }
        {
            Type expectedType = typeof(Int16);
            IDataItemProxy dataItemProxy = MockRepository.GenerateStub<IDataItemProxy>();
            dataItemProxy.Stub(x => x.Type).Return(expectedType);
            IDataItemProxy dataItemProxy = Substitute.For<IDataItemProxy>();
            dataItemProxy.Type.Returns(expectedType);
            m_DataItemProxyProvider.Stub(x => x[StringConstants.TagsRoot + "MyTag"]).Return(dataItemProxy);
            m_DataItemProxyProvider[StringConstants.TagsRoot + "MyTag"].Returns(dataItemProxy);
            Binding binding = new Binding("[" + StringConstants.TagsRoot + "MyTag].Value");
            binding.Source = m_DataItemProxyProvider;

TagBindingSourceProviderTest.cs
-18
+13
/Tools/ToolsTest/OpcClient/Bindings/TagBindingSourceProviderTest.cs
#if !VNEXT_TARGET
using System;
using System.Windows.Threading;
using Neo.ApplicationFramework.Tools.Design;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Events;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Design;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient.Bindings
{
            provider.DataSourceChanged += (sender, e) => eventSent = true;
            // Create event payload
            var globalDataItem = MockRepository.GenerateStub<IGlobalDataItem>();
            var globalDataItem = Substitute.For<IGlobalDataItem>();
            // Raise event
            m_TagChangedNotificationService
                .GetEventRaiser(tcns => tcns.TagAdded += null)
                .Raise(m_TagChangedNotificationService, new TagChangedEventArgs(globalDataItem));
            Raise.EventWith(m_TagChangedNotificationService, new TagChangedEventArgs(globalDataItem));
            // Wait with assertion until event execution is finished
            InvokeOnDispatcher(() => Assert.That(eventSent, Is.True));
            provider.DataSourceChanged += (sender, e) => eventSent = true;
            // Create event payload
            var globalDataItem = MockRepository.GenerateStub<IGlobalDataItem>();
            var globalDataItem = Substitute.For<IGlobalDataItem>();
            // Raise event
            m_TagChangedNotificationService
                .GetEventRaiser(tcns => tcns.TagDeleted += null)
                .Raise(m_TagChangedNotificationService, new TagChangedEventArgs(globalDataItem));
            Raise.EventWith(m_TagChangedNotificationService, new TagChangedEventArgs(globalDataItem));
            InvokeOnDispatcher(() => Assert.That(eventSent, Is.True));
        }
            // Create event payload
            var eventArgs = new TagPropertyChangedEventArgs(
                MockRepository.GenerateStub<IGlobalDataItem>(),
                Substitute.For<IGlobalDataItem>(),
                "DataItems");
            // Raise event
            m_TagChangedNotificationService
                .GetEventRaiser(tcns => tcns.TagPropertyChanged += null)
                .Raise(m_TagChangedNotificationService, eventArgs);
            Raise.EventWith(m_TagChangedNotificationService, eventArgs);
            InvokeOnDispatcher(() => Assert.That(eventSent, Is.True));
        }
            // Create event payload
            var eventArgs = new TagPropertyChangedEventArgs(
                MockRepository.GenerateStub<IGlobalDataItem>(),
                Substitute.For<IGlobalDataItem>(),
                "SomeProperty");
            // Raise event
            m_TagChangedNotificationService
                .GetEventRaiser(tcns => tcns.TagPropertyChanged += null)
                .Raise(m_TagChangedNotificationService, eventArgs);
            Raise.EventWith(m_TagChangedNotificationService, eventArgs);
            InvokeOnDispatcher(() => Assert.That(eventSent, Is.False));
        }
        }
    }
}
#endif

TagPathLookupIndexTest.cs
-18
+18
/Tools/ToolsTest/OpcClient/LookupIndex/TagPathLookupIndexTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Tag;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.OpcClient.LookupIndex
{
        {
            // ARRANGE
            const string defaultProviderObject = "defaultProviderObject";
            var globalController = MockRepository.GenerateStub<IGlobalController>();
            var defaultLookupIndex = MockRepository.GenerateStub<IPathLookupIndex>();
            defaultLookupIndex.Stub(i => i.GetObject<object>(Arg<string>.Is.Anything)).Return(defaultProviderObject);
            var globalController = Substitute.For<IGlobalController>();
            var defaultLookupIndex = Substitute.For<IPathLookupIndex>();
            defaultLookupIndex.GetObject<object>(Arg.Any<string>()).Returns(defaultProviderObject);
            
            IPathLookupIndex unitUnderTest = new TagPathLookupIndex(globalController, defaultLookupIndex);
        public void TestRootNameIsFromDefaultLookupIndex()
        {
            // ARRANGE
            var globalController = MockRepository.GenerateStub<IGlobalController>();
            var defaultLookupIndex = MockRepository.GenerateStub<IPathLookupIndex>();
            var globalController = Substitute.For<IGlobalController>();
            var defaultLookupIndex = Substitute.For<IPathLookupIndex>();
            const string rootName = "Root";
            defaultLookupIndex.Stub(i => i.RootName).Return(rootName); 
            defaultLookupIndex.RootName.Returns(rootName); 
            IPathLookupIndex unitUnderTest = new TagPathLookupIndex(globalController, defaultLookupIndex);
        public void TestGetObjectWithPathReturnsValueFromBothIndexesWhenRealTagInterfaceIsRequested()
        {
            // ARRANGE
            IBasicTag defaultProviderObject = MockRepository.GenerateStub<IBasicTag>();
            IBasicTag defaultProviderObject = Substitute.For<IBasicTag>();
            defaultProviderObject.Name = "defaultTag";
            IBasicTag []defaultProviderObjects = { defaultProviderObject };
            var globalController = MockRepository.GenerateStub<IGlobalController>();
            globalController.Stub(g => g.GetAllTags<IBasicTag>(Arg<TagsPredicate>.Is.Anything)).Return(CreateTags().ToArray());
            var globalController = Substitute.For<IGlobalController>();
            globalController.GetAllTags<IBasicTag>(Arg.Any<TagsPredicate>()).Returns(CreateTags().ToArray());
            var defaultLookupIndex = MockRepository.GenerateStub<IPathLookupIndex>();
            defaultLookupIndex.Stub(l => l.GetObjects<IBasicTag>(Arg<bool>.Is.Anything)).Return(defaultProviderObjects.ToArray());
            var defaultLookupIndex = Substitute.For<IPathLookupIndex>();
            defaultLookupIndex.GetObjects<IBasicTag>(Arg.Any<bool>()).Returns(defaultProviderObjects.ToArray());
            IPathLookupIndex unitUnderTest = new TagPathLookupIndex(globalController, defaultLookupIndex);
        public void TestGetObjectWithPathReturnsValueFromBothIndexesWhenNoRealTagInterfaceIsRequested()
        {
            // ARRANGE
            ITag defaultProviderObject = MockRepository.GenerateStub<ITag>();
            ITag defaultProviderObject = Substitute.For<ITag>();
            defaultProviderObject.Name = "defaultTag";
            ITag[] defaultProviderObjects = { defaultProviderObject };
            var globalController = MockRepository.GenerateStub<IGlobalController>();
            globalController.Stub(g => g.GetAllTags<ITag>(Arg<TagsPredicate>.Is.Anything)).Return(CreateTags().ToArray());
            var globalController = Substitute.For<IGlobalController>();
            globalController.GetAllTags<ITag>(Arg.Any<TagsPredicate>()).Returns(CreateTags().ToArray());
            var defaultLookupIndex = MockRepository.GenerateStub<IPathLookupIndex>();
            defaultLookupIndex.Stub(l => l.GetObjects<ITag>(Arg<bool>.Is.Anything)).Return(defaultProviderObjects.ToArray());
            var defaultLookupIndex = Substitute.For<IPathLookupIndex>();
            defaultLookupIndex.GetObjects<ITag>(Arg.Any<bool>()).Returns(defaultProviderObjects.ToArray());
            IPathLookupIndex unitUnderTest = new TagPathLookupIndex(globalController, defaultLookupIndex);
        {
            for (int i = 0; i < 100; i++)
            {
                var tag = MockRepository.GenerateStub<IBasicTag>();
                var tag = Substitute.For<IBasicTag>();
                tag.Name = $"tag${i}";
                yield return tag;
            }

AddingDataItemToDataSourceTest.cs
-21
+16
/Tools/ToolsTest/OpcClient/AddingDataItemToDataSourceTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interop.DataSource;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
        [SetUp]
        public void SetUp()
        {
            m_DataItemsStub = MockRepository.GenerateStub<BeDataItems>();
            m_DataItemsStub = Substitute.For<BeDataItems>();
            m_DataSourceStub = MockRepository.GenerateStub<IDataItemDataSource>();
            m_DataSourceStub = Substitute.For<IDataItemDataSource>();
            
            m_DataSourceContainerStub = MockRepository.GenerateStub<IDataSourceContainer>();
            m_DataSourceContainerStub.Stub(x => x.DataSource).Return(m_DataSourceStub);
            m_DataSourceContainerStub = Substitute.For<IDataSourceContainer>();
            m_DataSourceContainerStub.DataSource.Returns(m_DataSourceStub);
        }
        [Test]
        {
            m_DataSourceContainerStub.DataSourceType = DataSourceType.DataSourceOpcClassicExternal;
            string notUsed;
            m_DataSourceStub.Stub(x => x.ValidateIO(null, out notUsed))
                            .IgnoreArguments()
                            .Return(true);
            m_DataSourceStub.ValidateIO(Arg.Any<string>(), out Arg.Any<string>())
                            .Returns(true);
            string itemID = string.Empty;
            m_DataItemsStub.Stub(x => x.AddDataItem(null, ref itemID, 0, 0, 0, BEDATATYPE.DT_DEFAULT, null, null))
                           .IgnoreArguments()
                           .Throw(new ArgumentException());
            //Assert.Throws<ArgumentException>
            m_DataItemsStub.AddDataItem(Arg.Any<string>(), ref Arg.Any<string>(), Arg.Any<short>(), 
                Arg.Any<int>(), Arg.Any<short>(), Arg.Any<BEDATATYPE>(), Arg.Any<object>(), Arg.Any<object>())
                           .Returns(x => throw new ArgumentException());
            IDataItem dataItem = new DataItem();
            dataItem.Name = "ControllerD0";
        {
            m_DataSourceContainerStub.DataSourceType = DataSourceType.DataSourceOpcClassicInprocess;
            string notUsed;
            m_DataSourceStub.Stub(x => x.ValidateIO(null, out notUsed))
                            .IgnoreArguments()
                            .Return(true);
            m_DataSourceStub.ValidateIO(Arg.Any<string>(), out Arg.Any<string>())
                            .Returns(true);
            string itemID = string.Empty;
            m_DataItemsStub.Stub(x => x.AddDataItem(null, ref itemID, 0, 0, 0, BEDATATYPE.DT_DEFAULT, null, null))
                           .IgnoreArguments()
                           .Throw(new ArgumentException());
            m_DataItemsStub.AddDataItem(Arg.Any<string>(), ref Arg.Any<string>(), Arg.Any<short>(),
                Arg.Any<int>(), Arg.Any<short>(), Arg.Any<BEDATATYPE>(), Arg.Any<object>(), Arg.Any<object>())
                           .Returns(x => throw new ArgumentException());
            IDataItem dataItem = new DataItem();
            dataItem.Name = "ControllerD0";

BatchServiceTest.cs
-23
+22
/Tools/ToolsTest/OpcClient/BatchServiceTest.cs
using System;
using System.Linq;
using System.Runtime.Remoting.Messaging;
using System.Threading.Tasks;
using Core.Api.DataSource;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
        [Test]
        public void BatchStartThrowsExceptionWhenControllerHasNotBeenRegistered()
        {
            IDataSourceContainer controller = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controller = Substitute.For<IDataSourceContainer>();
            controller.Name = "Controller1";
	        controller.IsActive = true;
        [Test]
        public void BatchCommitThrowsExceptionWhenControllerHasNotBeenRegistered()
        {
            IDataSourceContainer controller = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controller = Substitute.For<IDataSourceContainer>();
            controller.Name = "Controller1";
	        controller.IsActive = true;
        }
        [Test]
        public void InitiatingBatchOnUniqueControllersDoesNotBlockAnyControllers()
        public async Task InitiatingBatchOnUniqueControllersDoesNotBlockAnyControllers()
        {
            IDataSourceContainer controllerOne = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerOne = Substitute.For<IDataSourceContainer>();
            controllerOne.Name = "Controller1";
	        controllerOne.IsActive = true;
			IDataSourceContainer controllerTwo = MockRepository.GenerateStub<IDataSourceContainer>();
			IDataSourceContainer controllerTwo = Substitute.For<IDataSourceContainer>();
            controllerTwo.Name = "Controller2";
	        controllerTwo.IsActive = true;
			m_BatchService.RegisterController(controllerOne);
            m_BatchService.RegisterController(controllerTwo);
            Action<IDataSourceContainer> batchStartAction = (IDataSourceContainer controller) => m_BatchService.BatchStart(controller);
            Func<IDataSourceContainer, Task> batchStartAction = (IDataSourceContainer controller) =>
            {
                m_BatchService.BatchStart(controller);
                return Task.CompletedTask;
            };
            AsyncResult asyncResultOne = (AsyncResult)batchStartAction.BeginInvoke(controllerOne, null, null);
            AsyncResult asyncResultTwo = (AsyncResult)batchStartAction.BeginInvoke(controllerTwo, null, null);
            asyncResultOne.AsyncWaitHandle.WaitOne();
            ((Action<IDataSourceContainer>)asyncResultOne.AsyncDelegate).EndInvoke(asyncResultOne);
            asyncResultTwo.AsyncWaitHandle.WaitOne();
            ((Action<IDataSourceContainer>)asyncResultTwo.AsyncDelegate).EndInvoke(asyncResultTwo);
            await batchStartAction(controllerOne).ConfigureAwait(false);
            await batchStartAction(controllerTwo).ConfigureAwait(false);
            m_BatchService.BatchCommit(controllerOne);
            m_BatchService.BatchCommit(controllerTwo);
            controllerOne.AssertWasCalled(x => x.BatchStart());
            controllerTwo.AssertWasCalled(x => x.BatchStart());
            controllerOne.AssertWasCalled(x => x.BatchCommit());
            controllerTwo.AssertWasCalled(x => x.BatchCommit());
            controllerOne.Received().BatchStart();
            controllerTwo.Received().BatchStart();
            controllerOne.Received().BatchCommit();
            controllerTwo.Received().BatchCommit();
        }
        [Test]
            globalDataItemOne.AccessRights["Controller1"] = AccessRights.Read;
            globalDataItemOne.AccessRights["Controller2"] = AccessRights.Write;
            IDataItem dataItemTwoControllerOne = MockRepository.GenerateStub<IDataItem>();
            IDataItem dataItemTwoControllerOne = Substitute.For<IDataItem>();
            dataItemTwoControllerOne.DataSourceContainer = controllerOne;
            IDataItem dataItemTwoControllerTwo = MockRepository.GenerateStub<IDataItem>();
            IDataItem dataItemTwoControllerTwo = Substitute.For<IDataItem>();
            dataItemTwoControllerTwo.DataSourceContainer = controllerTwo;
            IDataSourceContainer controllerThree = null;
            globalDataItemOne.AccessRights["Controller1"] = AccessRights.Read;
            globalDataItemOne.AccessRights["Controller2"] = AccessRights.Write;
            IDataItem dataItemTwoControllerOne = MockRepository.GenerateStub<IDataItem>();
            IDataItem dataItemTwoControllerOne = Substitute.For<IDataItem>();
            dataItemTwoControllerOne.DataSourceContainer = controllerOne;
            IDataItem dataItemTwoControllerTwo = MockRepository.GenerateStub<IDataItem>();
            IDataItem dataItemTwoControllerTwo = Substitute.For<IDataItem>();
            dataItemTwoControllerTwo.DataSourceContainer = controllerTwo;
            IDataSourceContainer controllerThree = null;

DataItemLogicTest.cs
-6
+8
/Tools/ToolsTest/OpcClient/DataItemLogicTest.cs
#if !VNEXT_TARGET
using System;
using Core.Api.DataSource;
using Core.Api.Tools;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interop.DataSource;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
        public void TestFixtureSetUp()
        {
            IToolManager toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(false);
            toolManager.Runtime.Returns(false);
            m_OpcClientServiceCF = TestHelper.AddServiceStub<IOpcClientServiceIde>();
            m_DataItemLogic.ItemAddedToGlobalDataItem(globalDataItem, dataItemOne, true);
            m_OpcClientServiceCF.AssertWasCalled(x => x.CreateArrayTags(globalDataItem));
            m_OpcClientServiceCF.Received().CreateArrayTags(globalDataItem);
        }
        [Test]
            BEDATATYPE dataTypeOfTheDataItem = BEDATATYPE.DT_DATETIME;
            GlobalDataItem globalDataItem = new GlobalDataItem { DataType = dataTypeOfGlobalDataItem };
            globalDataItem.DataItems.Add(MockRepository.GenerateStub<IDataItem>());
            globalDataItem.DataItems.Add(Substitute.For<IDataItem>());
            IDataItem dataItem = CreateDataItemWithController("", "");
            dataItem.DataType = dataTypeOfTheDataItem;
        private IDataItem CreateDataItemWithController(string controllerName, string dataItemName)
        {
            IDataSourceContainer controller = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controller = Substitute.For<IDataSourceContainer>();
            controller.Name = controllerName;
            IDataItem dataItem = MockRepository.GenerateStub<IDataItem>();
            IDataItem dataItem = Substitute.For<IDataItem>();
            dataItem.DataSourceContainer = controller;
            dataItem.Name = dataItemName;
    }
}
#endif

DataItemTest.cs
-22
+25
/Tools/ToolsTest/OpcClient/DataItemTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interop.DataSource;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
            NeoDesignerProperties.IsInDesignMode = true;
            m_ToolManagerStub = TestHelper.CreateAndAddServiceStub<IToolManager>();
            m_ToolManagerStub.Stub(tool => tool.Runtime).Return(false);
            m_ToolManagerStub.Runtime.Returns(false);
        }
        [TearDown]
        [Test]
        public void RegularUpdateDoesNotUpdateDataSourceIfSameValue()
        {
            m_ToolManagerStub.Stub(tool => tool.Runtime).Return(true);
            m_ToolManagerStub.Runtime.Returns(true);
            VariantValue value = new VariantValue(5);
            IDataItemDataSource dataSource = CreateDataSource();
            dataSource.Expect(bds => bds.SetValue(0, null)).IgnoreArguments().Repeat.Never();
            dataSource.Expect(bds => bds.GetValue(0)).IgnoreArguments().Return(value.Value).Repeat.Any();
            dataSource.Expect(bds => bds.SetDataType(1, BEDATATYPE.DT_INTEGER4)).Repeat.Once();
            dataSource.Expect(bds => bds.GetDataType(1)).Return(BEDATATYPE.DT_INTEGER4).Repeat.Once();
            
            dataSource.GetValue(Arg.Any<int>()).Returns(value.Value);
            dataSource.GetDataType(1).Returns(BEDATATYPE.DT_INTEGER4);
            IDataItem dataItem = CreateDataItem(value.Value, BEDATATYPE.DT_INTEGER4);
            Assert.AreEqual(((VariantValue)dataItem.Value).Value, value.Value);
            dataItem.Value = value;
            dataSource.VerifyAllExpectations();
            dataSource.DidNotReceiveWithAnyArgs().SetValue(Arg.Any<int>(), Arg.Any<object>());
            dataSource.Received().GetValue(Arg.Any<int>());
            dataSource.Received(1).SetDataType(1, BEDATATYPE.DT_INTEGER4);
            dataSource.Received(1).GetDataType(1).Returns(BEDATATYPE.DT_INTEGER4);
        }
        [Test]
        public void ForcedUpdateUpdatesDataSource()
        {
            m_ToolManagerStub.Stub(tool => tool.Runtime).Return(true);
            m_ToolManagerStub.Runtime.Returns(true);
            VariantValue value = new VariantValue(5);
            IDataItemDataSource dataSource = CreateDataSource();
            dataSource.Expect(bds => bds.Write(0, null)).IgnoreArguments().Repeat.Once();
            dataSource.Expect(bds => bds.GetValue(0)).IgnoreArguments().Return(value.Value).Repeat.Any();
            dataSource.Expect(bds => bds.SetDataType(1, BEDATATYPE.DT_INTEGER4)).Repeat.Once();
            dataSource.Expect(bds => bds.GetDataType(1)).Return(BEDATATYPE.DT_INTEGER4).Repeat.Once();
            dataSource.GetValue(0).Returns(value.Value);
            dataSource.GetDataType(1).Returns(BEDATATYPE.DT_INTEGER4);
            IDataItem dataItem = CreateDataItem(value.Value, BEDATATYPE.DT_INTEGER4);
            Assert.AreEqual(((VariantValue)dataItem.Value).Value, value.Value);
            dataItem.SetValueForced(value);
            dataSource.VerifyAllExpectations();
            dataSource.ReceivedWithAnyArgs().Write(Arg.Any<int>(), Arg.Any<object>());
            dataSource.Received().GetValue(Arg.Any<int>());
            dataSource.Received(1).SetDataType(1, BEDATATYPE.DT_INTEGER4);
            dataSource.Received(1).GetDataType(1).Returns(BEDATATYPE.DT_INTEGER4);
        }
        [Test]
        {
            VariantValue initialValue = true;
            IDataSourceContainer dataSourceContainer = MockRepository.GenerateMock<IDataSourceContainer>();
            dataSourceContainer.Stub(x => x.IsControllerConnected).Return(false);
            IDataSourceContainer dataSourceContainer = Substitute.For<IDataSourceContainer>();
            dataSourceContainer.IsControllerConnected.Returns(false);
            IDataItem dataItem = CreateDataItem(initialValue, BEDATATYPE.DT_BOOLEAN);
            dataItem.DataSourceContainer = dataSourceContainer;
            VariantValue initialValue = 10;
            VariantValue incValue = 5;
            IDataSourceContainer dataSourceContainer = MockRepository.GenerateMock<IDataSourceContainer>();
            dataSourceContainer.Stub(x => x.IsControllerConnected).Return(false);
            IDataSourceContainer dataSourceContainer = Substitute.For<IDataSourceContainer>();
            dataSourceContainer.IsControllerConnected.Returns(false);
            IDataItem dataItem = CreateDataItem(initialValue, BEDATATYPE.DT_INTEGER2);
            dataItem.DataSourceContainer = dataSourceContainer;
        private IDataItemDataSource CreateDataSource()
        {
            m_DataSourceContainerStub = MockRepository.GenerateStub<IDataSourceContainer>();
            m_DataItemDataSourceStub = MockRepository.GenerateStub<IDataItemDataSource>();
            m_DataItemDataSourceStub.Stub(dids => dids.IsValidDevice(Arg<int>.Is.NotEqual(0))).Return(true);
            m_DataSourceContainerStub.Stub(dsc => dsc.DataSource).Return(m_DataItemDataSourceStub);
            m_DataSourceContainerStub = Substitute.For<IDataSourceContainer>();
            m_DataItemDataSourceStub = Substitute.For<IDataItemDataSource>();
            m_DataItemDataSourceStub.IsValidDevice(Arg.Is<int>(x => x != 0)).Returns(true);
            m_DataSourceContainerStub.DataSource.Returns(m_DataItemDataSourceStub);
            return m_DataItemDataSourceStub;
        }

DataSourceOpcUaTest.cs
-8
+8
/Tools/ToolsTest/OpcClient/DataSourceOpcUaTest.cs
using Neo.ApplicationFramework.Interop.DataSource;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.OpcUaClient;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
        {
            m_DataSourceContainer = new DataSourceContainer();
            m_OpcUaDaClientService = MockRepository.GenerateStub<OpcUaClientServiceDummy>();
            m_OpcUaDaClientService.Stub(x => x.IsServerConnected(1)).Return(true);
            m_OpcUaDaClientService = Substitute.For<OpcUaClientServiceDummy>();
            m_OpcUaDaClientService.IsServerConnected(1).Returns(true);
            m_DataSourceOpcUa = new DataSourceOpcUaDummy(m_DataSourceContainer, m_DataSourceOpcUa, 1, m_OpcUaDaClientService);
            ((DataSourceOpcUaDummy)m_DataSourceOpcUa).UpdateSubscriptions();
            m_OpcUaDaClientService.AssertWasCalled(x => x.Subscribe(
                Arg<uint>.Is.Anything, Arg<int[]>.Matches(y => y[0] == 1),
                Arg<double[]>.Is.Anything, Arg<uint>.Is.Anything, out Arg<int>.Out(1).Dummy, out Arg<bool[]>.Out(new[] { false }).Dummy));
            m_OpcUaDaClientService.Received()
                .Subscribe(Arg.Any<uint>(), Arg.Is<int[]>(y => y[0] == 1),
                Arg.Any<double[]>(), Arg.Any<uint>(), out Arg.Any<int>(), out Arg.Any<bool[]>());
        }
        [Test]
            ((DataSourceOpcUaDummy)m_DataSourceOpcUa).UpdateSubscriptions();
            m_OpcUaDaClientService.AssertWasCalled(x => x.UnSubscribe(
                Arg<uint>.Is.Anything, Arg<int[]>.Matches(y => y[0] == 1), Arg<uint>.Is.Anything));
            m_OpcUaDaClientService.Received()
                .UnSubscribe(Arg.Any<uint>(), Arg.Is<int[]>(y => y[0] == 1), Arg.Any<uint>());
        }
    }
}

DataTriggerTest.cs
-10
+10
/Tools/ToolsTest/OpcClient/DataTriggerTest.cs
using Neo.ApplicationFramework.Common.Collections;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
        private IGlobalDataSubItem CreateSubItem(int triggerValue)
        {
            IGlobalDataSubItem firstSubItem = MockRepository.GenerateStub<IGlobalDataSubItem>();
            firstSubItem.Stub(x => x.TriggerValue).Return(new VariantValue(triggerValue));
            IGlobalDataSubItem firstSubItem = Substitute.For<IGlobalDataSubItem>();
            firstSubItem.TriggerValue.Returns(new VariantValue(triggerValue));
            return firstSubItem;
        }
        [Test]
        public void BatchWriteIsTriggeredOnAllTheSubItems()
        {
            IGlobalDataItem globalDataItem = MockRepository.GenerateStub<IGlobalDataItem>();
            IGlobalDataItem globalDataItem = Substitute.For<IGlobalDataItem>();
            IGlobalDataSubItem firstSubItem = CreateSubItem(11);
            IGlobalDataSubItem secondSubItem = CreateSubItem(22);
            globalDataItem.Stub(x => x.GlobalDataSubItems).Return(new ExtendedBindingList<IGlobalDataSubItem>() { firstSubItem, secondSubItem });
            globalDataItem.GlobalDataSubItems.Returns(new ExtendedBindingList<IGlobalDataSubItem>() { firstSubItem, secondSubItem });
            TriggerBatchWriteThruValueChange(globalDataItem);
            firstSubItem.AssertWasCalled(x=> x.BatchWriteForDataExchange(11));
            secondSubItem.AssertWasCalled(x => x.BatchWriteForDataExchange(22));
            firstSubItem.Received().BatchWriteForDataExchange(11);
            secondSubItem.Received().BatchWriteForDataExchange(22);
        }   
        [Test]
        public void BatchWriteIsTriggeredOnValueChange()
        {
            IGlobalDataItem globalDataItem = MockRepository.GenerateStub<IGlobalDataItem>();
            IGlobalDataItem globalDataItem = Substitute.For<IGlobalDataItem>();
            IGlobalDataSubItem subItem = CreateSubItem(10);
            globalDataItem.Stub(x => x.GlobalDataSubItems).Return(new ExtendedBindingList<IGlobalDataSubItem>(){subItem});
            globalDataItem.GlobalDataSubItems.Returns(new ExtendedBindingList<IGlobalDataSubItem>(){subItem});
            TriggerBatchWriteThruValueChange(globalDataItem);
            subItem.AssertWasCalled(x => x.BatchWriteForDataExchange(10));
            subItem.Received().BatchWriteForDataExchange(10);
        }
        private void TriggerBatchWriteThruValueChange(IGlobalDataItem globalDataItem)

ExposureExtenderProviderTest.cs
-21
+22
/Tools/ToolsTest/OpcClient/ExposureExtenderProviderTest.cs
#if !VNEXT_TARGET
using System;
using System.CodeDom;
using System.Collections.Generic;
using Neo.ApplicationFramework.Tools.MultiLanguage;
using Neo.ApplicationFramework.Tools.OpcUaServer;
using Neo.ApplicationFramework.Tools.Selection;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using INameCreationService = Neo.ApplicationFramework.Interfaces.INameCreationService;
namespace Neo.ApplicationFramework.Tools.OpcClient
            TestHelper.AddServiceStub<IFastLoggingFeatureLogicService>();
            TestHelper.AddServiceStub<IProjectManager>();
            m_GlobalController = MockRepository.GenerateStub<IGlobalController>();
            m_GlobalController.Stub(x => x.DataItemBases).Return(new ReadOnlyCollection<IDataItemBase>(new IDataItemBase[] { }));
            m_GlobalController = Substitute.For<IGlobalController>();
            m_GlobalController.DataItemBases.Returns(new ReadOnlyCollection<IDataItemBase>(new IDataItemBase[] { }));
            TestHelper.AddService<INameCreationService>(new NameCreationService());
            TestHelper.AddServiceStub<IOpcClientServiceCF>();
            var testSite = new TestSite();
            IDesignerDocument designerDocument = new DesignerDocument(
                testSite,
                MockRepository.GenerateStub<IDesignerPersistenceService>(),
                MockRepository.GenerateStub<System.ComponentModel.Design.Serialization.INameCreationService>().ToILazy(),
                Substitute.For<IDesignerPersistenceService>(),
                Substitute.For<System.ComponentModel.Design.Serialization.INameCreationService>().ToILazy(),
                () => new SelectionService(),
                new LazyWrapper<IReferenceProvider>(
                    () => new GlobalReferenceToReferenceAdapter(ServiceContainerCF.GetService<IGlobalReferenceService>())),
            ((IExtenderProviderService)m_DesignerHost).AddExtenderProvider((IExtenderProvider)Activator.CreateInstance(typeof(ExposureExtenderProvider)));
            m_OpcUaServerServiceIde = TestHelper.AddServiceStub<IOpcUaServerServiceIde>();
            m_OpcUaServerServiceIde.Stub(x => x.IsOpcUaServerEnabledInProject()).Return(true);
            m_OpcUaServerServiceIde.IsOpcUaServerEnabledInProject().Returns(true);
            TestHelper.AddServiceStub<IGlobalSelectionService>();
            TestHelper.AddServiceStub<ITagChangedNotificationServiceCF>();
            m_OpcUaServerRootComponentStub = MockRepository.GenerateStub<IOpcUaServerRootComponent>();
            m_OpcUaServerRootComponentStub = Substitute.For<IOpcUaServerRootComponent>();
            m_OpcUaServerRootComponentStub.ExposureOption = OpcUaServerTagExposureOption.AllTagsVisible;
            var projectItem = MockRepository.GenerateStub<IDesignerProjectItem>();
            projectItem.Stub(x => x.ContainedObject).Return(m_OpcUaServerRootComponentStub);
            var projectItem = Substitute.For<IDesignerProjectItem>();
            projectItem.ContainedObject.Returns(m_OpcUaServerRootComponentStub);
            var projectItemFinder = TestHelper.AddServiceStub<IProjectItemFinder>();
            projectItemFinder.Stub(x => x.GetProjectItems(typeof(IOpcUaServerRootComponent))).Return(new[] { projectItem });
            projectItemFinder.GetProjectItems(typeof(IOpcUaServerRootComponent)).Returns(new[] { projectItem });
            m_OpcClientService = TestHelper.AddServiceStub<IOpcClientServiceIde>();
            m_OpcClientService.Stub(x => x.GlobalController).Return(m_GlobalController);
            m_OpcClientService.Stub(x => x.AddNewDataItem(Arg<string>.Is.Anything, Arg<string>.Is.Anything, Arg<IControllerBase>.Is.Anything)).Repeat.Any().Do(
                new Func<string, string, IControllerBase, IDataItemBase>(
                    (_, __, ___) => (IGlobalDataItem)m_DesignerHost.CreateComponent(typeof(CreateSeries.TestGlobalDataItem))));
            m_OpcClientService.GlobalController.Returns(m_GlobalController);
            m_OpcClientService.AddNewDataItem(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<IControllerBase>())
                .Returns(x => (IGlobalDataItem)m_DesignerHost.CreateComponent(typeof(CreateSeries.TestGlobalDataItem)));
        }
        [TearDown]
            PropertyDescriptor setPropertyDescriptorTag3 = TypeDescriptor.GetProperties(dataItem3)[ExposureExtenderProvider.IsExposedPropertyName];
            setPropertyDescriptorTag3.SetValue(dataItem3, true);
            m_GlobalController.Stub(x => x.GetAllTags<IGlobalDataItem>(Arg<TagsPredicate>.Is.Anything)).Return(new[] { dataItem1, dataItem2, dataItem3 });
            m_GlobalController.GetAllTags<IGlobalDataItem>(Arg.Any<TagsPredicate>()).Returns(new[] { dataItem1, dataItem2, dataItem3 });
            // Act
            IEnumerable<IGlobalDataItem> exposedTags = m_OpcClientServiceIde.GetExposedGlobalDataItems();
            PropertyDescriptor setPropertyDescriptor = TypeDescriptor.GetProperties(dataItem)[ExposureExtenderProvider.IsExposedPropertyName];
            setPropertyDescriptor.SetValue(dataItem, true);
            var serviceProvider = MockRepository.GenerateStub<IDesignerHost>();
            serviceProvider.Stub(x => x.RootComponentClassName).Return(StringConstants.Tags);
            var serviceProvider = Substitute.For<IDesignerHost>();
            serviceProvider.RootComponentClassName.Returns(StringConstants.Tags);
            // Act
            var codeTypeDeclaration = new CodeTypeDeclaration("CodeGenerationHelperTest");
            PropertyDescriptor setPropertyDescriptor = TypeDescriptor.GetProperties(dataItem)[ExposureExtenderProvider.IsExposedPropertyName];
            setPropertyDescriptor.SetValue(dataItem, true);
            var serviceProvider = MockRepository.GenerateStub<IDesignerHost>();
            serviceProvider.Stub(x => x.RootComponentClassName).Return(StringConstants.Tags);
            var serviceProvider = Substitute.For<IDesignerHost>();
            serviceProvider.RootComponentClassName.Returns(StringConstants.Tags);
            // Act
            var codeTypeDeclaration = new CodeTypeDeclaration("CodeGenerationHelperTest");
            PropertyDescriptor setPropertyDescriptor = TypeDescriptor.GetProperties(dataItem)[ExposureExtenderProvider.IsExposedPropertyName];
            setPropertyDescriptor.SetValue(dataItem, true);
            var serviceProvider = MockRepository.GenerateStub<IDesignerHost>();
            serviceProvider.Stub(x => x.RootComponentClassName).Return(StringConstants.Tags);
            var serviceProvider = Substitute.For<IDesignerHost>();
            serviceProvider.RootComponentClassName.Returns(StringConstants.Tags);
            // Act
            var codeTypeDeclaration = new CodeTypeDeclaration("CodeGenerationHelperTest");
        }
    }
}
#endif

GlobalControllerTest.cs
-15
+16
/Tools/ToolsTest/OpcClient/GlobalControllerTest.cs
#if !VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.Linq;
using Neo.ApplicationFramework.Common.Collections;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.OpcClient;
using Neo.ApplicationFramework.Interfaces.StructuredType;
using Neo.ApplicationFramework.Interfaces.StructuredType.Services;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.OpcClient.Utilities;
using Neo.ApplicationFramework.Tools.StructuredTag.Model;
using Neo.ApplicationFramework.Tools.StructuredTags.Common;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
            NeoDesignerProperties.IsInDesignMode = true;
            IOpcClientServiceCF opcClientService = TestHelper.AddServiceStub<IOpcClientServiceCF>();
            opcClientService.Stub(x => x.Controllers).Return(new ExtendedBindingList<IDataSourceContainer>());
            opcClientService.Controllers.Returns(new ExtendedBindingList<IDataSourceContainer>());
            m_DataItemCountingService = TestHelper.CreateAndAddServiceStub<IDataItemCountingService>();
        public void DisposingGlobalControllerNoConnectedGlobalDataItemsDoesNotDecreasesDataItemCount()
        {
            using (new GlobalController())
                m_DataItemCountingService.Stub(x => x.ConnectedDataItems).Return(0);
                m_DataItemCountingService.ConnectedDataItems.Returns(0);
            m_DataItemCountingService.AssertWasCalled(x => x.RemoveConnectedDataItems(0), options => options.Repeat.Once());
            m_DataItemCountingService.Received(1).RemoveConnectedDataItems(0);
        }
        [Test]
        public void DisposingGlobalControllerWithOneConnectedGlobalDataItemDecreasesDataItemCount()
        {
            using (new GlobalController())
                m_DataItemCountingService.Stub(x => x.ConnectedDataItems).Return(1);
                m_DataItemCountingService.ConnectedDataItems.Returns(1);
            m_DataItemCountingService.AssertWasCalled(x => x.RemoveConnectedDataItems(1), options => options.Repeat.Once());
            m_DataItemCountingService.Received(1).RemoveConnectedDataItems(1);
        }
        [Test]
        public void DisposingGlobalControllerWithTwoConnectedGlobalDataItemDecreasesDataItemCountByTwo()
        {
            using (new GlobalController())
                m_DataItemCountingService.Stub(x => x.ConnectedDataItems).Return(2);
                m_DataItemCountingService.ConnectedDataItems.Returns(2);
            m_DataItemCountingService.AssertWasCalled(x => x.RemoveConnectedDataItems(2), options => options.Repeat.Once());
            m_DataItemCountingService.Received(1).RemoveConnectedDataItems(2);
        }
        [Test]
                //Needs to be removed to make it possible to set RunTime = true (needs to be false from beginning)
                TestHelper.RemoveService<IToolManager>();
                var toolManager = MockRepository.GenerateStub<IToolManager>();
                toolManager.Stub(x => x.Runtime).Return(true).Repeat.Any();
                var toolManager = Substitute.For<IToolManager>();
                toolManager.Runtime.Returns(true);
                TestHelper.AddService(toolManager);
                var startup = globalController as IStartup;
            struct1.InstanceMapping.GlobalDataItemMappings.Add(tag1InStruct1);
            struct1.InstanceMapping.GlobalDataItemMappings.Add(tag2InStruct1);
            var tagTraverser = MockRepository.GenerateStub<ITagTraverser>();
            var tagTraverser = Substitute.For<ITagTraverser>();
            TestHelper.AddService<ITagTraverser>(tagTraverser);
            tagTraverser
                .Stub(inv => inv.GetFlattenedDataItems(new ITag[0])).IgnoreArguments()
                .Return(new[]
                .GetFlattenedDataItems(Arg.Any<ITag[]>())
                .Returns(new[]
                {
                    new GlobalDataItem { Name = tag1InStruct1.Name },
                    new GlobalDataItem { Name = tag2InStruct1.Name }
        }
    }
}
#endif

GlobalDataItemTest.cs
-193
+143
/Tools/ToolsTest/OpcClient/GlobalDataItemTest.cs
Displayed content is truncated due to maximum viewable content limit.
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interop.DataSource;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Rhino.Mocks.Interfaces;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
            TestHelper.UseTestWindowThreadHelper = true;
            var toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(false);
            toolManager.Runtime.Returns(false);
            m_DataItemCountingService = TestHelper.CreateAndAddServiceStub<IDataItemCountingService>();
        }
        private IDataItem CreateDataItemWithController(string controllerName)
        {
            IDataSourceContainer controller = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controller = Substitute.For<IDataSourceContainer>();
            controller.Name = controllerName;
            IDataItem dataItem = MockRepository.GenerateStub<IDataItem>();
            IDataItem dataItem = Substitute.For<IDataItem>();
            dataItem.DataSourceContainer = controller;
            return dataItem;
            // Simulate a value change in data item.
            dataItem.Value = new VariantValue(10);
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Raise.EventWith(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Assert.IsTrue(wasRaised);
            Assert.AreEqual(new VariantValue(10), globalDataItem.Value);
        [Test]
        public void DataIsExchangedOnValueChangedWhenANoneTriggerIsUsed()
        {
            IDataSourceContainer controllerOne = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerOne = Substitute.For<IDataSourceContainer>();
            controllerOne.Name = "Controller1";
            IDataItem dataItemOneControllerOne = MockRepository.GenerateMock<IDataItem>();
            dataItemOneControllerOne.Expect(x => x.DataSourceContainer).Return(controllerOne).Repeat.Any();
            dataItemOneControllerOne.Expect(x => x.Value = null).IgnoreArguments().Repeat.Never();
            IDataItem dataItemOneControllerOne = Substitute.For<IDataItem>();
            dataItemOneControllerOne.DataSourceContainer.Returns(controllerOne);
            IDataSourceContainer controllerTwo = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerTwo = Substitute.For<IDataSourceContainer>();
            controllerTwo.Name = "Controller2";
            IDataItem dataItemOneControllerTwo = MockRepository.GenerateMock<IDataItem>();
            dataItemOneControllerTwo.Expect(x => x.DataSourceContainer).Return(controllerTwo).Repeat.Any();
            dataItemOneControllerTwo.Expect(x => x.Value = null).IgnoreArguments().Repeat.Once();
            IDataItem dataItemOneControllerTwo = Substitute.For<IDataItem>();
            dataItemOneControllerTwo.DataSourceContainer.Returns(controllerTwo);
            IGlobalDataItem globalDataItem = new GlobalDataItem();
            //ARRAYTAG
            // Simulate a value change in data item.
            VariantValue variantValue = new VariantValue(10);
            IEventRaiser eventRaiser = dataItemOneControllerOne.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItemOneControllerOne, new ValueChangedEventArgs(variantValue));
            Raise.EventWith(dataItemOneControllerOne, new ValueChangedEventArgs(variantValue));
            dataItemOneControllerOne.VerifyAllExpectations();
            dataItemOneControllerTwo.VerifyAllExpectations();
            dataItemOneControllerOne.DidNotReceive().Value = null;
            dataItemOneControllerTwo.Received(1).Value = null;
        }
        [Test]
        public void DataIsNotExchangedOnValueChangedWhenATriggerIsUsed()
        {
            IDataSourceContainer controllerOne = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerOne = Substitute.For<IDataSourceContainer>();
            controllerOne.Name = "Controller1";
            IDataItem dataItemOneControllerOne = MockRepository.GenerateMock<IDataItem>();
            dataItemOneControllerOne.Expect(x => x.DataSourceContainer).Return(controllerOne).Repeat.Any();
            dataItemOneControllerOne.Expect(x => x.Value = null).IgnoreArguments().Repeat.Never();
            IDataItem dataItemOneControllerOne = Substitute.For<IDataItem>();
            dataItemOneControllerOne.DataSourceContainer.Returns(controllerOne);
            IDataSourceContainer controllerTwo = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerTwo = Substitute.For<IDataSourceContainer>();
            controllerTwo.Name = "Controller2";
            IDataItem dataItemOneControllerTwo = MockRepository.GenerateMock<IDataItem>();
            dataItemOneControllerTwo.Expect(x => x.DataSourceContainer).Return(controllerTwo).Repeat.Any();
            dataItemOneControllerTwo.Expect(x => x.Value = null).IgnoreArguments().Repeat.Never();
            IDataItem dataItemOneControllerTwo = Substitute.For<IDataItem>();
            dataItemOneControllerTwo.DataSourceContainer.Returns(controllerTwo);
            IGlobalDataItem globalDataItem = new GlobalDataItem();
            //ARRAYTAG
            // Simulate a value change in data item.
            VariantValue variantValue = new VariantValue(10);
            IEventRaiser eventRaiser = dataItemOneControllerOne.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItemOneControllerOne, new ValueChangedEventArgs(variantValue));
            Raise.EventWith(dataItemOneControllerOne, new ValueChangedEventArgs(variantValue));
            dataItemOneControllerOne.VerifyAllExpectations();
            dataItemOneControllerTwo.VerifyAllExpectations();
            dataItemOneControllerOne.DidNotReceive().Value = null;
            dataItemOneControllerTwo.DidNotReceive().Value = null;
        }
        [Test]
            globalDataItem.BatchRead();
            dataItemOneControllerOne.AssertWasCalled(x => x.BatchRead());
            dataItemOneControllerTwo.AssertWasNotCalled(x => x.BatchRead());
            dataItemOneControllerThree.AssertWasCalled(x => x.BatchRead());
            dataItemOneControllerFour.AssertWasCalled(x => x.BatchRead());
            dataItemOneControllerOne.Received().BatchRead();
            dataItemOneControllerTwo.DidNotReceive().BatchRead();
            dataItemOneControllerThree.Received().BatchRead();
            dataItemOneControllerFour.Received().BatchRead();
        }
        [Test]
            globalDataItem.BatchWrite(10);
            dataItemOneControllerOne.AssertWasCalled(x => x.BatchWrite(10));
            dataItemOneControllerTwo.AssertWasCalled(x => x.BatchWrite(10));
            dataItemOneControllerThree.AssertWasCalled(x => x.BatchWrite(10));
            dataItemOneControllerOne.Received().BatchWrite(10);
            dataItemOneControllerTwo.Received().BatchWrite(10);
            dataItemOneControllerThree.Received().BatchWrite(10);
        }
        [Test]
            globalDataItem.BatchWriteForDataExchange(10);
            dataItemOneControllerOne.AssertWasNotCalled(x => x.BatchWrite(10));
            dataItemOneControllerTwo.AssertWasCalled(x => x.BatchWrite(10));
            dataItemOneControllerThree.AssertWasCalled(x => x.BatchWrite(10));
            dataItemOneControllerFour.AssertWasNotCalled(x => x.BatchWrite(10));
            dataItemOneControllerOne.DidNotReceive().BatchWrite(10);
            dataItemOneControllerTwo.Received().BatchWrite(10);
            dataItemOneControllerThree.Received().BatchWrite(10);
            dataItemOneControllerFour.DidNotReceive().BatchWrite(10);
        }
        [Test]
            // Simulate a value change in data item.
            dataItem.Value = new VariantValue(10);
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Raise.EventWith(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Assert.AreEqual(new VariantValue(10), globalDataItem.TriggerValue);
        }
            // Simulate a value change in data item.
            dataItem.Value = new VariantValue(10);
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Raise.EventWith(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Assert.AreEqual(new VariantValue(10), globalDataItem.Value);
            Assert.IsTrue(wasRaised);
            // Simulate a value change in data item.
            dataItem.Value = new VariantValue(10);
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Raise.EventWith(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Assert.AreEqual(new VariantValue(10), globalDataItem.Value);
            Assert.IsTrue(wasRaised);
            // Simulate a value change in data item.
            dataItem.Value = new VariantValue(10);
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Raise.EventWith(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Assert.AreEqual(new VariantValue(10), globalDataItem.Value);
            Assert.IsTrue(wasRaised);
            // Simulate a value change in underlying data item.
            dataItem.Value = new VariantValue(10);
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Raise.EventWith(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Assert.AreEqual(new VariantValue(0), globalDataItem.Value);
            Assert.IsFalse(wasRaised);
            // Simulate a value change in data item.
            dataItem.Value = new VariantValue(10);
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Raise.EventWith(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Assert.AreEqual(new VariantValue(0), globalDataItem.Value);
            Assert.IsFalse(wasRaised);
        [Test]
        public void UpdatingValueOnAnUnderlyingDataItemWithReadAccessWillOnlyUpdateValueInOtherUnderlyingDataItemsSetupForDataExchange()
        {
            IDataSourceContainer controllerOne = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerOne = Substitute.For<IDataSourceContainer>();
            controllerOne.Name = "Controller1";
            IDataItem dataItemOneControllerOne = MockRepository.GenerateMock<IDataItem>();
            dataItemOneControllerOne.Expect(x => x.DataSourceContainer).Return(controllerOne).Repeat.Any();
            IDataItem dataItemOneControllerOne = Substitute.For<IDataItem>();
            dataItemOneControllerOne.DataSourceContainer.Returns(controllerOne);
            // Value on dataitem, which raised the value change event, should not have its value set again.
            dataItemOneControllerOne.Expect(x => x.Value = null).IgnoreArguments().Repeat.Never();
            IDataSourceContainer controllerTwo = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerTwo = Substitute.For<IDataSourceContainer>();
            controllerTwo.Name = "Controller2";
            IDataItem dataItemOneControllerTwo = MockRepository.GenerateMock<IDataItem>();
            dataItemOneControllerTwo.Expect(x => x.DataSourceContainer).Return(controllerTwo).Repeat.Any();
            dataItemOneControllerTwo.Expect(x => x.Value = null).IgnoreArguments().Repeat.Once();
            IDataItem dataItemOneControllerTwo = Substitute.For<IDataItem>();
            dataItemOneControllerTwo.DataSourceContainer.Returns(controllerTwo);
            IDataSourceContainer controllerThree = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerThree = Substitute.For<IDataSourceContainer>();
            controllerThree.Name = "Controller3";
            IDataItem dataItemOneControllerThree = MockRepository.GenerateMock<IDataItem>();
            dataItemOneControllerThree.Expect(x => x.DataSourceContainer).Return(controllerThree).Repeat.Any();
            dataItemOneControllerThree.Expect(x => x.Value = null).IgnoreArguments().Repeat.Never();
            IDataItem dataItemOneControllerThree = Substitute.For<IDataItem>();
            dataItemOneControllerThree.DataSourceContainer.Returns(controllerThree);
            IDataSourceContainer controllerFour = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerFour = Substitute.For<IDataSourceContainer>();
            controllerFour.Name = "Controller4";
            IDataItem dataItemOneControllerFour = MockRepository.GenerateMock<IDataItem>();
            dataItemOneControllerFour.Expect(x => x.DataSourceContainer).Return(controllerFour).Repeat.Any();
            dataItemOneControllerFour.Expect(x => x.Value = null).IgnoreArguments().Repeat.Never();
            IDataItem dataItemOneControllerFour = Substitute.For<IDataItem>();
            dataItemOneControllerFour.DataSourceContainer.Returns(controllerFour);
            IDataSourceContainer controllerFive = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerFive = Substitute.For<IDataSourceContainer>();
            controllerFive.Name = "Controller5";
            IDataItem dataItemOneControllerFive = MockRepository.GenerateMock<IDataItem>();
            dataItemOneControllerFive.Expect(x => x.DataSourceContainer).Return(controllerFive).Repeat.Any();
            dataItemOneControllerFive.Expect(x => x.Value = null).IgnoreArguments().Repeat.Once();
            IDataItem dataItemOneControllerFive = Substitute.For<IDataItem>();
            dataItemOneControllerFive.DataSourceContainer.Returns(controllerFive);
            IGlobalDataItem globalDataItem = new GlobalDataItem();
            globalDataItem.DataItems.Add(dataItemOneControllerOne);
            // Simulate a value change in data item.
            VariantValue variantValue = new VariantValue(10);
            IEventRaiser eventRaiser = dataItemOneControllerOne.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItemOneControllerOne, new ValueChangedEventArgs(variantValue));
            Raise.EventWith(dataItemOneControllerOne, new ValueChangedEventArgs(variantValue));
            dataItemOneControllerOne.VerifyAllExpectations();
            dataItemOneControllerTwo.VerifyAllExpectations();
            dataItemOneControllerThree.VerifyAllExpectations();
            dataItemOneControllerFour.VerifyAllExpectations();
            dataItemOneControllerFive.VerifyAllExpectations();
            dataItemOneControllerOne.DidNotReceive().Value = null;
            dataItemOneControllerTwo.Received(1).Value = null;
            dataItemOneControllerThree.DidNotReceive().Value = null;
            dataItemOneControllerFour.DidNotReceive().Value = null;
            dataItemOneControllerFive.Received(1).Value = null;
        }
        [Test]
        public void UpdatingValueOnAnUnderlyingDataItemWithNoneAccessWillNotUpdateValueInOtherUnderlyingDataItemsSetupForDataExchange()
        {
            IDataSourceContainer controllerOne = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerOne = Substitute.For<IDataSourceContainer>();
            controllerOne.Name = "Controller1";
            IDataItem dataItemOneControllerOne = MockRepository.GenerateMock<IDataItem>();
            dataItemOneControllerOne.Expect(x => x.DataSourceContainer).Return(controllerOne).Repeat.Any();
            dataItemOneControllerOne.Expect(x => x.Value = null).IgnoreArguments().Repeat.Never();
            IDataItem dataItemOneControllerOne = Substitute.For<IDataItem>();
            dataItemOneControllerOne.DataSourceContainer.Returns(controllerOne);
            IDataSourceContainer controllerTwo = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerTwo = Substitute.For<IDataSourceContainer>();
            controllerTwo.Name = "Controller2";
            IDataItem dataItemOneControllerTwo = MockRepository.GenerateMock<IDataItem>();
            dataItemOneControllerTwo.Expect(x => x.DataSourceContainer).Return(controllerTwo).Repeat.Any();
            dataItemOneControllerTwo.Expect(x => x.Value = null).IgnoreArguments().Repeat.Never();
            IDataItem dataItemOneControllerTwo = Substitute.For<IDataItem>();
            dataItemOneControllerTwo.DataSourceContainer.Returns(controllerTwo);
            IDataSourceContainer controllerThree = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer controllerThree = Substitute.For<IDataSourceContainer>();
            controllerThree.Name = "Controller3";
            IDataItem dataItemOneControllerThree = MockRepository.GenerateMock<IDataItem>();
            dataItemOneControllerThree.Expect(x => x.DataSourceContainer).Return(controllerThree).Repeat.Any();
            dataItemOneControllerThree.Expect(x => x.Value = null).IgnoreArguments().Repeat.Never();
            IDataItem dataItemOneControllerThree = Substitute.For<IDataItem>();
            dataItemOneControllerThree.DataSourceContainer.Returns(controllerThree);
            IGlobalDataItem globalDataItem = new GlobalDataItem();
            globalDataItem.DataItems.Add(dataItemOneControllerOne);
            // Simulate a value change in data item.
            VariantValue variantValue = new VariantValue(10);
            IEventRaiser eventRaiser = dataItemOneControllerOne.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItemOneControllerThree, new ValueChangedEventArgs(variantValue));
            Raise.EventWith(dataItemOneControllerThree, new ValueChangedEventArgs(variantValue));
            dataItemOneControllerOne.VerifyAllExpectations();
            dataItemOneControllerTwo.VerifyAllExpectations();
            dataItemOneControllerThree.VerifyAllExpectations();
            dataItemOneControllerOne.DidNotReceive().Value = null;
            dataItemOneControllerTwo.DidNotReceive().Value = null;
            dataItemOneControllerThree.DidNotReceive().Value = null;
        }
        [Test]
            // Simulate a value change in data item.
            VariantValue variantValue = new VariantValue(10);
            IEventRaiser eventRaiser = dataItemOneControllerOne.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItemOneControllerOne, new ValueChangedEventArgs(variantValue));
            Raise.EventWith(dataItemOneControllerOne, new ValueChangedEventArgs(variantValue));
            Assert.AreEqual(new VariantValue(10), dataItemOneControllerTwo.Value);
        }
            // Simulate a value change in data item.
            VariantValue variantValue = new VariantValue(10);
            IEventRaiser eventRaiser = dataItemOneControllerOne.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItemOneControllerOne, new ValueChangedEventArgs(variantValue));
            Raise.EventWith(dataItemOneControllerOne, new ValueChangedEventArgs(variantValue));
            Assert.AreEqual(new VariantValue(10), dataItemOneControllerTwo.Value);
        }
            globalDataItem.AccessDenied += (sender, eventArgs) => wasRaised = true;
            // Simulate a value change in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueChange += null);
            eventRaiser.Raise(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Raise.EventWith(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Assert.AreEqual(new VariantValue(0), globalDataItem.Value);
            Assert.IsFalse(wasRaised);
            globalDataItem.ValueOn += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueOn += null);
            eventRaiser.Raise(dataItem, EventArgs.Empty);
            Raise.Event();
            Assert.IsTrue(wasRaised);
        }
            globalDataItem.ValueOn += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueOn += null);
            eventRaiser.Raise(dataItem, EventArgs.Empty);
            Raise.Event();
            Assert.IsTrue(wasRaised);
        }
            globalDataItem.ValueOn += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueOn += null);
            eventRaiser.Raise(dataItem, EventArgs.Empty);
           Raise.Event();
            Assert.IsTrue(wasRaised);
        }
            globalDataItem.ValueOn += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueOn += null);
            eventRaiser.Raise(dataItem, EventArgs.Empty);
            Raise.Event();
            Assert.IsFalse(wasRaised);
        }
            globalDataItem.ValueOn += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueOn += null);
            eventRaiser.Raise(dataItem, EventArgs.Empty);
            Raise.Event();
            Assert.IsFalse(wasRaised);
        }
            globalDataItem.ValueOff += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueOff += null);
            eventRaiser.Raise(dataItem, EventArgs.Empty);
            Raise.Event();
            Assert.IsTrue(wasRaised);
        }
            globalDataItem.ValueOff += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueOff += null);
            eventRaiser.Raise(dataItem, EventArgs.Empty);
            Raise.Event();
            Assert.IsTrue(wasRaised);
        }
            globalDataItem.ValueOff += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueOff += null);
            eventRaiser.Raise(dataItem, EventArgs.Empty);
            Raise.Event();
            Assert.IsTrue(wasRaised);
        }
            globalDataItem.ValueOff += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueOff += null);
            eventRaiser.Raise(dataItem, EventArgs.Empty);
            Raise.Event();
            Assert.IsFalse(wasRaised);
        }
            globalDataItem.ValueOff += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueOff += null);
            eventRaiser.Raise(dataItem, EventArgs.Empty);
            Raise.Event();
            Assert.IsFalse(wasRaised);
        }
            globalDataItem.ValueChangeOrError += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueChangeOrError += null);
            eventRaiser.Raise(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Raise.EventWith(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Assert.IsTrue(wasRaised);
        }
            globalDataItem.ValueChangeOrError += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueChangeOrError += null);
            eventRaiser.Raise(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Raise.EventWith(dataItem, new ValueChangedEventArgs(new VariantValue(10)));
            Assert.IsTrue(wasRaised);
        }
            globalDataItem.ValueChangeOrError += (sender, eventArgs) => wasRaised = true;
            // Simulate a value on in data item.
            IEventRaiser eventRaiser = dataItem.GetEventRaiser(x => x.ValueChangeOrError += null);
            eventRaiser.Raise(dataItem, new ValueChangedEventArgs(new VariantValue(10)));

LightweightTagCreatorTest.cs
-16
+18
/Tools/ToolsTest/OpcClient/LightweightTagCreatorTest.cs
#if !VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.Linq;
using Neo.ApplicationFramework.Interfaces.Tag;
using Neo.ApplicationFramework.Interop.DataSource;
using Neo.ApplicationFramework.Tools.StructuredTag.CodeDOM;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
        [OneTimeSetUp]
        public void TestFixtureSetUp()
        {
            var crossReferenceItem = MockRepository.GenerateStub<ICrossReferenceItem>();
            crossReferenceItem.Stub(x => x.SourceFullName).Return(TagUsedInScriptFullName);
            var crossReferenceItem = Substitute.For<ICrossReferenceItem>();
            crossReferenceItem.SourceFullName.Returns(TagUsedInScriptFullName);
            var crossReferenceQueryService = MockRepository.GenerateStub<ICrossReferenceQueryService>();
            crossReferenceQueryService.Stub(x => x.GetReferences<ICrossReferenceItem>(CrossReferenceTypes.Script.ToString())).Return(new[] { crossReferenceItem });
            var crossReferenceQueryService = Substitute.For<ICrossReferenceQueryService>();
            crossReferenceQueryService.GetReferences<ICrossReferenceItem>(CrossReferenceTypes.Script.ToString()).Returns(new[] { crossReferenceItem });
            m_CrossReferenceQueryService = new Lazy<ICrossReferenceQueryService>(() => crossReferenceQueryService);
        public void PropertiesCopiedCorrectly()
        {
            // ARRANGE
            var dataItem = MockRepository.GenerateStub<IDataItem>();
            dataItem.Stub(x => x.FullName).Return("Controller1.DataItem1");
            var dataItem = Substitute.For<IDataItem>();
            dataItem.FullName.Returns("Controller1.DataItem1");
            var globalDataItem = GetGlobalDataItemStub();
            globalDataItem.DataItems.Add(dataItem);
            globalDataItem.AlwaysActive = true;
            globalDataItem.Description = "description";
            globalDataItem.GlobalDataType = BEDATATYPE.DT_DEFAULT;
            globalDataItem.Stub(x => x.GlobalDataTypeOrDataTypeIfDefault).Return(BEDATATYPE.DT_INTEGER4);
            globalDataItem.GlobalDataTypeOrDataTypeIfDefault.Returns(BEDATATYPE.DT_INTEGER4);
            // ACT
            LightweightTag lightweightTag = m_LightweightTagCreator.CreateLightweightTag(globalDataItem);
        {
            // ARRANGE
            var globalDataItem = GetGlobalDataItemStub();
            globalDataItem.DataItems.Add(MockRepository.GenerateStub<IDataItem>());
            globalDataItem.DataItems.Add(MockRepository.GenerateStub<IDataItem>());
            globalDataItem.DataItems.Add(Substitute.For<IDataItem>());
            globalDataItem.DataItems.Add(Substitute.For<IDataItem>());
            // ACT
            LightweightTag lightweightTag = m_LightweightTagCreator.CreateLightweightTag(globalDataItem);
        {
            // ARRANGE
            var globalDataItem = GetGlobalDataItemStub();
            globalDataItem.Stub(x => x.IsArrayTag).Return(true);
            globalDataItem.IsArrayTag.Returns(true);
            // ACT
            LightweightTag lightweightTag = m_LightweightTagCreator.CreateLightweightTag(globalDataItem);
        public void SystemTagIsNotQualified()
        {
            // ARRANGE
            var systemTag = MockRepository.GenerateStub<ISystemDataItem>();
            var systemTag = Substitute.For<ISystemDataItem>();
            // ACT
            LightweightTag lightweightTag = m_LightweightTagCreator.CreateLightweightTag(systemTag);
            var globalDataItem = GetGlobalDataItemStub();
            var accessRights = new Dictionary<string, AccessRights>();
            accessRights.Add("Controller1", AccessRights.Read);
            globalDataItem.Stub(x => x.AccessRights).Return(accessRights);
            globalDataItem.AccessRights.Returns(accessRights);
            // ACT
            LightweightTag lightweightTag = m_LightweightTagCreator.CreateLightweightTag(globalDataItem);
        private IGlobalDataItem GetGlobalDataItemStub()
        {
            var globalDataItem = MockRepository.GenerateStub<IGlobalDataItem>();
            globalDataItem.Stub(x => x.DataItems).Return(new List<IDataItem>());
            var globalDataItem = Substitute.For<IGlobalDataItem>();
            globalDataItem.DataItems.Returns(new List<IDataItem>());
            globalDataItem.Gain = 1.0;
            globalDataItem.AccessRight = AccessRights.ReadWrite;
            globalDataItem.ReadExpression = string.Empty;
            globalDataItem.WriteExpression = string.Empty;
            var pollGroup = MockRepository.GenerateStub<IPollGroup>();
            var pollGroup = Substitute.For<IPollGroup>();
            pollGroup.Interval = Interval;
            globalDataItem.PollGroup = pollGroup;
        }
    }
}
#endif

PollGroupTest.cs
-10
+12
/Tools/ToolsTest/OpcClient/PollGroupTest.cs
#if !VNEXT_TARGET
using System;
using Core.Api.Feature;
using Core.Api.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.Datalogger.Features;
using Neo.ApplicationFramework.Tools.Storage;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
        private ILazy<IFastLoggingFeatureLogicService> GetFastLoggingFeatureLogicServiceWithNormalMinInterval()
        {
            var fastLoggingFeatureLogicServiceStub = MockRepository.GenerateStub<IFastLoggingFeatureLogicService>();
            fastLoggingFeatureLogicServiceStub.Stub(x => x.GetPollGroupMinInterval()).Return(PollGroup.NormalMinInterval);
            var fastLoggingFeatureLogicServiceStub = Substitute.For<IFastLoggingFeatureLogicService>();
            fastLoggingFeatureLogicServiceStub.GetPollGroupMinInterval().Returns(PollGroup.NormalMinInterval);
            return fastLoggingFeatureLogicServiceStub.ToILazy();
        }
        private ILazy<IFastLoggingFeatureLogicService> GetFastLoggingFeatureLogicService(string panelName)
        {
            var featureSecurityService = MockRepository.GenerateStub<IFeatureSecurityService>();
            featureSecurityService.Stub(x => x.IsActivated<FastLoggingFeatureCF>()).Return(true);
            var featureSecurityService = Substitute.For<IFeatureSecurityService>();
            featureSecurityService.IsActivated<FastLoggingFeatureCF>().Returns(true);
            var project = MockRepository.GenerateStub<IProject>();
            var project = Substitute.For<IProject>();
            project.StorageProviderSettings = new LocallyHostedProjectStorageProviderSettings { StorageLocationIsSdCard = true }; ;
            project.Terminal = MockRepository.GenerateStub<ITerminal>();
            project.Terminal.Stub(x => x.Name).Return(panelName);
            project.Terminal = Substitute.For<ITerminal>();
            project.Terminal.Name.Returns(panelName);
            var projectManager = MockRepository.GenerateStub<IProjectManager>();
            projectManager.Stub(x => x.IsProjectOpen).Return(true);
            var projectManager = Substitute.For<IProjectManager>();
            projectManager.IsProjectOpen.Returns(true);
            projectManager.Project = project;
            var fastLoggingFeatureLogicService = new FastLoggingFeatureLogicServiceIde(featureSecurityService.ToILazy(), projectManager.ToILazy()) as IFastLoggingFeatureLogicService;
        }
    }
}
#endif

StructuredTagsControlViewModelTest.cs
-80
+56
/Tools/ToolsTest/OpcClient/StructuredTagsControlViewModelTest.cs
#if !VNEXT_TARGET
using System;
using System.Collections.ObjectModel;
using System.Linq;
using Neo.ApplicationFramework.Tools.OpcClient.Controls;
using Neo.ApplicationFramework.Tools.StructuredTag.Facades.StructuredTagsViewer;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
        [SetUp]
        public void SetUp()
        {
            m_MessageBoxService = MockRepository.GenerateMock<IMessageBoxServiceIde>();
            m_StructuredTagsViewerFacade = MockRepository.GenerateMock<IStructuredTagsViewerFacade>();
            m_NameService = MockRepository.GenerateMock<INameService>().ToILazy();
            m_MessageBoxService = Substitute.For<IMessageBoxServiceIde>();
            m_StructuredTagsViewerFacade = Substitute.For<IStructuredTagsViewerFacade>();
            m_NameService = Substitute.For<INameService>().ToILazy();
        }
        [Test]
        public void StructuredTags()
        {
            // ARRANGE
            var structuredTag = MockRepository.GenerateStub<ITagEntity>();
            var structuredTag = Substitute.For<ITagEntity>();
            structuredTag.Name = "Some name";
            m_StructuredTagsViewerFacade
                .Expect(stvf => stvf.GetTags())
                .Return(new[] { structuredTag });
            m_StructuredTagsViewerFacade.GetTags().Returns(new[] { structuredTag });
            var viewModel = new StructuredTagsControlViewModel(m_MessageBoxService, m_StructuredTagsViewerFacade, m_NameService);
            // ASSERT
            Assert.That(structuredTags.Count, Is.EqualTo(1));
            Assert.That(structuredTags.ElementAt(0).Name, Is.EqualTo("Some name"));
            m_StructuredTagsViewerFacade.Received().GetTags();
        }
        [Test]
        public void StructuredTagsUpdated()
        {
            // ARRANGE
            var originalStructuredTag = MockRepository.GenerateStub<ITagEntity>();
            var originalStructuredTag = Substitute.For<ITagEntity>();
            originalStructuredTag.Name = "Original tag";
            var updatedStructuredTag = MockRepository.GenerateStub<ITagEntity>();
            var updatedStructuredTag = Substitute.For<ITagEntity>();
            updatedStructuredTag.Name = "Updated tag";
            // Return original the first time method is called
            m_StructuredTagsViewerFacade
                .Expect(stvf => stvf.GetTags())
                .Return(new[] { originalStructuredTag })
                .Repeat.Once();
            m_StructuredTagsViewerFacade.GetTags().Returns(new[] { originalStructuredTag }, new[] { updatedStructuredTag });
            // Return updated the second time method is called
            m_StructuredTagsViewerFacade
                .Expect(stvf => stvf.GetTags())
                .Return(new[] { updatedStructuredTag })
                .Repeat.Once(); 
            var viewModel = new StructuredTagsControlViewModel(m_MessageBoxService, m_StructuredTagsViewerFacade, m_NameService);
            // ACT
            m_StructuredTagsViewerFacade.Raise(ss => ss.TagsChanged += null, m_StructuredTagsViewerFacade, EventArgs.Empty);
            Raise.Event();
            ObservableCollection<StructuredTagViewModel> structuredTags = viewModel.StructuredTags;
            // ASSERT
            Assert.That(structuredTags.Count, Is.EqualTo(1));
            Assert.That(structuredTags.ElementAt(0).Name, Is.EqualTo("Updated tag"));
            m_StructuredTagsViewerFacade.VerifyAllExpectations();
            m_StructuredTagsViewerFacade.Received(2).GetTags();
        }
        [Test]
        public void CanNotRemove()
        {
            // ARRANGE
            var structuredTag = MockRepository.GenerateStub<ITagEntity>();
            var structuredTag = Substitute.For<ITagEntity>();
            m_StructuredTagsViewerFacade
                .Expect(stvf => stvf.GetTags())
                .Return(new[] { structuredTag });
            m_StructuredTagsViewerFacade.GetTags().Returns(new[] { structuredTag });
            var viewModel = new StructuredTagsControlViewModel(m_MessageBoxService, m_StructuredTagsViewerFacade, m_NameService);
            viewModel.SelectedStructuredTag = null;
        public void CanRemove()
        {
            // ARRANGE
            var structuredTag = MockRepository.GenerateStub<ITagEntity>();
            var structuredTag = Substitute.For<ITagEntity>();
            m_StructuredTagsViewerFacade
                .Stub(stvf => stvf.GetTags())
                .Return(new[] { structuredTag });
            m_StructuredTagsViewerFacade.GetTags().Returns(new[] { structuredTag });
            var viewModel = new StructuredTagsControlViewModel(m_MessageBoxService, m_StructuredTagsViewerFacade, m_NameService);
            viewModel.SelectedStructuredTag = viewModel.StructuredTags.First();
        public void Remove_UserAccepted()
        {
            // ARRANGE
            var structuredTag = MockRepository.GenerateStub<ITagEntity>();
            var structuredTag = Substitute.For<ITagEntity>();
            structuredTag.Name = "Tag";
            m_StructuredTagsViewerFacade
                .Stub(stvf => stvf.GetTags())
                .Return(new[] { structuredTag });
            m_StructuredTagsViewerFacade.GetTags().Returns(new[] { structuredTag });
            m_MessageBoxService
                .Expect(mbs => mbs.Show(
                    Arg<string>.Is.Anything,
                    Arg<string>.Is.Anything,
                    Arg<MessageBoxButtons>.Is.Equal(MessageBoxButtons.YesNo),
                    Arg<MessageBoxIcon>.Is.Equal(MessageBoxIcon.Warning),
                    Arg<DialogResult>.Is.Anything))
                .Return(DialogResult.Yes);
            m_StructuredTagsViewerFacade
                .Expect(stvf => stvf.DeleteTag("Tag"))
                .Repeat.Once();
            m_MessageBoxService.Show(
                    Arg.Any<string>(),
                    Arg.Any<string>(),
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Warning,
                    Arg.Any<DialogResult>())
                .Returns(DialogResult.Yes);
            var viewModel = new StructuredTagsControlViewModel(m_MessageBoxService, m_StructuredTagsViewerFacade, m_NameService);
            viewModel.SelectedStructuredTag = viewModel.StructuredTags.First();
            viewModel.RemoveCommand.Execute(null);
            // ASSERT
            m_MessageBoxService.VerifyAllExpectations();
            m_StructuredTagsViewerFacade.VerifyAllExpectations();
            m_StructuredTagsViewerFacade.Received(1).DeleteTag("Tag");
            m_MessageBoxService.Received().Show(
                    Arg.Any<string>(),
                    Arg.Any<string>(),
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Warning,
                    Arg.Any<DialogResult>());
        }
        [Test]
        public void Remove_UserDeclined()
        {
            // ARRANGE
            var structuredTag = MockRepository.GenerateStub<ITagEntity>();
            var structuredTag = Substitute.For<ITagEntity>();
            structuredTag.Name = "Tag";
            m_StructuredTagsViewerFacade
                .Stub(stvf => stvf.GetTags())
                .Return(new[] { structuredTag });
            m_MessageBoxService
                .Expect(mbs => mbs.Show(
                    Arg<string>.Is.Anything,
                    Arg<string>.Is.Anything,
                    Arg<MessageBoxButtons>.Is.Equal(MessageBoxButtons.YesNo),
                    Arg<MessageBoxIcon>.Is.Anything,
                    Arg<DialogResult>.Is.Anything))
                .Return(DialogResult.No);
            m_StructuredTagsViewerFacade.GetTags().Returns(new[] { structuredTag });
            m_StructuredTagsViewerFacade
                .Expect(stvf => stvf.DeleteTag("Tag"))
                .Repeat.Never();
            m_MessageBoxService.Show(
                    Arg.Any<string>(),
                    Arg.Any<string>(),
                    MessageBoxButtons.YesNo,
                    Arg.Any<MessageBoxIcon>(),
                    Arg.Any<DialogResult>())
                .Returns(DialogResult.No);
            var viewModel = new StructuredTagsControlViewModel(m_MessageBoxService, m_StructuredTagsViewerFacade, m_NameService);
            viewModel.SelectedStructuredTag = viewModel.StructuredTags.First();
            viewModel.RemoveCommand.Execute(null);
            // ASSERT
            m_MessageBoxService.VerifyAllExpectations();
            m_StructuredTagsViewerFacade.VerifyAllExpectations();
            m_MessageBoxService.Received().Show(
                    Arg.Any<string>(),
                    Arg.Any<string>(),
                    MessageBoxButtons.YesNo,
                    Arg.Any<MessageBoxIcon>(),
                    Arg.Any<DialogResult>());
            m_StructuredTagsViewerFacade.DidNotReceive().DeleteTag("Tag");
        }
        [Test]
        public void Dispose()
        {
            // ARRANGE
            var originalStructuredTag = MockRepository.GenerateStub<ITagEntity>();
            var originalStructuredTag = Substitute.For<ITagEntity>();
            originalStructuredTag.Name = "Original tag";
            var updatedStructuredTag = MockRepository.GenerateStub<ITagEntity>();
            var updatedStructuredTag = Substitute.For<ITagEntity>();
            updatedStructuredTag.Name = "Updated tag";
            // Return original the first time method is called
            m_StructuredTagsViewerFacade
                .Expect(stvf => stvf.GetTags())
                .Return(new[] { originalStructuredTag })
                .Repeat.Once();
            // Return updated the second time method is called
            m_StructuredTagsViewerFacade
                .Expect(stvf => stvf.GetTags())
                .Return(new[] { updatedStructuredTag });
            m_StructuredTagsViewerFacade.GetTags().Returns(new[] { originalStructuredTag }, new[] { updatedStructuredTag });
            var viewModel = new StructuredTagsControlViewModel(m_MessageBoxService, m_StructuredTagsViewerFacade, m_NameService);
            viewModel.Dispose();
            // ACT
            m_StructuredTagsViewerFacade.Raise(ss => ss.TagsChanged += null, m_StructuredTagsViewerFacade, EventArgs.Empty);
            Raise.Event();
            ObservableCollection<StructuredTagViewModel> structuredTags = viewModel.StructuredTags;
            // ASSERT
            Assert.That(structuredTags.Count, Is.EqualTo(1));
            Assert.That(structuredTags.ElementAt(0).Name, Is.EqualTo("Original tag"));
            m_StructuredTagsViewerFacade.Received(2).GetTags();
        }
    }
}
#endif

StructuredTagViewModelTest.cs
-22
+14
/Tools/ToolsTest/OpcClient/StructuredTagViewModelTest.cs
#if !VNEXT_TARGET
using System.Collections.ObjectModel;
using System.Linq;
using Neo.ApplicationFramework.Tools.OpcClient.Controls;
using Neo.ApplicationFramework.Tools.StructuredTag.Facades.StructuredTagsViewer;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
        public void Name()
        {
            // ARRANGE
            var structuredTag = MockRepository.GenerateMock<ITagEntity>();
            var structuredTag = Substitute.For<ITagEntity>();
            structuredTag
                .Expect(st => st.Name)
                .Return("Some name");
            structuredTag.Name.Returns("Some name");
            var viewModel = new StructuredTagViewModel(structuredTag);
            // ASSERT
            Assert.That(name, Is.EqualTo("Some name"));
            structuredTag.VerifyAllExpectations();
        }
        [Test]
        public void Children()
        {
            // ARRANGE
            var structuredTag = MockRepository.GenerateStub<ITagEntity>();
            var structuredChildTag1 = MockRepository.GenerateStub<ITagEntity>();
            var structuredChildTag11 = MockRepository.GenerateStub<ITagEntity>();
            var structuredChildTag12 = MockRepository.GenerateStub<ITagEntity>();
            var structuredTag = Substitute.For<ITagEntity>();
            var structuredChildTag1 = Substitute.For<ITagEntity>();
            var structuredChildTag11 = Substitute.For<ITagEntity>();
            var structuredChildTag12 = Substitute.For<ITagEntity>();
            // Setup names
            structuredTag.Name = "Root";
            structuredChildTag12.Name = "Child 1.2";
            // Setup relationships
            structuredTag
                .Stub(st => st.Children)
                .Return(new[] { structuredChildTag1 });
            structuredTag.Children.Returns(new[] { structuredChildTag1 });
            structuredChildTag1
                .Stub(sct => sct.Children)
                .Return(new[] { structuredChildTag11, structuredChildTag12 });
            structuredChildTag1.Children.Returns(new[] { structuredChildTag11, structuredChildTag12 });
            structuredChildTag11
                .Stub(sct => sct.Children)
                .Return(Enumerable.Empty<ITagEntity>());
            structuredChildTag11.Children.Returns(Enumerable.Empty<ITagEntity>());
            structuredChildTag12
                .Stub(sct => sct.Children)
                .Return(Enumerable.Empty<ITagEntity>());
            structuredChildTag12.Children.Returns(Enumerable.Empty<ITagEntity>());
            var viewModel = new StructuredTagViewModel(structuredTag);
        }
    }
}
#endif

StructuredTypesControlViewModelTest.cs
-60
+27
/Tools/ToolsTest/OpcClient/StructuredTypesControlViewModelTest.cs
using System;
#if !VNEXT_TARGET
using System.Collections.ObjectModel;
using System.Linq;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.OpcClient.Controls;
using Neo.ApplicationFramework.Tools.StructuredTag.Facades.StructuredTypesViewer;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
        [SetUp]
        public void SetUp()
        {
            m_StructuredTypesViewerFacade = MockRepository.GenerateMock<IStructuredTypesViewerFacade>();
            m_StructuredTypesViewerFacade = Substitute.For<IStructuredTypesViewerFacade>();
        }
        [Test]
        public void TestHasNoTypes()
        {
            m_StructuredTypesViewerFacade.Expect(inv => inv.GetTypes()).Repeat.Once().Return(new ITypeEntity[0]);
            m_StructuredTypesViewerFacade.GetTypes().Returns(new ITypeEntity[0]);
            var viewModel = new StructuredTypesControlViewModel(m_StructuredTypesViewerFacade);
            Assert.IsFalse(viewModel.HasTypes);
            m_StructuredTypesViewerFacade.VerifyAllExpectations();
            m_StructuredTypesViewerFacade.Received(1).GetTypes();
        }
        [Test]
        public void TestHasTypes()
        {
            ITypeEntity entity = MockRepository.GenerateStub<ITypeEntity>();
            ITypeEntity entity = Substitute.For<ITypeEntity>();
            entity.Name = TypeName;
            m_StructuredTypesViewerFacade.Expect(inv => inv.GetTypes()).Repeat.Once().Return(new[] {entity});
            m_StructuredTypesViewerFacade.GetTypes().Returns(new[] { entity });
            var viewModel = new StructuredTypesControlViewModel(m_StructuredTypesViewerFacade);
            Assert.IsTrue(viewModel.HasTypes);
            m_StructuredTypesViewerFacade.VerifyAllExpectations();
            m_StructuredTypesViewerFacade.Received(1).GetTypes();
        }
        [Test]
        public void TestStructuredTags()
        {
            ITypeEntity entity = MockRepository.GenerateMock<ITypeEntity>();
            ITypeEntity entity = Substitute.For<ITypeEntity>();
            entity.Name = TypeName;
            entity.Expect(inv => inv.UniqueIdentifier).Repeat.Twice().Return("uniqueid");
            entity.Expect(inv => inv.iXType)
                  .Repeat.Twice()
                  .Return(string.Concat(StringConstants.NeoApplicationFrameworkGenerated, ".", TypeName));
            m_StructuredTypesViewerFacade.Expect(inv => inv.GetTypes()).Repeat.Once().Return(new[] {entity});
            entity.UniqueIdentifier.Returns("uniqueid");
            entity.iXType.Returns(string.Concat(StringConstants.NeoApplicationFrameworkGenerated, ".", TypeName));
            m_StructuredTypesViewerFacade.GetTypes().Returns(new[] { entity });
            var viewModel = new StructuredTypesControlViewModel(m_StructuredTypesViewerFacade);
            Assert.IsTrue(viewModel.StructuredTypes.Count == 1);
            Assert.IsTrue(viewModel.StructuredTypes[0].Name == entity.Name);
            Assert.IsTrue(viewModel.StructuredTypes[0].UniqueIdentifier == entity.UniqueIdentifier);
            Assert.IsTrue(viewModel.StructuredTypes[0].iXType == entity.iXType);
            entity.VerifyAllExpectations();
            m_StructuredTypesViewerFacade.VerifyAllExpectations();
            m_StructuredTypesViewerFacade.Received(2).GetTypes();
        }
        public void StructuredTypesUpdated()
        {
            // ARRANGE
            var originalStructuredType = MockRepository.GenerateStub<ITypeEntity>();
            var originalStructuredType = Substitute.For<ITypeEntity>();
            originalStructuredType.Name = "OriginalType";
            var updatedStructuredType = MockRepository.GenerateStub<ITypeEntity>();
            var updatedStructuredType = Substitute.For<ITypeEntity>();
            updatedStructuredType.Name = "UpdatedType";
            // Return original the first time method is called
            m_StructuredTypesViewerFacade
                .Expect(stvf => stvf.GetTypes())
                .Return(new[] {originalStructuredType})
                .Repeat.Once();
            m_StructuredTypesViewerFacade.GetTypes().Returns(new[] { originalStructuredType }, new[] { updatedStructuredType });
            // Return updated the second time method is called
            m_StructuredTypesViewerFacade
                .Expect(stvf => stvf.GetTypes())
                .Return(new[] {updatedStructuredType})
                .Repeat.Once();
            var viewModel = new StructuredTypesControlViewModel(m_StructuredTypesViewerFacade);
            var firstResponseRelevantOnlyForVerifyingExpectations = viewModel.StructuredTypes;
            Assert.IsTrue(1 ==firstResponseRelevantOnlyForVerifyingExpectations.Count); // only do this in order to remove warning from row above
            // ACT
            m_StructuredTypesViewerFacade.Raise(
                ss => ss.TypesChanged += null, m_StructuredTypesViewerFacade, EventArgs.Empty
            );
            Raise.Event();
            ObservableCollection<StructuredTypeViewModel> structuredTags = viewModel.StructuredTypes;
            // ASSERT
            Assert.That(structuredTags.Count, Is.EqualTo(1));
            Assert.That(structuredTags.ElementAt(0).Name, Is.EqualTo("UpdatedType"));
            m_StructuredTypesViewerFacade.VerifyAllExpectations();
            m_StructuredTypesViewerFacade.Received(2).GetTypes();
        }
        [Test]
        public void CanNotRemove()
        {
            // ARRANGE
            var structuredType = MockRepository.GenerateStub<ITypeEntity>();
            var structuredType = Substitute.For<ITypeEntity>();
            m_StructuredTypesViewerFacade
                .Expect(stvf => stvf.GetTypes())
                .Return(new[] {structuredType});
            m_StructuredTypesViewerFacade.GetTypes().Returns(new[] {structuredType});
            var viewModel = new StructuredTypesControlViewModel(m_StructuredTypesViewerFacade);
            viewModel.SelectedStructuredType = null;
        private void InternalCanRemove(bool isOkToDeleteType)
        {
            m_StructuredTypesViewerFacade.Stub(
                    inv => inv.IsTypeDeletable(Arg<string>.Is.Anything)
                )
                .Return(isOkToDeleteType);
            m_StructuredTypesViewerFacade.IsTypeDeletable(Arg.Any<string>()).Returns(isOkToDeleteType);
            // ARRANGE
            var structuredType = MockRepository.GenerateStub<ITypeEntity>();
            var structuredType = Substitute.For<ITypeEntity>();
            m_StructuredTypesViewerFacade
                .Expect(stvf => stvf.GetTypes())
                .Return(new[] {structuredType});
            m_StructuredTypesViewerFacade.GetTypes().Returns(new[] {structuredType});
            var viewModel = new StructuredTypesControlViewModel(m_StructuredTypesViewerFacade);
            viewModel.SelectedStructuredType = viewModel.StructuredTypes.First();
            Assert.IsTrue(canRemove == isOkToDeleteType);
        }
        [Test]
        public void RemoveType()
        {
            // ARRANGE
            var structuredTag = MockRepository.GenerateStub<ITypeEntity>();
            var structuredTag = Substitute.For<ITypeEntity>();
            structuredTag.Name = TypeName;
            m_StructuredTypesViewerFacade
                .Stub(stvf => stvf.GetTypes())
                .Return(new[] {structuredTag});
            m_StructuredTypesViewerFacade
                .Expect(stvf => stvf.DeleteType(TypeName))
                .Repeat.Once();
            m_StructuredTypesViewerFacade.GetTypes().Returns(new[] {structuredTag});
            var viewModel = new StructuredTypesControlViewModel(m_StructuredTypesViewerFacade);
            viewModel.SelectedStructuredType = viewModel.StructuredTypes.First();
            viewModel.RemoveCommand.Execute(null);
            // ASSERT
            m_StructuredTypesViewerFacade.VerifyAllExpectations();
            m_StructuredTypesViewerFacade.Received(1).DeleteType(TypeName);
        }
    }
}
#endif

StructuredTypesViewModelsTests.cs
-40
+37
/Tools/ToolsTest/OpcClient/StructuredTypesViewModelsTests.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using System.Linq;
using Neo.ApplicationFramework.Tools.OpcClient.Controls;
using Neo.ApplicationFramework.Tools.StructuredTag.Facades.StructuredTypesViewer;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
        [SetUp]
        public void SetUp()
        {
            m_StructuredTypesViewerFacade = MockRepository.GenerateMock<IStructuredTypesViewerFacade>();
            m_StructuredTypesViewerFacade = Substitute.For<IStructuredTypesViewerFacade>();
        }
        [Test]
        public void TestStructuredTypeMemberViewModel()
        {
            var entity = MockRepository.GenerateStub<ITypeMember>();
            var entity = Substitute.For<ITypeMember>();
            entity.Name = "NAME";
            entity.Stub(inv => inv.iXType).Return("IXTYPE");
            entity.Stub(inv => inv.UniqueIdentifier).Return("ID");
            entity.Stub(inv => inv.ControllerName).Return("CTRLNAME");
            entity.iXType.Returns("IXTYPE");
            entity.UniqueIdentifier.Returns("ID");
            entity.ControllerName.Returns("CTRLNAME");
            var viewModel = new StructuredTypeMemberViewModel(entity);
            Assert.That(viewModel.Name, Is.EqualTo("NAME"));
        public void TestStructuredTypeViewModel()
        {
            var references = new List<ITypeReference>();
            var ref1 = MockRepository.GenerateStub<ITypeReference>();
            var ref1 = Substitute.For<ITypeReference>();
            ref1.Name = "T1";
            ref1.Stub(inv=>inv.TypeName).Return("T1");
            ref1.TypeName.Returns("T1");
            references.Add(ref1);
            var ref2 = MockRepository.GenerateStub<ITypeReference>();
            var ref2 = Substitute.For<ITypeReference>();
            ref2.Name = "T2";
            ref2.Stub(inv => inv.TypeName).Return("T2");
            ref2.TypeName.Returns("T2");
            references.Add(ref2);
            var member = MockRepository.GenerateStub<ITypeMember>();
            var member = Substitute.For<ITypeMember>();
            member.Name = "Member";
            member.Stub(inv=>inv.ControllerName).Return("CTRL");
            member.Stub(inv=>inv.UniqueIdentifier).Return("memberID");
            member.Stub(inv=>inv.iXType).Return("BEDATATYPE.REAL");
            member.ControllerName.Returns("CTRL");
            member.UniqueIdentifier.Returns("memberID");
            member.iXType.Returns("BEDATATYPE.REAL");
            var entity = MockRepository.GenerateStub<ITypeEntity>();
            var entity = Substitute.For<ITypeEntity>();
            entity.Name = "NAME";
            entity.Stub(inv => inv.iXType).Return("IXTYPE");
            entity.Stub(inv => inv.UniqueIdentifier).Return("ID");
            entity.Stub(inv => inv.ControllerName).Return("CTRLNAME");
            entity.Stub(inv => inv.StructuredChildren).Return(references);
            entity.Stub(inv => inv.Children).Return(new []{member});
            entity.iXType.Returns("IXTYPE");
            entity.UniqueIdentifier.Returns("ID");
            entity.ControllerName.Returns("CTRLNAME");
            entity.StructuredChildren.Returns(references);
            entity.Children.Returns(new []{member});
            
            // create
            m_StructuredTypesViewerFacade.Stub(
                inv =>
                    inv.GetType(Arg<ITypeReference>.Is.Anything)
                ).WhenCalled(
            m_StructuredTypesViewerFacade.GetType(Arg.Any<ITypeReference>())
                .Returns(
                    inv =>
                    {
                        var reference = (ITypeReference)inv.Arguments[0];
                        var result = MockRepository.GenerateStub<ITypeEntity>();
                        result.Stub(i => i.StructuredChildren).Return(Enumerable.Empty<ITypeReference>());
                        result.Stub(i => i.Children).Return(Enumerable.Empty<ITypeMember>());
                        var reference = (ITypeReference)inv[0];
                        var result = Substitute.For<ITypeEntity>();
                        result.StructuredChildren.Returns(Enumerable.Empty<ITypeReference>());
                        result.Children.Returns(Enumerable.Empty<ITypeMember>());
                        result.Name = reference.TypeName;
                        inv.ReturnValue = result;
                    }).Return(default(ITypeEntity));
                        return result;
                    });
            
            var viewModel = new StructuredTypeViewModel(entity, m_StructuredTypesViewerFacade);
        {
            const string typeName = "Type";
            var typeEntity = MockRepository.GenerateStub<ITypeEntity>();
            var typeEntity = Substitute.For<ITypeEntity>();
            typeEntity.Name = typeName;
            typeEntity.Stub(inv => inv.StructuredChildren).Return(Enumerable.Empty<ITypeReference>());
            typeEntity.Stub(inv => inv.UniqueIdentifier).Return("id");
            typeEntity.Stub(inv => inv.iXType).Return(typeName);
            typeEntity.StructuredChildren.Returns(Enumerable.Empty<ITypeReference>());
            typeEntity.UniqueIdentifier.Returns("id");
            typeEntity.iXType.Returns(typeName);
            var r = MockRepository.GenerateStub<ITypeReference>();
            var r = Substitute.For<ITypeReference>();
            r.Name = typeName;
            r.Stub(inv=>inv.TypeName).Return(typeName);
            m_StructuredTypesViewerFacade.Stub(inv => inv.GetType(Arg<ITypeReference>.Is.Anything)).Return(typeEntity);
            r.TypeName.Returns(typeName);
            m_StructuredTypesViewerFacade.GetType(Arg.Any<ITypeReference>()).Returns(typeEntity);
            var viewModel = new BaseTypeViewModel(m_StructuredTypesViewerFacade, new[] {r});
            
            Assert.That(viewModel.Name, Is.EqualTo(BaseTypeViewModel.LevelName));
            Assert.That(viewModel.Children.Count, Is.EqualTo(1));
            Assert.That(viewModel.Children[0].Name, Is.EqualTo(typeName));
        }
    }
}
#endif

TagPathLookupIndexIdeTest.cs
-16
+18
/Tools/ToolsTest/OpcClient/TagPathLookupIndexIdeTest.cs
#if !VNEXT_TARGET
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
        {
            // ARRANGE
            const string tagPart = "Tags", structPart = "Struct", memberPart = "Member";
            var projectManager = MockRepository.GenerateStub<IProjectManager>();
            var projectManager = Substitute.For<IProjectManager>();
            var designerProjectItem = MockRepository.GenerateStub<IDesignerProjectItem>();
            var designerProjectItem = Substitute.For<IDesignerProjectItem>();
            designerProjectItem.Name = tagPart;
            var leaf = MockRepository.GenerateStub<IName>();
            var leaf = Substitute.For<IName>();
            leaf.Name = memberPart;
            var structObject = new StructFake { Name = structPart };
            var root = new StructFake { Name = tagPart, Items = new List<object>(new[]{structObject}) };
            designerProjectItem.Stub(pi => pi.ContainedObject).Return(root);
            var project = MockRepository.GenerateStub<IProject>();
            project.Stub(p => p.GetDesignerProjectItems()).Return(new[]{ designerProjectItem });
            designerProjectItem.ContainedObject.Returns(root);
            var project = Substitute.For<IProject>();
            project.GetDesignerProjectItems().Returns(new[]{ designerProjectItem });
            projectManager.Project = project;
            var tagNotificationService = MockRepository.GenerateStub<ITagChangedNotificationServiceCF>();
            var globalController = MockRepository.GenerateStub<IGlobalController>();
            var tagNotificationService = Substitute.For<ITagChangedNotificationServiceCF>();
            var globalController = Substitute.For<IGlobalController>();
            // ACT 
            var tagsPathLookupIndex = new TagsPathLookupIndexIde(globalController, projectManager, tagNotificationService);
        public void TestRootName()
        {
            // ARRANGE
            var tagNotificationService = MockRepository.GenerateStub<ITagChangedNotificationServiceCF>();
            var globalController = MockRepository.GenerateStub<IGlobalController>();
            var projectManager = MockRepository.GenerateStub<IProjectManager>();
            var tagNotificationService = Substitute.For<ITagChangedNotificationServiceCF>();
            var globalController = Substitute.For<IGlobalController>();
            var projectManager = Substitute.For<IProjectManager>();
            // ACT 
        public void TestGetObjects()
        {
            // ARRANGE
            var tagNotificationService = MockRepository.GenerateStub<ITagChangedNotificationServiceCF>();
            var globalController = MockRepository.GenerateStub<IGlobalController>();
            var tagNotificationService = Substitute.For<ITagChangedNotificationServiceCF>();
            var globalController = Substitute.For<IGlobalController>();
            globalController.Name = "globalController";
            var projectManager = MockRepository.GenerateStub<IProjectManager>();
            projectManager.Project = MockRepository.GenerateStub<IProject>();
            var projectManager = Substitute.For<IProjectManager>();
            projectManager.Project = Substitute.For<IProject>();
            // ACT 
            var tagsPathLookupIndex = new TagsPathLookupIndexIde(globalController, projectManager, tagNotificationService);
    }
}
#endif

TagSynchIdAssignmentTest.cs
-7
+9
/Tools/ToolsTest/OpcClient/TagSynchIdAssignmentTest.cs
#if !VNEXT_TARGET
using System.Linq;
using Core.Controls.Api.Designer;
using Neo.ApplicationFramework.Common.Collections;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.OpcUaServer;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcClient
{
            NeoDesignerProperties.IsInDesignMode = true;
            TestHelper.ClearServices();
            var projectmanager = MockRepository.GenerateStub<IProjectManager>();
            var opc = MockRepository.GenerateStub<IOpcClientServiceIde>();
            var projectmanager = Substitute.For<IProjectManager>();
            var opc = Substitute.For<IOpcClientServiceIde>();
            TestHelper.AddService<IOpcClientServiceCF>(opc);
            TestHelper.AddService<IOpcClientServiceIde>(opc);
            opc.Stub(inv => inv.Controllers).Return(new ExtendedBindingList<IDataSourceContainer>());
            opc.Controllers.Returns(new ExtendedBindingList<IDataSourceContainer>());
            m_Ctrl = new GlobalController();
            opc.Stub(inv => inv.GlobalController).Return(m_Ctrl);
            var tagChanged = MockRepository.GenerateStub <ITagChangedNotificationServiceCF>();
            var opcuaserverservice = MockRepository.GenerateStub<IOpcUaServerServiceIde>();
            opc.GlobalController.Returns(m_Ctrl);
            var tagChanged = Substitute.For<ITagChangedNotificationServiceCF>();
            var opcuaserverservice = Substitute.For<IOpcUaServerServiceIde>();
            m_TagSynchIdAssignmentServiceIde = new TagSynchIdAssignmentServiceIde(projectmanager, opc, tagChanged, opcuaserverservice);
        }
    }
}
#endif

OpcUaConvertionFakeData.cs
+2
/Tools/ToolsTest/OpcUa/OpcUaConvertionFakeData.cs
#if !VNEXT_TARGET
using System;
using System.Linq;
using Neo.ApplicationFramework.Interfaces;
    }
}
#endif

OpcUaNodeTest.cs
+2
/Tools/ToolsTest/OpcUa/OpcUaNodeTest.cs
#if !VNEXT_TARGET
using Neo.ApplicationFramework.Interfaces;
using NUnit.Framework;
using Opc.Ua;
        }
    }
}
#endif

OpcUaNodeToStructuredReferenceBaseConverterTest.cs
+2
/Tools/ToolsTest/OpcUa/OpcUaNodeToStructuredReferenceBaseConverterTest.cs
#if !VNEXT_TARGET
using System;
using System.Linq;
using Neo.ApplicationFramework.Interfaces;
        }
    }
}
#endif

OpcUaNodeToStructuredTypeConverterTest.cs
+2
/Tools/ToolsTest/OpcUa/OpcUaNodeToStructuredTypeConverterTest.cs
#if !VNEXT_TARGET
using System;
using System.Linq;
using Neo.ApplicationFramework.Interfaces;
        }
    }
}
#endif

OpcUaNodeTreeViewItemsViewModelTest.cs
+2
/Tools/ToolsTest/OpcUa/OpcUaNodeTreeViewItemsViewModelTest.cs
#if !VNEXT_TARGET
using NUnit.Framework;
using System.Collections.Generic;
using System.Linq;
        }
    }
}
#endif

OpcUaNodeValidatorTest.cs
+2
/Tools/ToolsTest/OpcUa/OpcUaNodeValidatorTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.OpcUa.Validators;
    }
}
#endif

OpcUaTestUtilities.cs
+2
/Tools/ToolsTest/OpcUa/OpcUaTestUtilities.cs
#if !VNEXT_TARGET
using System;
using Neo.ApplicationFramework.Interfaces;
    }
}
#endif

OpcUaClientSettingsPropertyPageViewModelTest.cs
-7
+15
/Tools/ToolsTest/OpcUaClient/OpcUaClientSettingsPropertyPageViewModelTest.cs
#if !VNEXT_TARGET
using System.Windows.Forms;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.OpcUaClient.ViewModels;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using System.Windows.Forms;
namespace Neo.ApplicationFramework.Tools.OpcUaClient
{
        [SetUp]
        public void SetUp()
        {
            m_MessageBoxService = TestHelper.CreateAndAddServiceMock<IMessageBoxServiceIde>();
            m_DataSourceContainer = MockRepository.GenerateStub<IDataSourceContainer>();
            m_MessageBoxService = TestHelper.CreateAndAddServiceStub<IMessageBoxServiceIde>();
            m_DataSourceContainer = Substitute.For<IDataSourceContainer>();
            GiveDataSourceContainerDummyValues();
            m_DataSourceContainer.Stub(x => x.ValidateAndCorrectUrl(Arg<string>.Is.Anything, out Arg<string>.Out(string.Empty).Dummy, out Arg<string>.Out(string.Empty).Dummy)).Return(true);
            m_DataSourceContainer.ValidateAndCorrectUrl(Arg.Any<string>(), out Arg.Any<string>(),
                out Arg.Any<string>()).Returns(x => 
                {
                    x[1] = string.Empty;
                    x[2] = string.Empty;
                    return true;
                });
            m_OpcUaClientSettingsPropertyPageViewModel = new OpcUaClientSettingsPropertyPageViewModel();
        }
        {
            //ARRANGE
            Initialize(true);
            m_MessageBoxService.Stub(x => x.Show(TextsIde.OpcUaClientSettingsPropertyPage_AllowNonSecureConnections_ValidationWarning, TextsIde.Warning, MessageBoxButtons.YesNo, MessageBoxIcon.Warning, DialogResult.OK)).Return(DialogResult.Yes);
            m_MessageBoxService.Show(TextsIde.OpcUaClientSettingsPropertyPage_AllowNonSecureConnections_ValidationWarning, TextsIde.Warning, MessageBoxButtons.YesNo, MessageBoxIcon.Warning, DialogResult.OK).Returns(DialogResult.Yes);
            m_OpcUaClientSettingsPropertyPageViewModel.AllowNonSecureConnections.Value = true;
            //ACT
            m_OpcUaClientSettingsPropertyPageViewModel.ValidateAndSaveValues();
        {
            //ARRANGE
            Initialize(true);
            m_MessageBoxService.Stub(x => x.Show(TextsIde.OpcUaClientSettingsPropertyPage_AllowNonSecureConnections_ValidationWarning, TextsIde.Warning, MessageBoxButtons.YesNo, MessageBoxIcon.Warning, DialogResult.OK)).Return(DialogResult.No);
            m_MessageBoxService.Show(TextsIde.OpcUaClientSettingsPropertyPage_AllowNonSecureConnections_ValidationWarning, TextsIde.Warning, MessageBoxButtons.YesNo, MessageBoxIcon.Warning, DialogResult.OK).Returns(DialogResult.No);
            m_OpcUaClientSettingsPropertyPageViewModel.AllowNonSecureConnections.Value = true;
            //ACT
            m_OpcUaClientSettingsPropertyPageViewModel.ValidateAndSaveValues();
        }
    }
}
#endif

OpcUaNodeNameResolverTest.cs
-2
+4
/Tools/ToolsTest/OpcUaClient/OpcUaNodeNameResolverTest.cs
#if !VNEXT_TARGET
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcUaClient
{
        [SetUp]
        public void SetUp()
        {
            IDataSourceContainer dataSourceContainerStub = MockRepository.GenerateStub<IDataSourceContainer>();
            IDataSourceContainer dataSourceContainerStub = Substitute.For<IDataSourceContainer>();
            dataSourceContainerStub.OpcUaDefaultNamespaceName = "NS1";
            dataSourceContainerStub.OpcUaNamespaceNameBrowseNameSeparator = ':';
            IOpcUaNamespaceInfos namespaceInfos = new OpcUaNamespaceInfos();
        }
    }
}
#endif

PasswordEncryptionValidatorTest.cs
-7
+10
/Tools/ToolsTest/OpcUaClient/PasswordEncryptionValidatorTest.cs
#if !VNEXT_TARGET
using Neo.ApplicationFramework.Common.Collections;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.OpcUaClient.Validation;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
using System;
namespace Neo.ApplicationFramework.Tools.OpcUaClient
        [SetUp]
        public void SetUp()
        {
            m_OpcClientServiceIde = MockRepository.GenerateStub<IOpcClientServiceIde>();
            m_OpcClientServiceIde = Substitute.For<IOpcClientServiceIde>();
            m_Validator = new PasswordEncryptionValidator(m_OpcClientServiceIde.ToILazy());
            m_ErrorListService = TestHelper.CreateAndAddServiceMock<IErrorListService>();
            m_ErrorListService = TestHelper.CreateAndAddServiceStub<IErrorListService>();
            m_Controllers = new ExtendedBindingList<IDataSourceContainer>();
        }
        {
            //ARRANGE
            AddControllers(nonSecureConnectionsAllowed, numberOfControllers);
            m_OpcClientServiceIde.Stub(x => x.Controllers).Return(m_Controllers);
            m_ErrorListService.Expect(x => x.AddNewCompilerError(Arg<string>.Is.Anything, Arg<bool>.Is.Equal(true))).Repeat.Times(buildErrors);
            m_OpcClientServiceIde.Controllers.Returns(m_Controllers);
            
            //ACT
            m_Validator.Validate();
            
            //ASSERT
            m_ErrorListService.VerifyAllExpectations();
            m_ErrorListService.Received(buildErrors).AddNewCompilerError(Arg.Any<string>(), true);
        }
        private void AddControllers(bool nonSecureConnectionsAllowed, int numberOfControllers)
        private IDataSourceContainer GetController(bool nonSecureConnectionsAllowed)
        {
            var controller = MockRepository.GenerateStub<IDataSourceContainer>();
            var controller = Substitute.For<IDataSourceContainer>();
            controller.OpcUaAllowNonSecureConnections = nonSecureConnectionsAllowed;
            controller.DataSourceType = DataSourceType.DataSourceOpcUaExternal;
            return controller;
        }
    }
}
#endif

OpcUaServerConfigurationManagerTest.cs
-8
+8
/Tools/ToolsTest/OpcUaServer/OpcUaServerConfigurationManagerTest.cs
using System.Xml.Linq;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.OpcUaServer;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcUaServer
{
            m_Document = new XDocument();
            InitDocument(ref m_Document, "Neo.ApplicationFramework.Tools.OpcUaServer.Configuration.OpcUaServerConfig.xml");
            m_OpcUaServerRootComponentStub = MockRepository.GenerateStub<IOpcUaServerRootComponent>();
            m_OpcUaServerRootComponentStub = Substitute.For<IOpcUaServerRootComponent>();
            m_OpcUaServerRootComponentStub.Port = 4842;
            m_OpcUaServerRootComponentStub.AllowAnonymousLogin = true;
            m_OpcUaServerRootComponentStub.Stub(x => x.IPAddresses).Return(new string[] { "1.2.3.4", "5.6.7.8" });
            m_OpcUaServerRootComponentStub.IPAddresses.Returns(new string[] { "1.2.3.4", "5.6.7.8" });
            m_BrandServiceStub = MockRepository.GenerateStub<IBrandService>();
            m_BrandServiceStub.Stub(x => x.CompanyName).Return(CompanyName);
            m_BrandServiceStub.Stub(x => x.ProductName).Return(Product);
            m_BrandServiceStub.Stub(x => x.Version).Return(Version);
            m_BrandServiceStub.Stub(x => x.Build).Return(Build);
            m_BrandServiceStub = Substitute.For<IBrandService>();
            m_BrandServiceStub.CompanyName.Returns(CompanyName);
            m_BrandServiceStub.ProductName.Returns(Product);
            m_BrandServiceStub.Version.Returns(Version);
            m_BrandServiceStub.Build.Returns(Build);
        }
        [Test]

OpcUaServerDataManagerTest.cs
-12
+12
/Tools/ToolsTest/OpcUaServer/OpcUaServerDataManagerTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.CachedDataItem;
using Neo.ApplicationFramework.Interfaces.OpcUaServer;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OpcUaServer
{
        [OneTimeSetUp]
        public void TestFixtureSetUp()
        {
            IDataItemProxy dataItemProxyStub = MockRepository.GenerateStub<IDataItemProxy>();
            IDataItemProxy dataItemProxyStub = Substitute.For<IDataItemProxy>();
            m_OpcUaServerNativeWrapper = MockRepository.GenerateMock<OpcUaServerNativeWrapperDummy>();
            m_OpcUaServerNativeWrapper = Substitute.For<OpcUaServerNativeWrapperDummy>();
            m_CachedDataItemService = MockRepository.GenerateMock<ICachedDataItemService>();
            m_CachedDataItemService.Stub(x => x.GetTag(Arg<string>.Is.Anything, Arg<ILifetimeContext>.Is.Anything)).Return(dataItemProxyStub);
            m_CachedDataItemService = Substitute.For<ICachedDataItemService>();
            m_CachedDataItemService.GetTag(Arg.Any<string>(), Arg.Any<ILifetimeContext>()).Returns(dataItemProxyStub);
            IDictionary<string, IDataItemProxy> dataItemProxiesStub = MockRepository.GenerateStub<IDictionary<string, IDataItemProxy>>();
            dataItemProxiesStub.Stub(x => x.Values).Return(new List<IDataItemProxy>());
            IDictionary<string, IDataItemProxy> dataItemProxiesStub = Substitute.For<IDictionary<string, IDataItemProxy>>();
            dataItemProxiesStub.Values.Returns(new List<IDataItemProxy>());
            m_CachedDataItemService.Stub(x => x.GetTags(Arg<IEnumerable<string>>.Is.Anything, Arg<ILifetimeContext>.Is.Anything)).Return(dataItemProxiesStub);
            m_CachedDataItemService.GetTags(Arg.Any<IEnumerable<string>>(), Arg.Any<ILifetimeContext>()).Returns(dataItemProxiesStub);
            IDictionary<string, VariantValue> dataItemValuesStub = MockRepository.GenerateStub<IDictionary<string, VariantValue>>();
            m_CachedDataItemService.Stub(x => x.GetTagValues(Arg<IEnumerable<string>>.Is.Anything, Arg<ILifetimeContext>.Is.Anything)).Return(dataItemValuesStub);
            IDictionary<string, VariantValue> dataItemValuesStub = Substitute.For<IDictionary<string, VariantValue>>();
            m_CachedDataItemService.GetTagValues(Arg.Any<IEnumerable<string>>(), Arg.Any<ILifetimeContext>()).Returns(dataItemValuesStub);
        }
        [SetUp]
            
            for (int cookie = 0; cookie < TagCount; cookie++)
            {
                IGlobalDataItem globalDataItemStub = MockRepository.GenerateStub<IGlobalDataItem>();
                IGlobalDataItem globalDataItemStub = Substitute.For<IGlobalDataItem>();
                globalDataItemStub.Name = string.Format("Tag{0}", cookie);
                globalDataItemStub.Stub(x => x.UpdateRate).Return(MinInterval);
                globalDataItemStub.UpdateRate.Returns(MinInterval);
                OpcUaServerTagInfo opcUaServerTagInfo = new OpcUaServerTagInfo(globalDataItemStub, cookie);
                m_TagInfoDictionary.Add(cookie, opcUaServerTagInfo);

IDEOptionsServiceTest.cs
-15
+13
/Tools/ToolsTest/OptionsManager/IDEOptionsServiceTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.WindowManagement;
using Neo.ApplicationFramework.Tools.Options;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OptionsManager
{
        [SetUp]
        public void FixtureSetup()
        {
            m_FeatureSecurityServiceIde = MockRepository.GenerateStub<IFeatureSecurityServiceIde>().ToILazy();
            m_FeatureSecurityServiceIde = Substitute.For<IFeatureSecurityServiceIde>().ToILazy();
        }
        [Test]
            IIDEOptionsService ideOptionsService = new IDEOptionsService(m_FeatureSecurityServiceIde);
            IDEOptionsService optionsService = ideOptionsService as IDEOptionsService;
            IFileSettingsService fileSettingsService = MockRepository.GenerateMock<IFileSettingsService>();
            IFileSettingsService fileSettingsService = Substitute.For<IFileSettingsService>();
            optionsService.FileSettingsService = fileSettingsService;
            fileSettingsService.Expect(x => x.LoadUserSettings<object>()).Return(new object()).IgnoreArguments();
            fileSettingsService.LoadUserSettings<object>().Returns(new object());
            ideOptionsService.AddOption<object>();
            Assert.AreEqual(optionsService.Options.Count, 1);
            fileSettingsService.VerifyAllExpectations();
            fileSettingsService.Received().LoadUserSettings<object>();
        }
        /// <summary>
            IIDEOptionsService ideOptionsService = new IDEOptionsService(m_FeatureSecurityServiceIde);
            IDEOptionsService optionsService = ideOptionsService as IDEOptionsService;
            IWindowServiceIde windowService = MockRepository.GenerateMock<IWindowServiceIde>();
            IWindowServiceIde windowService = Substitute.For<IWindowServiceIde>();
            optionsService.WindowService = windowService;
            windowService.Expect(x => x.CreateModalForm(Arg<Control>.Is.Anything, Arg<string>.Is.Anything)).Return(null).Repeat.Once();
            windowService.CreateModalForm(Arg.Any<Control>(), Arg.Any<string>()).Returns(x => null);
            ideOptionsService.Show();
            windowService.VerifyAllExpectations();
            windowService.ReceivedWithAnyArgs(1).CreateModalForm(Arg.Any<Control>(), Arg.Any<string>());
        }
        [Test]
            IDEOptionsService optionsService = ideOptionsService as IDEOptionsService;
            ideOptionsService.AddOption<object>();
            IWindowServiceIde windowService = MockRepository.GenerateMock<IWindowServiceIde>();
            IWindowServiceIde windowService = Substitute.For<IWindowServiceIde>();
            optionsService.WindowService = windowService;
            TestForm testForm = new TestForm();
            windowService.Expect(x => x.CreateModalForm(Arg<Control>.Is.Anything, Arg<string>.Is.Anything)).Return(testForm).Repeat.Once();
            windowService.CreateModalForm(Arg.Any<Control>(), Arg.Any<string>()).Returns(testForm);
            ideOptionsService.Show();
            windowService.VerifyAllExpectations();
            windowService.ReceivedWithAnyArgs(1).CreateModalForm(Arg.Any<Control>(), Arg.Any<string>());
        }
        [Test]
            ideOptionsService.AddOption<object>();
            IFileSettingsService fileSettingsService = MockRepository.GenerateMock<IFileSettingsService>();
            IFileSettingsService fileSettingsService = Substitute.For<IFileSettingsService>();
            optionsService.FileSettingsService = fileSettingsService;
            fileSettingsService.Expect(x => x.SaveUserSettings(Arg<object>.Is.Anything)).Repeat.Once();
            
            optionsService.OnApplicationExit(null, EventArgs.Empty);
            fileSettingsService.VerifyAllExpectations();
            fileSettingsService.Received(1).SaveUserSettings(Arg.Any<object>());
        }
        /// <summary>

OptionsToolTest.cs
-4
+3
/Tools/ToolsTest/OptionsManager/OptionsToolTest.cs
using Core.Api.Tools;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Options;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.OptionsManager
{
        {
            ITool optionsTool = new OptionsTool();
            IServiceContainerCF serviceContainer = MockRepository.GenerateMock<IServiceContainerCF>();
            IServiceContainerCF serviceContainer = Substitute.For<IServiceContainerCF>();
            serviceContainer.Expect(x => x.AddService(Arg<Type>.Is.Anything, Arg<object>.Is.Anything, Arg<bool>.Is.Anything, Arg<bool>.Is.Anything)).Repeat.Once();
            optionsTool.Owner = serviceContainer;
            optionsTool.RegisterServices();
            serviceContainer.VerifyAllExpectations();
            serviceContainer.Received().AddService(Arg.Any<Type>(), Arg.Any<object>(), Arg.Any<bool>(), Arg.Any<bool>());
        }
    }
}

PrinterTest.cs
-20
+13
/Tools/ToolsTest/Printer/PrinterTest.cs
using Neo.ApplicationFramework.Common.Printer.Document;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Printer;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Printer
{
		private ITool m_PrinterToolCF;
	    private IGdiPrinterCF m_GdiPrinterCFMock;
	    private IMessageBoxServiceCF m_MessageBoxServiceCFMock;
	    private IDeviceManagerServiceCF m_DeviceManagerServiceCFMock;
	    [SetUp]
                m_PrinterToolCF.RegisterServices();
            }
            
            IPrinterDevice printerDeviceMock = MockRepository.GenerateMock<IPrinterDevice>();
            IPrinterDevice printerDeviceMock = Substitute.For<IPrinterDevice>();
            
            m_DeviceManagerServiceCFMock = MockRepository.GenerateMock<IDeviceManagerServiceCF>();
            m_DeviceManagerServiceCFMock.Stub(m => m.GetOutputDevice<IPrinterDevice>()).Return(printerDeviceMock);
            m_DeviceManagerServiceCFMock = Substitute.For<IDeviceManagerServiceCF>();
            m_DeviceManagerServiceCFMock.GetOutputDevice<IPrinterDevice>().Returns(printerDeviceMock);
		    m_GdiPrinterCFMock = MockRepository.GenerateMock<IGdiPrinterCF>();
		    m_GdiPrinterCFMock = Substitute.For<IGdiPrinterCF>();
            IPlatformFactoryService platformFactoryServiceMock = MockRepository.GenerateMock<IPlatformFactoryService>();
            platformFactoryServiceMock.Stub(m => m.Create<IGdiPrinterCF>()).Return(m_GdiPrinterCFMock);
            IPlatformFactoryService platformFactoryServiceMock = Substitute.For<IPlatformFactoryService>();
            platformFactoryServiceMock.Create<IGdiPrinterCF>().Returns(m_GdiPrinterCFMock);
            m_MessageBoxServiceCFMock = MockRepository.GenerateMock<IMessageBoxServiceCF>();
            m_MessageBoxServiceCFMock = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IDeviceManagerServiceCF), m_DeviceManagerServiceCFMock);
            ServiceContainerCF.Instance.AddService(typeof(IPlatformFactoryService), platformFactoryServiceMock);
		public void Should_fail_print_when_print_all_pages_fail()
        {
            
            m_GdiPrinterCFMock
                .Stub(m => m.PrintAllPages(null))
                .IgnoreArguments()
                .Throw(new ArgumentException());
            m_GdiPrinterCFMock.WhenForAnyArgs(x => x.PrintAllPages(Arg.Any<IFlowDocument>()))
                .Do(y => throw new ArgumentException());
            IPrinterServiceCF printerToolCF = new PrinterToolCF();
            ITask printTask = printerToolCF.SendToPrinterAsync(new FlowDocument());
        [Test]
		public void Should_succeed_when_print_completes_successfully()
        {
            m_GdiPrinterCFMock.Stub(m => m.PrintAllPages(null)).IgnoreArguments();
            IPrinterServiceCF printerToolCF = new PrinterToolCF();
            ITask printTask = printerToolCF.SendToPrinterAsync(new FlowDocument());
            
            Assert.DoesNotThrow(() => printTask.Wait());
            m_GdiPrinterCFMock.ReceivedWithAnyArgs().PrintAllPages(Arg.Any<IFlowDocument>());
        }
        [Test]
        public void Should_show_error_message_when_output_device_is_not_configured()
        {
            m_DeviceManagerServiceCFMock
                .Stub(m => m.GetOutputDevice<IPrinterDevice>()).Return(null)
                .Repeat.Any(); // To reset mock
            m_DeviceManagerServiceCFMock.GetOutputDevice<IPrinterDevice>().Returns(x => null);
            IPrinterServiceCF printerToolCF = new PrinterToolCF();
            ITask printTask = printerToolCF.SendToPrinterAsync(new FlowDocument());
            m_MessageBoxServiceCFMock.AssertWasCalled(m => m.Show(Arg<string>.Is.Anything, Arg<string>.Is.Anything, Arg<bool>.Is.Anything, Arg<System.Action>.Is.Null));
            m_MessageBoxServiceCFMock.Received().Show(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<bool>(), null);
        }
    }
}

CombinationUnloadStrategyTest.cs
-62
+27
/Tools/ToolsTest/ProjectManager/LoadOnDemand/CombinationUnloadStrategyTest.cs
using System.Collections.Generic;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ProjectManager.LoadOnDemand
{
    [TestFixture]
    public class CombinationUnloadStrategyTest
    {
        private readonly MockRepository m_Mocks = new MockRepository();
        
        [Test]
        public void ShouldUnloadReturnsTrueIfStrategy1Does()
        {
            IUnloadStrategy unloadStrategy1 = m_Mocks.StrictMock<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy2 = m_Mocks.StrictMock<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy1 = Substitute.For<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy2 = Substitute.For<IUnloadStrategy>();
            CombinationUnloadStrategy combUnload = new CombinationUnloadStrategy(unloadStrategy1, unloadStrategy2);
            using (m_Mocks.Record())
            {
                Expect.Call(unloadStrategy1.ShouldUnload()).Repeat.Once().Return(true);
                Expect.Call(unloadStrategy2.ShouldUnload()).Repeat.Any().Return(false);
            }
            unloadStrategy1.ShouldUnload().Returns(true);
            unloadStrategy2.ShouldUnload().Returns(false);
            using (m_Mocks.Playback())
            {
            bool shouldUnload = combUnload.ShouldUnload();
            Assert.IsTrue(shouldUnload);
            }
            unloadStrategy1.Received(1).ShouldUnload();
            unloadStrategy2.Received().ShouldUnload();
        }
        [Test]
        public void ShouldUnloadReturnsTrueIfStrategy2Does()
        {
            IUnloadStrategy unloadStrategy1 = m_Mocks.StrictMock<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy2 = m_Mocks.StrictMock<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy1 = Substitute.For<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy2 = Substitute.For<IUnloadStrategy>();
            CombinationUnloadStrategy combUnload = new CombinationUnloadStrategy(unloadStrategy1, unloadStrategy2);
            using (m_Mocks.Record())
            {
                Expect.Call(unloadStrategy1.ShouldUnload()).Repeat.Any().Return(false);
                Expect.Call(unloadStrategy2.ShouldUnload()).Repeat.Once().Return(true);
            }
            unloadStrategy1.ShouldUnload().Returns(false);
            unloadStrategy2.ShouldUnload().Returns(true);
            
            using (m_Mocks.Playback())
            {
            bool shouldUnload = combUnload.ShouldUnload();
            Assert.IsTrue(shouldUnload);
            }
            unloadStrategy1.Received().ShouldUnload();
            unloadStrategy2.Received(1).ShouldUnload();
        }
        [Test]
        public void ShouldUnloadReturnsTrueIfBothStrategiesDo()
        {
            IUnloadStrategy unloadStrategy1 = m_Mocks.StrictMock<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy2 = m_Mocks.StrictMock<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy1 = Substitute.For<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy2 = Substitute.For<IUnloadStrategy>();
            CombinationUnloadStrategy combUnload = new CombinationUnloadStrategy(unloadStrategy1, unloadStrategy2);
            using (m_Mocks.Record())
            {
                Expect.Call(unloadStrategy1.ShouldUnload()).Repeat.Any().Return(true);
                Expect.Call(unloadStrategy2.ShouldUnload()).Repeat.Any().Return(true);
            }
            unloadStrategy1.ShouldUnload().Returns(true);
            unloadStrategy2.ShouldUnload().Returns(true);
            using (m_Mocks.Playback())
            {
            bool shouldUnload = combUnload.ShouldUnload();
            Assert.IsTrue(shouldUnload);
            }
            unloadStrategy1.Received().ShouldUnload();
            unloadStrategy2.Received().ShouldUnload();
        }
        [Test]
        public void MinimumLoadedDesignersReturnsFromStrategy1()
        {
            IUnloadStrategy unloadStrategy1 = m_Mocks.StrictMock<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy2 = m_Mocks.StrictMock<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy1 = Substitute.For<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy2 = Substitute.For<IUnloadStrategy>();
            int minimumLoaded = 4123; //Bogus value
            CombinationUnloadStrategy combUnload = new CombinationUnloadStrategy(unloadStrategy1, unloadStrategy2);
            using (m_Mocks.Record())
            {
                Expect.Call(unloadStrategy1.MinimumLoadedDesigners).Repeat.Once().Return(minimumLoaded);
                Expect.Call(unloadStrategy2.MinimumLoadedDesigners).Repeat.Never();
            }
            unloadStrategy1.MinimumLoadedDesigners.Returns(minimumLoaded);
            using (m_Mocks.Playback())
            {
            int combMinLoaded = combUnload.MinimumLoadedDesigners;
            Assert.AreEqual(minimumLoaded, combMinLoaded);
        }
        }
        [Test]
        public void LoadedDesignersListReturnsFromStrategy1()
        {
            IUnloadStrategy unloadStrategy1 = m_Mocks.StrictMock<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy2 = m_Mocks.StrictMock<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy1 = Substitute.For<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy2 = Substitute.For<IUnloadStrategy>();
            
            List<IDesignerProjectItem> bogusList = new List<IDesignerProjectItem>();
            CombinationUnloadStrategy combUnload = new CombinationUnloadStrategy(unloadStrategy1, unloadStrategy2);
            using (m_Mocks.Record())
            {
                Expect.Call(unloadStrategy1.LoadedDesignersList).Repeat.Once().Return(bogusList);
                Expect.Call(unloadStrategy2.LoadedDesignersList).Repeat.Never();
            }
            unloadStrategy1.LoadedDesignersList.Returns(bogusList);
            using (m_Mocks.Playback())
            {
            IList<IDesignerProjectItem> list = combUnload.LoadedDesignersList;
            Assert.AreSame(bogusList, list);
        }
        }
        [Test]
        public void LoadedDesignersListSetsToBothSubStrategies()
        {
            IUnloadStrategy unloadStrategy1 = m_Mocks.StrictMock<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy2 = m_Mocks.StrictMock<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy1 = Substitute.For<IUnloadStrategy>();
            IUnloadStrategy unloadStrategy2 = Substitute.For<IUnloadStrategy>();
            List<IDesignerProjectItem> bogusList = new List<IDesignerProjectItem>();
            CombinationUnloadStrategy combUnload = new CombinationUnloadStrategy(unloadStrategy1, unloadStrategy2);
            using (m_Mocks.Record())
            {
            unloadStrategy1.LoadedDesignersList = bogusList;
            unloadStrategy2.LoadedDesignersList = bogusList;
            }
            
            using (m_Mocks.Playback())
            {
            combUnload.LoadedDesignersList = bogusList;
        }
    }
}
}

ScreenGroupsTest.cs
-15
+9
/Tools/ToolsTest/ProjectManager/ProjectExplorer/ScreenGroupsTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ProjectManager.ProjectExplorer
{
        [SetUp]
        public void Setup()
        {
            m_Root = MockRepository.GenerateStub<IProjectTreeItem>();
            m_Root = Substitute.For<IProjectTreeItem>();
            m_ScreenGroupServiceIde = TestHelper.AddServiceStub<IScreenGroupServiceIde>();
            m_ScreenGroupServiceIde.Stub(x => x.ScreenRoot).Return(m_Root);
            m_ScreenGroupServiceIde.ScreenRoot.Returns(m_Root);
            m_ScreenGroups = new ScreenGroups();
        }
            m_ScreenGroups.Add(new ScreenGroupProjectItem("B"));
            m_ScreenGroups.Add(new ScreenGroupProjectItem("C"));
            Raise(x => x.ItemCreated += null,  new AddingNewEventArgs(new ScreenGroupProjectItem("A")));
            RaiseEvent(x => x.ItemCreated += null,  new AddingNewEventArgs(new ScreenGroupProjectItem("A")));
            Assert.That(m_ScreenGroups[0].Name, Is.EqualTo("A"));
            Assert.That(m_ScreenGroups[1].Name, Is.EqualTo("B"));
            Assert.That(m_ScreenGroups[2].Name, Is.EqualTo("C"));
        }
        [Test]
        public void WhenItemAddedToTheScreenRootTheItemGetsContextualMenus()
        {
            Assert.That(itemToAdd.ContextualMenuCommands, Is.Empty);
            Raise(x => x.ItemCreated += null, new AddingNewEventArgs(itemToAdd));
            RaiseEvent(x => x.ItemCreated += null, new AddingNewEventArgs(itemToAdd));
            AssertContextualMenusExistsInFirstScreenGroup();
        }
            IScreenGroupProjectItem secondItem = new ScreenGroupProjectItem();
            secondItem.Name = "Item B";
            m_Root.Stub(x => x.ProjectItems).Return(new IProjectItem[] { secondItem, firstItem });
            m_Root.ProjectItems.Returns(new IProjectItem[] { secondItem, firstItem });
            m_ScreenGroups.LoadGroups();
        public void AddsContextualMenusWhenLoadingGroups()
        {
            ScreenGroupProjectItem itemToLoad = new ScreenGroupProjectItem("A");
            m_Root.Stub(x => x.ProjectItems).Return(new IProjectItem[] { itemToLoad });
            m_Root.ProjectItems.Returns(new IProjectItem[] { itemToLoad });
            m_ScreenGroups.LoadGroups();
            AssertContextualMenusExistsInFirstScreenGroup();
        }
        private static void AssertContextualMenuItemExists(IEnumerable<IMenuCommand> createdCommands, string title)
        {
            Assert.That(createdCommands.SingleOrDefault(x => x.Text.Equals(title)), Is.Not.Null);
        }
        private void Raise(Action<IProjectTreeItem> eventAction, EventArgs args) 
        private void RaiseEvent(Action<IProjectTreeItem> eventAction, EventArgs args) 
        {
            m_Root.Raise(eventAction, m_Root, args);
            Raise.EventWith(m_Root, args);
        }
    }
}

ChangeAllScreenCachingTest.cs
-10
+9
/Tools/ToolsTest/ProjectManager/ChangeAllScreenCachingTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Screen.ScreenCacheSetup;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ProjectManager
{
        {
            TestHelper.ClearServices();
            m_ProjectManager = TestHelper.CreateAndAddServiceStub<IProjectManager>();
            m_ProjectManager.Expect(projectManager => projectManager.SaveProject()).Return(true);
            m_ProjectManager.Project = MockRepository.GenerateStub<IProject>();
            m_ProjectManager.SaveProject().Returns(true);
            m_ProjectManager.Project = Substitute.For<IProject>();
            m_ProjectManager.Project.StartupScreen = StartupScreen;
            m_ScreenGroupServiceIde = TestHelper.CreateAndAddServiceStub<IScreenGroupServiceIde>();
            if (numberOfPopupScreens > 0)
                screenRootChildren.AddRange(CreatePopupScreenStubs(numberOfPopupScreens));
            m_ScreenGroupServiceIde.Expect(groupService => groupService.ScreenRoot.GetProjectItems()).Return(screenRootChildren.ToArray());
            m_ScreenGroupServiceIde.ScreenRoot.GetProjectItems().Returns(screenRootChildren.ToArray());
            return screenRootChildren.ToArray();
        }
        private IScreenDesignerProjectItem CreateDesignerProjectItem(string screenName, bool isCacheable, bool isPopup)
        {
            IScreenWindow normalScreen = MockRepository.GenerateStub<IScreenWindow>();
            IScreenWindow normalScreen = Substitute.For<IScreenWindow>();
            normalScreen.Stub(screen => screen.Name).Return(screenName);
            normalScreen.Name.Returns(screenName);
            normalScreen.IsCacheable = isCacheable;
            normalScreen.PopupScreen = isPopup;
            var screenDesignerProjectItem = MockRepository.GenerateStub<IScreenDesignerProjectItem>();
            screenDesignerProjectItem.Stub(designerProjectItem => designerProjectItem.DesignerHostInternal.RootDesigner)
                    .Return(MockRepository.GenerateStub<IScreenRootDesigner>());
            ((IScreenRootDesigner)screenDesignerProjectItem.DesignerHostInternal.RootDesigner).Stub(x => x.ScreenWindow).Return(normalScreen);
            var screenDesignerProjectItem = Substitute.For<IScreenDesignerProjectItem>();
            screenDesignerProjectItem.DesignerHostInternal.RootDesigner.Returns(Substitute.For<IScreenRootDesigner>());
            ((IScreenRootDesigner)screenDesignerProjectItem.DesignerHostInternal.RootDesigner).ScreenWindow.Returns(normalScreen);
            return screenDesignerProjectItem;
        }

CompressedProjectGeneratorTest.cs
-27
+25
/Tools/ToolsTest/ProjectManager/CompressedProjectGeneratorTest.cs
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using Core.Api.ProjectTarget;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Ionic.Zip;
using System.Text.RegularExpressions;
namespace Neo.ApplicationFramework.Tools.ProjectManager
{
        {
            m_ProjectFiles = new List<string>();
            ITargetInfo targetInfoStub = MockRepository.GenerateStub<ITargetInfo>();
            ITargetInfo targetInfoStub = Substitute.For<ITargetInfo>();
            targetInfoStub.ProjectPath = ProjectFolderPath;
            targetInfoStub.TempPath = Path.Combine(ProjectFolderPath, TempFilesFolderName);
            targetInfoStub.BuildFilesPath = Path.Combine(ProjectFolderPath, BuildFilesFolderName);
            FileHelper fileHelperStub = MockRepository.GenerateStub<FileHelper>();
            fileHelperStub.Stub(x => x.Exists(Arg<string>.Is.Equal(ZipFilePath))).Return(false);
            FileHelper fileHelperStub = Substitute.For<FileHelper>();
            fileHelperStub.Exists(ZipFilePath).Returns(false);
            DirectoryHelper directoryHelper = MockRepository.GenerateStub<DirectoryHelper>();
            directoryHelper.Stub(x => x.GetFiles(Arg<string>.Is.Equal(ProjectFolderPath), Arg<bool>.Is.Equal(true))).Do(new Func<string, bool, string[]>((folderPath, recursive) => m_ProjectFiles.ToArray()));
            directoryHelper.Stub(x => x.GetFiles(Arg<string>.Is.Equal(ProjectFolderPath), Arg<bool>.Is.Equal(false))).Do(new Func<string, bool, string[]>((folderPath, recursive) => GetProjectFilesOnRootLevel().ToArray()));
            directoryHelper.Stub(x => x.GetDirectories(Arg<string>.Is.Equal(ProjectFolderPath))).Do(new Func<string, string[]>((folderPath) => GetProjectFoldersOnRootLevel().ToArray()));
            directoryHelper.Stub(x => x.Exists(Arg<string>.Is.Anything)).Return(true);
            DirectoryHelper directoryHelper = Substitute.For<DirectoryHelper>();
            directoryHelper.GetFiles(ProjectFolderPath, true)
                .Returns(m_ProjectFiles.ToArray());
            directoryHelper.GetFiles(ProjectFolderPath, false)
                .Returns(GetProjectFilesOnRootLevel().ToArray());
            directoryHelper.GetDirectories(ProjectFolderPath)
                .Returns(GetProjectFoldersOnRootLevel().ToArray());
            directoryHelper.Exists(Arg.Any<string>()).Returns(true);
            m_ArchiveMock = MockRepository.GenerateMock<IZipFileArchive>();
            NeoZipFileFactory factory = MockRepository.GenerateStub<NeoZipFileFactory>();
            factory.Stub(x => x.CreateZipFile(Arg<string>.Is.Equal(ZipFilePath), Arg<string>.Is.Anything)).Return(m_ArchiveMock);
            m_ArchiveMock = Substitute.For<IZipFileArchive>();
            NeoZipFileFactory factory = Substitute.For<NeoZipFileFactory>();
            factory.CreateZipFile(ZipFilePath, Arg.Any<string>()).Returns(m_ArchiveMock);
            m_Generator = new CompressedProjectGenerator(targetInfoStub);
            m_Generator.NeoZipFileFactory = factory;
            m_ProjectFiles.Add(Path.Combine(ProjectFolderPath, TempFilesFolderName, "output", "afile.ext"));
            m_ProjectFiles.Add(Path.Combine(ProjectFolderPath, BuildFilesFolderName, "anotherfile.txt"));
            m_ArchiveMock.Expect(x => x.AddAllFilesInRoot(ProjectFolderPath)).Repeat.Once();
            //After the calls above, no more calls
            m_ArchiveMock.Expect(x => x.AddFiles(Arg<string>.Is.Anything)).Repeat.Times(0);
            m_ArchiveMock.Expect(x => x.AddFile(Arg<string>.Is.Anything)).Repeat.Times(0);
            m_ArchiveMock.Expect(x => x.AddAllFilesInRoot(Arg<string>.Is.Anything)).Repeat.Times(0);
            ExecuteCompress();
            m_ArchiveMock.VerifyAllExpectations();
            m_ArchiveMock.Received(1).AddAllFilesInRoot(ProjectFolderPath);
            //After the calls above, no more calls
            m_ArchiveMock.DidNotReceiveWithAnyArgs().AddFiles(Arg.Any<string>());
            m_ArchiveMock.DidNotReceiveWithAnyArgs().AddFile(Arg.Any<string>());
            m_ArchiveMock.DidNotReceiveWithAnyArgs().AddAllFilesInRoot(Arg.Any<string>());
        }
        [Test]
            m_ProjectFiles.Add(file3);
            m_ProjectFiles.Add(file4);
            m_ArchiveMock.Expect(x => x.AddFiles(subFolderPath1)).Repeat.Once();
            m_ArchiveMock.Expect(x => x.AddFiles(subFolderPath2)).Repeat.Once();
            //After the call above, no more calls
            m_ArchiveMock.Expect(x => x.AddFiles(Arg<string>.Is.Anything)).Repeat.Times(0);
            ExecuteCompress();
            m_ArchiveMock.VerifyAllExpectations();
            m_ArchiveMock.Received().AddFiles(subFolderPath1);
            m_ArchiveMock.Received().AddFiles(subFolderPath2);
            //After the call above, no more calls
            m_ArchiveMock.DidNotReceiveWithAnyArgs().AddFiles(Arg.Any<string>());
        }
        private void ExecuteCompress()

DesignerProjectItemTest.cs
-34
+14
/Tools/ToolsTest/ProjectManager/DesignerProjectItemTest.cs
using System;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ProjectManager
{
        private IProjectItem m_DesignerProjectItem;
        private IProjectItemFactory m_ProjectItemFactory;
        private IProjectManager m_ProjectManagerStub;
        private MockRepository m_Mocks;
        [OneTimeSetUp]
        public void TestFixtureSetUp()
        {
            TestHelper.ClearServices();
            m_Mocks = new MockRepository();
            m_ProjectManagerStub = Substitute.For<IProjectManager>();
            m_ProjectManagerStub.ProjectActivity.Returns(ProjectActivities.Inactive);
            m_ProjectManagerStub = MockRepository.GenerateStub<IProjectManager>();
            m_ProjectManagerStub.Stub(projectManager => projectManager.ProjectActivity).Return(ProjectActivities.Inactive);
            var designerProjectItem = new DesignerProjectItem();
            designerProjectItem.ProjectManager = m_ProjectManagerStub;
            m_DesignerProjectItem = designerProjectItem;
            var nameCreationService = TestHelper.AddServiceStub<INameCreationService>();
            nameCreationService.Stub(x => x.IsValidFileName(Arg<string>.Is.Anything, ref Arg<string>.Ref(Rhino.Mocks.Constraints.Is.Anything(), "").Dummy)).Return(true);
            nameCreationService.IsValidFileName(Arg.Any<string>(), ref Arg.Any<string>()).Returns(true);
        }
        [Test]
            DesignerProjectItem designerProjectItem = (DesignerProjectItem)iProjectItem;
            designerProjectItem.ProjectManager = m_ProjectManagerStub;
            m_ProjectManagerStub.Stub(projectManager => projectManager.IsProjectOpen).Return(true);
            m_ProjectManagerStub.IsProjectOpen.Returns(true);
            iProjectItem.Name = "TestDesignername1";
            m_DesignerProjectItem.Add(iProjectItem);
        [Test]
        public void DeleteDesigner()
        {
            IProjectItem designerProjectItem = m_Mocks.StrictMultiMock<IProjectItem>(typeof(IDisposable));
            IProjectItem designerProjectItem = Substitute.For<IProjectItem, IDisposable>();
            const string DesignerItemName = "Form1";
            SetupResult.For(designerProjectItem.Name).Return(DesignerItemName);
            SetupResult.For(designerProjectItem.Group).Return(null);
            SetupResult.For(designerProjectItem.DependentUpon).Return(null);
            designerProjectItem.Name.Returns(DesignerItemName);
            designerProjectItem.Group.Returns(x => null);
            designerProjectItem.DependentUpon.Returns(x => null);
            using (m_Mocks.Record())
            {
                designerProjectItem.Close();
                LastCall.Repeat.Once();
                designerProjectItem.NotifyToBeDeleted();
                LastCall.Repeat.Once();
            designerProjectItem.PropertyChanged += null;
                LastCall.IgnoreArguments();
            designerProjectItem.PropertyChanged -= null;
                LastCall.IgnoreArguments();
                Expect.Call(designerProjectItem.ShouldRemoveParentGroup).Repeat.Once().Return(false);
                m_ProjectManagerStub.Expect(x => x.FlagForDeletion(designerProjectItem));
            }
            designerProjectItem.ShouldRemoveParentGroup.Returns(false);
            using (m_Mocks.Playback())
            {
            m_DesignerProjectItem.Add(designerProjectItem);
            Assert.AreEqual(true, m_DesignerProjectItem.HasChild(DesignerItemName));
            m_DesignerProjectItem.DeleteChildItem(designerProjectItem);
            }
            Assert.AreEqual(false, m_DesignerProjectItem.HasChild(DesignerItemName), "ProjectItem is not empty after delete");
            designerProjectItem.Received(1).Close();
            designerProjectItem.Received(1).NotifyToBeDeleted();
            m_ProjectManagerStub.Received().FlagForDeletion(designerProjectItem);
        }
        [Test]
        [Test]
        public void DeleteGroup()
        {
            using (m_Mocks.Record())
            {
            }
            using (m_Mocks.Playback())
            {
            IProjectItem groupProjectItem = m_ProjectItemFactory.CreateGroup<GroupProjectItem>("Forms");
            m_DesignerProjectItem.Add(groupProjectItem);
            m_DesignerProjectItem.DeleteChildItem(groupProjectItem);
            Assert.AreEqual(true, m_DesignerProjectItem.IsEmpty);
        }
        }
        [Test]
        public void ItemHasGroup()
            DesignerProjectItem designerProjectItem = (DesignerProjectItem)iProjectItem;
            designerProjectItem.ProjectManager = m_ProjectManagerStub;
            m_ProjectManagerStub.Stub(projectManager => projectManager.IsProjectOpen).Return(true);
            m_ProjectManagerStub.IsProjectOpen.Returns(true);
            iProjectItem.Name = "Color";
            Assert.AreEqual(false, m_DesignerProjectItem.HasChild("Color"));

FallbackPathLookupIndexGetObjectTest.cs
-19
+19
/Tools/ToolsTest/ProjectManager/FallbackPathLookupIndexGetObjectTest.cs
using Neo.ApplicationFramework.Tools.FunctionKey;
using Neo.ApplicationFramework.Tools.MultiLanguage;
using Neo.ApplicationFramework.Tools.Selection;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Button = Neo.ApplicationFramework.Controls.Button;
namespace Neo.ApplicationFramework.Tools.ProjectManager
            TestHelper.SetupServicePlatformFactory<IKeyboardHelper>(new KeyboardHelper());
            m_ProjectStub = MockRepository.GenerateStub<IProject>();
            m_ProjectManagerStub = MockRepository.GenerateStub<IProjectManager>();
            m_ProjectStub = Substitute.For<IProject>();
            m_ProjectManagerStub = Substitute.For<IProjectManager>();
            m_ProjectManagerStub.Project = m_ProjectStub;
            m_SubItemsServiceIde = new SubItemsServiceIde();
            TestHelper.AddService(m_SubItemsServiceIde);
            var securityService = MockRepository.GenerateStub<ISecurityServiceCF>();
            securityService.Stub(x => x.GetSecurityGroups(null)).IgnoreArguments().Return(SecurityGroups.None);
            var securityService = Substitute.For<ISecurityServiceCF>();
            securityService.GetSecurityGroups(Arg.Any<string>()).Returns(SecurityGroups.None);
            TestHelper.AddService(securityService);
            var target = new Target(TargetPlatform.WindowsCE, string.Empty, string.Empty);
            var targetService = MockRepository.GenerateMock<ITargetService>();
            targetService.Stub(x => x.CurrentTarget).Return(target);
            var targetService = Substitute.For<ITargetService>();
            targetService.CurrentTarget.Returns(target);
            TestHelper.AddService(targetService);
            CreateDesignerProjectItems();
            AddTrendViewerToScreen();
            AddButtonToScreen();
            m_ProjectStub.Stub(x => x.GetDesignerProjectItems()).Return(designerProjectItems.ToArray());
            m_ProjectStub.GetDesignerProjectItems().Returns(designerProjectItems.ToArray());
        }
        private IDesignerProjectItem CreateScreenDesignerProjectItem()
            {
                Name = screenName
            };
            var containedScreenObject = MockRepository.GenerateStub<ITestSubItemsComponent>();
            var containedScreenObject = Substitute.For<ITestSubItemsComponent>();
            containedScreenObject.Site = testSite;
            var screenDesignerProjectItem = MockRepository.GenerateStub<IDesignerProjectItem>();
            var screenDesignerProjectItem = Substitute.For<IDesignerProjectItem>();
            screenDesignerProjectItem.Name = screenName;
            screenDesignerProjectItem.Stub(x => x.ContainedObject).Return(containedScreenObject);
            screenDesignerProjectItem.Stub(x => x.ProjectItems).Return(new IProjectItem[0]);
            screenDesignerProjectItem.Stub(x => x.DesignerType).Return(typeof(Screen.ScreenDesign.Screen));
            screenDesignerProjectItem.ContainedObject.Returns(containedScreenObject);
            screenDesignerProjectItem.ProjectItems.Returns(new IProjectItem[0]);
            screenDesignerProjectItem.DesignerType.Returns(typeof(Screen.ScreenDesign.Screen));
            m_ScreenElements = new FrameworkElement[10];
            containedScreenObject.Stub(x => x.Items).Return(m_ScreenElements);
            containedScreenObject.Items.Returns(m_ScreenElements);
            return screenDesignerProjectItem;
        }
            var testSite = new TestSite {Name = "TestSite"};
            IDesignerDocument designerDocument = new DesignerDocument(
                testSite,
                MockRepository.GenerateStub<IDesignerPersistenceService>(),
                MockRepository.GenerateStub<System.ComponentModel.Design.Serialization.INameCreationService>().ToILazy(),
                Substitute.For<IDesignerPersistenceService>(),
                Substitute.For<System.ComponentModel.Design.Serialization.INameCreationService>().ToILazy(),
                () => new SelectionService(),
                new Core.TestUtilities.Utilitites.LazyWrapper<IReferenceProvider>(
                    () => new GlobalReferenceToReferenceAdapter(Core.Api.Service.ServiceContainerCF.GetService<IGlobalReferenceService>())),
        private IDesignerProjectItem CreateDesignerProjectItemStub(string name, string group, object containedObject)
        {
            var designerProjectItem = MockRepository.GenerateStub<IDesignerProjectItem>();
            var designerProjectItem = Substitute.For<IDesignerProjectItem>();
            designerProjectItem.Name = name;
            designerProjectItem.Group = group;
            designerProjectItem.Stub(x => x.ProjectItems).Return(new IProjectItem[0]);
            designerProjectItem.Stub(x => x.ContainedObject).Return(containedObject);
            designerProjectItem.ProjectItems.Returns(new IProjectItem[0]);
            designerProjectItem.ContainedObject.Returns(containedObject);
            return designerProjectItem;
        }

FallbackPathLookupIndexTest.cs
-32
+30
/Tools/ToolsTest/ProjectManager/FallbackPathLookupIndexTest.cs
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Controls;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ProjectManager
{
        {
            // Screen 1
            TestSite screenSite = new TestSite { Name = Screen1Name };
            m_ContainedScreen1Object = MockRepository.GenerateStub<ITestSubItemsComponent>();
            m_ContainedScreen1Object = Substitute.For<ITestSubItemsComponent>();
            m_ContainedScreen1Object.Site = screenSite;
            m_ButtonScreen1 = new Button { Name = ButtonName };
            m_TextBoxScreen1 = new TextBox { Name = TextBoxName };
            System.Windows.FrameworkElement[] elements = { m_ButtonScreen1, m_TextBoxScreen1 };
            m_ContainedScreen1Object.Stub(x => x.Items).Return(elements);
            m_ContainedScreen1Object.Items.Returns(elements);
            m_Screen1Item = MockRepository.GenerateStub<IDesignerProjectItem>();
            m_Screen1Item = Substitute.For<IDesignerProjectItem>();
            m_Screen1Item.Name = Screen1Name;
            m_Screen1Item.Stub(x => x.ContainedObject).Return(m_ContainedScreen1Object);
            m_Screen1Item.Stub(x => x.ProjectItems).Return(new IProjectItem[0]);
            m_Screen1Item.Stub(x => x.DesignerType).Return(typeof(Screen.ScreenDesign.Screen));
            m_Screen1Item.ContainedObject.Returns(m_ContainedScreen1Object);
            m_Screen1Item.ProjectItems.Returns(new IProjectItem[0]);
            m_Screen1Item.DesignerType.Returns(typeof(Screen.ScreenDesign.Screen));
            // Screen 2
            TestSite screen2Site = new TestSite { Name = Screen2Name };
            m_ContainedScreen2Object = MockRepository.GenerateStub<ITestSubItemsComponent>();
            m_ContainedScreen2Object = Substitute.For<ITestSubItemsComponent>();
            m_ContainedScreen2Object.Site = screen2Site;
            m_TextBoxInGroupScreen2 = new TextBox { Name = TextBoxInGroupName };
            m_GroupScreen2.Items.Add(m_TextBoxInGroupScreen2);
            System.Windows.FrameworkElement[] elementsScreen2 = { m_ButtonScreen1, m_GroupScreen2 };
            m_ContainedScreen2Object.Stub( x => x.Items).Return(elementsScreen2);
            m_ContainedScreen2Object.Items.Returns(elementsScreen2);
            m_Screen2Item = MockRepository.GenerateStub<IDesignerProjectItem>();
            m_Screen2Item = Substitute.For<IDesignerProjectItem>();
            m_Screen2Item.Name = Screen2Name;
            m_Screen2Item.Stub(x => x.ContainedObject).Return(m_ContainedScreen2Object);
            m_Screen2Item.Stub(x => x.ProjectItems).Return(new IProjectItem[0]);
            m_Screen2Item.Stub(x => x.DesignerType).Return(typeof(Screen.ScreenDesign.Screen));
            m_Screen2Item.ContainedObject.Returns(m_ContainedScreen2Object);
            m_Screen2Item.ProjectItems.Returns(new IProjectItem[0]);
            m_Screen2Item.DesignerType.Returns(typeof(Screen.ScreenDesign.Screen));
            IDesignerProjectItem[] screenItems = { m_Screen1Item, m_Screen2Item };
            m_ScreensGroup = MockRepository.GenerateStub<IProjectItem>();
            m_ScreensGroup = Substitute.For<IProjectItem>();
            m_ScreensGroup.Name = ScreensName;
            m_ScreensGroup.Stub(x => x.ContainedObject).Return(null);
            m_ScreensGroup.Stub(x => x.ProjectItems).Return(screenItems);
            m_ScreensGroup.ContainedObject.Returns(null);
            m_ScreensGroup.ProjectItems.Returns(screenItems);
            IProjectItem[] groupItems = { m_ScreensGroup };
            m_Project = MockRepository.GenerateStub<IProject>();
            m_Project.Stub(x => x.ProjectItems).Return(groupItems);
            m_Project.Stub(x => x.GetDesignerProjectItems()).Return(screenItems);
            m_Project = Substitute.For<IProject>();
            m_Project.ProjectItems.Returns(groupItems);
            m_Project.GetDesignerProjectItems().Returns(screenItems);
            m_ProjectManager = MockRepository.GenerateStub<IProjectManager>();
            m_ProjectManager = Substitute.For<IProjectManager>();
            m_ProjectManager.Project = m_Project;
            m_PathLookupIndex = new FallbackPathLookupIndex(new LazyWrapper<IProjectManager>(() => m_ProjectManager));
        }
        [Test]
        public void GetObjectsDoesNotLoadDesigner()
        {
            IDesignerProjectItem designerMock = MockRepository.GenerateMock<IDesignerProjectItem>();
            IDesignerProjectItem designerMock = Substitute.For<IDesignerProjectItem>();
            IDesignerProjectItem[] designerItems = { designerMock };
            
            designerMock.Stub(x => x.ProjectItems).Return(new IDesignerProjectItem[] { });
            designerMock.Stub(x => x.DesignerType).Return(typeof(NotImplementedException)); //Could be ANY type
            designerMock.ProjectItems.Returns(new IDesignerProjectItem[] { });
            designerMock.DesignerType.Returns(typeof(NotImplementedException)); //Could be ANY type
            IProject project = MockRepository.GenerateMock<IProject>();
            project.Stub(x => x.ProjectItems).Return(designerItems);
            project.Stub(x => x.GetDesignerProjectItems()).Return(designerItems);
            IProject project = Substitute.For<IProject>();
            project.ProjectItems.Returns(designerItems);
            project.GetDesignerProjectItems().Returns(designerItems);
            IProjectManager projectManager = MockRepository.GenerateMock<IProjectManager>();
            projectManager.Stub(x => x.Project).Return(project);
            IProjectManager projectManager = Substitute.For<IProjectManager>();
            projectManager.Project.Returns(project);
            IFallbackPathLookupIndex globalReferenceService = new FallbackPathLookupIndex(new LazyWrapper<IProjectManager>(() => projectManager));
            designerMock.Expect(x => x.ContainedObject).Repeat.Never();
            designerMock.Expect(x => x.DesignerHost).Repeat.Never();
            globalReferenceService.GetObjects<Screen.ScreenDesign.Screen>(new string[0], false);
            globalReferenceService.GetObjects<Screen.ScreenDesign.Screen>(new string[0], false);
            designerMock.VerifyAllExpectations();
            //designerMock.ContainedObject).Repeat.Never();
            //designerMock.DesignerHost).Repeat.Never();
        }
    }

GroupProjectItemTest.cs
-34
+13
/Tools/ToolsTest/ProjectManager/GroupProjectItemTest.cs
using System;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ProjectManager
{
    {
        private IProjectItem m_GroupProjectItem;
        private IProjectItemFactory m_ProjectItemFactory;
        private MockRepository m_Mocks;
        private IProjectManager m_ProjectManagerStub;
        [OneTimeSetUp]
        {
            TestHelper.ClearServices();
            m_Mocks = new MockRepository();
            m_ProjectManagerStub = MockRepository.GenerateStub<IProjectManager>();
            m_ProjectManagerStub.Stub(projectManager => projectManager.ProjectActivity).Return(ProjectActivities.Inactive);
            m_ProjectManagerStub = Substitute.For<IProjectManager>();
            m_ProjectManagerStub.ProjectActivity.Returns(ProjectActivities.Inactive);
            m_GroupProjectItem = m_ProjectItemFactory.CreateGroup<GroupProjectItem>("Forms");
            ((ProjectItem)m_GroupProjectItem).ProjectManager = m_ProjectManagerStub;
            var nameCreationService = TestHelper.AddServiceStub<INameCreationService>();
            nameCreationService.Stub(x => x.IsValidFileName(Arg<string>.Is.Anything, ref Arg<string>.Ref(Rhino.Mocks.Constraints.Is.Anything(), "").Dummy)).Return(true);
            nameCreationService.IsValidFileName(Arg.Any<string>(), ref Arg.Any<string>()).Returns(true);
        }
        [Test]
            DesignerProjectItem designerProjectItem = (DesignerProjectItem)iProjectItem;
            designerProjectItem.ProjectManager = m_ProjectManagerStub;
            m_ProjectManagerStub.Stub(projectManager => projectManager.IsProjectOpen).Return(true);
            m_ProjectManagerStub.IsProjectOpen.Returns(true);
            iProjectItem.Name = "Test";
            m_GroupProjectItem.Add(iProjectItem);
        [Test]
        public void DeleteDesigner()
        {
            IProjectItem designerProjectItem = m_Mocks.StrictMultiMock<IProjectItem>(typeof(IDisposable));
            IProjectItem designerProjectItem = Substitute.For<IProjectItem, IDisposable>();
            SetupResult.For(designerProjectItem.Name).Return("Test");
            SetupResult.For(designerProjectItem.Group).Return(null);
            SetupResult.For(designerProjectItem.DependentUpon).Return(null);
            designerProjectItem.Name.Returns("Test");
            designerProjectItem.Group.Returns(x => null);
            designerProjectItem.DependentUpon.Returns(x => null);
            using (m_Mocks.Record())
            {
                designerProjectItem.Close();
                designerProjectItem.NotifyToBeDeleted();
                LastCall.Repeat.Once();
                designerProjectItem.PropertyChanged += null;
                LastCall.IgnoreArguments();
                designerProjectItem.PropertyChanged -= null;
                LastCall.IgnoreArguments();
                Expect.Call(designerProjectItem.ShouldRemoveParentGroup).Repeat.Once().Return(true);
            }
            designerProjectItem.ShouldRemoveParentGroup.Returns(true);
            using (m_Mocks.Playback())
            {
            m_GroupProjectItem.Add(designerProjectItem);
            Assert.IsFalse(m_GroupProjectItem.IsEmpty);
            m_GroupProjectItem.DeleteChildItem(designerProjectItem);
            }
            m_Mocks.VerifyAll();
            Assert.IsTrue(m_GroupProjectItem.IsEmpty);
            designerProjectItem.Received().Close();
            designerProjectItem.Received(1).NotifyToBeDeleted();
        }
        [Test]
        [Test]
        public void DeleteGroup()
        {
            using (m_Mocks.Record())
            {
            }
            using (m_Mocks.Playback())
            {
            IProjectItem groupProjectItem = m_ProjectItemFactory.CreateGroup<GroupProjectItem>("SubForms");
            m_GroupProjectItem.Add(groupProjectItem);
            m_GroupProjectItem.DeleteChildItem(groupProjectItem);
            Assert.IsTrue(m_GroupProjectItem.IsEmpty);
        }
        }
        [Test]
        public void ItemHasGroup()
            DesignerProjectItem designerProjectItem = (DesignerProjectItem)iProjectItem;
            designerProjectItem.ProjectManager = m_ProjectManagerStub;
            m_ProjectManagerStub.Stub(projectManager => projectManager.IsProjectOpen).Return(true);
            m_ProjectManagerStub.IsProjectOpen.Returns(true);
            iProjectItem.Name = "Form1";
            Assert.AreEqual(false, m_GroupProjectItem.HasChild("Form1"));

MemoryManagementSettingsTest.cs
-10
+10
/Tools/ToolsTest/ProjectManager/MemoryManagementSettingsTest.cs
using Neo.ApplicationFramework.Interfaces.vNext.Gaps;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.ProjectConfiguration.PropertyPages.ViewModels;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ProjectManager
{
        public void Setup()
        {
            TestHelper.ClearServices();
            TestHelper.CreateAndAddServiceMock<IEventBrokerService>();
            TestHelper.CreateAndAddServiceStub<IEventBrokerService>();
            m_ScreenCacheSetupService = TestHelper.CreateAndAddServiceStub<IScreenCacheSetupService>();
            m_MessageBoxServiceIde = TestHelper.CreateAndAddServiceStub<IMessageBoxServiceIde>();
            m_InformationProgressService = TestHelper.CreateAndAddServiceStub<IInformationProgressService>();
            m_BrandServiceIde = TestHelper.CreateAndAddServiceStub<IBrandServiceIde>();
            m_BrandServiceIde.Stub(x => x.BrandName).Return("iX");
            m_BrandServiceIde.BrandName.Returns("iX");
            m_StructuredTagService = TestHelper.CreateAndAddServiceStub<IStructuredTagService>();
            m_FileLaunchService = TestHelper.CreateAndAddServiceStub<IFileLaunchService>();
            var project = MockRepository.GenerateStub<IProject>();
            m_ProjectManager = MockRepository.GenerateStub<IProjectManager>();
            var project = Substitute.For<IProject>();
            m_ProjectManager = Substitute.For<IProjectManager>();
            m_ProjectManager.Project = project;
        }
        [TestCase(false)]
        public void MemoryManagementVisibility(bool isPC)
        {
            var currentTerminal = MockRepository.GenerateStub<ITerminal>();
            currentTerminal.Stub(x => x.IsPC).Return(isPC);
            var currentTerminal = Substitute.For<ITerminal>();
            currentTerminal.IsPC.Returns(isPC);
            m_ProjectManager.Project.Terminal = currentTerminal;
            var gapServiceStubLazy = MockRepository.GenerateStub<ILazy<IGapService>>();
            gapServiceStubLazy.Stub(s => s.Value).Return(MockRepository.GenerateStub<IGapService>());
            gapServiceStubLazy.Value.Stub(x => x.IsSubjectConsideredGap(Arg<MemberInfo>.Is.Anything)).Return(false);
            var gapServiceStubLazy = Substitute.For<ILazy<IGapService>>();
            gapServiceStubLazy.Value.Returns(Substitute.For<IGapService>());
            gapServiceStubLazy.Value.IsSubjectConsideredGap(Arg.Any<MemberInfo>()).Returns(false);
            var advancedPropertyPageViewModel = new AdvancedPropertyPageViewModel(
                m_ProjectManager,

ProjectFactoryTest.cs
-55
+53
/Tools/ToolsTest/ProjectManager/ProjectFactoryTest.cs
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Storage;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.ProjectManager
{
            m_BrandService = TestHelper.AddServiceStub<IBrandService>();
            var storageService = TestHelper.AddServiceStub<IStorageService>();
            m_XmlConverterService.Stub(x => x.LastConverterVersion).Return(new Version());
            m_BrandService.Stub(x => x.BrandName).Return("iX");
            storageService.Stub(x => x.CreateProviderSettings(null, TargetPlatform.Windows, TargetPlatformVersion.NotApplicable))
                .IgnoreArguments()
                .Return(new LocallyHostedProjectStorageProviderSettings());
            m_XmlConverterService.LastConverterVersion.Returns(new Version());
            m_BrandService.BrandName.Returns("iX");
            storageService.CreateProviderSettings(Arg.Any<string>(), Arg.Any<TargetPlatform>(), Arg.Any<TargetPlatformVersion>())
                .Returns(new LocallyHostedProjectStorageProviderSettings());
            TestHelperExtensions.AddServiceToolManager(false);
            TestHelper.AddService<IProjectDefaultSettingsService>(new ProjectDefaultSettingsService());
            var featureSecurityServiceIde = TestHelper.AddServiceStub<IFeatureSecurityServiceIde>();
            featureSecurityServiceIde.Stub(inv => inv.GetAllFeatures()).Return(Enumerable.Empty<IFeature>());
            featureSecurityServiceIde.GetAllFeatures().Returns(Enumerable.Empty<IFeature>());
            TestHelper.SetupServicePlatformFactory<IKeyboardHelper>(new KeyboardHelper());
        }
        [Test]
        public void OpenProjectWithEqualVersionAsDesigner()
        {
            m_XmlConverterService.Stub(x => x.GetDocumentVersion(string.Empty)).IgnoreArguments().Return(Assembly.GetExecutingAssembly().GetName().Version);
            m_XmlConverterService.GetDocumentVersion(Arg.Any<string>()).Returns(Assembly.GetExecutingAssembly().GetName().Version);
            IObjectSerializer objectSerializer = MockRepository.GenerateMock<IObjectSerializer>();
            IObjectSerializerFactoryIde objectSerializerFactory = MockRepository.GenerateMock<IObjectSerializerFactoryIde>();
            IProject project = MockRepository.GenerateMock<IProject>();
            project.Stub(inv => inv.FeatureDependencies).Return(Enumerable.Empty<IFeatureDependency>());
            IObjectSerializer objectSerializer = Substitute.For<IObjectSerializer>();
            IObjectSerializerFactoryIde objectSerializerFactory = Substitute.For<IObjectSerializerFactoryIde>();
            IProject project = Substitute.For<IProject>();
            project.FeatureDependencies.Returns(Enumerable.Empty<IFeatureDependency>());
            objectSerializerFactory.Expect(x => x.GetSerializer()).Return(objectSerializer);
            objectSerializer.Expect(x => x.DeseralizeFile(OpenFilename)).Return(project);
            objectSerializer.Expect(x => x.Load(OpenFilename)).Return(XmlContentDoc);
            project.Expect(x => x.Filename = OpenFilename);
            objectSerializerFactory.GetSerializer().Returns(objectSerializer);
            objectSerializer.DeseralizeFile(OpenFilename).Returns(project);
            objectSerializer.Load(OpenFilename).Returns(XmlContentDoc);
            IProjectItem projectItem = MockRepository.GenerateMock<IProjectItem>();
            projectItem.Expect(x => x.Name).Return("Functions");
            projectItem.Expect(x => x.ProjectItems).Return(new IProjectItem[0]);
            project.Expect(x => x.ProjectItems).Return(new IProjectItem[] { projectItem });
            IProjectItem projectItem = Substitute.For<IProjectItem>();
            projectItem.Name.Returns("Functions");
            projectItem.ProjectItems.Returns(new IProjectItem[0]);
            project.ProjectItems.Returns(new IProjectItem[] { projectItem });
            IProjectFactory projectFactory = new ProjectFactory(objectSerializerFactory.ToILazy());
            Assert.IsNotNull(project, "Project is null after Load");
            Assert.AreSame(loadedProject, project, "OpenProject does not return the correct project");
            objectSerializerFactory.VerifyAllExpectations();
            objectSerializer.VerifyAllExpectations();
            project.VerifyAllExpectations();
            objectSerializerFactory.Received().GetSerializer();
            objectSerializer.Received().DeseralizeFile(OpenFilename);
            objectSerializer.Received().Load(OpenFilename);
            project.Received().Filename = OpenFilename;
        }
        [Test]
            Version currentVersion = Assembly.GetExecutingAssembly().GetName().Version;
            Version lowerVersion = TestHelper.GetPreviousVersion(currentVersion);
            m_XmlConverterService.Stub(x => x.GetDocumentVersion(string.Empty)).IgnoreArguments().Return(lowerVersion);
            m_XmlConverterService.GetDocumentVersion(Arg.Any<string>()).Returns(lowerVersion);
            IObjectSerializer objectSerializer = MockRepository.GenerateMock<IObjectSerializer>();
            IObjectSerializerFactoryIde objectSerializerFactory = MockRepository.GenerateMock<IObjectSerializerFactoryIde>();
            IProject project = MockRepository.GenerateMock<IProject>();
            project.Stub(inv => inv.FeatureDependencies).Return(Enumerable.Empty<IFeatureDependency>());
            IObjectSerializer objectSerializer = Substitute.For<IObjectSerializer>();
            IObjectSerializerFactoryIde objectSerializerFactory = Substitute.For<IObjectSerializerFactoryIde>();
            IProject project = Substitute.For<IProject>();
            project.FeatureDependencies.Returns(Enumerable.Empty<IFeatureDependency>());
            objectSerializerFactory.Expect(x => x.GetSerializer()).Return(objectSerializer);
            objectSerializer.Expect(x => x.DeseralizeFile(OpenFilename)).Return(project);
            objectSerializer.Expect(x => x.Load(OpenFilename)).Return(XmlContentDoc);
            project.Expect(x => x.Filename = OpenFilename);
            objectSerializerFactory.GetSerializer().Returns(objectSerializer);
            objectSerializer.DeseralizeFile(OpenFilename).Returns(project);
            objectSerializer.Load(OpenFilename).Returns(XmlContentDoc);
            IProjectItem projectItem = MockRepository.GenerateMock<IProjectItem>();
            projectItem.Expect(x => x.Name).Return("Functions");
            projectItem.Expect(x => x.ProjectItems).Return(new IProjectItem[0]);
            project.Expect(x => x.ProjectItems).Return(new IProjectItem[] { projectItem });
            IProjectItem projectItem = Substitute.For<IProjectItem>();
            projectItem.Name.Returns("Functions");
            projectItem.ProjectItems.Returns(new IProjectItem[0]);
            project.ProjectItems.Returns(new IProjectItem[] { projectItem });
            IProjectFactory projectFactory = new ProjectFactory(objectSerializerFactory.ToILazy());
            Assert.IsNotNull(project, "Project is null after Load");
            Assert.AreSame(loadedProject, project, "OpenProject does not return the correct project");
            objectSerializerFactory.VerifyAllExpectations();
            objectSerializer.VerifyAllExpectations();
            project.VerifyAllExpectations();
            objectSerializerFactory.GetSerializer();
            objectSerializer.Received().DeseralizeFile(OpenFilename);
            objectSerializer.Received().Load(OpenFilename);
            project.Received().Filename = OpenFilename;
            
        }
        [Test]
            int currentBuild = currentVersion.Build;
            Version higherVersion = new Version(currentVersion.Major, currentVersion.Minor, ++currentBuild);
            m_XmlConverterService.Stub(x => x.GetDocumentVersion(string.Empty)).IgnoreArguments().Return(higherVersion);
            m_XmlConverterService.GetDocumentVersion(Arg.Any<string>()).Returns(higherVersion);
            IObjectSerializer objectSerializer = MockRepository.GenerateMock<IObjectSerializer>();
            IObjectSerializerFactoryIde objectSerializerFactory = MockRepository.GenerateMock<IObjectSerializerFactoryIde>();
            IProject project = MockRepository.GenerateMock<IProject>();
            IObjectSerializer objectSerializer = Substitute.For<IObjectSerializer>();
            IObjectSerializerFactoryIde objectSerializerFactory = Substitute.For<IObjectSerializerFactoryIde>();
            IProject project = Substitute.For<IProject>();
            objectSerializerFactory.Expect(x => x.GetSerializer()).Return(objectSerializer);
            objectSerializer.Expect(x => x.DeseralizeFile(OpenFilename)).Return(project);
            objectSerializerFactory.GetSerializer().Returns(objectSerializer);
            objectSerializer.DeseralizeFile(OpenFilename).Returns(project);
            IProjectFactory projectFactory = new ProjectFactory(objectSerializerFactory.ToILazy());
            IProject loadedProject = projectFactory.OpenProject(OpenFilename, out isProjectDirtyByConversion);
            Assert.IsNull(loadedProject, "Loaded project is not null");
        }
        [Test]
        {
            const string saveFilename = "test.xml";
            IObjectSerializer objectSerializer = MockRepository.GenerateMock<IObjectSerializer>();
            IObjectSerializerFactoryIde objectSerializerFactory = MockRepository.GenerateMock<IObjectSerializerFactoryIde>();
            IProject projectMock = MockRepository.GenerateMock<IProject>();
            IObjectSerializer objectSerializer = Substitute.For<IObjectSerializer>();
            IObjectSerializerFactoryIde objectSerializerFactory = Substitute.For<IObjectSerializerFactoryIde>();
            IProject projectMock = Substitute.For<IProject>();
            projectMock.Expect(x => x.GetDesignerProjectItems()).Return(new List<IDesignerProjectItem>().ToArray());
            objectSerializerFactory.Expect(x => x.GetSerializer()).Return(objectSerializer);
            objectSerializer.Expect(x => x.SerializeToFile(projectMock, saveFilename));
            projectMock.GetDesignerProjectItems().Returns(new List<IDesignerProjectItem>().ToArray());
            objectSerializerFactory.GetSerializer().Returns(objectSerializer);
            IProjectFactory projectFactory = new ProjectFactory(objectSerializerFactory.ToILazy());
            projectFactory.SaveProject(projectMock, saveFilename);
            projectMock.VerifyAllExpectations();
            objectSerializerFactory.VerifyAllExpectations();
            objectSerializer.VerifyAllExpectations();
            projectMock.Received().GetDesignerProjectItems();
            objectSerializerFactory.Received().GetSerializer();
            objectSerializer.Received().SerializeToFile(projectMock, saveFilename);
        }
    }
}

ProjectItemFactoryTest.cs
-13
+7
/Tools/ToolsTest/ProjectManager/ProjectItemFactoryTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.ProjectManager
{
            TestHelper.AddServiceStub<IMessageBoxServiceIde>();
            TestHelper.AddServiceStub<IErrorReporterService>();
            
            m_FeatureSecurityServiceStub.BackToRecord();
            m_FeatureSecurityServiceStub.Stub(x => x.IsActivated<ImportDesignersFeature>()).Return(true);
            m_FeatureSecurityServiceStub.Replay();
            m_FeatureSecurityServiceStub.IsActivated<ImportDesignersFeature>().Returns(true);
            var sourceVersion = new Version(0, 0);
            m_XmlConverterServiceStub.BackToRecord();
            m_XmlConverterServiceStub.Stub(x => x.GetDocumentVersion(Arg<string>.Is.Anything)).Return(sourceVersion);
            m_XmlConverterServiceStub.Replay();
            m_XmlConverterServiceStub.GetDocumentVersion(Arg.Any<string>()).Returns(sourceVersion);
            IProjectItem projectItem = m_ProjectItemFactory.ImportDesigner("filePath", "newName");
            Assert.IsNull(projectItem);
            var version = Assembly.GetExecutingAssembly().GetName().Version;
            TestHelper.AddServiceStub<IMessageBoxServiceIde>();
            var serializedDesignerExtractorStub = TestHelper.AddServiceStub<ISerializedDesignerExtractor>();
            m_FeatureSecurityServiceStub.BackToRecord();
            m_FeatureSecurityServiceStub.Stub(x => x.IsActivated<ImportDesignersFeature>()).Return(false);
            m_FeatureSecurityServiceStub.Stub(x => x.IsActivated<ProjectScreenTemplateFeature>()).Return(true);
            m_FeatureSecurityServiceStub.Replay();
            m_XmlConverterServiceStub.Stub(x => x.GetDocumentVersion(Arg<string>.Is.Anything)).Return(version);
            m_FeatureSecurityServiceStub.IsActivated<ImportDesignersFeature>().Returns(false);
            m_FeatureSecurityServiceStub.IsActivated<ProjectScreenTemplateFeature>().Returns(true);
            m_XmlConverterServiceStub.GetDocumentVersion(Arg.Any<string>()).Returns(version);
            // Act
            m_ProjectItemFactory.ImportDesigner("filePath", "newName");
            // Assert
            serializedDesignerExtractorStub.AssertWasCalled(x => x.DeserializeType(Arg<string>.Is.Anything));
            serializedDesignerExtractorStub.ReceivedWithAnyArgs().DeserializeType(Arg.Any<string>());
        }
    }
}

ProjectItemTest.cs
-61
+27
/Tools/ToolsTest/ProjectManager/ProjectItemTest.cs
using System;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ProjectManager
{
    [TestFixture]
    public class ProjectItemTest
    {
        private readonly MockRepository m_Mocks = new MockRepository();
        private IEventSubscriber m_Subscriber;
        private IProjectTreeItem m_ProjectTreeItem;
        private IProjectItem m_ProjectItem;
        [OneTimeSetUp]
        public void TestFixtureSetUp()
        {
        }
        [SetUp]
        {
            TestHelper.ClearServices();
            m_ProjectManagerStub = MockRepository.GenerateStub<IProjectManager>();
            m_ProjectManagerStub.Stub(projectManager => projectManager.ProjectActivity).Return(ProjectActivities.Inactive);
            m_ProjectManagerStub = Substitute.For<IProjectManager>();
            m_ProjectManagerStub.ProjectActivity.Returns(ProjectActivities.Inactive);
            m_ProjectTreeItem = new ProjectItem();
            ((ProjectItem)m_ProjectTreeItem).ProjectManager = m_ProjectManagerStub;
            m_ProjectItem = new ProjectItem();
            ((ProjectItem)m_ProjectItem).ProjectManager = m_ProjectManagerStub;
            m_Subscriber = m_Mocks.StrictMock<IEventSubscriber>();
            m_Subscriber = Substitute.For<IEventSubscriber>();
        }
        [Test]
        public void NameSetterFiresItemChanged()
        {
            using (m_Mocks.Record())
            {
            m_ProjectTreeItem.ItemChanged += m_Subscriber.Handler;
            m_Subscriber.Handler(m_ProjectTreeItem, EventArgs.Empty);
            }
            
            using (m_Mocks.Playback())
            {
            m_ProjectTreeItem.Name = "olle";
            // Assert ??
        }
            m_Mocks.VerifyAll();
        }
        [Test]
        public void ItemChangedEventFiresDirty()
        {
            using (m_Mocks.Record())
            {
            m_ProjectItem.Dirty += m_Subscriber.Handler;
            m_Subscriber.Handler(m_ProjectItem, EventArgs.Empty);
            }
            using (m_Mocks.Playback())
            {
            m_ProjectItem.FireItemChanged();
            
            // Assert ???
        }
            m_Mocks.VerifyAll();
        }
        [Test]
        public void TwoItemChangedEventsFiresDirtyOnce()
        {
            using (m_Mocks.Record())
            {
            m_ProjectItem.Dirty += m_Subscriber.Handler;
            m_Subscriber.Handler(m_ProjectItem, EventArgs.Empty);
            }
            using (m_Mocks.Playback())
            {
            m_ProjectItem.FireItemChanged();
            m_ProjectItem.FireItemChanged();
            
            // Assert ???
        }
            m_Mocks.VerifyAll();
        }
        [Test]
        public void ResetDirtySetsDirtyFalseOnChildren()
        [Test]
        public void ProjectItemDoesNotLoadChildrenThatSupportsUnloading()
        {
            IProjectItem projectItemSupportingUnload = m_Mocks.PartialMock<ProjectItem>();
            SetupResult.For(projectItemSupportingUnload.Name).Return("SomeLazyProjectItem");
            // Arrange
            IProjectItem projectItemSupportingUnload = Substitute.For<ProjectItem>();
            projectItemSupportingUnload.Name.Returns("SomeLazyProjectItem");
            using (m_Mocks.Record())
            {
                Expect.Call(projectItemSupportingUnload.SupportsUnloading).Return(true);
                projectItemSupportingUnload.Load();
                LastCall.IgnoreArguments().Repeat.Never();
                projectItemSupportingUnload.Load(null);
                LastCall.IgnoreArguments().Repeat.Never();
            }
            projectItemSupportingUnload.SupportsUnloading.Returns(true);
            using (m_Mocks.Playback())
            {
            // Act
            m_ProjectItem.Add(projectItemSupportingUnload);
            m_ProjectItem.Load(null);
                m_ProjectItem.Load(null);
            }
            m_Mocks.VerifyAll();
            // Assert
            projectItemSupportingUnload.DidNotReceive().Load();
            projectItemSupportingUnload.DidNotReceive().Load(null);
        }
        [Test]
        public void ProjectItemLoadsChildrenThatSupportsDoesNotSupportUnloading()
        {
            IProjectItem projectItemSupportingUnload = m_Mocks.PartialMock<ProjectItem>();
            SetupResult.For(projectItemSupportingUnload.Name).Return("ProjectItem123");
            using (m_Mocks.Record())
            {
                Expect.Call(projectItemSupportingUnload.SupportsUnloading).Return(false);
                projectItemSupportingUnload.Load();
                LastCall.IgnoreArguments().Repeat.Once();
            }
            // Arrange
            IProjectItem projectItemSupportingUnload = Substitute.For<ProjectItem>();
            projectItemSupportingUnload.Name.Returns("ProjectItem123");
            projectItemSupportingUnload.SupportsUnloading.Returns(false);
            using (m_Mocks.Playback())
            {
            // Act
            m_ProjectItem.Add(projectItemSupportingUnload);
            m_ProjectItem.Load(null);
            
                m_ProjectItem.Load(null);
            }
            m_Mocks.VerifyAll();
            // Assert
            projectItemSupportingUnload.Received(1).Load();
        }
    }
}

ProjectManagerCommandsTest.cs
-196
+156
/Tools/ToolsTest/ProjectManager/ProjectManagerCommandsTest.cs
Displayed content is truncated due to maximum viewable content limit.
using Neo.ApplicationFramework.Tools.OpcClient;
using Neo.ApplicationFramework.Tools.Wizards.CreateNewProjectWizard;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.ProjectManager
{
            m_Project2neo = $"Project2{m_ProjectExtension}";
            m_ProjectFolderPath = @"c:\neo\MyProject";
            m_Project2FolderPath = @"c:\neo\MyProject2";
            m_TargetInfo = MockRepository.GenerateStub<ITargetInfo>();
            m_TargetInfo = Substitute.For<ITargetInfo>();
            m_TargetInfo.ProjectFilesPath = "ProjectFiles";
            m_TargetInfo.TempPath = "TempPath";
        }
        [TearDown]
        public void TearDown()
        {
            m_ProjectManagerMock = MockRepository.GenerateStub<IProjectManager>();
            m_ProjectManagerMock = Substitute.For<IProjectManager>();
        }
        [SetUp]
        public void SetupProjectManager()
        {
            IBrandService brandService = MockRepository.GenerateMock<IBrandService>();
            IBrandService brandService = Substitute.For<IBrandService>();
            IDesignerMetadata designerMetadataStub = MockRepository.GenerateStub<IDesignerMetadata>();
            IDesignerInfo designerInfoStub = MockRepository.GenerateStub<IDesignerInfo>();
            designerInfoStub.Stub(x => x.Metadata).Return(designerMetadataStub);
            designerInfoStub.Stub(x => x.Type).Return(typeof(DataSourceContainer));
            IDesignerMetadata designerMetadataStub = Substitute.For<IDesignerMetadata>();
            IDesignerInfo designerInfoStub = Substitute.For<IDesignerInfo>();
            designerInfoStub.Metadata.Returns(designerMetadataStub);
            designerInfoStub.Type.Returns(typeof(DataSourceContainer));
            List<IDesignerInfo> designersList = new List<IDesignerInfo>
            {
                designerInfoStub
            };
            m_TypeListService = MockRepository.GenerateStub<ITypeListService>();
            m_NameCreationService = MockRepository.GenerateMock<INameCreationService>();
            m_TypeListService = Substitute.For<ITypeListService>();
            m_NameCreationService = Substitute.For<INameCreationService>();
            TestHelper.CreateAndAddServiceStub<IWelcomeScreenGreetingService>();
            TestHelper.AddService(brandService);
                brandService.Stub(x => x.FileExtension).Return(m_DesignerExtension);
                brandService.Stub(x => x.ProjectFileExtension).Return(m_DesignerExtension);
                brandService.FileExtension.Returns(m_DesignerExtension);
                brandService.ProjectFileExtension.Returns(m_DesignerExtension);
            TestHelper.AddService(m_TypeListService);
                m_TypeListService.Stub(x => x.GetDesigners()).Return(designersList);
                m_TypeListService.GetDesigners().Returns(designersList);
            TestHelper.AddService(m_NameCreationService);
            m_NameCreationService.Stub(x => x.IsValidName(Arg<string>.Is.Anything, ref Arg<string>.Ref(Rhino.Mocks.Constraints.Is.Anything(), "").Dummy)).IgnoreArguments().Return(true);
            m_NameCreationService.Stub(x => x.IsValidFileName(Arg<string>.Is.Anything, ref Arg<string>.Ref(Rhino.Mocks.Constraints.Is.Anything(), "").Dummy)).IgnoreArguments().Return(true);
            m_NameCreationService.IsValidName(Arg.Any<string>(), ref Arg.Any<string>()).Returns(true);
            m_NameCreationService.IsValidFileName(Arg.Any<string>(), ref Arg.Any<string>()).Returns(true);
            TestHelper.AddService<IInformationProgressService>(new InvisibleInformationProgressManager());
            TestHelper.AddService<IProjectManagerOpenService>(new ProjectManagerOpenService());
            TestHelper.UseTestWindowThreadHelper = true;
            m_ProjectFactory = MockRepository.GenerateMock<IProjectFactory>();
            m_Project = MockRepository.GenerateMock<IProject>();
            m_Project.Stub(x => x.SetBuildError(Arg<bool>.Is.Anything));
            m_Project.Stub(inv => inv.FeatureDependencies).Return(Enumerable.Empty<IFeatureDependency>());
            m_ProjectManagerUI = MockRepository.GenerateMock<IProjectManagerUI>();
            m_ProjectManagerMock = MockRepository.GenerateMock<IProjectManager>();
            m_LoadOnDemandService = MockRepository.GenerateMock<ILoadOnDemandService>();
            m_WindowService = MockRepository.GenerateMock<IWindowService>();
            m_WindowServiceIde = MockRepository.GenerateMock<IWindowServiceIde>();
            m_WindowServiceIde.Stub(x => x.EnableToolWindowsAndRibbon(Arg<bool>.Is.Anything));
            m_ProjectFactory = Substitute.For<IProjectFactory>();
            m_Project = Substitute.For<IProject>();
            m_Project.FeatureDependencies.Returns(Enumerable.Empty<IFeatureDependency>());
            m_ProjectManagerUI = Substitute.For<IProjectManagerUI>();
            m_ProjectManagerMock = Substitute.For<IProjectManager>();
            m_LoadOnDemandService = Substitute.For<ILoadOnDemandService>();
            m_WindowService = Substitute.For<IWindowService>();
            m_WindowServiceIde = Substitute.For<IWindowServiceIde>();
            m_FileHelper = MockRepository.GenerateStub<FileHelper>();
            m_DirectoryHelper = MockRepository.GenerateStub<DirectoryHelper>();
            m_FileHelper = Substitute.For<FileHelper>();
            m_DirectoryHelper = Substitute.For<DirectoryHelper>();
            Func<IFeatureSecurityServiceIde> fssFunc = () =>
            {
                var featureSecurityServiceIde = MockRepository.GenerateStub<IFeatureSecurityServiceIde>();
                featureSecurityServiceIde.Stub(inv => inv.GetAllActiveFeatures()).Return(Enumerable.Empty<ISecuredFeature>());
                featureSecurityServiceIde.Stub(inv => inv.GetAllFeatures()).Return(Enumerable.Empty<IFeature>());
                var featureSecurityServiceIde = Substitute.For<IFeatureSecurityServiceIde>();
                featureSecurityServiceIde.GetAllActiveFeatures().Returns(Enumerable.Empty<ISecuredFeature>());
                featureSecurityServiceIde.GetAllFeatures().Returns(Enumerable.Empty<IFeature>());
                return featureSecurityServiceIde;
            };
            var featureSecurityServiceIdeLazy = new LazyWrapper<IFeatureSecurityServiceIde>(fssFunc);
            var opcClientServiceIdeLazy = new LazyWrapper<IOpcClientServiceIde>(() => MockRepository.GenerateStub<IOpcClientServiceIde>());
            var opcClientServiceIdeLazy = new LazyWrapper<IOpcClientServiceIde>(() => Substitute.For<IOpcClientServiceIde>());
            Func<ITargetService> targetServiceInitializer = () =>
            {
                var targetService = MockRepository.GenerateStub<ITargetService>();
                targetService.Stub(ts => ts.CurrentTargetInfo).Return(m_TargetInfo);
                var targetService = Substitute.For<ITargetService>();
                targetService.CurrentTargetInfo.Returns(m_TargetInfo);
                return targetService;
            };
            Func<ITerminalTargetChangeService> terminalTargetChangeServiceInitializer = () =>
            {
                var terminalTargetChangeService = MockRepository.GenerateStub<ITerminalTargetChangeService>();
                var terminalTargetChangeService = Substitute.For<ITerminalTargetChangeService>();
                return terminalTargetChangeService;
            };
            var terminalTargetChangeServiceLazy = new LazyWrapper<ITerminalTargetChangeService>(terminalTargetChangeServiceInitializer);
            var namingConstraints = MockRepository.GenerateMock<INamingConstraints>();
            namingConstraints.Stub(inv => inv.IsNameLengthValid(Arg<int>.Is.Anything, Arg<int>.Is.Anything, Arg<int>.Is.Anything)).Return(true);
            namingConstraints.Stub(inv => inv.ReservedApplicationNames).Return(new HashSet<string>());
            namingConstraints.Stub(inv => inv.ReservedSystemNames).Return(new HashSet<string>());
            var namingConstraints = Substitute.For<INamingConstraints>();
            namingConstraints.IsNameLengthValid(Arg.Any<int>(), Arg.Any<int>(), Arg.Any<int>()).Returns(true);
            namingConstraints.ReservedApplicationNames.Returns(new HashSet<string>());
            namingConstraints.ReservedSystemNames.Returns(new HashSet<string>());
            INameCreationService nameCreationService = new NameCreationService(namingConstraints);
            var ideOptionsService = MockRepository.GenerateStub<IIDEOptionsService>();
            var ideOptionsService = Substitute.For<IIDEOptionsService>();
            var messageBoxService = MockRepository.GenerateStub<IMessageBoxServiceIde>();
            var messageBoxService = Substitute.For<IMessageBoxServiceIde>();
            m_ProjectManager = new ProjectManager(
                m_ProjectFactory,
            m_ProjectManager.ProjectCreated += OnProjectCreated;
            m_ProjectManager.ProjectSaved += OnProjectSaved;
            m_DirectoryHelper.Expect(dh => dh.Exists(null)).IgnoreArguments().Return(true).Repeat.Any();
            m_DirectoryHelper.Exists(Arg.Any<string>()).Returns(true);
        }
        [TearDown]
        public void VerifyMocks()
        {
            m_ProjectFactory.VerifyAllExpectations();
            m_Project.VerifyAllExpectations();
            m_WindowService.VerifyAllExpectations();
            m_ProjectManagerUI.VerifyAllExpectations();
            m_ProjectManagerMock.VerifyAllExpectations();
            m_LoadOnDemandService.VerifyAllExpectations();
            m_WindowServiceIde.VerifyAllExpectations();
            m_DirectoryHelper.VerifyAllExpectations();
            m_ProjectManager.ProjectOpened -= OnProjectOpened;
            m_ProjectManager.ProjectSaved -= OnProjectSaved;
        }
            IProjectSettings projectSettings = new ProjectSettings();
            projectSettings.Name = projectName;
            projectSettings.Location = Path.GetTempPath();
            projectSettings.Terminal = MockRepository.GenerateMock<ITerminal>();
            projectSettings.Terminal.Stub(x => x.PanelTypeGroup).Return(PanelTypeGroup.TxB);
            projectSettings.Terminal = Substitute.For<ITerminal>();
            projectSettings.Terminal.PanelTypeGroup.Returns(PanelTypeGroup.TxB);
            string folderPath = Path.Combine(projectSettings.Location, projectName);
            string filePath = Path.Combine(folderPath, Path.ChangeExtension(projectName, m_ProjectExtension.Replace(".", "")));
            m_ProjectManagerMock.Expect(x => x.CloseProject(false)).Return(true).Repeat.Once();
            m_ProjectManagerMock.CloseProject(false).Returns(true);
            if (projectInfoDialogResult)
            {
                m_ProjectManagerUI.Expect(x => x.ShowNewProjectWizardInfoDialog(Arg<bool>.Is.Anything)).Return(projectSettings).Repeat.Once();
                m_ProjectManagerUI.ShowNewProjectWizardInfoDialog(Arg.Any<bool>()).Returns(projectSettings);
            }
            else
            {
                m_ProjectManagerUI.Expect(x => x.ShowNewProjectWizardInfoDialog(Arg<bool>.Is.Anything)).Return(null).Repeat.Once();
                m_ProjectManagerUI.ShowNewProjectWizardInfoDialog(Arg.Any<bool>()).Returns(x => null);
            }
            if (projectInfoDialogResult)
            {
                m_ProjectFactory.Expect(x => x.CreateProject()).Return(m_Project).Repeat.Once();
                m_ProjectFactory.Expect(x => x.SaveProject(m_Project, filePath)).Return(true).Repeat.Once();
                m_ProjectManagerUI.Expect(x => x.ProjectRootTreeItem = Arg<IProjectTreeItem>.Is.Anything).Repeat.Once();
                m_Project.Expect(x => x.FireItemChanged()).Repeat.Once();
                m_ProjectFactory.CreateProject().Returns(m_Project);
                m_ProjectFactory.SaveProject(m_Project, filePath).Returns(true);
                m_Project.FireItemChanged();
                m_Project.Expect(x => x.Name = projectName).Repeat.Once();
                m_Project.Expect(x => x.FolderPath = folderPath).Repeat.AtLeastOnce();
                m_Project.Stub(x => x.FolderPath).Return(folderPath);
                m_Project.Stub(x => x.FileExtension).Return(m_ProjectExtension);
                m_Project.Expect(x => x.IsDirty).Return(true).Repeat.Once();
                m_Project.Stub(x => x.Filename).Return(Path.GetFileName(filePath));
                m_Project.Name = projectName;
                m_Project.FolderPath = folderPath;
                m_Project.FolderPath.Returns(folderPath);
                m_Project.FileExtension.Returns(m_ProjectExtension);
                m_Project.IsDirty.Returns(true);
                m_Project.Filename.Returns(Path.GetFileName(filePath));
            }
            return m_ProjectManager.NewProjectUI();
        [Test]
        public void NewProject_NoProjectIsOpen_UserOKOnNewInfo()
        {
            m_Project.Stub(x => x.StartupScreen).Return(string.Empty);
            m_Project.StartupScreen.Returns(string.Empty);
            Assert.IsTrue(CreateNewProject(true), "Create New Project should return true");
            Assert.IsNotNull(m_ProjectManager.Project, "No project after NewProject");
            m_ProjectCreatedEventCalled = false;
            m_ProjectOpenedEventCalled = false;
            m_Project.Stub(x => x.StartupScreen).Return(string.Empty);
            m_WindowServiceIde.Stub(x => x.EnableToolWindowsAndRibbon(Arg<bool>.Is.Anything));
            m_Project.StartupScreen.Returns(string.Empty);
            m_WindowServiceIde.EnableToolWindowsAndRibbon(Arg.Any<bool>());
            Assert.IsTrue(CreateNewProject(true), "Create New Project should return true");
        [Test]
        public void NewProject_CloseProjectReturnsFalse()
        {
            m_ProjectManagerMock.Expect(x => x.CloseProject(false)).Return(false).Repeat.Once();
            m_ProjectManagerMock.CloseProject(false).Returns(false);
            Assert.IsFalse(m_ProjectManager.NewProjectUI(), "NewProject should return false");
            Assert.IsNull(m_ProjectManager.Project, "No project should have been created");
        private void SetupProjectInProjectManager(bool dirtyProject)
        {
            m_Project.Expect(x => x.IsDirty).Return(dirtyProject).Repeat.Once();
            m_Project.IsDirty.Returns(dirtyProject);
            SetupProject();
        }
        private void SetupProject()
        {
            m_ProjectManagerUI.Expect(x => x.ProjectRootTreeItem = Arg<IProjectTreeItem>.Is.Anything).Repeat.Once();
            m_ProjectManager.Project = m_Project;
        }
        {
            SetupProjectInProjectManager(false);
            m_Project.Expect(x => x.Close()).Repeat.Once();
            m_ProjectManagerUI.Expect(x => x.ProjectRootTreeItem = Arg<IProjectTreeItem>.Is.Anything).Repeat.Once();
            m_WindowService.Expect(x => x.SuspendLayout = Arg<bool>.Is.Anything).Repeat.AtLeastOnce();
            Assert.IsTrue(m_ProjectManager.CloseProject(false));
        }
        {
            SetupProjectInProjectManager(true);
            m_ProjectManagerUI.Expect(x => x.ShowSaveProjectQuestion()).Return(DialogResult.Yes).Repeat.Once();
            m_ProjectManagerMock.Expect(x => x.SaveProject()).Return(true).Repeat.Once();
            m_ProjectManagerUI.ShowSaveProjectQuestion().Returns(DialogResult.Yes);
            m_ProjectManagerMock.SaveProject().Returns(true);
            m_Project.Expect(x => x.Close()).Repeat.Once();
            m_ProjectManagerUI.Expect(x => x.ProjectRootTreeItem = Arg<IProjectTreeItem>.Is.Anything).Repeat.Once();
            m_WindowService.Expect(x => x.SuspendLayout = Arg<bool>.Is.Anything).Repeat.AtLeastOnce();
            Assert.IsTrue(m_ProjectManager.CloseProject(false));
        }
        {
            SetupProjectInProjectManager(true);
            m_ProjectManagerUI.Expect(x => x.ShowSaveProjectQuestion()).Return(DialogResult.No);
            m_Project.Expect(x => x.Close()).Repeat.Once();
            m_ProjectManagerUI.Expect(x => x.ProjectRootTreeItem = Arg<IProjectTreeItem>.Is.Anything).Repeat.Once();
            m_WindowService.Expect(x => x.SuspendLayout = Arg<bool>.Is.Anything).Repeat.AtLeastOnce();
            m_ProjectManagerUI.ShowSaveProjectQuestion().Returns(DialogResult.No);
            Assert.IsTrue(m_ProjectManager.CloseProject(false));
        }
        {
            SetupProjectInProjectManager(true);
            m_ProjectManagerUI.Expect(x => x.ShowSaveProjectQuestion()).Return(DialogResult.Cancel);
            m_ProjectManagerUI.ShowSaveProjectQuestion().Returns(DialogResult.Cancel);
            Assert.IsFalse(m_ProjectManager.CloseProject(false), "CloseProject should return false if user cancels");
        }
        {
            SetupProjectInProjectManager(true);
            m_ProjectManagerUI.Expect(x => x.ShowSaveProjectQuestion()).Return(DialogResult.Yes);
            m_ProjectManagerUI.ShowSaveProjectQuestion().Returns(DialogResult.Yes);
            m_ProjectManagerMock.Expect(x => x.SaveProject()).Return(false);
            m_ProjectManagerMock.SaveProject().Returns(false);
            Assert.IsFalse(m_ProjectManager.CloseProject(false), "CloseProject should return false if Save fails");
        }
            string fileName = m_Project1neo;
            SetupProjectInProjectManager(true);
            m_Project.Stub(x => x.FolderPath).Return(folderName);
            m_Project.Stub(x => x.Filename).Return(fileName);
            m_ProjectFactory.Expect(x => x.SaveProject(m_Project, Path.Combine(folderName, fileName))).Return(true).Repeat.Once();
            m_Project.FolderPath.Returns(folderName);
            m_Project.Filename.Returns(fileName);
            m_ProjectFactory.SaveProject(m_Project, Path.Combine(folderName, fileName)).Returns(true);
            Assert.IsTrue(m_ProjectManager.SaveProject(), "SaveProject should return true");
        }
        {
            SetupProjectInProjectManager(true);
            m_Project.Expect(x => x.Filename).Return(string.Empty).Repeat.Once();
            m_Project.Stub(x => x.FolderPath = Arg<string>.Is.Anything);
            m_ProjectManagerMock.Expect(x => x.SaveProjectAs()).Return(true).Repeat.Once();
            m_Project.Filename.Returns(string.Empty);
            m_ProjectManagerMock.SaveProjectAs().Returns(true);
            Assert.IsTrue(m_ProjectManager.SaveProject(), "SaveProject should return true");
        }
        {
            SetupProjectInProjectManager(true);
            m_Project.Expect(x => x.Filename).Return(string.Empty).Repeat.Once();
            m_Project.Stub(x => x.FolderPath = Arg<string>.Is.Anything);
            m_ProjectManagerMock.Expect(x => x.SaveProjectAs()).Return(false).Repeat.Once();
            m_Project.Filename.Returns(string.Empty);
            m_ProjectManagerMock.SaveProjectAs().Returns(false);
            Assert.IsFalse(m_ProjectManager.SaveProject(), "SaveProject should return false if SaveProjectAs does");
        }
            string fileName = m_Project1neo;
            string folderName = @"C:\";
            m_Project.Stub(x => x.Filename).Return(fileName);
            m_Project.Stub(x => x.FolderPath).Return(folderName);
            m_ProjectFactory.Expect(x => x.SaveProject(m_Project, Path.Combine(folderName, fileName))).Return(true).Repeat.Once();
            m_Project.Filename.Returns(fileName);
            m_Project.FolderPath.Returns(folderName);
            m_ProjectFactory.SaveProject(m_Project, Path.Combine(folderName, fileName)).Returns(true);
            m_ProjectManager.SaveProject();
            string newFolderPath = Path.Combine(existingFolderPath, "subdir");
            string newFilePath = Path.Combine(newFolderPath, m_Project2neo);
            m_DirectoryHelper.Stub(x => x.Exists(existingFolderPath)).Return(true);
            m_DirectoryHelper.Stub(x => x.Exists(newFolderPath)).Return(false);
            m_DirectoryHelper.Stub(x => x.GetReadOnlyFiles(existingFolderPath)).Return(null);
            m_DirectoryHelper.Exists(existingFolderPath).Returns(true);
            m_DirectoryHelper.Exists(newFolderPath).Returns(false);
            m_DirectoryHelper.GetReadOnlyFiles(existingFolderPath).Returns(x => null);
            ExpectSaveAsDialogForSaveAsTest(existingFileName, existingFolderPath, newFilePath);
            ExpectCheckParentDirectoryForSaveAsTest(newFolderPath, DialogResult.Yes);
            string newFolderPath = Path.Combine(existingFolderPath, "subdir");
            string newFilePath = Path.Combine(newFolderPath, m_Project2neo);
            m_DirectoryHelper.Stub(x => x.Exists(existingFolderPath)).Return(true);
            m_DirectoryHelper.Stub(x => x.Exists(newFolderPath)).Return(false);
            m_DirectoryHelper.Stub(x => x.GetReadOnlyFiles(existingFolderPath)).Return(null);
            m_DirectoryHelper.Exists(existingFolderPath).Returns(true);
            m_DirectoryHelper.Exists(newFolderPath).Returns(false);
            m_DirectoryHelper.GetReadOnlyFiles(existingFolderPath).Returns(x => null);
            ExpectSaveAsDialogForSaveAsTest(existingFileName, existingFolderPath, newFilePath);
            ExpectCheckParentDirectoryForSaveAsTest(newFolderPath, DialogResult.No);
            string newFolderPath = m_Project2FolderPath;
            string newFilePath = Path.Combine(m_Project2FolderPath, m_Project2neo);
            m_DirectoryHelper.Stub(x => x.Exists(newFolderPath)).Return(false);
            m_DirectoryHelper.Stub(x => x.GetReadOnlyFiles(existingFolderPath)).Return(null);
            m_DirectoryHelper.Exists(newFolderPath).Returns(false);
            m_DirectoryHelper.GetReadOnlyFiles(existingFolderPath).Returns(x => null);
            ExpectSaveAsDialogForSaveAsTest(existingFileName, existingFolderPath, newFilePath);
            ExpectCheckParentDirectoryForSaveAsTest(newFolderPath);
            string newFolderPath = m_Project2FolderPath;
            string newFilePath = Path.Combine(m_Project2FolderPath, m_Project2neo);
            m_DirectoryHelper.Stub(x => x.Exists(newFolderPath)).Return(false);
            m_DirectoryHelper.Stub(x => x.GetReadOnlyFiles(existingFolderPath)).Return(null);
            m_DirectoryHelper.Exists(newFolderPath).Returns(false);
            m_DirectoryHelper.GetReadOnlyFiles(existingFolderPath).Returns(x => null);
            ExpectSaveAsDialogForSaveAsTest(existingFileName, existingFolderPath, newFilePath);
            ExpectCheckParentDirectoryForSaveAsTest(newFolderPath, DialogResult.Yes);
            string newFolderPath = m_Project2FolderPath;
            string newFilePath = Path.Combine(m_Project2FolderPath, m_Project2neo);
            m_DirectoryHelper.Stub(x => x.Exists(newFolderPath)).Return(false);
            m_DirectoryHelper.Stub(x => x.GetReadOnlyFiles(existingFolderPath)).Return(null);
            m_DirectoryHelper.Exists(newFolderPath).Returns(false);
            m_DirectoryHelper.GetReadOnlyFiles(existingFolderPath).Returns(x => null);
            ExpectSaveAsDialogForSaveAsTest(existingFileName, existingFolderPath, newFilePath);
            ExpectCheckParentDirectoryForSaveAsTest(newFolderPath, DialogResult.No);
            string newFolderPath = m_Project2FolderPath;
            string newFilePath = Path.Combine(newFolderPath, m_Project2neo);
            m_DirectoryHelper.Stub(x => x.GetReadOnlyFiles(existingFolderPath)).Return(null);
            m_DirectoryHelper.GetReadOnlyFiles(existingFolderPath).Returns(x => null);
            ExpectSaveAsDialogForSaveAsTest(existingFileName, existingFolderPath, newFilePath);
            ExpectCheckParentDirectoryForSaveAsTest(newFolderPath);
            string newFolderPath = m_Project2FolderPath;
            string newFilePath = Path.Combine(newFolderPath, m_Project2neo);
            m_DirectoryHelper.Stub(x => x.GetReadOnlyFiles(existingFolderPath)).Return(null);
            m_DirectoryHelper.GetReadOnlyFiles(existingFolderPath).Returns(x => null);
            ExpectSaveAsDialogForSaveAsTest(existingFileName, existingFolderPath, newFilePath);
            ExpectCheckParentDirectoryForSaveAsTest(newFolderPath);
            string newFolderPath = m_Project2FolderPath;
            string newFilePath = Path.Combine(newFolderPath, m_Project2neo);
            m_DirectoryHelper.Stub(x => x.GetReadOnlyFiles(existingFolderPath)).Return(null);
            m_DirectoryHelper.GetReadOnlyFiles(existingFolderPath).Returns(x => null);
            ExpectSaveAsDialogForSaveAsTest(existingFileName, existingFolderPath, newFilePath);
            ExpectCheckParentDirectoryForSaveAsTest(newFolderPath);
            ExpectSaveAsDialogForSaveAsTest(existingFileName, existingFolderPath, existingFilePath);
            ConfirmSaveAsWarning(DialogResult.Yes);
            ExpectSaveForSaveAsTest(existingFileName, existingFolderPath);
            m_Project.Stub(x => x.IsDirty).Return(true);
            m_Project.IsDirty.Returns(true);
            Assert.IsTrue(m_ProjectManager.SaveProjectAs());
        }
            string newFilePath = Path.Combine(m_Project2FolderPath, m_Project2neo);
            IEnumerable<FileInfo> fileInfos = new[] { new FileInfo("mockFile") };
            m_DirectoryHelper.Stub(x => x.Exists(newFolderPath)).Return(false);
            m_DirectoryHelper.Stub(x => x.GetReadOnlyFiles(existingFolderPath)).Return(fileInfos);
            m_DirectoryHelper.Exists(newFolderPath).Returns(false);
            m_DirectoryHelper.GetReadOnlyFiles(existingFolderPath).Returns(fileInfos);
            ExpectSaveAsDialogForSaveAsTest(existingFileName, existingFolderPath, newFilePath);
            ExpectCheckParentDirectoryForSaveAsTest(newFolderPath);
        [Test]
        public void OpenProjectUI_NoProject_UserCancelsOpenProjectDialog()
        {
            m_ProjectManagerUI.Expect(x => x.ShowOpenProjectDialog()).Return(DialogResult.Cancel).Repeat.Once();
            m_ProjectManagerUI.ShowOpenProjectDialog().Returns(DialogResult.Cancel);
            Assert.IsFalse(m_ProjectManager.OpenProject(), "OpenProject should return false");
        }

ProjectManagerTimeSynchronizationTest.cs
-27
+25
/Tools/ToolsTest/ProjectManager/ProjectManagerTimeSynchronizationTest.cs
using System;
using System.Collections.Generic;
using Core.Api.Feature;
using Core.Api.ProjectTarget;
using Neo.ApplicationFramework.Common.Constants;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.SNTP;
using Neo.ApplicationFramework.Tools.DateTimeEdit;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using System;
using System.Collections.Generic;
namespace Neo.ApplicationFramework.Tools.ProjectManager
{
		[SetUp]
        public void SetupUp()
        {
            m_ProjectManagerMock = MockRepository.GenerateMock<IProjectManager>();
            m_ProjectFactory = MockRepository.GenerateMock<IProjectFactory>();
            m_ProjectManagerUI = MockRepository.GenerateMock<IProjectManagerUI>();
            m_IdeOptionsService = MockRepository.GenerateStub<IIDEOptionsService>();
            m_Project = MockRepository.GenerateMock<IProject>();
            IFeatureSecurityServiceIde featureSecurityServiceIde = MockRepository.GenerateStub<IFeatureSecurityServiceIde>();
            INameCreationService nameCreationService = MockRepository.GenerateMock<INameCreationService>();
            ITargetService targetService = MockRepository.GenerateStub<ITargetService>();
            var opcClientServiceIdeLazy = new LazyWrapper<IOpcClientServiceIde>(() => MockRepository.GenerateStub<IOpcClientServiceIde>());
            m_ProjectManagerMock = Substitute.For<IProjectManager>();
            m_ProjectFactory = Substitute.For<IProjectFactory>();
            m_ProjectManagerUI = Substitute.For<IProjectManagerUI>();
            m_IdeOptionsService = Substitute.For<IIDEOptionsService>();
            m_Project = Substitute.For<IProject>();
            IFeatureSecurityServiceIde featureSecurityServiceIde = Substitute.For<IFeatureSecurityServiceIde>();
            INameCreationService nameCreationService = Substitute.For<INameCreationService>();
            ITargetService targetService = Substitute.For<ITargetService>();
            var opcClientServiceIdeLazy = new LazyWrapper<IOpcClientServiceIde>(() => Substitute.For<IOpcClientServiceIde>());
            Func<ITerminalTargetChangeService> terminalTargetChangeServiceInitializer = () =>
            {
                var terminalTargetChangeService = MockRepository.GenerateStub<ITerminalTargetChangeService>();
                var terminalTargetChangeService = Substitute.For<ITerminalTargetChangeService>();
                return terminalTargetChangeService;
            };
            var terminalTargetChangeServiceLazy = new LazyWrapper<ITerminalTargetChangeService>(terminalTargetChangeServiceInitializer);
            var messageBoxService = new LazyWrapper<IMessageBoxServiceIde>(() => MockRepository.GenerateStub<IMessageBoxServiceIde>());
            var messageBoxService = new LazyWrapper<IMessageBoxServiceIde>(() => Substitute.For<IMessageBoxServiceIde>());
            ITerminal terminal = MockRepository.GenerateStub<ITerminal>();
	        terminal.Stub(x => x.SupportCloud).Return(true);
	        targetService.Stub(x => x.CurrentTargetInfo.TerminalDescription).Return(terminal);
            ITerminal terminal = Substitute.For<ITerminal>();
	        terminal.SupportCloud.Returns(true);
	        targetService.CurrentTargetInfo.TerminalDescription.Returns(terminal);
            IBrandService brandService = MockRepository.GenerateMock<IBrandService>();
            IBrandService brandService = Substitute.For<IBrandService>();
            m_ProjectManager = new ProjectManager(
                m_ProjectFactory,
                brandService.ToILazy());
            m_DesignerProjectItems = new List<IDesignerProjectItem>();
            m_SntpClientRootComponent = MockRepository.GenerateStub<ISntpClientRootComponent>();
            IDesignerProjectItem projectItem = MockRepository.GenerateStub<IDesignerProjectItem>();
            m_SntpClientRootComponent = Substitute.For<ISntpClientRootComponent>();
            IDesignerProjectItem projectItem = Substitute.For<IDesignerProjectItem>();
            m_DesignerProjectItems.Add(projectItem);
            projectItem.Stub(x => x.ContainedObject).Return(m_SntpClientRootComponent);
            ((IProjectItem)m_Project).Stub(mock => mock.GetDesignerProjectItems(Arg<Type>.Is.Anything)).Return(m_DesignerProjectItems.ToArray());
            projectItem.ContainedObject.Returns(m_SntpClientRootComponent);
            m_Project.GetDesignerProjectItems(Arg.Any<Type>()).Returns(m_DesignerProjectItems.ToArray());
		}
		[Test]
        public void DefaultTimeSynchSettingsTimeSynchDisabledTest()
        {
            m_IdeOptionsService.AddOption<TimeSynchronizationOption>();
            m_IdeOptionsService.Stub(x => x.GetOption<TimeSynchronizationOption>().EnableTimeSync = false);
            m_IdeOptionsService.GetOption<TimeSynchronizationOption>().Returns(new TimeSynchronizationOption { EnableTimeSync = false });
            m_ProjectManager.ConfigureDefaultTimeSyncSettings();
            Assert.AreEqual(false, m_SntpClientRootComponent.IsEnabled);
            Assert.AreEqual(null, m_SntpClientRootComponent.ServerName);
            Assert.AreEqual(string.Empty, m_SntpClientRootComponent.ServerName);
        }
        [Test]
        public void DefaultTimeSynchSettingsTimeSynchEnabledTest()
        {
            m_IdeOptionsService.AddOption<TimeSynchronizationOption>();
            m_IdeOptionsService.Stub(x => x.GetOption<TimeSynchronizationOption>().EnableTimeSync = true);
            m_IdeOptionsService.GetOption<TimeSynchronizationOption>().Returns(new TimeSynchronizationOption { EnableTimeSync = true });
            m_ProjectManager.Project = m_Project;
            m_ProjectManager.ConfigureDefaultTimeSyncSettings();

ProjectTest.cs
-47
+31
/Tools/ToolsTest/ProjectManager/ProjectTest.cs
using Neo.ApplicationFramework.Storage.Common;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Storage;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ProjectManager
{
        private IProjectManager m_ProjectManagerMock;
        //Rhino mocks
        private readonly MockRepository m_Mocks = new MockRepository();
        private IEventSubscriber m_Subscriber;
        [OneTimeSetUp]
        public void TestFixtureSetUp()
        {
            TestHelper.AddService<IProjectDefaultSettingsService>(new ProjectDefaultSettingsService());
            var storageService = TestHelper.AddServiceStub<IStorageService>();
            storageService.Stub(x => x.CreateProviderSettings(null, TargetPlatform.Windows, TargetPlatformVersion.NotApplicable))
                .IgnoreArguments()
                .Return(new LocallyHostedProjectStorageProviderSettings());
            storageService.CreateProviderSettings(Arg.Any<string>(), Arg.Any<TargetPlatform>(), Arg.Any<TargetPlatformVersion>())
                .Returns(new LocallyHostedProjectStorageProviderSettings());
            m_ProjectFactory = new ProjectFactory();
            m_ProjectItemFactoryMock = MockRepository.GenerateMock<IProjectItemFactory>();
            m_ProjectItemMock = MockRepository.GenerateMock<IProjectItem>();
            m_ProjectItemFactoryMock = Substitute.For<IProjectItemFactory>();
            m_ProjectItemMock = Substitute.For<IProjectItem>();
            m_DirectoryHelperStub = MockRepository.GenerateStub<DirectoryHelper>();
            m_DirectoryHelperStub = Substitute.For<DirectoryHelper>();
            m_Project = m_ProjectFactory.CreateProject();
            ((Project)m_Project).DirectoryHelper = m_DirectoryHelperStub;
            m_ProjectManagerMock = SetProjectManagerMock(m_ProjectProjectItem);
            //Rhino Mocks:
            m_Subscriber = m_Mocks.StrictMock<IEventSubscriber>();
            m_Subscriber = Substitute.For<IEventSubscriber>();
        }
        [TearDown]
        public void VerifyMocks()
        {
            m_ProjectItemFactoryMock.VerifyAllExpectations();
            m_ProjectItemMock.VerifyAllExpectations();
            TestHelper.ClearServices();
        }
        private IProjectManager CreateProjectManagerMock()
        {
            IProjectManager projectManagerMock = MockRepository.GenerateMock<IProjectManager>();
            projectManagerMock.Expect(x => x.ProjectActivity).Return(ProjectActivities.Inactive);
            IProjectManager projectManagerMock = Substitute.For<IProjectManager>();
            projectManagerMock.ProjectActivity.Returns(ProjectActivities.Inactive);
            return projectManagerMock;
        }
        private IProjectItem AddFormToEmptyProjectHelper()
        {
            //Check that the project creates a group and calls Add on that group
            m_ProjectItemMock.Stub(x => x.Name).Return("Form1");
            m_ProjectItemMock.Stub(x => x.Group).Return("Forms");
            m_ProjectItemMock.Stub(x => x.ProjectItems).Return(new IProjectItem[] { });
            m_ProjectItemMock.Name.Returns("Form1");
            m_ProjectItemMock.Group.Returns("Forms");
            m_ProjectItemMock.ProjectItems.Returns(new IProjectItem[] { });
            IProjectItem groupProjectItemMock = MockRepository.GenerateMock<IProjectItem>();
            groupProjectItemMock.Stub(x => x.ProjectItems).Return(new IProjectItem[] { });
            groupProjectItemMock.Stub(x => x.Name).Return("Forms");
            IProjectItem groupProjectItemMock = Substitute.For<IProjectItem>();
            groupProjectItemMock.ProjectItems.Returns(new IProjectItem[] { });
            groupProjectItemMock.Name.Returns("Forms");
            m_ProjectItemFactoryMock.Expect(x => x.CreateGroup<GroupProjectItem>("Forms")).Return(groupProjectItemMock);
            m_ProjectItemFactoryMock.CreateGroup<GroupProjectItem>("Forms").Returns(groupProjectItemMock);
            m_ProjectProjectItem.Factory = m_ProjectItemFactoryMock;
            IProjectItem groupProjectItemMock = AddFormToEmptyProjectHelper();
            Assert.AreEqual(groupProjectItemMock, m_ProjectProjectItem.ProjectItems[0]);
            groupProjectItemMock.VerifyAllExpectations();
        }
        //Checks that no group is created if it already exists
        {
            IProjectItem groupProjectItemMock = AddFormToEmptyProjectHelper();
            m_ProjectItemMock.Stub(x => x.Name).Return("Form2");
            m_ProjectItemMock.Name.Returns("Form2");
            m_ProjectProjectItem.Add(m_ProjectItemMock);
            //Check that we havew only one subitem
            Assert.AreEqual(1, m_ProjectProjectItem.ProjectItems.GetLength(0));
            groupProjectItemMock.VerifyAllExpectations();
        }
        [Test]
            AddFormToEmptyProjectHelper();
            IProjectItem controllerProjectItemMock = MockRepository.GenerateMock<IProjectItem>();
            controllerProjectItemMock.Stub(x => x.Name).Return("Controller");
            controllerProjectItemMock.Stub(x => x.Group).Return("Controllers");
            controllerProjectItemMock.Stub(x => x.ProjectItems).Return(new IProjectItem[] { });
            IProjectItem controllerProjectItemMock = Substitute.For<IProjectItem>();
            controllerProjectItemMock.Name.Returns("Controller");
            controllerProjectItemMock.Group.Returns("Controllers");
            controllerProjectItemMock.ProjectItems.Returns(new IProjectItem[] { });
            IProjectItem controllerGroupProjectItemMock = CreateProjectItemMock();
            controllerGroupProjectItemMock.Stub(x => x.Name).Return("Controllers");
            controllerGroupProjectItemMock.Expect(x => x.Add(controllerProjectItemMock));
            controllerGroupProjectItemMock.Name.Returns("Controllers");
            m_ProjectItemFactoryMock.Expect(x => x.CreateGroup<GroupProjectItem>("Controllers")).Return(controllerGroupProjectItemMock);
            m_ProjectItemFactoryMock.CreateGroup<GroupProjectItem>("Controllers").Returns(controllerGroupProjectItemMock);
            //Number of groups is 1
            Assert.AreEqual(1, m_ProjectProjectItem.ProjectItems.GetLength(0));
            Assert.AreEqual(true, m_ProjectProjectItem.HasChild("Controllers"), "Controller group was not crerated");
            Assert.AreEqual(2, m_ProjectProjectItem.ProjectItems.GetLength(0));
            controllerProjectItemMock.VerifyAllExpectations();
            controllerGroupProjectItemMock.VerifyAllExpectations();
            controllerGroupProjectItemMock.Received().Add(controllerProjectItemMock);
            m_ProjectItemFactoryMock.Received().CreateGroup<GroupProjectItem>("Controllers");
        }
        [Test]
            m_ProjectProjectItem.DeleteChildItem(projectItemMock);
            Assert.AreEqual(true, m_ProjectProjectItem.IsEmpty);
            projectItemMock.VerifyAllExpectations();
        }
        private IProjectItem CreateProjectItemMock()
        {
            IProjectItem projectItemMock = MockRepository.GenerateMock<IProjectItem>();
            IProjectItem projectItemMock = Substitute.For<IProjectItem>();
            return projectItemMock;
        }
        [Test]
        public void AlphaNumericKeyboardLayoutSetterFiresItemChanged()
        {
            using (m_Mocks.Record())
            {
            ((IProjectTreeItem)m_Project).ItemChanged += m_Subscriber.Handler;
            m_Subscriber.Handler(m_Project, EventArgs.Empty);
            }
            
            using (m_Mocks.Playback())
            {
            m_Project.KeyboardLayout = null;
            }
            m_Mocks.VerifyAll();
            // Assert ???
        }
        [Test]
            AddTargetServiceStub();
            ICommandLineService commandLineServiceStub = TestHelper.CreateAndAddServiceStub<ICommandLineService>();
            commandLineServiceStub.Stub(x => x.CheckSwitch(ApplicationConstants.KeepBuildFilesSwitch)).Return(true);
            commandLineServiceStub.CheckSwitch(ApplicationConstants.KeepBuildFilesSwitch).Returns(true);
            Project project = (Project)m_Project;
            Version designerVersion = TestHelper.CurrentDesignerVersion;
        {
            AddTargetServiceStub();
            m_DirectoryHelperStub.Stub(x => x.Exists(null)).IgnoreArguments().Return(true);
            m_DirectoryHelperStub.Exists(Arg.Any<string>()).Returns(true);
            Project project = (Project)m_Project;
            Version designerVersion = TestHelper.CurrentDesignerVersion;
        private void AddTargetServiceStub()
        {
            ITargetService targetServiceStub = TestHelper.CreateAndAddServiceStub<ITargetService>();
            ITargetInfo targetInfoStub = MockRepository.GenerateStub<ITargetInfo>();
            targetServiceStub.Stub(x => x.CurrentTargetInfo).Return(new TargetInfo());
            ITargetInfo targetInfoStub = Substitute.For<ITargetInfo>();
            targetServiceStub.CurrentTargetInfo.Returns(new TargetInfo());
        }
    }
}

ScreenGroupProjectItemTest.cs
-1
+1
/Tools/ToolsTest/ProjectManager/ScreenGroupProjectItemTest.cs
        public void Setup()
        {
            TestHelper.ClearServices();
            TestHelper.CreateAndAddServiceMock<IProjectManager>();
            TestHelper.CreateAndAddServiceStub<IProjectManager>();
        }
        [Test]

ObjectPropertyServiceTest.cs
-21
+21
/Tools/ToolsTest/PropertyGrid/ObjectPropertyServiceTest.cs
using Neo.ApplicationFramework.Controls.ActionMenu;
using Neo.ApplicationFramework.Controls.Controls;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.PropertyGrid
{
            m_DisplayNames = new Dictionary<string, string>();
            m_IsBindableProperties = new Dictionary<string, bool>();
            m_CurrentTargetStub = MockRepository.GenerateStub<ITarget>();
            m_CurrentTargetStub = Substitute.For<ITarget>();
            
            var targetServiceStub = MockRepository.GenerateStub<ITargetService>();
            var targetServiceStub = Substitute.For<ITargetService>();
            targetServiceStub.CurrentTarget = m_CurrentTargetStub;
            m_ObjectPropertyService = new ObjectPropertyService(
        [Test]
        public void IsBindableReturnsFalseWhenTargetIsCEAndIsBindableAttributeIsSetForPC()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            Type type = typeof(BindableAttributesStub);
            Assert.IsFalse(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["OnlyBindableInPC"]));
        [Test]
        public void IsBindableReturnsTrueWhenTargetIsPCAndIsBindableAttributeIsSetForPC()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.Windows);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.Windows);
            Type type = typeof(BindableAttributesStub);
            Assert.IsTrue(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["OnlyBindableInPC"]));
        [Test]
        public void IsBindableReturnsFalseWhenTargetIsPCAndIsBindableAttributeIsSetForCE()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.Windows);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.Windows);
            Type type = typeof(BindableAttributesStub);
            Assert.IsFalse(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["OnlyBindableInCE"]));
        [Test]
        public void IsBindableReturnsTrueWhenTargetIsCEAndIsBindableAttributeIsSetForCE()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            Type type = typeof(BindableAttributesStub);
            Assert.IsTrue(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["OnlyBindableInCE"]));
        [Test]
        public void IsBindableReturnsFalseWhenTargetIsPCAndIsBindableAttributeIsSetForAll()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.Windows);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.Windows);
            Type type = typeof(BindableAttributesStub);
            Assert.IsTrue(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["BindableForAll"]));
        [Test]
        public void IsBindableReturnsTrueWhenTargetIsCEAndIsBindableAttributeIsSetForAll()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            Type type = typeof(BindableAttributesStub);
            Assert.IsTrue(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["BindableForAll"]));
        [Test]
        public void IsBindableReturnsTrueWhenTargetIsCEAndIsBindableAttributeIsNotSpecified()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            Type type = typeof(BindableAttributesStub);
            Assert.IsTrue(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["DefaultBindableForAll"]));
        [Test]
        public void IsBindableReturnsTrueWhenTargetIsPCAndIsBindableAttributeIsNotSpecified()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.Windows);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.Windows);
            Type type = typeof(BindableAttributesStub);
            Assert.IsTrue(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["DefaultBindableForAll"]));
        [Test]
        public void IsBindableReturnsFalseWhenTargetIsCEAndIsBindableAttributeIsNone()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            Type type = typeof(BindableAttributesStub);
            Assert.IsFalse(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["NotBindable"]));
        [Test]
        public void IsBindableReturnsFalseWhenTargetIsPCAndIsBindableAttributeIsNone()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.Windows);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.Windows);
            Type type = typeof(BindableAttributesStub);
            Assert.IsFalse(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["NotBindable"]));
        [Test]
        public void IsBindableReturnsFalseWhenTargetIsCEAndIsBindableAttributeIsSetForPCOnNewInheritedProperty()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            Type type = typeof(MoreInheritedBindableAttributeStub);
            Assert.IsFalse(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["DefaultBindableForAll"]));
        [Test]
        public void IsBindableReturnsFalseWhenTargetIsCEAndBindableAttributeIsSetToFalse()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            Type type = typeof(BindableAttributesStub);
            Assert.IsFalse(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["NotBindableByMS"]));
        [Test]
        public void IsBindableReturnsFalseWhenTargetIsPCAndBindableAttributeIsSetToFalse()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.Windows);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.Windows);
            Type type = typeof(BindableAttributesStub);
            Assert.IsFalse(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["NotBindableByMS"]));
        public void IsBindableReturnsTrueWhenTargetIsPCAndIsBindableAttributeIsSetForPCPCOnNewInheritedPropertyEvenThoughBasePropertyHasBindableAttributeSetToFalse()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.Windows);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.Windows);
            Type type = typeof(InheritedBindableAttributeStub);
            Assert.IsTrue(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["NotBindableByMS"]));
        [Test]
        public void IsBindableReturnsTrueWhenTargetIsCEAndBindableAttributeIsSetToTrue()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            Type type = typeof(BindableAttributesStub);
            Assert.IsTrue(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["BindableByMS"]));
        [Test]
        public void IsBindableReturnsTrueWhenTargetIsPCAndBindableAttributeIsSetToTrue()
        {
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.Windows);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.Windows);
            Type type = typeof(BindableAttributesStub);
            Assert.IsTrue(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["BindableByMS"]));
        public void IsBindableReturnsFalseWhenTargetIsCEForUnsupportedPropertyEvenThoughBindableAttributeIsSetToTrue()
        {
            m_IsBindableProperties.Add("BindableByMS", false);
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.WindowsCE);
            Type type = typeof(BindableAttributesStub);
            Assert.IsFalse(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["BindableByMS"]));
        public void IsBindableReturnsFalseWhenTargetIsPCForUnsupportedPropertyEvenThoughBindableAttributeIsSetToTrue()
        {
            m_IsBindableProperties.Add("BindableByMS", false);
            m_CurrentTargetStub.Stub(x => x.Id).Return(TargetPlatform.Windows);
            m_CurrentTargetStub.Id.Returns(TargetPlatform.Windows);
            Type type = typeof(BindableAttributesStub);
            Assert.IsFalse(m_ObjectPropertyService.IsBindable(type, TypeDescriptor.GetProperties(type)["BindableByMS"]));

RecipeArrayConverterHelperBaseTest.cs
-6
+7
/Tools/ToolsTest/Recipe/RecipeArrays/RecipeArrayConverterHelperBaseTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.OpcClient;
using Neo.ApplicationFramework.Tools.Recipe.RecipeConverters.RecipeArrays;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Recipe.RecipeArrays
{
        [SetUp]
        public void SetUp()
        {
            m_DataSourceContainer = MockRepository.GenerateMock<IDataSourceContainer>();
            m_DataSourceContainer = Substitute.For<IDataSourceContainer>();
            m_RecipeArrayConverterHelper = new TestRecipeArrayConverterHelper();
        }
            ArrayItemRecipeFileData baseArrayItem = CreateArrayItemRecipeFileData(address, 0);
            DataItem dataItem = CreateDataItem(address);
            m_DataSourceContainer.Stub(x => x.GetNextItemID(dataItem, 1)).Return(nextItemId).Repeat.Once();
            m_DataSourceContainer.Stub(x => x.GetNextItemID(dataItem, 1)).Return(nextItemId2).Repeat.Once();
            m_DataSourceContainer.GetNextItemID(Arg.Is(dataItem), 1).Returns(nextItemId, nextItemId2);
            // ACT
            (bool result, string _) = m_RecipeArrayConverterHelper.UpdateRecipeArrayTagAddress(baseArrayItem, dataItem, m_DataSourceContainer);
            ArrayItemRecipeFileData arrayItem = CreateArrayItemRecipeFileData(baseItemAddress, 1);
            DataItem dataItem = CreateDataItem(baseItemAddress);
            m_DataSourceContainer.Stub(x => x.GetNextItemID(dataItem, arrayItem.ArrayIndex)).Return(currentItemId).Repeat.Once();
            m_DataSourceContainer.Stub(x => x.GetNextItemID(dataItem, arrayItem.ArrayIndex - 1)).Return(previousItemId).Repeat.Once();
            m_DataSourceContainer.GetNextItemID(dataItem, arrayItem.ArrayIndex).Returns(currentItemId);
            m_DataSourceContainer.GetNextItemID(dataItem, arrayItem.ArrayIndex - 1).Returns(previousItemId);
            // ACT
            (bool result, string _) = m_RecipeArrayConverterHelper.UpdateRecipeArrayTagAddress(arrayItem, dataItem, m_DataSourceContainer);
        }
    }
}
#endif

GeneralImportRecipeConverterTest.cs
-1
+11
/Tools/ToolsTest/Recipe/RecipeConverter/GeneralImportRecipeConverterTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interop.DataSource;
            IConverterManager converterManager = Substitute.For<IConverterManager>();
            TestHelper.AddService(converterManager);
            converterManager.ControllerConverterManager.Returns(new ControllerConverterManager());
            var controllerConverterManager = new ControllerConverterManager();
            converterManager.ControllerConverterManager.Returns(controllerConverterManager);
            converterManager.ControllerConverterManager.DataItems = m_RepositoryDataItems;
            IConversionHelperService conversionHelper = Substitute.For<IConversionHelperService>();
                converterApiService);
        }
        [TearDown]
        public void TearDown()
        {
            TestHelper.ClearServices();
        }
        // Depending on what ID/ED control was exported in recipe, recipeFileData have different content, esp regarding data type
        // which defaults to DT_INTEGER2 where it should have been DT_BIT.
        // This test makes sure both kinds can be fetched from the repository.
        #endregion
    }
}
#endif

RecipeExportTest.cs
+2
/Tools/ToolsTest/Recipe/RecipeExportTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using System.IO;
using System.Text;
        }
    }
}
#endif

RecipeItemTest.cs
-47
+28
/Tools/ToolsTest/Recipe/RecipeItemTest.cs
using Neo.ApplicationFramework.Interop.DataSource;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.OpcClient;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Recipe
{
        [Test]
        public void RecipeItemReturnsDefaultDataTypeIfNotConnectedToAnyDataItem()
        {
            m_ToolManager.Stub(x => x.Runtime).Return(false).Repeat.Any();
            m_ToolManager.Runtime.Returns(false);
            RecipeItem recipeItem = new RecipeItem();
        [Test]
        public void RecipeItemReturnsDefaultDataTypeIfConnectedDataItemDoesNotExist()
        {
            m_ToolManager.Stub(x => x.Runtime).Return(false).Repeat.Any();
            m_ToolManager.Runtime.Returns(false);
            RecipeItem recipeItem = new RecipeItem();
            recipeItem.DataConnection = "Controller.Tag1";
        [Test]
        public void RecipeItemReturnsItsConnectedDataItemsDataTypeUponRequest()
        {
            m_ToolManager.Stub(x => x.Runtime).Return(false).Repeat.Any();
            m_ToolManager.Runtime.Returns(false);
            var tag = MockRepository.GenerateStub<IBasicTag>();
            tag.Stub(x => x.GlobalDataTypeOrDataTypeIfDefault).Return(BEDATATYPE.DT_INTEGER4);
            m_GlobalReferenceService.Stub(x => x.GetObject<IBasicTag>(Arg<string>.Is.Equal("Controller.Tag1"))).Return(tag).Repeat.Any();
            var dataItem = Substitute.For<IGlobalDataItemBase>();
            dataItem.GlobalDataTypeOrDataTypeIfDefault.Returns(BEDATATYPE.DT_INTEGER4);
            m_GlobalReferenceService.GetObject<IGlobalDataItemBase>("Controller.Tag1").Returns(dataItem);
            RecipeItem recipeItem = new RecipeItem();
            recipeItem.DataConnection = "Controller.Tag1";
        [Test]
        public void RecipeItemIsNotifiedWhenItsConnectedDataItemsDataTypeIsChanged()
        {
            m_ToolManager.Stub(x => x.Runtime).Return(false).Repeat.Any();
            m_ToolManager.Runtime.Returns(false);
            GlobalDataItem globalDataItem = new GlobalDataItem();
            m_GlobalReferenceService.Stub(x => x.GetObject<IBasicTag>(Arg<string>.Is.Equal("Controller.Tag1"))).Return(globalDataItem).Repeat.Any();
            m_GlobalReferenceService.GetObject<IGlobalDataItemBase>(Arg.Is("Controller.Tag1")).Returns(globalDataItem);
            RecipeItem recipeItem = new RecipeItem();
            recipeItem.DataConnection = "Controller.Tag1";
        [Test]
        public void RecipeItemReturnsItsConnectedDataItemsDataTypeUponRequestEvenWhenDataItemIsRemovedFromControllerAndLaterAddedAgain()
        {
            m_ToolManager.Stub(x => x.Runtime).Return(false).Repeat.Any();
            m_ToolManager.Runtime.Returns(false);
            GlobalDataItem globalDataItem = new GlobalDataItem();
            globalDataItem.DataType = BEDATATYPE.DT_INTEGER4;
            m_GlobalReferenceService.Stub(x => x.GetObject<IGlobalDataItemBase>(Arg<string>.Is.Equal("Controller.Tag1"))).Return(globalDataItem).Repeat.Any();
            m_GlobalReferenceService.GetObject<IGlobalDataItemBase>(Arg.Is("Controller.Tag1")).Returns(globalDataItem);
            RecipeItem recipeItem = new RecipeItem();
            recipeItem.DataConnection = "Controller.Tag1";
            Assert.AreEqual(BEDATATYPE.DT_INTEGER4, recipeItem.DataType);
            // Clear previous expectation, by entering record mode.
            m_GlobalReferenceService.BackToRecord();
            // Simulate a change in controller, a new dataitem reference with the same name.
            globalDataItem = new GlobalDataItem();
            globalDataItem.DataType = BEDATATYPE.DT_REAL4;
            m_GlobalReferenceService.Stub(x => x.GetObject<IGlobalDataItemBase>(Arg<string>.Is.Equal("Controller.Tag1"))).Return(globalDataItem).Repeat.Any();
            m_GlobalReferenceService.GetObject<IGlobalDataItemBase>(Arg.Is("Controller.Tag1")).Returns(globalDataItem);
            // Make new expectation apply, by entering replay mode.
            m_GlobalReferenceService.Replay();
            Assert.AreEqual(BEDATATYPE.DT_REAL4, recipeItem.DataType);
        }
        [Test]
        public void RecipeItemIsNotifiedWhenItsConnectedDataItemsDataTypeIsChangedEvenWhenDataItemIsRemovedFromControllerAndLaterAddedAgain()
        {
            m_ToolManager.Stub(x => x.Runtime).Return(false).Repeat.Any();
            m_ToolManager.Runtime.Returns(false);
            GlobalDataItem globalDataItem = new GlobalDataItem();
            globalDataItem.DataType = BEDATATYPE.DT_INTEGER4;
            m_GlobalReferenceService.Stub(x => x.GetObject<IGlobalDataItemBase>(Arg<string>.Is.Equal("Controller.Tag1"))).Return(globalDataItem).Repeat.Any();
            m_GlobalReferenceService.GetObject<IGlobalDataItemBase>(Arg.Is("Controller.Tag1")).Returns(globalDataItem);
            RecipeItem recipeItem = new RecipeItem();
            recipeItem.DataConnection = "Controller.Tag1";
            Assert.AreEqual(BEDATATYPE.DT_INTEGER4, recipeItem.DataType);
            // Clear previous expectation, by entering record mode.
            m_GlobalReferenceService.BackToRecord();
            // Simulate a change in controller, a new dataitem reference with the same name.
            globalDataItem = new GlobalDataItem();
            m_GlobalReferenceService.Stub(x => x.GetObject<IGlobalDataItemBase>(Arg<string>.Is.Equal("Controller.Tag1"))).Return(globalDataItem).Repeat.Any();
            // Make new expectation apply, by entering replay mode.
            m_GlobalReferenceService.Replay();
            m_GlobalReferenceService.GetObject<IGlobalDataItemBase>(Arg.Is("Controller.Tag1")).Returns(globalDataItem);
            Assert.AreEqual(BEDATATYPE.DT_DEFAULT, recipeItem.DataType);
        [Test]
        public void RecipeItemDoesNotHookUpPropertyChangedOnDataItemWhenSettingDataConnectionInRuntime()
        {
            m_ToolManager.Stub(x => x.Runtime).Return(true).Repeat.Any();
            m_ToolManager.Runtime.Returns(true);
            IGlobalDataItem globalDataItem = MockRepository.GenerateStub<IGlobalDataItem>();
            m_GlobalReferenceService.Stub(x => x.GetObject<IBasicTag>(Arg<string>.Is.Equal("Controller.Tag1"))).Return(globalDataItem).Repeat.Any();
            IGlobalDataItem globalDataItem = Substitute.For<IGlobalDataItem>();
            m_GlobalReferenceService.GetObject<IBasicTag>(Arg.Is("Controller.Tag1")).Returns(globalDataItem);
            RecipeItem recipeItem = new RecipeItem();
            recipeItem.DataConnection = "Controller.Tag1";
            globalDataItem.AssertWasNotCalled(x => x.PropertyChanged += null, options => options.IgnoreArguments());
        }
        /// <summary>
        /// This interface is needed since IGlobalDataItem today is not inheritinh IGlobalDataItemBase
        /// </summary>
        public interface IGlobalDataItemAndIGlobalDataItemBase : IGlobalDataItem, IGlobalDataItemBase
        {
             
            globalDataItem.DidNotReceiveWithAnyArgs().PropertyChanged += null;
        }
        [Test]
        public void RecipeItemDoesNotHookUpPropertyChangedOnDataItemWhenAccessingDataItemInRuntime()
        {
            m_ToolManager.Stub(x => x.Runtime).Return(true).Repeat.Any();
            m_ToolManager.Runtime.Returns(true);
            m_GlobalReferenceService.Stub(x => x.GetObject<IBasicTag>(Arg<string>.Is.Equal("Controller.Tag1"))).Return(MockRepository.GenerateStub<IGlobalDataItemAndIGlobalDataItemBase>()).Repeat.Any();
            var tag = Substitute.For<IGlobalDataItem, IGlobalDataItemBase>();
            m_GlobalReferenceService.GetObject<IBasicTag>(Arg.Any<string>()).Returns(tag);
            RecipeItem recipeItem = new RecipeItem();
            recipeItem.DataConnection = "Controller.Tag1";
            var globalDataItem = (IGlobalDataItem)recipeItem.DataItem;
            globalDataItem.AssertWasNotCalled(x => x.PropertyChanged += null, options => options.IgnoreArguments());
            globalDataItem.DidNotReceiveWithAnyArgs().PropertyChanged += null;
        }
        [Test]
        public void RecipeItemBindsToDataItemWhenSettingDataConnection()
        {
            IGlobalDataItem globalDataItem = MockRepository.GenerateStub<IGlobalDataItem>();
            m_GlobalReferenceService.Stub(x => x.GetObject<IBasicTag>(Arg<string>.Is.Equal("Controller.Tag1"))).Return(globalDataItem).Repeat.Any();
            IGlobalDataItem globalDataItem = Substitute.For<IGlobalDataItem>();
            m_GlobalReferenceService.GetObject<IBasicTag>(Arg.Is("Controller.Tag1")).Returns(globalDataItem);
            RecipeItem recipeItem = new RecipeItem();
            recipeItem.DataConnection = "Controller.Tag1";
        {
            NeoDesignerProperties.IsInDesignMode = false;
            m_ToolManager.Stub(x => x.Runtime).Return(true).Repeat.Any();
            m_ToolManager.Runtime.Returns(true);
            IGlobalDataItem globalDataItem = MockRepository.GenerateStub<IGlobalDataItem>();
            m_GlobalReferenceService.Stub(x => x.GetObject<IBasicTag>(Arg<string>.Is.Equal("Controller.Tag1"))).Return(globalDataItem).Repeat.Any();
            IGlobalDataItem globalDataItem = Substitute.For<IGlobalDataItem>();
            m_GlobalReferenceService.GetObject<IBasicTag>(Arg.Is("Controller.Tag1")).Returns(globalDataItem);
            RecipeItem recipeItem = new RecipeItem();
            recipeItem.DataConnection = "Controller.Tag1";

RecipeTestStorageDependent.cs
-15
+23
/Tools/ToolsTest/Recipe/RecipeTestStorageDependent.cs
using Neo.ApplicationFramework.Interfaces.Tag;
using Neo.ApplicationFramework.Interop.DataSource;
using Neo.ApplicationFramework.Storage.Common;
#if VNEXT_TARGET
using Neo.ApplicationFramework.Storage.Providers.SQLiteDatabase;
#else
using Neo.ApplicationFramework.Storage.Providers.SqlCeDatabase;
#endif
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.OpcClient;
using Neo.ApplicationFramework.Tools.Storage;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Recipe
{
            const string sqlCe = "SQL CE Database";
            storageSettings.DisplayName = sqlCe;
            IStorageService storageService = new StorageServiceCF();
#if VNEXT_TARGET
            var provider = new SQLiteDatabaseProviderCF();
#else
            var provider = new SqlCeDatabaseProviderCF();
#endif
            storageService.RegisterStorageProvider(provider);
            TestHelper.AddService(storageService);
            TestHelper.AddService(m_StorageCacheService);
            Storage = m_StorageCacheService.GetStorage("Database");
            TestHelper.CreateAndAddServiceMock<INativeAPI>();
            TestHelper.CreateAndAddServiceMock<ISplashService>();
            TestHelper.CreateAndAddServiceStub<INativeAPI>();
            TestHelper.CreateAndAddServiceStub<ISplashService>();
            IToolManager toolManager = TestHelper.CreateAndAddServiceStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(false);
            toolManager.Runtime.Returns(false);
            m_GlobalReferenceService = TestHelper.CreateAndAddServiceStub<IGlobalReferenceService>();
            IBatchService batchService = TestHelper.AddServiceStub<IBatchService>();
            batchService.Stub(x => x.GetControllersInUse(null)).IgnoreArguments().Return(Enumerable.Empty<IDataSourceContainer>());
            batchService.GetControllersInUse(Arg.Any<IEnumerable<IConnectableTag>>()).Returns(Enumerable.Empty<IDataSourceContainer>());
            if (Storage.Exists())
            {
                Storage.Open();
            }
            var systemTagServiceCF = TestHelper.CreateAndAddServiceMock<ISystemTagServiceCF>();
            m_OPCClientStatusService = TestHelper.CreateAndAddServiceMock<IOPCClientStatusService>();
            var systemTagServiceCF = TestHelper.CreateAndAddServiceStub<ISystemTagServiceCF>();
            m_OPCClientStatusService = TestHelper.CreateAndAddServiceStub<IOPCClientStatusService>();
            m_Recipe = new Recipe(m_StorageCacheService.ToILazy(), systemTagServiceCF.ToILazy(), m_OPCClientStatusService.ToILazy())
            {
            {
                DataType = BEDATATYPE.DT_INTEGER2
            };
            m_GlobalReferenceService.Stub(x => x.GetObject<IBasicTag>("Tags.Tag1")).Return(globalDataItem);
            m_GlobalReferenceService.GetObject<IBasicTag>(Arg.Any<string>()).Returns(globalDataItem);
            m_Recipe.RecipeItems[0].DataConnection = "Tags.Tag1";
            {
                DataType = BEDATATYPE.DT_INTEGER2
            };
            m_GlobalReferenceService.Stub(x => x.GetObject<IBasicTag>("Tags.Tag1")).Return(globalDataItem);
            m_GlobalReferenceService.GetObject<IBasicTag>("Tags.Tag1").Returns(globalDataItem);
            m_Recipe.RecipeItems[0].DataConnection = "Tags.Tag1";
            globalDataItem = m_Recipe.RecipeItems[0].DataItem;
            globalDataItem.Value = 100;
            m_OPCClientStatusService.Expect(x => x.NbrOfActiveCommErrors).Return(1);
            m_OPCClientStatusService.NbrOfActiveCommErrors.Returns(1);
            // ACT
            m_Recipe.SaveRecipe(RecipeFieldName);
            SaveRecipeWithOneItem();
            IGlobalDataItem globalDataItem = (IGlobalDataItem)m_Recipe.RecipeItems[0].DataItem;
            globalDataItem.Value = 0;
            m_OPCClientStatusService.Expect(x => x.NbrOfActiveCommErrors).Return(1);
            m_OPCClientStatusService.NbrOfActiveCommErrors.Returns(1);
            // ACT
            m_Recipe.LoadRecipe(RecipeFieldName);
                globalDataItem.DataType = BEDATATYPE.DT_INTEGER2;
                string dataItemFullName = "Tags.Tag" + index;
                m_GlobalReferenceService.Stub(x => x.GetObject<IBasicTag>(dataItemFullName)).Return(globalDataItem);
                m_GlobalReferenceService.GetObject<IBasicTag>(Arg.Any<string>()).Returns(globalDataItem);
                m_Recipe.RecipeItems[index].DataConnection = dataItemFullName;
                globalDataItem = (IGlobalDataItem)m_Recipe.RecipeItems[index].DataItem;
            m_Recipe.RecipeItems[0].DataConnection = "Tags.Tag1";
            m_GlobalReferenceService
                .Stub(x => x.GetObject<IBasicTag>("Tags.Tag1"))
                .Return(new GlobalDataItem
                .GetObject<IBasicTag>("Tags.Tag1")
                .Returns(new GlobalDataItem
                {
                    DataType = BEDATATYPE.DT_INTEGER2
                });
                    globalDataItem.Value = index2;
                    string dataItemFullName = string.Format("Tags.Tag{0}_{1}", index, index2);
                    m_GlobalReferenceService.Stub(x => x.GetObject<IBasicTag>(dataItemFullName)).Return(globalDataItem);
                    m_GlobalReferenceService.GetObject<IBasicTag>(dataItemFullName).Returns(globalDataItem);
                    m_Recipe.RecipeItems[index2].DataConnection = dataItemFullName;
                }

KeyValidatorTest.cs
-11
+11
/Tools/ToolsTest/Registration/KeyValidatorTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Registration
{
        public void Setup()
        {
            TestHelper.ClearServices();
            m_BrandService = TestHelper.CreateAndAddServiceMock<IBrandServiceIde>();
            m_BrandService = TestHelper.CreateAndAddServiceStub<IBrandServiceIde>();
        }
        [TearDown]
        [Test]
        public void InvalidLicenseKeyReturnsFalse()
        {
            m_BrandService.Stub(x => x.RegistrationCodeSeed).Return(RegistrationCodeSeed);
            m_BrandService.RegistrationCodeSeed.Returns(RegistrationCodeSeed);
            KeyValidator validator = new KeyValidator();
            bool valid = validator.IsValidKey(InvalidLicenseKey);
        [Test]
        public void ValidLicenseKeyReturnsTrue()
        {
            m_BrandService.Stub(x => x.RegistrationCodeSeed).Return(RegistrationCodeSeed);
            m_BrandService.RegistrationCodeSeed.Returns(RegistrationCodeSeed);
            KeyValidator validator = new KeyValidator();
            bool valid = validator.IsValidKey(ValidLicenseKey);
        [Test]
        public void EmptyLicenseKeyReturnsFalse()
        {
            m_BrandService.Stub(x => x.RegistrationCodeSeed).Return(RegistrationCodeSeed);
            m_BrandService.RegistrationCodeSeed.Returns(RegistrationCodeSeed);
            KeyValidator validator = new KeyValidator();
            bool valid = validator.IsValidKey(string.Empty);
        [Test]
        public void EmptyBrandNameReturnsFalse()
        {
            m_BrandService.Stub(x => x.RegistrationCodeSeed).Return(string.Empty);
            m_BrandService.RegistrationCodeSeed.Returns(string.Empty);
            KeyValidator validator = new KeyValidator();
            bool valid = validator.IsValidKey(ValidLicenseKey);
        [Test]
        public void IsDemoEqualsFalseIsSameAsEmptyConstructor()
        {
            m_BrandService.Stub(x => x.RegistrationCodeSeed).Return(RegistrationCodeSeed);
            m_BrandService.RegistrationCodeSeed.Returns(RegistrationCodeSeed);
            KeyValidator validator = new KeyValidator(false);
            bool valid = validator.IsValidKey(ValidLicenseKey);
            Assert.IsTrue(valid);
        [Test]
        public void IsDemoEqualsTrueIsNotValid()
        {
            m_BrandService.Stub(x => x.RegistrationCodeSeed).Return(RegistrationCodeSeed);
            m_BrandService.RegistrationCodeSeed.Returns(RegistrationCodeSeed);
            KeyValidator validator = new KeyValidator(true);
            bool valid = validator.IsValidKey(ValidLicenseKey);
            Assert.IsFalse(valid);
        [Test]
        public void InvalidDemoLicenseKeyReturnsFalse()
        {
            m_BrandService.Stub(x => x.RegistrationCodeSeed).Return(RegistrationCodeSeed);
            m_BrandService.RegistrationCodeSeed.Returns(RegistrationCodeSeed);
            KeyValidator validator = new KeyValidator(true);
            bool valid = validator.IsValidKey(InvalidLicenseKey);
        [Test]
        public void ValidDemoLicenseKeyReturnsTrue()
        {
            m_BrandService.Stub(x => x.RegistrationCodeSeed).Return(RegistrationCodeSeed);
            m_BrandService.RegistrationCodeSeed.Returns(RegistrationCodeSeed);
            KeyValidator validator = new KeyValidator(true);
            bool valid = validator.IsValidKey(ValidDemoLicenseKey);
        [TestCase(BlackListedLicenseKeyCaseSensitive)]
        public void BlackListedLicenseKeyReturnsFalse(string blackListedLicenseKey)
        {
            m_BrandService.Stub(x => x.RegistrationCodeSeed).Return(RegistrationCodeSeed2);
            m_BrandService.RegistrationCodeSeed.Returns(RegistrationCodeSeed2);
            KeyValidator validator = new KeyValidator();
            bool valid = validator.IsValidKey(blackListedLicenseKey);

MRUListTest.cs
-8
+7
/Tools/ToolsTest/RegistryAccess/MRUListTest.cs
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.RegistryAccess
{
            }
            catch (Exception) { }
            TestHelper.CreateAndAddServiceMock<IBrandServiceIde>();
            TestHelper.CreateAndAddServiceStub<IBrandServiceIde>();
            m_MruListService = new RecentProjectsListService();
            m_MruListService.MaxNumberOfEntries = 10;
            ((RecentProjectsListService)m_MruListService).FileHelper = GetFileHelperStub(true);
        [Test]
        public void NonExistingFilesAreNotReturned()
        {
            FileHelper stubHelper = MockRepository.GenerateStub<FileHelper>();
            stubHelper.Stub(x => x.Exists("ExistingFile1")).Return(true);
            stubHelper.Stub(x => x.Exists("ExistingFile2")).Return(true);
            stubHelper.Stub(x => x.Exists(null)).IgnoreArguments().Return(false);
            FileHelper stubHelper = Substitute.For<FileHelper>();
            stubHelper.Exists("ExistingFile1").Returns(true);
            stubHelper.Exists("ExistingFile2").Returns(true);
            //Remove stub filehelper that always says that the file exists
            ((RecentProjectsListService)m_MruListService).FileHelper = stubHelper;
        private FileHelper GetFileHelperStub(bool fileExistsResult)
        {
            FileHelper stubHelper = MockRepository.GenerateStub<FileHelper>();
            stubHelper.Stub(x => x.Exists(null)).IgnoreArguments().Return(fileExistsResult);
            FileHelper stubHelper = Substitute.For<FileHelper>();
            stubHelper.Exists(Arg.Any<string>()).Returns(fileExistsResult);
            return stubHelper;
        }

ReportGeneratorCFTest.cs
-20
+34
/Tools/ToolsTest/Reporting/Generating/ReportGeneratorCFTest.cs
using System;
using Core.Api.Application;
using Core.Api.DI.PlatformFactory;
using Neo.ApplicationFramework.Utilities.IO;
using Neo.ApplicationFramework.Common.FileLogic;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Reporting;
using Neo.ApplicationFramework.Interfaces.Storage;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Utilities.IO;
using NSubstitute;
using NUnit.Framework;
using Neo.ApplicationFramework.Interfaces.Storage;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Reporting.Generating
{
    [TestFixture]
    public class ReportGeneratorCFTest
    {
#if VNEXT_TARGET
        private ReportGeneratorBase m_ReportGeneratorCF;
#else
        private ReportGeneratorCF m_ReportGeneratorCF;
#endif
        private ISettings m_Settings;
        [SetUp]
        public void Setup()
        {
            TestHelper.CreateAndAddServiceMock<IStorageCacheService>();
            TestHelper.CreateAndAddServiceStub<IStorageCacheService>();
            m_Settings = MockRepository.GenerateMock<ISettings>();
            m_SystemSettingsMock = MockRepository.GenerateMock<ISystemSettings>();
            m_Settings = Substitute.For<ISettings>();
            m_SystemSettingsMock = Substitute.For<ISystemSettings>();
            IDateTimeEditService dateTimeEditService = TestHelper.CreateAndAddServiceMock<IDateTimeEditService>();
            IPlatformFactoryService platFormFactoryService = TestHelper.CreateAndAddServiceMock<IPlatformFactoryService>();
            ICoreApplication coreApp = TestHelper.CreateAndAddServiceMock<ICoreApplication>();
            IDateTimeEditService dateTimeEditService = TestHelper.CreateAndAddServiceStub<IDateTimeEditService>();
            IPlatformFactoryService platFormFactoryService = TestHelper.CreateAndAddServiceStub<IPlatformFactoryService>();
            ICoreApplication coreApp = TestHelper.CreateAndAddServiceStub<ICoreApplication>();
#if VNEXT_TARGET
            IFilePathLogic filePathLogic = new FilePathLogic();
#else
            IFilePathLogic filePathLogic = new FilePathLogicCF();
#endif
            coreApp.Stub(x => x.StartupPath).Return("C:\\SomeFolder\\iX");
            dateTimeEditService.Stub(x => x.CreateTimeString(new DateTime(), new DateTimeDisplayFormat(), false, false)).IgnoreArguments().Return("");
            coreApp.StartupPath.Returns("C:\\SomeFolder\\iX");
            dateTimeEditService.CreateTimeString(Arg.Any<DateTime>(), Arg.Any<DateTimeDisplayFormat>(), Arg.Any<bool>(), Arg.Any<bool>())
                .Returns("");
            m_ExcelProvider = MockRepository.GenerateStub<IReportExcelProvider>();
            m_ExcelProvider.Stub(x => x.GenerateAndSave("", "")).IgnoreArguments();
            m_ExcelProvider = Substitute.For<IReportExcelProvider>();
            //m_ExcelProvider.GenerateAndSave(Arg.Any<string>(), Arg.Any<string>());
            platFormFactoryService.Stub(x => x.Create<IFilePathLogic>()).Return(filePathLogic);
            platFormFactoryService.Create<IFilePathLogic>().Returns(filePathLogic);
            m_FirstReport = MockRepository.GenerateStub<IReport>().With(rep => rep.FileName = "File name with spaces.and.dots.extension");
            m_FirstReport = Substitute.For<IReport>().With(rep => rep.FileName = "File name with spaces.and.dots.extension");
            m_FileHelper = MockRepository.GenerateStub<FileHelperCF>();
            m_FileHelper.Stub(x => x.Move("", "")).IgnoreArguments();
            m_FileHelper = Substitute.For<FileHelperCF>();
            //m_FileHelper.Move("", "")).IgnoreArguments();
        }
        [TearDown]
        private void PrepareGenerator(bool isFtpFriendly)
        {
            m_Settings.Stub(x => x.SystemSettings).Return(m_SystemSettingsMock);
            m_Settings.SystemSettings.Returns(m_SystemSettingsMock);
            m_SystemSettingsMock.Stub(x => x.FtpServerFriendlyNamesEnabled).Return(isFtpFriendly);
            m_SystemSettingsMock.Stub(x => x.FtpServerEnabled).Return(isFtpFriendly);
            m_SystemSettingsMock.FtpServerFriendlyNamesEnabled.Returns(isFtpFriendly);
            m_SystemSettingsMock.FtpServerEnabled.Returns(isFtpFriendly);
#if VNEXT_TARGET
            m_ReportGeneratorCF = new ReportGeneratorBase(m_Settings, m_ExcelProvider, m_FileHelper);
#else
            m_ReportGeneratorCF = new ReportGeneratorCF(m_Settings, m_ExcelProvider, m_FileHelper);
#endif
        }
    }
}

SerialManualTest.cs
-2
+2
/Tools/ToolsTest/Reporting/Generating/SerialManualTest.cs
using Neo.ApplicationFramework.Common.Printer.SerialPrinter;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Printer;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Reporting.Generating
{
        {
            // To run the tests you probably need to update the printer settings.
            // COM port for example is very likely change between computers.
            m_PrinterDeviceStub = MockRepository.GenerateStub<IPrinterDevice>();
            m_PrinterDeviceStub = Substitute.For<IPrinterDevice>();
            m_PrinterDeviceStub.COMPort = "COM4";
            // These settings are for the PayPrint EDUE-LPE58 printer, change if 

ReportHandlingCFTest.cs
-42
+39
/Tools/ToolsTest/Reporting/ReportHandlingCFTest.cs
using System.Drawing;
using System.IO;
using Core.Api.DI.PlatformFactory;
using Neo.ApplicationFramework.Utilities.IO;
using FlexCel.XlsAdapter;
using log4net;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Interfaces.Reporting;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Utilities.IO;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Reporting
{
    [TestFixture]
    public class ReportHandlingCFTest
    {
        private const string ReportStubName = "Report1";
        private static readonly string PathToXlsFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"Reporting\Generating\ExampleReports\2sheet5x5.xls");
        private ReportHandlingCFDouble m_ReportHandlingCF;
        private IFilePathLogic m_FilePathLogic;
        private NotificationLogic m_NotificationLogic;
        {
            TestHelper.ClearServices();
            m_FilePathLogic = MockRepository.GenerateStub<IFilePathLogic>();
            m_NotificationLogic = MockRepository.GenerateStub<NotificationLogic>(new Bitmap(1, 1));
            IPlatformFactoryService platFormFactoryService = TestHelper.CreateAndAddServiceMock<IPlatformFactoryService>();
            m_PrinterService = TestHelper.CreateAndAddServiceMock<IPrinterServiceCF>();
            m_MessageBoxService = TestHelper.CreateAndAddServiceMock<IMessageBoxServiceCF>();
            m_ReportGeneration = MockRepository.GenerateStub<IReportGenerator>();
            m_FileHelper = MockRepository.GenerateStub<FileHelperCF>();
            platFormFactoryService.Stub(x => x.Create<IFilePathLogic>()).Return(m_FilePathLogic);
            platFormFactoryService.Stub(x => x.Create<IReportGenerator>()).Return(m_ReportGeneration);
            m_FilePathLogic = Substitute.For<IFilePathLogic>();
            m_NotificationLogic = Substitute.For<NotificationLogic>(new Bitmap(1, 1));
            IPlatformFactoryService platFormFactoryService = TestHelper.CreateAndAddServiceStub<IPlatformFactoryService>();
            m_PrinterService = TestHelper.CreateAndAddServiceStub<IPrinterServiceCF>();
            m_MessageBoxService = TestHelper.CreateAndAddServiceStub<IMessageBoxServiceCF>();
            m_ReportGeneration = Substitute.For<IReportGenerator>();
            m_FileHelper = Substitute.For<FileHelperCF>();
            platFormFactoryService.Create<IFilePathLogic>().Returns(m_FilePathLogic);
            platFormFactoryService.Create<IReportGenerator>().Returns(m_ReportGeneration);
            m_PrinterService.Stub(x => x.SendToPrinterAsync(null)).IgnoreArguments().Return(ITaskBuilder.FromCompleted());
            m_PrinterService.SendToPrinterAsync(Arg.Any<Interfaces.Printer.IFlowDocument>()).Returns(ITaskBuilder.FromCompleted());
            m_ReportHandlingCF = new ReportHandlingCFDouble(m_FilePathLogic, m_NotificationLogic, m_FileHelper, m_PrinterService);
        }
            string path = TempPath;
            IReport report = ReportStub;
            var outcome = new ReportGenerationOutcome(report.Name, "SavedReport1.xls");
            StubTargetPathForReport(path);
            StubEnoughDiskSpace();
            m_ReportGeneration.Stub(x => x.GenerateAndSave(report, path)).Return(new ReportGenerationOutcome(report.Name, "SavedReport1.xls"));
            m_ReportGeneration.GenerateAndSave(report, path).Returns(outcome);
            m_ReportHandlingCF.Save(report, path).Wait();
            m_ReportHandlingCF.Save(report, TempPath).Wait();
            m_NotificationLogic.AssertWasCalled(x => x.ShowNotification(expectedNotificationMessage));
            m_NotificationLogic.AssertWasCalled(x => x.HideNotification());
            m_NotificationLogic.Received().ShowNotification(expectedNotificationMessage);
            m_NotificationLogic.Received().HideNotification();
        }
        [Test]
        public void SavingThatFailesCausesGenerationFailedEvent()
        {
            Assert.That(m_ReportHandlingCF.WasGenerationFailedEventFired, Is.False);
            m_ReportGeneration.Stub(s => s.GenerateAndSave(null, null)).IgnoreArguments().Throw(
                new NullReferenceException());
            m_ReportGeneration.GenerateAndSave(Arg.Any<IReport>(), Arg.Any<string>()).Returns(x => throw new NullReferenceException());
            m_ReportHandlingCF.Save(ReportStub, String.Empty).Wait();
        public void PrintingShowsANotificationMessageAndThenHidesIt()
        {
            IReport report = ReportStub;
            string expectedNotificationMessage = String.Format(TextsCF.ReportGenerationPrintingMessage, report.Name);
            string expectedNotificationMessage = string.Format(TextsCF.ReportGenerationPrintingMessage, report.Name);
            StubTargetPathForReport("");
            StubEnoughDiskSpace();
            m_ReportHandlingCF.Print(report).Wait();
            m_NotificationLogic.AssertWasCalled(x => x.ShowNotification(expectedNotificationMessage));
            m_NotificationLogic.AssertWasCalled(x => x.HideNotification());
            m_NotificationLogic.Received().ShowNotification(expectedNotificationMessage);
            m_NotificationLogic.Received().HideNotification();
        }
        [Test]
                report = ReportStub;
            if (fileNameOfTemporaryReport == null)
                fileNameOfTemporaryReport = String.Empty;
                fileNameOfTemporaryReport = string.Empty;
            string pathToXlsFile = @"Reporting\Generating\ExampleReports\2sheet5x5.xls";
            if (!File.Exists(pathToXlsFile))
            if (!File.Exists(PathToXlsFile))
            {
                Assert.Fail(String.Format("This test requires a report xls file located at {0}", pathToXlsFile));
                Assert.Fail(string.Format("This test requires a report xls file located at {0}", PathToXlsFile));
            }
            m_ReportGeneration.Stub(x => x.GenerateAndSave(report, tempPath)).Return(new ReportGenerationOutcome(report.Name, fileNameOfTemporaryReport, pathToXlsFile));
            var outcome = new ReportGenerationOutcome(ReportStubName, fileNameOfTemporaryReport, PathToXlsFile);
            m_ReportGeneration.GenerateAndSave(report, tempPath).Returns(outcome);
        }
        private void StubReportFileForPrinting(IReport report = null)
        {
            m_ReportGeneration.Stub(x => x.Generate(report)).Return(new XlsFile(@"Reporting\Generating\ExampleReports\2sheet5x5.xls"));
            var xlsFile = new XlsFile(PathToXlsFile);
            m_ReportGeneration.Generate(report).Returns(xlsFile);
        }
        private void StubTargetPathForReport(string path)
        {
            m_FilePathLogic.Stub(x => x.GetTargetPathForFile(FileDirectory.ProjectFiles)).Return(path);
            m_FilePathLogic.GetTargetPathForFile(FileDirectory.ProjectFiles).Returns(path);
        }
        private void StubNotEnoughDiskSpace()
        {
            m_ReportHandlingCF.DiskCheckerStub.Stub(
                x => x.ThereIsNotEnoughDiskSpaceForReport(Arg<IReport>.Is.Anything, Arg<string>.Is.Anything)).Return(
                    true);
            m_ReportHandlingCF.DiskCheckerStub.ThereIsNotEnoughDiskSpaceForReport(Arg.Any<IReport>(), Arg.Any<string>())
                .Returns(true);
        }
        private void StubEnoughDiskSpace()
        {
            m_ReportHandlingCF.DiskCheckerStub.Stub(
                x => x.ThereIsNotEnoughDiskSpaceForReport(Arg<IReport>.Is.Anything, Arg<string>.Is.Anything)).Return(
                    false);
            m_ReportHandlingCF.DiskCheckerStub.ThereIsNotEnoughDiskSpaceForReport(Arg.Any<IReport>(), Arg.Any<string>())
                .Returns(false);
        }
        private void AssertNotEnoughtDiskSpaceMessageWasShowed(string caption)
        {
            m_MessageBoxService.AssertWasCalled(x => x.Show(Arg<string>.Is.Equal(TextsCF.ReportGenerationFailedDiskSpace),
                Arg<string>.Is.Equal(caption), Arg<bool>.Is.Anything));
            m_MessageBoxService.Received().Show(TextsCF.ReportGenerationFailedDiskSpace, caption, Arg.Any<bool>());
        }
        private string TempPath
        {
            get
            {
                IReport report = MockRepository.GenerateStub<IReport>();
                report.Name = "Report1";
                report.FileName = "Report1.xls";
                IReport report = Substitute.For<IReport>();
                report.Name.Returns(ReportStubName);
                report.FileName.Returns($"{ReportStubName}.xls");
                return report;
            }
        }
        #endregion
    }
    internal class ReportHandlingCFDouble : ReportHandlingBase
    {
        public bool WasSaveEventFired { get; private set; }
        }
        public ReportHandlingCFDouble(IFilePathLogic filePathLogic, NotificationLogic notificationLogic, FileHelperCF fileHelper, IPrinterServiceCF printerService)
            : base(MockRepository.GenerateStub<ReportDiskSpaceChecker>(filePathLogic),
            : base(Substitute.For<ReportDiskSpaceChecker>(filePathLogic),
            new SynchronousExtendedThreadPool(), notificationLogic, filePathLogic, fileHelper, printerService)
        {
        }

ReportItemsTest.cs
-2
+2
/Tools/ToolsTest/Reporting/ReportItemsTest.cs
using System;
using Neo.ApplicationFramework.Interfaces.Reporting;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Reporting
{
        public void FindingReportByNameIsNotCaseSensetive()
        {
            string reportName = "RePoRt!";
            IReport reportToFind = MockRepository.GenerateStub<IReport>().With(rep => rep.Name = reportName);
            IReport reportToFind = Substitute.For<IReport>().With(rep => rep.Name = reportName);
            var reportItems = new ReportOwnedList(new Reports())
            {

ReportsTest.cs
-6
+6
/Tools/ToolsTest/Reporting/ReportsTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Reporting;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Reporting
{
        private IReport ReportStub
        {
            get { return MockRepository.GenerateStub<IReport>(); }
            get { return Substitute.For<IReport>(); }
        }
        [SetUp]
            m_ReportsUnderTest.PrintReport(existingReportName);
            existingReport.AssertWasCalled(x => x.Print());
            existingReport.Received().Print();
        }
        [Test]
            m_ReportsUnderTest.PrintReport("I doesnt exist!");
            existingReport.AssertWasNotCalled(x => x.Print());
            existingReport.DidNotReceive().Print();
        }
        [Test]
            m_ReportsUnderTest.SaveReport(existingReportName, FileDirectory.USB);
            existingReport.AssertWasCalled(x => x.Save(FileDirectory.USB));
            existingReport.Received().Save(FileDirectory.USB);
        }
        [Test]
            m_ReportsUnderTest.SaveReport("I doesnt exist!", FileDirectory.USB);
            existingReport.AssertWasNotCalled(x => x.Save(FileDirectory.USB));
            existingReport.DidNotReceive().Save(FileDirectory.USB);
        }
        [Test]

ReportTest.cs
-28
+27
/Tools/ToolsTest/Reporting/ReportTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Reporting;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Reporting
{
        public virtual void SetUp()
        {
            TestHelper.ClearServices();
            m_ReportingHandling = MockRepository.GenerateMock<IReportHandling>();
            m_FilePathLogic = MockRepository.GenerateStub<IFilePathLogic>();
            m_ReportingHandling = Substitute.For<IReportHandling>();
            m_FilePathLogic = Substitute.For<IFilePathLogic>();
            m_PlatformFactoryService = TestHelper.CreateAndAddServiceStub<IPlatformFactoryService>();
            TestHelper.AddServiceStub<IMessageBoxServiceCF>();
            m_PlatformFactoryService.Stub(x => x.Create<IReportHandling>()).Return(m_ReportingHandling);
            m_PlatformFactoryService.Stub(x => x.Create<IFilePathLogic>()).Return(m_FilePathLogic);
            m_PlatformFactoryService.Create<IReportHandling>().Returns(m_ReportingHandling);
            m_PlatformFactoryService.Create<IFilePathLogic>().Returns(m_FilePathLogic);
        }
        [Test]
            IReport report = new Report("") { Name = expectedReportName };
            m_ReportingHandling.Stub(p => p.PrintAsync((Arg<IReport>.Is.Equal(report))))
                .Return(ITaskBuilder.FromCompleted())
                .WhenCalled(_ => m_ReportingHandling.Raise(
                    reportingHandling => reportingHandling.ReportPrinted += null,
                    m_ReportingHandling,
                    new ReportPrintedEventArgs(report.Name)));
            m_ReportingHandling.PrintAsync(Arg.Is(report))
                .Returns(x =>
                {
                    Raise.EventWith(m_ReportingHandling, new ReportPrintedEventArgs(report.Name));
                    return ITaskBuilder.FromCompleted();
                });
            report.ReportPrinted += (sender, e) => { actualReportName = e.ReportName;};
            IReport report = new Report(string.Empty) { Name = expectedReportName };
            m_ReportingHandling.Stub(p => p.Save(Arg<IReport>.Is.Equal(report),Arg<String>.Is.Anything))
                .Return(ITaskBuilder.FromCompleted())
                .WhenCalled(_ => m_ReportingHandling.Raise(
                    reportingHandling => reportingHandling.ReportSaved += null,
                    m_ReportingHandling,
                    new ReportSavedEventArgs(report.Name, expectedGeneratedReportFileName)));
            m_ReportingHandling.Save(Arg.Is(report), Arg.Any<string>())
                .Returns(x =>
                 {
                     Raise.EventWith(m_ReportingHandling, new ReportSavedEventArgs(report.Name, expectedGeneratedReportFileName));
                     return ITaskBuilder.FromCompleted();
                 });
            m_FilePathLogic.Stub(p => p.CreateDirectoryIfItDoesNotExist(Arg<string>.Is.Anything)).Return(true);
            m_FilePathLogic.CreateDirectoryIfItDoesNotExist(Arg.Any<string>()).Returns(true);
            report.ReportSaved += (sender, e) =>
                                      {
                report.Name, "", "Failed!",new ArgumentException("Fail!"));
            
            m_ReportingHandling.Stub(p => p.PrintAsync(Arg<IReport>.Is.Equal(report)))
                .Return(ITaskBuilder.FromCompleted())
                .WhenCalled(_ => m_ReportingHandling.Raise(
                    reportingHandling => reportingHandling.ReportGenerationFailed += null,
                    m_ReportingHandling,
                    expectedArgs));
            m_ReportingHandling.PrintAsync(Arg.Is(report))
                .Returns(x =>
                    {
                        Raise.EventWith(m_ReportingHandling, expectedArgs);
                        return ITaskBuilder.FromCompleted();
                    });
            report.ReportGenerationFailed += (sender, eventArgs) => {
                                                     actualArgs = eventArgs;
        public void DoesNotSaveReportWhenDestinationDirectoryInvalid()
        {
            IReport report = new Report("Report1.xls") { Name = "Report" };
            m_FilePathLogic.Stub(x => x.GetTargetPathForFile(FileDirectory.NotApplicable)).Return(String.Empty);
            m_FilePathLogic.GetTargetPathForFile(FileDirectory.NotApplicable).Returns(String.Empty);
            report.Save(FileDirectory.NotApplicable);
            m_ReportingHandling.AssertWasNotCalled(x => x.Save(Arg<IReport>.Is.Anything, Arg<string>.Is.Anything));
            m_ReportingHandling.DidNotReceiveWithAnyArgs().Save(Arg.Any<IReport>(), Arg.Any<string>());
        }
        [Test]
            report.Save(Path.GetTempPath());
            m_FilePathLogic.AssertWasCalled(p => p.CreateDirectoryIfItDoesNotExist(Arg<string>.Is.NotNull));            
            m_FilePathLogic.Received().CreateDirectoryIfItDoesNotExist(Arg.Is<string>(x=> x != null));
        }
    }
}

ReportViewModelTest.cs
+3
/Tools/ToolsTest/Reporting/ReportViewModelTest.cs
#if !VNEXT_TARGET
using System;
using System.ComponentModel;
using Neo.ApplicationFramework.Interfaces;
        }
    }
}
#endif

GotoDefaultRibbonStrategyTest.cs
-9
+30
/Tools/ToolsTest/RibbonManager/GotoDefaultRibbonStrategyTest.cs
using Microsoft.Windows.Controls.Ribbon;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.RibbonManager;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Ribbon.Strategies
{
        [TearDown]
        public void TearDown()
        {
            m_RibbonContextManager.VerifyAllExpectations();
        }
        protected override void SetupExpectationsForRibbonSelection(string ribbonToReturnFromGet, string ribbonToMerge, string ribbonToSelect)
        {
            base.SetupExpectationsForRibbonSelection(ribbonToReturnFromGet, ribbonToMerge, ribbonToSelect);
            m_RibbonContextManager.Expect(x => x.SelectRibbonTab(ribbonToMerge)).Repeat.Once();
            m_RibbonContextManager.Expect(x => x.SetVisibleContextContainersForSelection(m_Selection)).Return(m_RibbonContextContainerList).Repeat.Once();
            m_RibbonContextManager.SetVisibleContextContainersForSelection(m_Selection).Returns(m_RibbonContextContainerList);
        }
        [Test]
        public void TestThatAnEmptySelectionResultsInNoContextContainers()
        {
            m_DefaultRibbonContext = String.Empty;
            m_RibbonContextManager.Expect(x => x.SelectRibbonTab("")).Repeat.Once();
            m_Selection = new List<object>();
            m_PrimarySelection = null;
            m_RibbonContextContainerList = new List<IRibbonContextContainer>();
            m_RibbonContextManager.Expect(x => x.SetVisibleContextContainersForSelection(m_Selection)).Return(m_RibbonContextContainerList).Repeat.Once();
            m_RibbonContextManager.SetVisibleContextContainersForSelection(m_Selection).Returns(m_RibbonContextContainerList);
            
            SetSelectionAndUpdateRibbon();
            m_RibbonContextManager.Received(1).SelectRibbonTab("");
            m_RibbonContextManager.Received(1).SetVisibleContextContainersForSelection(m_Selection);
        }
        [Test]
        public void TestThatANonEmptySelectionResultsInContextContainers()
        {
            m_DefaultRibbonContext = "General";
            m_RibbonContextManager.Expect(x => x.SelectRibbonTab("General")).Repeat.Once();
            m_RibbonContextManager.Stub(x => x.SelectedRibbonTab).Return(new RibbonTab() { Name = "General" });
            m_RibbonContextManager.SelectedRibbonTab.Returns(new RibbonTab() { Name = "General" });
            m_RibbonContextContainerList = new List<IRibbonContextContainer>();
            m_RibbonContextContainerList.Add(new TestRibbonContextContainer("General"));
            m_RibbonContextManager.Expect(x => x.SetVisibleContextContainersForSelection(m_Selection)).Return(m_RibbonContextContainerList);
            m_RibbonContextManager.SetVisibleContextContainersForSelection(m_Selection).Returns(m_RibbonContextContainerList);
            
            SetSelectionAndUpdateRibbon();
            m_RibbonContextManager.Received(1).SelectRibbonTab("General");
        }
        [Test]
        {
            SetupExpectationsForRibbonSelection("Appearance", "Appearance", "Appearance");
            SetSelectionAndUpdateRibbon();
            m_RibbonContextManager.Received(1).SelectRibbonTab("Appearance");
            m_RibbonContextManager.Received(1).SetVisibleContextContainersForSelection(m_Selection);
        }
        [Test]
        {
            SetupExpectationsForRibbonSelection("Appearance", "Actions", "Actions");
            SetSelectionAndUpdateRibbon();
            m_RibbonContextManager.Received(1).SelectRibbonTab("Actions");
            m_RibbonContextManager.Received(1).SetVisibleContextContainersForSelection(m_Selection);
        }
        #region Go to Standard tab
        {
            SetupExpectationsForRibbonSelection("Home", "Actions", "Actions");
            SetSelectionAndUpdateRibbon();
            m_RibbonContextManager.Received(1).SelectRibbonTab("Actions");
            m_RibbonContextManager.Received(1).SetVisibleContextContainersForSelection(m_Selection);
        }
        [Test]
        {
            SetupExpectationsForRibbonSelection("View", "Actions", "Actions");
            SetSelectionAndUpdateRibbon();
            m_RibbonContextManager.Received(1).SelectRibbonTab("Actions");
            m_RibbonContextManager.Received(1).SetVisibleContextContainersForSelection(m_Selection);
        }
        [Test]
        {
            SetupExpectationsForRibbonSelection("Insert", "Actions", "Actions");
            SetSelectionAndUpdateRibbon();
            m_RibbonContextManager.Received(1).SelectRibbonTab("Actions");
            m_RibbonContextManager.Received(1).SetVisibleContextContainersForSelection(m_Selection);
        }
        [Test]
        {
            SetupExpectationsForRibbonSelection("ToolBox", "Actions", "Actions");
            SetSelectionAndUpdateRibbon();
            m_RibbonContextManager.Received(1).SelectRibbonTab("Actions");
            m_RibbonContextManager.Received(1).SetVisibleContextContainersForSelection(m_Selection);
        }
        #endregion
    }

RibbonContentSelectionChangesTest.cs
-13
+22
/Tools/ToolsTest/RibbonManager/RibbonContentSelectionChangesTest.cs
using Neo.ApplicationFramework.Tools.Ribbon;
using Neo.ApplicationFramework.Tools.Ribbon.Strategies;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.RibbonManager
{
        [Test]
        public void TestCaseSingleNonScreenObjectIsSelected()
        {
            var ribbonContextManagerMock = MockRepository.GenerateMock<IRibbonContextManager>();
            var ribbonContextManagerMock = Substitute.For<IRibbonContextManager>();
            var containers = new List<IRibbonContextContainer>();
            var selectedObjects = new ArrayList { "I AM NOT A SCREEN" };
            RibbonTab selectedRibbonTab = CreateTab("Dynamics");
            IRibbonStrategy ribbonStrategy = new SimpleRibbonStrategy(ribbonContextManagerMock);
            
            SetupExpectationsForFirstCallToUpdate(ribbonContextManagerMock, containers, selectedObjects, selectedRibbonTab, CreateGeneralTab());
            var selectedObjectDefaultRibbonTabItem = CreateGeneralTab();
            ribbonContextManagerMock.SetVisibleContextContainersForSelection(selectedObjects).Returns(containers);
            ribbonContextManagerMock.SelectedRibbonTab.Returns(selectedRibbonTab);
            ribbonContextManagerMock.GetDefaultRibbonContext(selectedObjects).Returns(selectedObjectDefaultRibbonTabItem.Name);
            ribbonStrategy.Update(selectedObjects, null);
            ribbonContextManagerMock.VerifyAllExpectations();
            ribbonContextManagerMock.Received().SetVisibleContextContainersForSelection(selectedObjects);
            ribbonContextManagerMock.Received().GetDefaultRibbonContext(selectedObjects);
            ribbonContextManagerMock.Received().SelectRibbonTab(selectedObjectDefaultRibbonTabItem.Name);
        }
        [Test]
        public void TestCaseNonScreenObjectIsSelectedWhenOtherObjectOfSameTypeIsAlreadySelected()
        {
            var ribbonContextManagerMock = MockRepository.GenerateMock<IRibbonContextManager>();
            var ribbonContextManagerMock = Substitute.For<IRibbonContextManager>();
            var containers = new List<IRibbonContextContainer>();
            var selectedObjects = new ArrayList { "I AM NOT A SCREEN" };
            IRibbonStrategy ribbonStrategy = new SimpleRibbonStrategy(ribbonContextManagerMock);
            var tab = new RibbonContextTab { Name = "General" };
            SetupExpectationsForFirstCallToUpdate(ribbonContextManagerMock, containers, selectedObjects, selectedRibbonTab, tab);
            ribbonContextManagerMock.SetVisibleContextContainersForSelection(selectedObjects).Returns(containers);
            ribbonContextManagerMock.SelectedRibbonTab.Returns(selectedRibbonTab);
            ribbonContextManagerMock.GetDefaultRibbonContext(selectedObjects).Returns(tab.Name);
            ribbonContextManagerMock.Expect(x => x.SelectedRibbonTab).Return(tab);
            ribbonContextManagerMock.Expect(x => x.GetDefaultRibbonContext(selectedObjects2)).Return(tab.Name);
            ribbonContextManagerMock.SelectedRibbonTab.Returns(tab);
            ribbonContextManagerMock.GetDefaultRibbonContext(selectedObjects2).Returns(tab.Name);
            ribbonContextManagerMock.SelectedRibbonTab = tab;
            ribbonContextManagerMock.UpdateContent(containers);
            ribbonStrategy.Update(selectedObjects, null);
            ribbonStrategy.Update(selectedObjects2, null);
            ribbonContextManagerMock.VerifyAllExpectations();
            ribbonContextManagerMock.Received().SetVisibleContextContainersForSelection(selectedObjects);
            ribbonContextManagerMock.Received().GetDefaultRibbonContext(selectedObjects);
            ribbonContextManagerMock.Received().SelectRibbonTab(tab.Name);
        }
        private static RibbonTab CreateTab(string name)
            RibbonTab selectedRibbonTab,
            RibbonContextTab selectedObjectDefaultRibbonTabItem)
        {
            ribbonContextManagerMock.Expect(x => x.SetVisibleContextContainersForSelection(selectedObjects)).Return(containers).Repeat.Once();
            ribbonContextManagerMock.Expect(x => x.SelectedRibbonTab).Return(selectedRibbonTab).Repeat.Once();
            ribbonContextManagerMock.Expect(x => x.GetDefaultRibbonContext(selectedObjects)).Return(selectedObjectDefaultRibbonTabItem.Name).Repeat.Once();
            ribbonContextManagerMock.Expect(x => x.SelectRibbonTab(selectedObjectDefaultRibbonTabItem.Name)).Repeat.Once();
            ribbonContextManagerMock.SetVisibleContextContainersForSelection(selectedObjects).Returns(containers);
            ribbonContextManagerMock.SelectedRibbonTab.Returns(selectedRibbonTab);
            ribbonContextManagerMock.GetDefaultRibbonContext(selectedObjects).Returns(selectedObjectDefaultRibbonTabItem.Name);
            ribbonContextManagerMock.SelectRibbonTab(selectedObjectDefaultRibbonTabItem.Name);
        }
    }
}

RibbonStrategyBaseTest.cs
-4
+4
/Tools/ToolsTest/RibbonManager/RibbonStrategyBaseTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.Ribbon;
using Neo.ApplicationFramework.Tools.Ribbon.Strategies;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.RibbonManager
{
        protected void CommonSetup()
        {
            m_RibbonContextManager = MockRepository.GenerateMock<IRibbonContextManager>();
            m_RibbonContextManager = Substitute.For<IRibbonContextManager>();
            m_TestRibbonContextProviderService = new TestRibbonContextProviderService();
            m_RibbonContextManager.Stub(x => x.RibbonContextProviderService).Return(m_TestRibbonContextProviderService);
            m_RibbonContextManager.RibbonContextProviderService.Returns(m_TestRibbonContextProviderService);
            m_PrimarySelection = new object();
            m_Selection = new List<Object>();
        protected virtual void SetupExpectationsForRibbonSelection(string ribbonToReturnFromGet, string ribbonToMerge, string ribbonToSelect)
        {
            m_RibbonContextManager.Stub(x => x.SelectedRibbonTab).Return(new RibbonTab(){Name=ribbonToReturnFromGet});
            m_RibbonContextManager.SelectedRibbonTab.Returns(new RibbonTab(){Name=ribbonToReturnFromGet});
            TestRibbonContextContainer ribbonContextContainer = new TestRibbonContextContainer(ribbonToMerge);
            m_RibbonContextContainerList = new List<IRibbonContextContainer>();

SimpleRibbonStrategyTest.cs
-25
+27
/Tools/ToolsTest/RibbonManager/SimpleRibbonStrategyTest.cs
using Microsoft.Windows.Controls.Ribbon;
using Neo.ApplicationFramework.Common.Ribbon;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Ribbon.Strategies
{
        public void Setup()
        {
            CommonSetup();
            m_RibbonContextManager = MockRepository.GenerateMock<IRibbonContextManager>();
            m_RibbonContextManager = Substitute.For<IRibbonContextManager>();
            RibbonStrategy = new SimpleRibbonStrategyDouble(m_RibbonContextManager);
        }
        [Test]
        public void ShouldSelectHomeTabWhenScreenIsSelected()
        {
            m_RibbonContextManager.Expect(x => x.SelectRibbonTab(RibbonConstants.RibbonTabNameHome));
            m_PrimarySelection = MockRepository.GenerateStub<IScreen>();
            m_PrimarySelection = Substitute.For<IScreen>();
            SelectPrimaryObjectAndUpdateRibbonStrategy();
            m_RibbonContextManager.VerifyAllExpectations();
            m_RibbonContextManager.Received().SelectRibbonTab(RibbonConstants.RibbonTabNameHome);
        }
        private RibbonTab RibbonTabStub(string tabName)
        {
            RibbonTab tab = MockRepository.GenerateStub<RibbonTab>();
            RibbonTab tab = Substitute.For<RibbonTab>();
            tab.Name = tabName;
            return tab;
        }
        private void StubContextContainerAndSelectedRibbonTab(string tabName)
        {
            m_RibbonContextManager.Stub(x => x.SetVisibleContextContainersForSelection(null)).IgnoreArguments().Return(m_RibbonContextContainers);
            m_RibbonContextManager.Stub(x => x.SelectedRibbonTab).Return(RibbonTabStub(tabName));
            m_RibbonContextManager.SetVisibleContextContainersForSelection(Arg.Any<System.Collections.ICollection>())
                .Returns(m_RibbonContextContainers);
            RibbonTab tab = RibbonTabStub(tabName);
            m_RibbonContextManager.SelectedRibbonTab.Returns(tab);
        }
        private IRibbonContextContainer ContextualViewModelStub(string belongsToTabName)
        {
            IRibbonContextContainer container = MockRepository.GenerateStub<IRibbonContextContainer>();
            IRibbonContextContainer container = Substitute.For<IRibbonContextContainer>();
            container.TabName = belongsToTabName;
            return container;
        }
        {
            m_RibbonContextContainers.Add(ContextualViewModelStub("TabA"));
            StubContextContainerAndSelectedRibbonTab("TabA");
            m_PrimarySelection = MockRepository.GenerateStub<IArc>();
            m_PrimarySelection = Substitute.For<IArc>();
            SelectPrimaryObjectAndUpdateRibbonStrategy();
            m_RibbonContextManager.AssertWasCalled(x => x.SelectRibbonTab("TabA"), x => x.Repeat.Once());
            m_RibbonContextManager.Received(1).SelectRibbonTab("TabA");
        }
        [Test]
        public void WhenTheContainerNotBelongsToTheSameTabAndTheTabIsNotADefaultTabItShouldUseTheDefaultRibbonContext()
        {
            StubContextContainerAndSelectedRibbonTab("TabB");
            m_PrimarySelection = MockRepository.GenerateStub<IArc>();
            m_RibbonContextManager.Stub(x => x.GetDefaultRibbonContext(m_SelectedObjects)).Return("TheDefaultContextualTab");
            m_PrimarySelection = Substitute.For<IArc>();
            m_RibbonContextManager.GetDefaultRibbonContext(m_SelectedObjects).Returns("TheDefaultContextualTab");
            
            SelectPrimaryObjectAndUpdateRibbonStrategy();
            m_RibbonContextManager.AssertWasCalled(x => x.SelectRibbonTab("TheDefaultContextualTab"), x => x.Repeat.Once());
            m_RibbonContextManager.Received(1).SelectRibbonTab("TheDefaultContextualTab");
        }
        [Test]
        public void WhenTheContainerBelongsToTheSameTabAndTheresNoChangeInSelectedTypeItShallUpdateTheContent()
        {
            SetupFirstSelectionOfObject<IArc>();
            m_PrimarySelection = MockRepository.GenerateStub<IArc>();
            m_PrimarySelection = Substitute.For<IArc>();
            m_RibbonContextContainers.Add(ContextualViewModelStub("TabA"));
            StubContextContainerAndSelectedRibbonTab("TabA");
            SelectPrimaryObjectAndUpdateRibbonStrategy();
            m_RibbonContextManager.AssertWasCalled(x => x.UpdateContent(m_RibbonContextContainers), x => x.Repeat.Once());
            m_RibbonContextManager.Received(1).UpdateContent(m_RibbonContextContainers);
        }
        [Test]
        public void WhenSelectionDiffersOnTypeComparedToPreviousSelectionItShouldShowContextualContainersForTheNewSelection()
        {
            SetupFirstSelectionOfObject<IArc>();
            m_PrimarySelection = MockRepository.GenerateStub<IScreen>();
            m_RibbonContextManager.Expect(x => x.SetVisibleContextContainersForSelection(m_SelectedObjects)).Return(m_RibbonContextContainers);
            m_PrimarySelection = Substitute.For<IScreen>();
            m_RibbonContextManager.SetVisibleContextContainersForSelection(m_SelectedObjects).Returns(m_RibbonContextContainers);
          
            SelectPrimaryObjectAndUpdateRibbonStrategy();
            m_RibbonContextManager.VerifyAllExpectations();
            m_RibbonContextManager.Received().SetVisibleContextContainersForSelection(m_SelectedObjects);
        }
        [Test]
        public void WhenSelectionDoesNotDifferOnTypeComparedToPreviousSelectionItShouldShowTheSameContextualContainersAsBefore()
        {
            SetupFirstSelectionOfObject<IScreen>();
            m_PrimarySelection = MockRepository.GenerateStub<IScreen>();
            m_PrimarySelection = Substitute.For<IScreen>();
            
            SelectPrimaryObjectAndUpdateRibbonStrategy();
            m_RibbonContextManager.AssertWasNotCalled(x => x.SetVisibleContextContainersForSelection(m_SelectedObjects));
            m_RibbonContextManager.DidNotReceive().SetVisibleContextContainersForSelection(m_SelectedObjects);
        }
        private void SetupFirstSelectionOfObject<TTypeOfObjectToBeSelected>() where TTypeOfObjectToBeSelected:class
        {
            m_PrimarySelection = MockRepository.GenerateStub<TTypeOfObjectToBeSelected>();
            m_RibbonContextManager.Stub(x => x.SelectedRibbonTab).Return(RibbonTabStub(""));
            m_RibbonContextManager.Stub(x => x.SetVisibleContextContainersForSelection(null)).IgnoreArguments().Return(m_RibbonContextContainers);
            m_PrimarySelection = Substitute.For<TTypeOfObjectToBeSelected>();
            m_RibbonContextManager.SelectedRibbonTab.Returns(RibbonTabStub(""));
            m_RibbonContextManager.SetVisibleContextContainersForSelection(Arg.Any<System.Collections.ICollection>())
                .Returns(m_RibbonContextContainers);
            SelectPrimaryObjectAndUpdateRibbonStrategy();
            ClearSelection();
            m_RibbonContextManager = MockRepository.GenerateMock<IRibbonContextManager>();
            m_RibbonContextManager = Substitute.For<IRibbonContextManager>();
            //Theres no good possibility to reset the mock and we dont want the setup to be so coupled to the implementation.
            ((SimpleRibbonStrategyDouble)RibbonStrategy).UpdateContextManager(m_RibbonContextManager);

RunToolTest.cs
-4
+3
/Tools/ToolsTest/Run/RunToolTest.cs
using System;
using Core.Api.Service;
using Core.Api.Tools;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Run
{
        {
            ITool tool = new RunTool();
            IServiceContainerCF serviceContainer = MockRepository.GenerateMock<IServiceContainerCF>();
            serviceContainer.Expect(x => x.AddService(Arg<Type>.Is.Anything, Arg<object>.Is.Anything, Arg<bool>.Is.Anything, Arg<bool>.Is.Anything)).Repeat.Once();
            IServiceContainerCF serviceContainer = Substitute.For<IServiceContainerCF>();
            tool.Owner = serviceContainer;
            tool.RegisterServices();
            serviceContainer.VerifyAllExpectations();
            serviceContainer.Received(1).AddService(Arg.Any<Type>(), Arg.Any<object>(), Arg.Any<bool>(), Arg.Any<bool>());
        }
    }
}

SchedulerTest.cs
-4
+4
/Tools/ToolsTest/Scheduler/SchedulerTest.cs
using Core.Api.Tools;
using Core.Component.Api.Instantiation;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Scheduler
{
        [SetUp]
        public void SetUp()
        {
            m_ToolManager = TestHelper.CreateAndAddServiceMock<IToolManager>();
            m_ToolManager.Stub(x => x.Runtime).Return(true);
            m_ToolManager = TestHelper.CreateAndAddServiceStub<IToolManager>();
            m_ToolManager.Runtime.Returns(true);
            var rootComponentService = TestHelper.CreateAndAddServiceMock<IRootComponentService>().ToILazy();
            var rootComponentService = TestHelper.CreateAndAddServiceStub<IRootComponentService>().ToILazy();
            m_Scheduler = new Scheduler(true, rootComponentService);
            m_SchedulerJob = new SchedulerJob();

LocalPropertyBindingProviderTests.cs
-2
+2
/Tools/ToolsTest/Screen/Bindings/LocalPropertyBindingProviderTests.cs
using Neo.ApplicationFramework.Controls.Screen.Bindings;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.Design.Bindings;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.Bindings
{
        {
            // ARRANGE
            BindingSourceDescription bindingSourceDescription = new LocalPropertyBindingSourceDescription("Level");
            var screen = MockRepository.GenerateStub<IScreen>();
            var screen = Substitute.For<IScreen>();
            // ACT
            Binding dynamicBinding = m_Provider.ProvideWinFormsBinding(bindingSourceDescription, "Value", screen, null, true);

AliasCrossReferenceFacadeTests.cs
-17
+19
/Tools/ToolsTest/Screen/CrossReference/AliasCrossReferenceFacadeTests.cs
#if !VNEXT_TARGET
using System;
using Core.Component.Engine.Design;
using Neo.ApplicationFramework.Controls.Screen.Alias;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.CrossReference
{
        {
            Assert.Throws<ArgumentNullException>(() => new AliasCrossReferenceFacade(
                null,
                MockRepository.GenerateStub<IUpdateAliasReferencesToDataItems>()));
                Substitute.For<IUpdateAliasReferencesToDataItems>()));
        }
        [Test]
        public void MissingDataItemReferenceUpdaterThrowsException()
        {
            Assert.Throws<ArgumentNullException>(() => new AliasCrossReferenceFacade(
                MockRepository.GenerateStub<IRenameAliasInstances>(),
                Substitute.For<IRenameAliasInstances>(),
                null));
        }
    }
        [SetUp]
        public void SetUp()
        {
            m_AliasInstanceRenamer = MockRepository.GenerateMock<IRenameAliasInstances>();
            m_AliasInstanceRenamer = Substitute.For<IRenameAliasInstances>();
            m_AliasCrossReferenceFacade = new AliasCrossReferenceFacade(
                m_AliasInstanceRenamer,
                MockRepository.GenerateStub<IUpdateAliasReferencesToDataItems>());
                Substitute.For<IUpdateAliasReferencesToDataItems>());
        }
        [Test]
        public void Return_false_if_CanRename_returns_false()
        {
            m_AliasInstanceRenamer.Stub(renamer => renamer.CanRename(null, null)).IgnoreArguments().Return(false);
            m_AliasInstanceRenamer.Expect(renamer => renamer.Rename(null, null, null, null)).IgnoreArguments().Repeat.Never();
            m_AliasInstanceRenamer.CanRename(Arg.Any<INeoDesignerHost>(), Arg.Any<AliasInstance>()).Returns(false);
            bool result = m_AliasCrossReferenceFacade.TryRenameAliasInstance(null, null, null, null);
            Assert.That(result, Is.False);
            m_AliasInstanceRenamer.VerifyAllExpectations();
            m_AliasInstanceRenamer.DidNotReceiveWithAnyArgs()
                .Rename(Arg.Any<INeoDesignerHost>(), Arg.Any<AliasInstance>(), Arg.Any<string>(), Arg.Any<string>());
        }
        [Test]
        public void Calls_Rename_and_returns_true_if_CanRename_returns_true()
        {
            m_AliasInstanceRenamer.Stub(renamer => renamer.CanRename(null, null)).IgnoreArguments().Return(true);
            m_AliasInstanceRenamer.Expect(renamer => renamer.Rename(null, null, null, null)).IgnoreArguments().Repeat.Once();
            m_AliasInstanceRenamer.CanRename(Arg.Any<INeoDesignerHost>(), Arg.Any<AliasInstance>()).Returns(true);
            bool result = m_AliasCrossReferenceFacade.TryRenameAliasInstance(null, null, null, null);
            Assert.That(result, Is.True);
            m_AliasInstanceRenamer.VerifyAllExpectations();
            m_AliasInstanceRenamer.ReceivedWithAnyArgs(1)
                .Rename(Arg.Any<INeoDesignerHost>(), Arg.Any<AliasInstance>(), Arg.Any<string>(), Arg.Any<string>());
        }
    }
        [SetUp]
        public void SetUp()
        {
            m_Updater = MockRepository.GenerateMock<IUpdateAliasReferencesToDataItems>();
            m_Updater = Substitute.For<IUpdateAliasReferencesToDataItems>();
            m_AliasCrossReferenceFacade = new AliasCrossReferenceFacade(
                MockRepository.GenerateStub<IRenameAliasInstances>(),
                Substitute.For<IRenameAliasInstances>(),
                m_Updater);
        }
        [Test]
        public void Route_to_UpdateDataItemReferences_on_IAliasDataItemReferenceItem_dependency()
        {
            var referenceItem = MockRepository.GenerateStub<IAliasDataItemReferenceItem>();
            var referenceItem = Substitute.For<IAliasDataItemReferenceItem>();
            AliasInstance aliasInstance = new AliasInstance();
            const string oldName = "OldName";
            const string newName = "NewName";
            m_Updater.Expect(renamer => renamer.UpdateTargetReference(referenceItem, aliasInstance, oldName, newName)).Repeat.Once();
            m_AliasCrossReferenceFacade.UpdateDataItemReferences(referenceItem, aliasInstance, oldName, newName);
            m_Updater.VerifyAllExpectations();
            m_Updater.ReceivedWithAnyArgs(1)
                .UpdateTargetReference(referenceItem, aliasInstance, oldName, newName);
        }
    }
}
#endif

AliasCrossReferenceServiceBuilderTest.cs
-4
+6
/Tools/ToolsTest/Screen/CrossReference/AliasCrossReferenceServiceBuilderTest.cs
#if !VNEXT_TARGET
using System;
using Core.Api.CrossReference;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Screen.Alias.CrossReference;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.CrossReference
{
        [SetUp]
        public void SetUp()
        {
            TestHelper.AddService<IProjectManager>(MockRepository.GenerateStub<IProjectManager>());
            TestHelper.AddService<IMessageBoxService>(MockRepository.GenerateStub<IMessageBoxService>());
            TestHelper.AddService<ICrossReferenceRebinderService>(MockRepository.GenerateStub<ICrossReferenceRebinderService>());
            TestHelper.AddService(Substitute.For<IProjectManager>());
            TestHelper.AddService(Substitute.For<IMessageBoxService>());
            TestHelper.AddService(Substitute.For<ICrossReferenceRebinderService>());
        }
        }
    }
}
#endif

AliasDefinitionRenamerTests.cs
-41
+44
/Tools/ToolsTest/Screen/CrossReference/AliasDefinitionRenamerTests.cs
#if !VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Neo.ApplicationFramework.Interfaces.CrossReference;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Screen.Alias;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Button = Neo.ApplicationFramework.Controls.Button;
namespace Neo.ApplicationFramework.Tools.Screen.CrossReference
            m_AliasInstances = new AliasInstanceList(null);
            m_AliasConfiguration = MockRepository.GenerateStub<IAliasConfiguration>();
            m_AliasConfiguration = Substitute.For<IAliasConfiguration>();
            m_AliasConfiguration.Instances = m_AliasInstances;
            m_Screen = MockRepository.GenerateStub<ScreenDesign.Screen>();
            m_Screen = Substitute.For<ScreenDesign.Screen>();
            m_Screen.AliasConfiguration = m_AliasConfiguration;
            m_RootDesigner = MockRepository.GenerateStub<IScreenRootDesigner>();
            m_RootDesigner.Stub(des => des.Component).Return(m_Screen);
            m_RootDesigner.Stub(des => des.Elements).Return(m_Elements);
            m_RootDesigner = Substitute.For<IScreenRootDesigner>();
            m_RootDesigner.Component.Returns(m_Screen);
            m_RootDesigner.Elements.Returns(m_Elements);
            m_DesignerHost = MockRepository.GenerateStub<INeoDesignerHost>();
            m_DesignerHost.Stub(host => host.RootDesigner).Return(m_RootDesigner);
            m_DesignerHost = Substitute.For<INeoDesignerHost>();
            m_DesignerHost.RootDesigner.Returns(m_RootDesigner);
            m_AliasWpfBindingFinder = MockRepository.GenerateStub<IFindAliasWpfBindings>();
            m_AliasBindingUpdater = MockRepository.GenerateMock<IUpdateAliasBindings>();
            m_RenamerByCrossReferenceService = MockRepository.GenerateMock<ICrossReferenceRenameService>();
            m_CrossReferenceQueryService = MockRepository.GenerateMock<ICrossReferenceQueryService>();
            m_AliasWpfBindingFinder = Substitute.For<IFindAliasWpfBindings>();
            m_AliasBindingUpdater = Substitute.For<IUpdateAliasBindings>();
            m_RenamerByCrossReferenceService = Substitute.For<ICrossReferenceRenameService>();
            m_CrossReferenceQueryService = Substitute.For<ICrossReferenceQueryService>();
            m_AliasRenamer = new AliasDefinitionRenamer(
                m_AliasWpfBindingFinder,
                m_RenamerByCrossReferenceService.ToILazy(),
                m_CrossReferenceQueryService.ToILazy());
            var targetService = MockRepository.GenerateMock<ITargetService>();
            var target = MockRepository.GenerateMock<ITarget>();
            target.Stub(inv => inv.Id).Return(TargetPlatform.Windows);
            targetService.Stub(inv => inv.CurrentTarget).Return(target);
            targetService.Stub(inv => inv.CurrentTargetInfo).Return(MockRepository.GenerateMock<ITargetInfo>());
            var targetService = Substitute.For<ITargetService>();
            var target = Substitute.For<ITarget>();
            target.Id.Returns(TargetPlatform.Windows);
            targetService.CurrentTarget.Returns(target);
            targetService.CurrentTargetInfo.Returns(Substitute.For<ITargetInfo>());
            TestHelper.AddService<ITargetService>(targetService);
        }
        public void RenameAliasNameIsUpdated()
        {
            // Arrange
            m_RenamerByCrossReferenceService.Stub(x => x.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg<string>.Is.Anything, Arg<Func<string, IEnumerable<ICrossReferenceItem>>>.Is.Anything, Arg<string>.Is.Anything)).Return(true);
            m_AliasWpfBindingFinder
                .Stub(x => x.FindAliasBindings(m_Elements, OldName))
                .Return(Enumerable.Empty<WpfBindingInfo>());
            m_RenamerByCrossReferenceService.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg.Any<string>(), 
                Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), Arg.Any<string>()).Returns(true);
            m_AliasWpfBindingFinder.FindAliasBindings(m_Elements, OldName)
                .Returns(Enumerable.Empty<WpfBindingInfo>());
            // Act
            m_AliasRenamer.Rename(m_DesignerHost, m_Alias, OldName, NewName);
        public void RenameAliasInstancesAreUpdated()
        {
            // Arrange
            m_RenamerByCrossReferenceService.Stub(x => x.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg<string>.Is.Anything, Arg<Func<string, IEnumerable<ICrossReferenceItem>>>.Is.Anything, Arg<string>.Is.Anything)).Return(true);
            m_AliasWpfBindingFinder
                .Stub(x => x.FindAliasBindings(m_Elements, OldName))
                .Return(Enumerable.Empty<WpfBindingInfo>());
            m_RenamerByCrossReferenceService.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg.Any<string>(), 
                Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), Arg.Any<string>()).Returns(true);
            m_AliasWpfBindingFinder.FindAliasBindings(m_Elements, OldName)
                .Returns(Enumerable.Empty<WpfBindingInfo>());
            m_AliasInstances.Add(new AliasInstance() { Name = "inst1", Values = new AliasValueList() { new AliasValue() { Name = OldName } } });
            m_AliasInstances.Add(new AliasInstance() { Name = "inst2", Values = new AliasValueList() { new AliasValue() { Name = OldName } } });
        public void RenameInstancesAreNotUpdatedIfAliasRenameFails()
        {
            // Arrange
            m_RenamerByCrossReferenceService.Stub(x => x.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg<string>.Is.Anything, Arg<Func<string, IEnumerable<ICrossReferenceItem>>>.Is.Anything, Arg<string>.Is.Anything)).Return(true);
            m_RenamerByCrossReferenceService.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg.Any<string>(), Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), Arg.Any<string>()).Returns(true);
            m_Alias.Site = new FakeSite(OldName);
            m_AliasInstances.Add(new AliasInstance() { Name = "inst1", Values = new AliasValueList() { new AliasValue() { Name = OldName } } });
        public void RenameWhenNameShouldNotBeUpdatedVerifyNoUpdate()
        {
            // Arrange
            m_RenamerByCrossReferenceService.Stub(x => x.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg<string>.Is.Anything, Arg<Func<string, IEnumerable<ICrossReferenceItem>>>.Is.Anything, Arg<string>.Is.Anything)).Return(false);
            m_RenamerByCrossReferenceService.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg.Any<string>(), Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), Arg.Any<string>()).Returns(false);
            m_AliasInstances.Add(new AliasInstance() { Name = "inst1", Values = new AliasValueList() { new AliasValue() { Name = OldName } } });
            m_AliasInstances.Add(new AliasInstance() { Name = "inst2", Values = new AliasValueList() { new AliasValue() { Name = OldName } } });
            Binding meterBinding = Bind(meter, Meter.ValueProperty, OldName);
            m_Elements.Add(meter);
            m_RenamerByCrossReferenceService.Stub(x => x.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg<string>.Is.Anything, Arg<Func<string, IEnumerable<ICrossReferenceItem>>>.Is.Anything, Arg<string>.Is.Anything)).Return(true);
            m_AliasWpfBindingFinder
                .Stub(x => x.FindAliasBindings(m_Elements, OldName))
                .Return(new[]
            m_RenamerByCrossReferenceService.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg.Any<string>(), 
                Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), Arg.Any<string>()).Returns(true);
            m_AliasWpfBindingFinder.FindAliasBindings(m_Elements, OldName)
                .Returns(new[]
                            {
                                new WpfBindingInfo(button, Button.ValueProperty, buttonBinding),
                                new WpfBindingInfo(meter, Meter.ValueProperty, meterBinding),
            m_AliasRenamer.Rename(m_DesignerHost, m_Alias, OldName, NewName);
            // Assert
            m_AliasBindingUpdater.AssertWasCalled(x => x.UpdateBindingWithNewAliasName(buttonBinding, OldName, NewName));
            m_AliasBindingUpdater.AssertWasCalled(x => x.UpdateBindingWithNewAliasName(meterBinding, OldName, NewName));
            m_AliasBindingUpdater.Received().UpdateBindingWithNewAliasName(buttonBinding, OldName, NewName);
            m_AliasBindingUpdater.Received().UpdateBindingWithNewAliasName(meterBinding, OldName, NewName);
        }
        [Test]
            Binding intervalBinding = Bind(button.TextIntervalMapper.Intervals[0], StringInterval.ValueProperty, OldName);
            Binding intervalBinding3rdLine = Bind(button.TextIntervalMapper.Intervals[2], StringInterval.ValueProperty, OldName);
            m_RenamerByCrossReferenceService.Stub(x => x.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg<string>.Is.Anything, Arg<Func<string, IEnumerable<ICrossReferenceItem>>>.Is.Anything, Arg<string>.Is.Anything)).Return(true);
            m_RenamerByCrossReferenceService.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg.Any<string>(), 
                Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), Arg.Any<string>()).Returns(true);
            m_AliasWpfBindingFinder
                .Stub(x => x.FindAliasBindings(m_Elements, OldName))
                .Return(new[]
                .FindAliasBindings(m_Elements, OldName)
                .Returns(new[]
                            {
                                new WpfBindingInfo(button.TextIntervalMapper.Intervals[0], StringInterval.ValueProperty, intervalBinding),
                                new WpfBindingInfo(button.TextIntervalMapper.Intervals[2], StringInterval.ValueProperty, intervalBinding3rdLine),
            m_AliasRenamer.Rename(m_DesignerHost, m_Alias, OldName, NewName);
            // Assert
            m_AliasBindingUpdater.AssertWasCalled(x => x.UpdateBindingWithNewAliasName(intervalBinding, OldName, NewName));
            m_AliasBindingUpdater.AssertWasCalled(x => x.UpdateBindingWithNewAliasName(intervalBinding3rdLine, OldName, NewName));
            m_AliasBindingUpdater.Received().UpdateBindingWithNewAliasName(intervalBinding, OldName, NewName);
            m_AliasBindingUpdater.Received().UpdateBindingWithNewAliasName(intervalBinding3rdLine, OldName, NewName);
        }
            Binding meterBinding = Bind(meter, Meter.ValueProperty, OldName);
            m_Elements.Add(meter);
            m_RenamerByCrossReferenceService.Stub(x => x.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg<string>.Is.Anything, Arg<Func<string, IEnumerable<ICrossReferenceItem>>>.Is.Anything, Arg<string>.Is.Anything)).Return(true);
            m_RenamerByCrossReferenceService.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg.Any<string>(), Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), Arg.Any<string>()).Returns(true);
            // Act
            try
            catch (NotImplementedException) { }
            // Assert
            m_AliasBindingUpdater.AssertWasNotCalled(x => x.UpdateBindingWithNewAliasName(buttonBinding, OldName, NewName));
            m_AliasBindingUpdater.AssertWasNotCalled(x => x.UpdateBindingWithNewAliasName(meterBinding, OldName, NewName));
            m_AliasBindingUpdater.DidNotReceive().UpdateBindingWithNewAliasName(buttonBinding, OldName, NewName);
            m_AliasBindingUpdater.DidNotReceive().UpdateBindingWithNewAliasName(meterBinding, OldName, NewName);
        }
        private static Binding Bind(DependencyObject dependencyObject, DependencyProperty dependencyProperty, string aliasName)
        }
    }
}
#endif

AliasInstanceRenamerTests.cs
-27
+30
/Tools/ToolsTest/Screen/CrossReference/AliasInstanceRenamerTests.cs
#if !VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.Linq;
using Neo.ApplicationFramework.Controls.Screen.Alias;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.CrossReference;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.CrossReference
{
        public void Missing_ICrossReferenceQueryService_dependency_ThrowsException()
        {
            Assert.Throws<ArgumentNullException>(() => new AliasInstanceRenamer(
                MockRepository.GenerateStub<ICrossReferenceRenameService>().ToILazy(),
                Substitute.For<ICrossReferenceRenameService>().ToILazy(),
                null));
        }
        {
            Assert.Throws<ArgumentNullException>(() => new AliasInstanceRenamer(
                null,
                MockRepository.GenerateStub<ICrossReferenceQueryService>().ToILazy()));
                Substitute.For<ICrossReferenceQueryService>().ToILazy()));
        }        
    }
        public void SetUp()
        {
            m_AliasInstanceRenamer = new AliasInstanceRenamer(                
                MockRepository.GenerateStub<ICrossReferenceRenameService>().ToILazy(),
                MockRepository.GenerateStub<ICrossReferenceQueryService>().ToILazy());
                Substitute.For<ICrossReferenceRenameService>().ToILazy(),
                Substitute.For<ICrossReferenceQueryService>().ToILazy());
        }
        [Test]
        [Test]
        public void Return_false_if_aliasInstance_is_null()
        {
            bool result = m_AliasInstanceRenamer.CanRename(MockRepository.GenerateStub<INeoDesignerHost>(), null);
            bool result = m_AliasInstanceRenamer.CanRename(Substitute.For<INeoDesignerHost>(), null);
            Assert.That(result, Is.False);
        }
        [Test]
        public void Return_true_if_designerHost_and_aliasInstance_are_both_not_null()
        {
            bool result = m_AliasInstanceRenamer.CanRename(MockRepository.GenerateStub<INeoDesignerHost>(), new AliasInstance());
            bool result = m_AliasInstanceRenamer.CanRename(Substitute.For<INeoDesignerHost>(), new AliasInstance());
            Assert.That(result, Is.True);
        }
        public void SetUp()
        {
            const string screenName = "MyScreen";
            var actionCrossReferenceItem = MockRepository.GenerateStub<IActionCrossReferenceItem>();
            actionCrossReferenceItem.Stub(x => x.SourceFullName).Return(screenName);
            var actionCrossReferenceItem = Substitute.For<IActionCrossReferenceItem>();
            actionCrossReferenceItem.SourceFullName.Returns(screenName);
            actionCrossReferenceItem.ActionParam = OldName;
            m_ActionCrossReferences = new List<IActionCrossReferenceItem> { actionCrossReferenceItem };
            m_AliasInstance = new AliasInstance { Name = OldName };
            m_DesignerHost = MockRepository.GenerateStub<INeoDesignerHost>();
            m_DesignerHost.Stub(host => host.RootComponentClassName).Return(screenName);
            m_DesignerHost = Substitute.For<INeoDesignerHost>();
            m_DesignerHost.RootComponentClassName.Returns(screenName);
            m_RenamerByCrossReferenceService = MockRepository.GenerateStub<ICrossReferenceRenameService>();
            m_CrossReferenceQueryService = MockRepository.GenerateStub<ICrossReferenceQueryService>();
            m_RenamerByCrossReferenceService = Substitute.For<ICrossReferenceRenameService>();
            m_CrossReferenceQueryService = Substitute.For<ICrossReferenceQueryService>();
            m_AliasInstanceRenamer = new AliasInstanceRenamer(
                m_RenamerByCrossReferenceService.ToILazy(),
                m_CrossReferenceQueryService.ToILazy());
        [TearDown]
        public void TearDown()
        {
            m_RenamerByCrossReferenceService.VerifyAllExpectations();
        }
        [Test]
        public void RenameNoUpdateWhenUserClicksNo()
        {
            // Arrange
            m_RenamerByCrossReferenceService.Stub(x => x.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg<string>.Is.Anything, Arg<Func<string, IEnumerable<ICrossReferenceItem>>>.Is.Anything, Arg<string>.Is.Anything)).Return(false);
            m_RenamerByCrossReferenceService.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg.Any<string>(), 
                Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), Arg.Any<string>())
                .Returns(false);
            GetReferencesReturns(m_ActionCrossReferences);
            m_RenamerByCrossReferenceService
                .Expect(x => x.UpdateNameByCrossReferences<IActionCrossReferenceItem>(Arg<string>.Is.Anything, Arg<string>.Is.Anything, Arg<Func<string, IEnumerable<ICrossReferenceItem>>>.Is.Anything, Arg<string>.Is.Anything))
                .IgnoreArguments()
                .Repeat.Never();
            // Act
            m_AliasInstanceRenamer.Rename(m_DesignerHost, m_AliasInstance, OldName, NewName);
            // Assert
            Assert.That(m_AliasInstance.Name, Is.EqualTo(OldName));
            m_RenamerByCrossReferenceService.DidNotReceiveWithAnyArgs()
                .UpdateNameByCrossReferences<IActionCrossReferenceItem>(Arg.Any<string>(), Arg.Any<string>(),
                Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), Arg.Any<string>());
        }
        [Test]
        public void RenameNameChangesButNoReferencesFound()
        {
            // Arrange
            m_RenamerByCrossReferenceService.Stub(x => x.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg<string>.Is.Anything, Arg<Func<string, IEnumerable<ICrossReferenceItem>>>.Is.Anything, Arg<string>.Is.Anything)).Return(true);
            m_RenamerByCrossReferenceService.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg.Any<string>(), Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), Arg.Any<string>()).Returns(true);
            GetReferencesReturns(Enumerable.Empty<IActionCrossReferenceItem>());
            // Act
        public void RenameReferencesAreUpdated()
        {
            // Arrange
            m_RenamerByCrossReferenceService.Stub(x => x.NameShouldBeUpdated<IActionCrossReferenceItem>(Arg<string>.Is.Anything, Arg<Func<string, IEnumerable<ICrossReferenceItem>>>.Is.Anything, Arg<string>.Is.Anything)).Return(true);
            m_RenamerByCrossReferenceService
                .NameShouldBeUpdated<IActionCrossReferenceItem>(Arg.Any<string>(), Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), Arg.Any<string>())
                .Returns(true);
            GetReferencesReturns(m_ActionCrossReferences);
            m_RenamerByCrossReferenceService
                .Expect(x => x.UpdateNameByCrossReferences<IActionCrossReferenceItem>(OldName, NewName, null, CrossReferenceTypes.Screen.ToString()))
                .Repeat.Once();
            // Act
            m_AliasInstanceRenamer.Rename(m_DesignerHost, m_AliasInstance, OldName, NewName);
            // Assert
            Assert.That(m_AliasInstance.Name, Is.EqualTo(NewName));
            m_RenamerByCrossReferenceService.Received(1)
                .UpdateNameByCrossReferences<IActionCrossReferenceItem>(OldName, NewName, 
                    Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), CrossReferenceTypes.Screen.ToString());
        }
        private void GetReferencesReturns(IEnumerable<IActionCrossReferenceItem> referenceItems)
        {
            m_CrossReferenceQueryService.Stub(x => x.GetScreenAliasInstanceReferences()).Return(referenceItems);
            m_CrossReferenceQueryService.GetScreenAliasInstanceReferences().Returns(referenceItems);
        }
    }
}
#endif

AliasToDataItemReferenceUpdaterTests.cs
-9
+11
/Tools/ToolsTest/Screen/CrossReference/AliasToDataItemReferenceUpdaterTests.cs
#if !VNEXT_TARGET
using Core.Component.Engine.Design;
using Neo.ApplicationFramework.Common.Alias.Entities;
using Neo.ApplicationFramework.Controls.Screen.Alias;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.CrossReference;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.CrossReference
{
        public void SetUp()
        {
            m_AliasDefinition = new AliasDefinition { Name = PropertyName, DefaultValue = OldName };
            m_Screen = MockRepository.GenerateStub<ScreenDesign.Screen>();
            m_Screen = Substitute.For<ScreenDesign.Screen>();
            AliasDefinitions aliasDefinitions = new AliasDefinitions(null) { m_AliasDefinition };
            var projectItemFinder = MockRepository.GenerateStub<IProjectItemFinder>();
            var screenDesignerProjectItem = MockRepository.GenerateStub<IScreenDesignerProjectItem>();
            var designerHost = MockRepository.GenerateStub<INeoDesignerHost>();
            var aliasConfiguration = MockRepository.GenerateStub<IAliasConfiguration>();
            var projectItemFinder = Substitute.For<IProjectItemFinder>();
            var screenDesignerProjectItem = Substitute.For<IScreenDesignerProjectItem>();
            var designerHost = Substitute.For<INeoDesignerHost>();
            var aliasConfiguration = Substitute.For<IAliasConfiguration>();
            m_Screen.AliasConfiguration = aliasConfiguration;
            projectItemFinder.Stub(finder => finder.GetProjectItem(ProjectItemName)).Return(screenDesignerProjectItem);
            screenDesignerProjectItem.Stub(projectItem => projectItem.DesignerHost).Return(designerHost);
            designerHost.Stub(x => x.RootComponent).Return(m_Screen);
            projectItemFinder.GetProjectItem(ProjectItemName).Returns(screenDesignerProjectItem);
            screenDesignerProjectItem.DesignerHost.Returns(designerHost);
            designerHost.RootComponent.Returns(m_Screen);
            aliasConfiguration.Definitions = aliasDefinitions;
            TestHelper.AddService<IProjectItemFinder>(projectItemFinder);
        }
    }
}
#endif

KeyCommandInvokerTest.cs
-29
+66
/Tools/ToolsTest/Screen/ScreenEditor/Input/KeyCommandInvokerTest.cs
using System.Windows.Input;
using Neo.ApplicationFramework.Interfaces;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Input
{
        [SetUp]
        public void CreateKeyCommandInvoker()
        {
            m_ScreenEditorCommandsMock = MockRepository.GenerateStrictMock<IScreenEditorCommands>();
            m_ScreenEditorCommandsMock = Substitute.For<IScreenEditorCommands>();
            m_KeyCommandInvoker = new KeyCommandInvoker(m_ScreenEditorCommandsMock);
            Assert.IsNotNull(m_KeyCommandInvoker);            
        }
        [TearDown]
        public void VerifyMocks()
        public void TearDown()
        {
            m_ScreenEditorCommandsMock.VerifyAllExpectations(); 
        }
        [Test]
        {
            m_Key = Key.Right;
            m_ModifierKey = ModifierKeys.None;
            m_ScreenEditorCommandsMock.Expect(x => x.MoveRight()).Return(true);
            m_ScreenEditorCommandsMock.MoveRight().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result, "Result should be true");
            m_ScreenEditorCommandsMock.Received().MoveRight();
            m_ScreenEditorCommandsMock.ClearReceivedCalls();
            m_ScreenEditorCommandsMock.Expect(x => x.MoveRight()).Repeat.Never();
            result = m_KeyCommandInvoker.KeyDown(m_Key, ModifierKeys.Alt);
            Assert.IsFalse(result, "Result should be false");
            m_ScreenEditorCommandsMock.DidNotReceive().MoveRight();
        }
        [Test]
        {
            m_Key = Key.Right;
            m_ModifierKey = ModifierKeys.Control;
            m_ScreenEditorCommandsMock.Expect(x => x.MoveRight()).Repeat.Never();
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsFalse(result, "Result should be false");
            m_ScreenEditorCommandsMock.DidNotReceive().MoveRight();
        }
        [Test]
        {
            m_Key = Key.Left;
            m_ModifierKey = ModifierKeys.None;
            m_ScreenEditorCommandsMock.Expect(x => x.MoveLeft()).Return(true);
            m_ScreenEditorCommandsMock.MoveLeft().Returns(true);
            
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            
            Assert.IsTrue(result);
            m_ScreenEditorCommandsMock.Received().MoveLeft();
        }
        [Test]
        {
            m_Key = Key.Left;
            m_ModifierKey = ModifierKeys.Control;
            m_ScreenEditorCommandsMock.Expect(x => x.MoveLeft()).Repeat.Never();
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsFalse(result, "Result should be false");
            m_ScreenEditorCommandsMock.DidNotReceive().MoveLeft();
        }
        [Test]
        {
            m_Key = Key.Up;
            m_ModifierKey = ModifierKeys.None;
            m_ScreenEditorCommandsMock.Expect(x => x.MoveUp()).Return(true);
            m_ScreenEditorCommandsMock.MoveUp().Returns(true);
            
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result);
            m_ScreenEditorCommandsMock.Received().MoveUp();
        }
        [Test]
        {
            m_Key = Key.Up;
            m_ModifierKey = ModifierKeys.Control;
            m_ScreenEditorCommandsMock.Expect(x => x.MoveUp()).Repeat.Never();
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsFalse(result, "Result should be false");
            m_ScreenEditorCommandsMock.DidNotReceive().MoveUp();
        }
        [Test]
        {
            m_Key = Key.Down;
            m_ModifierKey = ModifierKeys.None;
            m_ScreenEditorCommandsMock.Expect(x => x.MoveDown()).Return(true);
            m_ScreenEditorCommandsMock.MoveDown().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result);
            m_ScreenEditorCommandsMock.Received().MoveDown();
        }
        [Test]
        {
            m_Key = Key.Down;
            m_ModifierKey = ModifierKeys.Control;
            m_ScreenEditorCommandsMock.Expect(x => x.MoveDown()).Repeat.Never();
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsFalse(result, "Result should be false");
            m_ScreenEditorCommandsMock.DidNotReceive().MoveDown();
        }
        [Test]
        {
            m_Key = Key.Right;
            m_ModifierKey = ModifierKeys.Shift;
            m_ScreenEditorCommandsMock.Expect(x => x.IncreaseWidth()).Return(true);
            m_ScreenEditorCommandsMock.IncreaseWidth().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result);
            m_ScreenEditorCommandsMock.Received().IncreaseWidth();
        }
        [Test]
        {
            m_Key = Key.Left;
            m_ModifierKey = ModifierKeys.Shift;
            m_ScreenEditorCommandsMock.Expect(x => x.DecreaseWidth()).Return(true);
            m_ScreenEditorCommandsMock.DecreaseWidth().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result);
            m_ScreenEditorCommandsMock.Received().DecreaseWidth();
        }
        [Test]
        {
            m_Key = Key.Down;
            m_ModifierKey = ModifierKeys.Shift;
            m_ScreenEditorCommandsMock.Expect(x => x.IncreaseHeight()).Return(true);
            m_ScreenEditorCommandsMock.IncreaseHeight().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result);
            m_ScreenEditorCommandsMock.Received().IncreaseHeight();
        }
        [Test]
        {
            m_Key = Key.Up;
            m_ModifierKey = ModifierKeys.Shift;
            m_ScreenEditorCommandsMock.Expect(x => x.DecreaseHeight()).Return(true);
            m_ScreenEditorCommandsMock.DecreaseHeight().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result);
            m_ScreenEditorCommandsMock.Received().DecreaseHeight();
        }
        [Test]
        {
            m_Key = Key.Z;
            m_ModifierKey = ModifierKeys.Control;
            m_ScreenEditorCommandsMock.Expect(x => x.CanExecuteUndo()).Return(true);
            m_ScreenEditorCommandsMock.Expect(x => x.Undo()).Return(true);
            m_ScreenEditorCommandsMock.CanExecuteUndo().Returns(true);
            m_ScreenEditorCommandsMock.Undo().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result);
            m_ScreenEditorCommandsMock.Received().CanExecuteUndo();
            m_ScreenEditorCommandsMock.Received().Undo();
        }
        [Test]
        {
            m_Key = Key.Y;
            m_ModifierKey = ModifierKeys.Control;
            m_ScreenEditorCommandsMock.Expect(x => x.Redo()).Return(true);
            m_ScreenEditorCommandsMock.Redo().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result);
            m_ScreenEditorCommandsMock.Received().Redo();
        }
        [Test]
        {
            m_Key = Key.Delete;
            m_ModifierKey = ModifierKeys.None;
            m_ScreenEditorCommandsMock.Expect(x => x.CanExecuteDelete()).Return(true);
            m_ScreenEditorCommandsMock.Expect(x => x.Delete()).Return(true);
            m_ScreenEditorCommandsMock.CanExecuteDelete().Returns(true);
            m_ScreenEditorCommandsMock.Delete().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result);
            m_ScreenEditorCommandsMock.Received().CanExecuteDelete();
            m_ScreenEditorCommandsMock.Received().Delete();
        }
        [Test]
        {
            m_Key = Key.C;
            m_ModifierKey = ModifierKeys.Control;
            m_ScreenEditorCommandsMock.Expect(x => x.Copy()).Return(true);
            m_ScreenEditorCommandsMock.Copy().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result, "Copy should return true");
            m_ScreenEditorCommandsMock.Received().Copy();
        }
        [Test]
        {
            m_Key = Key.X;
            m_ModifierKey = ModifierKeys.Control;
            m_ScreenEditorCommandsMock.Expect(x => x.CanExecuteCut()).Return(true);
            m_ScreenEditorCommandsMock.Expect(x => x.Cut()).Return(true);
            m_ScreenEditorCommandsMock.CanExecuteCut().Returns(true);
            m_ScreenEditorCommandsMock.Cut().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result, "Cut should return true");
            m_ScreenEditorCommandsMock.Received().CanExecuteCut();
            m_ScreenEditorCommandsMock.Received().Cut();
        }
        [Test]
        {
            m_Key = Key.V;
            m_ModifierKey = ModifierKeys.Control;
            m_ScreenEditorCommandsMock.Expect(x => x.CanExecutePaste()).Return(true);
            m_ScreenEditorCommandsMock.Expect(x => x.Paste()).Return(true);
            m_ScreenEditorCommandsMock.CanExecutePaste().Returns(true);
            m_ScreenEditorCommandsMock.Paste().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result, "Paste should return true");
            m_ScreenEditorCommandsMock.Received().CanExecutePaste();
            m_ScreenEditorCommandsMock.Received().Paste();
        }
        [Test]
        {
            m_Key = Key.E;
            m_ModifierKey = ModifierKeys.Control;
            m_ScreenEditorCommandsMock.Expect(x => x.LockSelection()).Return(true);
            m_ScreenEditorCommandsMock.LockSelection().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result, "Editor should return true");
            m_Key = Key.L;
            result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result, "Lock should return true");
            m_ScreenEditorCommandsMock.Received().LockSelection();
        }
        [Test]
        {
            m_Key = Key.E;
            m_ModifierKey = ModifierKeys.Control;
            m_ScreenEditorCommandsMock.Expect(x => x.HideSelection()).Return(true);
            m_ScreenEditorCommandsMock.HideSelection().Returns(true);
            bool result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result, "Editor should return true");
            m_Key = Key.H;
            result = m_KeyCommandInvoker.KeyDown(m_Key, m_ModifierKey);
            Assert.IsTrue(result, "Hide should return true");
            m_ScreenEditorCommandsMock.Received().HideSelection();
        }
    }

ScreenEditorCommandsTest.cs
-86
+90
/Tools/ToolsTest/Screen/ScreenEditor/Input/ScreenEditorCommandsTest.cs
Displayed content is truncated due to maximum viewable content limit.
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Screen.ScreenEditor.HotSpot;
using Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Snap;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Size = System.Drawing.Size;
namespace Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Input
            TestHelper.AddService<ISnapServiceGlobal>(snapServiceGlobal);
            var targetService = MockRepository.GenerateMock<ITargetService>();
            var target = MockRepository.GenerateMock<ITarget>();
            target.Stub(inv => inv.Id).Return(TargetPlatform.Windows);
            targetService.Stub(inv => inv.CurrentTarget).Return(target);
            targetService.Stub(inv => inv.CurrentTargetInfo).Return(MockRepository.GenerateMock<ITargetInfo>());
            var targetService = Substitute.For<ITargetService>();
            var target = Substitute.For<ITarget>();
            var targetInfo = Substitute.For<ITargetInfo>();
            var terminalDescr = Substitute.For<ITerminalDescription, ITerminal>();
            targetInfo.TerminalDescription.Returns(terminalDescr);
            target.Id.Returns(TargetPlatform.Windows);
            targetService.CurrentTarget.Returns(target);
            targetService.CurrentTargetInfo.Returns(targetInfo);
            TestHelper.AddService<ITargetService>(targetService);
            IToolManager toolManager = MockRepository.GenerateStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(false);
            IToolManager toolManager = Substitute.For<IToolManager>();
            toolManager.Runtime.Returns(false);
            TestHelper.AddService<IToolManager>(toolManager);
            m_SelectionList = new List<FrameworkElement>();
            IGlobalSelectionService globalSelectionService = TestHelper.AddServiceStub<IGlobalSelectionService>();
            globalSelectionService.Stub(x => x.GetSelectedComponents()).Return(m_SelectionList);
            globalSelectionService.GetSelectedComponents().Returns(m_SelectionList);
            m_ScreenEditor = new ScreenEditorTestWindow();
            m_ScreenEditor.Show();
            m_BoundingBoxes = new List<Rect>();
            m_HotSpotService = MockRepository.GenerateStub<IHotSpotService>();
            m_HotSpotService = Substitute.For<IHotSpotService>();
            INeoDesignerHost neoDesignerHost = MockRepository.GenerateStub<INeoDesignerHost>();
            neoDesignerHost.Stub(x => x.GetService<ISelectionService>()).Return(null);
            neoDesignerHost.Stub(x => x.GetService<IHotSpotService>()).Return(m_HotSpotService);
            INeoDesignerHost neoDesignerHost = Substitute.For<INeoDesignerHost>();
            neoDesignerHost.GetService<ISelectionService>().Returns(x => null);
            neoDesignerHost.GetService<IHotSpotService>().Returns(m_HotSpotService);
            m_ScreenRootDesigner = MockRepository.GenerateStub<IScreenRootDesigner>();
            neoDesignerHost.Stub(x => x.RootDesigner).Return(m_ScreenRootDesigner);
            m_ScreenRootDesigner.Stub(x => x.DesignerHost).Return(neoDesignerHost);
            m_ScreenRootDesigner.Stub(x => x.SelectedElements).Return(m_SelectionList);
            m_ScreenRootDesigner.Stub(x => x.PrimarySelectedElement).Return(m_MasterRectangle);
            m_ScreenRootDesigner.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Return(null);
            m_ScreenRootDesigner.Stub(x => x.Select(Arg<FrameworkElement>.Is.Anything)).Do(new Action<FrameworkElement>(x => ReplaceSelection(x)));
            m_ScreenRootDesigner.Stub(x => x.Select(Arg<IList<FrameworkElement>>.Is.Anything)).Do(new Action<IList<FrameworkElement>>(x => ReplaceSelection(x)));
            m_ScreenRootDesigner = Substitute.For<IScreenRootDesigner>();
            neoDesignerHost.RootDesigner.Returns(m_ScreenRootDesigner);
            m_ScreenRootDesigner.DesignerHost.Returns(neoDesignerHost);
            m_ScreenRootDesigner.SelectedElements.Returns(m_SelectionList);
            m_ScreenRootDesigner.PrimarySelectedElement.Returns(m_MasterRectangle);
            m_ScreenRootDesigner.FindElementByName(Arg.Any<string>()).Returns(x => null);
            m_ScreenRootDesigner.Select(Arg.Do<FrameworkElement>(x => ReplaceSelection(x)));
            m_ScreenRootDesigner.Select(Arg.Do<IList<FrameworkElement>>(x => ReplaceSelection(x)));
            m_ScreenDesignerView = MockRepository.GenerateStub<IScreenDesignerView>();
            m_ScreenDesignerView.Stub(x => x.RootElements).Return(m_Elements);
            m_ScreenDesignerView.Stub(x => x.GetBoundingBoxes()).Return(m_BoundingBoxes);
            m_ScreenDesignerView = Substitute.For<IScreenDesignerView>();
            m_ScreenDesignerView.RootElements.Returns(m_Elements);
            m_ScreenDesignerView.GetBoundingBoxes().Returns(m_BoundingBoxes);
            m_ScreenDesignerView.Designer = m_ScreenRootDesigner;
            m_ScreenDesignerView.Stub(x => x.RootDesigner).Return(m_ScreenRootDesigner);
            m_ScreenDesignerView.Stub(x => x.AddElement(Arg<FrameworkElement>.Is.Anything)).Do(new Action<FrameworkElement>(x => m_ScreenEditor.Canvas.Children.Add(x)));
            m_ScreenDesignerView.Stub(x => x.RemoveElement(Arg<FrameworkElement>.Is.Anything)).Do(new Action<FrameworkElement>(x => RemoveElement(x)));
            neoDesignerHost.Stub(x => x.GetService<IScreenDesignerView>()).Return(m_ScreenDesignerView);
            m_ScreenDesignerView.RootDesigner.Returns(m_ScreenRootDesigner);
            m_ScreenDesignerView.AddElement(Arg.Do<FrameworkElement>(x => m_ScreenEditor.Canvas.Children.Add(x)));
            m_ScreenDesignerView.RemoveElement(Arg.Do<FrameworkElement>(x => RemoveElement(x)));
            neoDesignerHost.GetService<IScreenDesignerView>().Returns(m_ScreenDesignerView);
            Canvas.SetLeft(m_MasterRectangle, MasterLeft);
            Canvas.SetTop(m_MasterRectangle, MasterTop);
            m_ScreenEditorCommands = new ScreenEditorCommands(m_ScreenDesignerView);
            ((ISnapService)m_SnapManager).SnapStyle = SnapStyle.None;
            neoDesignerHost.Stub(x => x.GetService<ISnapService>()).Return(m_SnapManager);
            neoDesignerHost.GetService<ISnapService>().Returns(m_SnapManager);
            // Setup undoservice
            IUndoManager undoManager = new UndoManager.UndoManager();
            m_IUndoService = undoManager.CreateUndoService(neoDesignerHost);
            neoDesignerHost.Stub(x => x.GetService<IUndoService>()).Return(m_IUndoService);
            neoDesignerHost.GetService<IUndoService>().Returns(m_IUndoService);
        }
        [TearDown]
        [Test]
        public void MoveNotPossibleWhenHotSpotIsInEditMode()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(true);
            m_HotSpotService.IsInEditMode.Returns(true);
            bool result = Move(Direction.Right);
            Assert.IsFalse(result, "Move should return false");
        [Test]
        public void MoveRightWithoutSnap()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            List<FrameworkElement> rectangles = new List<FrameworkElement>();
            rectangles.Add(m_MasterRectangle);
        [Test]
        public void MoveMultipleRightWithoutSnap()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondaryMasterAndSetSnap(SnapStyle.None);
            CreateSecondLargerRectAndSetSnapLines(SnapStyle.None);
        [Test]
        public void MoveLeftWithoutSnap()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            List<FrameworkElement> rectangles = new List<FrameworkElement>();
            rectangles.Add(m_MasterRectangle);
        [Test]
        public void MoveMultipleLeftWithoutSnap()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondaryMasterAndSetSnap(SnapStyle.None);
            CreateSecondLargerRectAndSetSnapLines(SnapStyle.None);
        [Test]
        public void MoveUpWithoutSnap()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            List<FrameworkElement> rectangles = new List<FrameworkElement>();
            rectangles.Add(m_MasterRectangle);
        [Test]
        public void MoveMultipleUpWithoutSnap()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondaryMasterAndSetSnap(SnapStyle.None);
            CreateSecondLargerRectAndSetSnapLines(SnapStyle.None);
        [Test]
        public void MoveDownWithoutSnap()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            List<FrameworkElement> rectangles = new List<FrameworkElement>();
            rectangles.Add(m_MasterRectangle);
        [Test]
        public void MoveMultipleDownWithoutSnap()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondaryMasterAndSetSnap(SnapStyle.None);
            CreateSecondLargerRectAndSetSnapLines(SnapStyle.None);
        [Test]
        public void MoveRightWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
        [Test]
        public void MoveMultipleRightWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
        [Test]
        public void MoveLeftWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
        [Test]
        public void MoveMultipleLeftWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
        [Test]
        public void MoveUpWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
        [Test]
        public void MoveMultipleUpWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
        [Test]
        public void MoveDownWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
        [Test]
        public void MoveMultipleDownWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
        [Test]
        public void IncreaseWidthWithoutSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            Point topLeftStart = GetTopLeftCorner(m_MasterRectangle);
            Point bottomRightStart = GetBottomRightCorner(m_MasterRectangle);
        [Test]
        public void IncreaseMultipleWidthWithoutSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondaryMasterAndSetSnap(SnapStyle.None);
            CreateSecondLargerRectAndSetSnapLines(SnapStyle.None);
        [Test]
        public void DecreaseWidthWithoutSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            Point topLeftStart = GetTopLeftCorner(m_MasterRectangle);
            Point bottomRightStart = GetBottomRightCorner(m_MasterRectangle);
            bool result = m_ScreenEditorCommands.DecreaseWidth();
        [Test]
        public void DecreaseMultipleWidthWithoutSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondaryMasterAndSetSnap(SnapStyle.None);
            CreateSecondLargerRectAndSetSnapLines(SnapStyle.None);
            try
        [Test]
        public void IncreaseHeightWithoutSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            Point topLeftStart = GetTopLeftCorner(m_MasterRectangle);
            Point bottomRightStart = GetBottomRightCorner(m_MasterRectangle);
            bool result = m_ScreenEditorCommands.IncreaseHeight();
        [Test]
        public void IncreaseMultipleHeightWithoutSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondaryMasterAndSetSnap(SnapStyle.None);
            CreateSecondLargerRectAndSetSnapLines(SnapStyle.None);
            try
        [Test]
        public void DecreaseHeightWithoutSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            Point topLeftStart = GetTopLeftCorner(m_MasterRectangle);
            Point bottomRightStart = GetBottomRightCorner(m_MasterRectangle);
        [Test]
        public void DecreaseMultipleHeightWithoutSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondaryMasterAndSetSnap(SnapStyle.None);
            CreateSecondLargerRectAndSetSnapLines(SnapStyle.None);
            try
        [Test]
        public void IncreaseWidthWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
            Point topLeftStart = GetTopLeftCorner(m_MasterRectangle);
        [Test]
        public void IncreaseMultipleWidthWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
            CreateSecondaryMasterAndSetSnap(SnapStyle.Grid);
            CreateSecondLargerRectAndSetSnapLines(SnapStyle.Grid);
        [Test]
        public void DecreaseWidthWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
            Point topLeftStart = GetTopLeftCorner(m_MasterRectangle);
        [Test]
        public void DecreaseMultipleWidthWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
            CreateSecondaryMasterAndSetSnap(SnapStyle.Grid);
            CreateSecondLargerRectAndSetSnapLines(SnapStyle.Grid);
        [Test]
        public void IncreaseHeightWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
            Point topLeftStart = GetTopLeftCorner(m_MasterRectangle);
        [Test]
        public void IncreaseMultipleHeightWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
            CreateSecondaryMasterAndSetSnap(SnapStyle.Grid);
            CreateSecondLargerRectAndSetSnapLines(SnapStyle.Grid);
        [Test]
        public void DecreaseHeightWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
        [Test]
        public void DecreaseMultipleHeightWithSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
            CreateSecondaryMasterAndSetSnap(SnapStyle.Grid);
            CreateSecondLargerRectAndSetSnapLines(SnapStyle.Grid);
        [Test]
        public void MoveWithoutObjectsSelectedNoSnap()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            m_SelectionList.Clear();
        [Test]
        public void MoveWithoutObjectsSelectedSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
            m_SelectionList.Clear();
        [Test]
        public void ResizeWithoutObjectsSelectedNoSnap()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            m_SelectionList.Clear();
            bool result = m_ScreenEditorCommands.IncreaseWidth();
        [Test]
        public void ResizeWithoutObjectsSelectedSnapToGrid()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            SetSnapToGrid();
            m_SelectionList.Clear();
        [Test]
        public void MoveRightWithSnapToLine()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondSmallerRectAndSetSnapLines(SnapStyle.Line);
        [Test]
        public void MoveMultipleRightWithSnapToLine()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondaryMasterAndSetSnap(SnapStyle.Line);
            CreateSecondSmallerRectAndSetSnapLines(SnapStyle.Line);
        [Test]
        public void MoveLeftWithSnapToLine()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondSmallerRectAndSetSnapLines(SnapStyle.Line);
        [Test]
        public void MoveMultipleLeftWithSnapToLine()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondaryMasterAndSetSnap(SnapStyle.Line);
            CreateSecondSmallerRectAndSetSnapLines(SnapStyle.Line);
        [Test]
        public void MoveDownWithSnapToLine()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondSmallerRectAndSetSnapLines(SnapStyle.Line);
        [Test]
        public void MoveMultipleDownWithSnapToLine()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);
            m_HotSpotService.IsInEditMode.Returns(false);
            CreateSecondaryMasterAndSetSnap(SnapStyle.Line);
            CreateSecondSmallerRectAndSetSnapLines(SnapStyle.Line);
        [Test]
        public void MoveUpWithSnapToLine()
        {
            m_HotSpotService.Stub(x => x.IsInEditMode).Return(false);

AdornedElementResizerTest.cs
-17
+18
/Tools/ToolsTest/Screen/ScreenEditor/Layout/AdornedElementResizerTest.cs
using System;
using System.Linq;
using Neo.ApplicationFramework.Controls.Layout;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Layout
{
    [TestFixture]
    public class AdornedElementResizerTest
    {
        private double firstArgument = -1.0;
        private double secondArgument = -1.0;
        private AdornedElementResizer m_AdornedElementResizer;
        private IModifierKeysInfo m_ModifierKeysInfoStub;
        private ILayoutObjectAdapter m_LayoutObjectAdapterStub;
        private void StubShiftKeyDown()
        {
            m_ModifierKeysInfoStub.Stub(x => x.ShiftKeyDown).Return(true);
            m_ModifierKeysInfoStub.ShiftKeyDown.Returns(true);
        }
        [SetUp]
        public void Setup()
        {
            m_ModifierKeysInfoStub = MockRepository.GenerateStub<IModifierKeysInfo>();
            m_LayoutObjectAdapterStub = MockRepository.GenerateStub<ILayoutObjectAdapter>();
            m_ModifierKeysInfoStub = Substitute.For<IModifierKeysInfo>();
            m_LayoutObjectAdapterStub = Substitute.For<ILayoutObjectAdapter>();
            m_AdornedElementResizer = new AdornedElementResizer(m_ModifierKeysInfoStub);
            m_LayoutObjectAdapterStub.WhenForAnyArgs(x => x.Resize(Arg.Any<double>(), Arg.Any<double>(), Arg.Any<Corner>()))
                .Do(y =>
                {
                    firstArgument = (double)y[0];
                    secondArgument = (double)y[1];
                });
        }
        [Test]
        public void DoesNotCalculateAspectRatioWhenShiftKeyIsntDown()
        {
            m_ModifierKeysInfoStub.Stub(x => x.ShiftKeyDown).Return(false);
            m_ModifierKeysInfoStub.ShiftKeyDown.Returns(false);
            m_AdornedElementResizer.Resize(m_LayoutObjectAdapterStub, 10, 100, Corner.TopLeft);
            m_AdornedElementResizer.Resize(m_LayoutObjectAdapterStub, 10, 200, Corner.TopLeft);
            m_LayoutObjectAdapterStub.AssertWasCalled(x => x.Resize(10, 200, Corner.TopLeft));
            m_LayoutObjectAdapterStub.Received().Resize(10, 200, Corner.TopLeft);
        }
        [Test]
            m_AdornedElementResizer.Resize(m_LayoutObjectAdapterStub, 10, 100, corner);
            m_AdornedElementResizer.Resize(m_LayoutObjectAdapterStub, 10, 200, corner);
            m_LayoutObjectAdapterStub.AssertWasCalled(x => x.Resize(10, 200, corner));
            m_LayoutObjectAdapterStub.Received().Resize(10, 200, corner);
        }
        [Test]
            AssertSizeOfElement(expectedWidth, expectedHeight, 2);
        }
   
        private void AssertSizeOfElement(double expectedWidth, double expectedHeight, int numberOfTimesResizeWasCalled)
        {
            Calls calls = m_LayoutObjectAdapterStub.GetCallsMadeOn(x => x.Resize(0, 0, Corner.TopLeft));
            Call lastCall = calls.ElementAt(numberOfTimesResizeWasCalled - 1);
            object firstArgument = lastCall.Arguments.First();
            object secondArgument = lastCall.Arguments.ElementAt(1);
            Assert.That(firstArgument, Is.EqualTo(expectedWidth), String.Format("The expected width after aspect ratio resize was not {0} as expected, but {1}.", expectedWidth, firstArgument));
            Assert.That(secondArgument, Is.EqualTo(expectedHeight), String.Format("The expected height after aspect ratio resize was not {0} as expected, but {1}.", expectedHeight, secondArgument));
            Assert.That(firstArgument, Is.EqualTo(expectedWidth), string.Format("The expected width after aspect ratio resize was not {0} as expected, but {1}.", expectedWidth, firstArgument));
            Assert.That(secondArgument, Is.EqualTo(expectedHeight), string.Format("The expected height after aspect ratio resize was not {0} as expected, but {1}.", expectedHeight, secondArgument));
        }
    }
}

AdornedLineResizerTest.cs
-9
+12
/Tools/ToolsTest/Screen/ScreenEditor/Layout/AdornedLineResizerTest.cs
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Snap;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Layout
{
        private void StubShiftKeyDown()
        {
            m_ModifierKeysInfoStub.Stub(x => x.ShiftKeyDown).Return(true);
            m_ModifierKeysInfoStub.ShiftKeyDown.Returns(true);
        }
        [SetUp]
            m_Line = new Line();
            m_LayoutObjectAdapterLine = new LayoutObjectAdapterLine(m_Line);
            m_ModifierKeysInfoStub = MockRepository.GenerateStub<IModifierKeysInfo>();
            m_SnapService = MockRepository.GenerateStub<ISnapService>();
            m_ModifierKeysInfoStub = Substitute.For<IModifierKeysInfo>();
            m_SnapService = Substitute.For<ISnapService>();
        }
        [TearDown]
        {
            Point originalPosition = new Point(1, 1);
            Point updatedPosition = new Point(10, 100);
            m_ModifierKeysInfoStub.Stub(x => x.ShiftKeyDown).Return(false);
            m_ModifierKeysInfoStub.ShiftKeyDown.Returns(false);
            AdornedLineResizer.Resize(originalPosition, updatedPosition, PointInLine.Start);
            Calls calls = m_SnapService.GetCallsMadeOn(x => x.GetSnapPosition(new Point()));
            Point pointSentToSnapService = (Point)calls.First().Arguments.First();
            m_SnapService.GetSnapPosition(new Point()).ReturnsForAnyArgs(x => 
            {
                Point pointSentToSnapService = (Point)x[0];
                Assert.That(pointSentToSnapService.X, Is.EqualTo(updatedPosition.X));
                Assert.That(pointSentToSnapService.Y, Is.EqualTo(updatedPosition.Y));
                return pointSentToSnapService;
            });
        }
        [Test]
            double newXValue = (draggedSide == PointInLine.Start) ? newX1position : newX2position;
            Point originalPosition = new Point(originalXValue, originalYValue);
            Point updatedPosition = new Point(newXValue, originalPosition.Y);
            m_SnapService.Stub(x => x.GetSnapPosition(updatedPosition)).Return(updatedPosition);
            m_SnapService.GetSnapPosition(updatedPosition).Returns(updatedPosition);
            AdornedLineResizer resizer = AdornedLineResizer;
            resizer.SetSlopeCoefficient(0);
            double newYValue = (draggedSide == PointInLine.Start) ? newY1position : newY2position;
            Point originalPosition = new Point(originalXValue, originalYValue);
            Point updatedPosition = new Point(originalPosition.X, newYValue);
            m_SnapService.Stub(x => x.GetSnapPosition(updatedPosition)).Return(updatedPosition);
            m_SnapService.GetSnapPosition(updatedPosition).Returns(updatedPosition);
            AdornedLineResizer resizer = AdornedLineResizer;
            resizer.SetSlopeCoefficient(double.NegativeInfinity);

ElementDrawerTest.cs
-22
+29
/Tools/ToolsTest/Screen/ScreenEditor/Layout/ElementDrawerTest.cs
using System.Linq;
using System.Windows;
using Neo.ApplicationFramework.Controls.Layout;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Layout
{
        [SetUp]
        public void Setup()
        {
            m_ModifierKeysInfoStub = MockRepository.GenerateStub<IModifierKeysInfo>();
            m_LayoutObjectAdapterStub = MockRepository.GenerateStub<ILayoutObjectAdapter>();
            m_ModifierKeysInfoStub = Substitute.For<IModifierKeysInfo>();
            m_LayoutObjectAdapterStub = Substitute.For<ILayoutObjectAdapter>();
            m_ElementDrawer = new ElementDrawer(m_ModifierKeysInfoStub);
        }
        private void StubShiftKeyDown()
        {
            m_ModifierKeysInfoStub.Stub(x => x.ShiftKeyDown).Return(true);
            m_ModifierKeysInfoStub.ShiftKeyDown.Returns(true);
        }
        [Test]
        public void ShouldNotRecalculateSizeWhenShiftKeyIsNotPressed()
        {
            m_ModifierKeysInfoStub.Stub(x => x.ShiftKeyDown).Return(false);
            m_ModifierKeysInfoStub.ShiftKeyDown.Returns(false);
            m_ElementDrawer.Resize(m_LayoutObjectAdapterStub, 10, 100, Corner.TopLeft);
            m_LayoutObjectAdapterStub.AssertWasCalled(x => x.Resize(10, 100, Corner.TopLeft));
            m_LayoutObjectAdapterStub.Received().Resize(10, 100, Corner.TopLeft);
        }
        [Test]
            
            m_ElementDrawer.Resize(m_LayoutObjectAdapterStub, widthParameterToResizeMethod, heightParameterToResizeMethod, Corner.TopLeft);
            Calls calls = m_LayoutObjectAdapterStub.GetCallsMadeOn(x => x.Resize(0, 0, Corner.TopLeft));
            Call firstCall = calls.First();
            
            Assert.That(firstCall.Arguments.First(), Is.EqualTo(expectedWidthAndHeight));
            Assert.That(firstCall.Arguments.ElementAt(1), Is.EqualTo(expectedWidthAndHeight));                              
            m_LayoutObjectAdapterStub.WhenForAnyArgs(x => x.Resize(0, 0, Corner.TopLeft))
                .Do(y =>
                {
                    Assert.That((double)y[0], Is.EqualTo(expectedWidthAndHeight));
                    Assert.That((double)y[1], Is.EqualTo(expectedWidthAndHeight));
                });
        }
        [Test]
            m_ElementDrawer.ToggleEqualSidesOn(m_LayoutObjectAdapterStub, Corner.TopLeft);
            Calls calls = m_LayoutObjectAdapterStub.GetCallsMadeOn(x => x.Resize(0, 0, Corner.TopLeft));
            Call firstCall = calls.First();
            
            Assert.That(firstCall.Arguments.First(), Is.EqualTo(expectedWidthAndHeight));
            Assert.That(firstCall.Arguments.ElementAt(1), Is.EqualTo(expectedWidthAndHeight));                
            m_LayoutObjectAdapterStub.WhenForAnyArgs(x => x.Resize(0, 0, Corner.TopLeft))
                .Do(y =>
                {
                    Assert.That((double)y[0], Is.EqualTo(expectedWidthAndHeight));
                    Assert.That((double)y[1], Is.EqualTo(expectedWidthAndHeight));
                });
        }
        [Test]
            m_ElementDrawer.ToggleEqualSidesOn(m_LayoutObjectAdapterStub, Corner.TopLeft);
            m_ElementDrawer.ToggleEqualSidesOff(startPosition,currentPosition);
            Calls calls = m_LayoutObjectAdapterStub.GetCallsMadeOn(x => x.Resize(0, 0, Corner.TopLeft));
            Call secondCall = calls.ElementAt(1);
            Assert.That(secondCall.Arguments.First(), Is.EqualTo(expectedWidthAndHeight));
            Assert.That(secondCall.Arguments.ElementAt(1), Is.EqualTo(expectedWidthAndHeight));
            var callNum = 1;
            m_LayoutObjectAdapterStub.WhenForAnyArgs(x => x.Resize(0, 0, Corner.TopLeft))
                .Do(y =>
                {
                    if (callNum == 2)
                    { 
                        Assert.That((double)y[0], Is.EqualTo(expectedWidthAndHeight));
                        Assert.That((double)y[1], Is.EqualTo(expectedWidthAndHeight));
                    }
                    callNum++;
                });
        }
    }
}

LayoutObjectAdapterForViewboxTest.cs
-3
+3
/Tools/ToolsTest/Screen/ScreenEditor/Layout/LayoutObjectAdapterForViewboxTest.cs
using Neo.ApplicationFramework.Controls.Controls;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Screen.ScreenEditor;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Layout
{
        {
            TestHelper.ClearServices();
            var toolManagerMock = MockRepository.GenerateStub<IToolManager>();
            toolManagerMock.Stub(x => x.Runtime).Return(false);
            var toolManagerMock = Substitute.For<IToolManager>();
            toolManagerMock.Runtime.Returns(false);
            TestHelper.AddService<IToolManager>(toolManagerMock);
            TestHelper.AddService<IPropertyBinderFactory>(new PropertyBinderFactory());

LayoutObjectAdapterLineTest.cs
-3
+3
/Tools/ToolsTest/Screen/ScreenEditor/Layout/LayoutObjectAdapterLineTest.cs
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Controls.Layout;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Layout
{
        {
            TestHelper.AddService<IPropertyBinderFactory>(new PropertyBinderFactory());
            var toolManagerMock = MockRepository.GenerateStub<IToolManager>();
            toolManagerMock.Stub(x => x.Runtime).Return(false);
            var toolManagerMock = Substitute.For<IToolManager>();
            toolManagerMock.Runtime.Returns(false);
            TestHelper.AddService<IToolManager>(toolManagerMock);
            m_ScreenEditor = new ScreenEditorTestWindow();

LayoutObjectAdapterPictureTest.cs
-6
+6
/Tools/ToolsTest/Screen/ScreenEditor/Layout/LayoutObjectAdapterPictureTest.cs
using Neo.ApplicationFramework.Controls.Symbol;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Layout
{
            TestHelper.AddService<IPropertyBinderFactory>(new PropertyBinderFactory());
            IToolManager toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Expect(x => x.Runtime).Return(false);
            toolManager.Runtime.Returns(false);
            m_BitmapSource = MockRepository.GenerateMock<BitmapSource>();
            m_BitmapSource.Stub(x => x.PixelWidth).Return(ImageWidth).Repeat.Any();
            m_BitmapSource.Stub(x => x.PixelHeight).Return(ImageHeight).Repeat.Any();
            m_BitmapSource = Substitute.For<BitmapSource>();
            m_BitmapSource.PixelWidth.Returns(ImageWidth);
            m_BitmapSource.PixelHeight.Returns(ImageHeight);
            ISymbolService symbolService = TestHelper.AddServiceStub<ISymbolService>();
            symbolService.Expect(x => x.GetSymbolFx("Glurp")).Return(m_BitmapSource).Repeat.Any();
            symbolService.GetSymbolFx("Glurp").Returns(m_BitmapSource);
            m_ScreenEditor = new ScreenEditorTestWindow();
            m_ScreenEditor.Show();

LayoutObjectAdapterPolylineTest.cs
-3
+3
/Tools/ToolsTest/Screen/ScreenEditor/Layout/LayoutObjectAdapterPolylineTest.cs
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Controls.Layout;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Layout
{
        {
            TestHelper.AddService<IPropertyBinderFactory>(new PropertyBinderFactory());
            var toolManagerMock = MockRepository.GenerateStub<IToolManager>();
            toolManagerMock.Stub(x => x.Runtime).Return(false);
            var toolManagerMock = Substitute.For<IToolManager>();
            toolManagerMock.Runtime.Returns(false);
            TestHelper.AddService<IToolManager>(toolManagerMock);
            m_ScreenEditor = new ScreenEditorTestWindow();

LayoutObjectAdapterTest.cs
-3
+3
/Tools/ToolsTest/Screen/ScreenEditor/Layout/LayoutObjectAdapterTest.cs
using Neo.ApplicationFramework.Controls.Controls;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Screen.ScreenEditor;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Controls.Layout
{
        {
            TestHelper.AddService<IPropertyBinderFactory>(new PropertyBinderFactory());
            var toolManagerMock = MockRepository.GenerateStub<IToolManager>();
            toolManagerMock.Stub(x => x.Runtime).Return(false);
            var toolManagerMock = Substitute.For<IToolManager>();
            toolManagerMock.Runtime.Returns(false);
            TestHelper.AddService<IToolManager>(toolManagerMock);
            m_ScreenEditor = new ScreenEditorTestWindow();

LayoutObjectAdapterWithDynamicsMoveTest.cs
-8
+8
/Tools/ToolsTest/Screen/ScreenEditor/Layout/LayoutObjectAdapterWithDynamicsMoveTest.cs
using Neo.ApplicationFramework.Controls.Layout;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Layout
{
        {
            TestHelper.ClearServices();
            var toolManagerMock = MockRepository.GenerateStub<IToolManager>();
            toolManagerMock.Stub(x => x.Runtime).Return(false);
            var toolManagerMock = Substitute.For<IToolManager>();
            toolManagerMock.Runtime.Returns(false);
            TestHelper.AddService<IToolManager>(toolManagerMock);
            m_DummyBinding = new object();
            m_ScreenEditor.Canvas.Children.Add(m_MasterRectangle);
            m_MasterRectangle.UpdateLayout();
            m_PropertyBinder = MockRepository.GenerateStub<IPropertyBinderWpf>();
            m_PropertyBinder.Stub(x => x.GetBinding(m_MasterRectangle, Canvas.LeftProperty)).Return(m_DummyBinding);
            m_PropertyBinder.Stub(x => x.GetBinding(m_MasterRectangle, Canvas.TopProperty)).Return(m_DummyBinding);
            m_PropertyBinder.Stub(x => x.GetBinding(m_MasterRectangle, FrameworkElement.WidthProperty)).Return(null);
            m_PropertyBinder.Stub(x => x.GetBinding(m_MasterRectangle, FrameworkElement.HeightProperty)).Return(null);
            m_PropertyBinder = Substitute.For<IPropertyBinderWpf>();
            m_PropertyBinder.GetBinding(m_MasterRectangle, Canvas.LeftProperty).Returns(m_DummyBinding);
            m_PropertyBinder.GetBinding(m_MasterRectangle, Canvas.TopProperty).Returns(m_DummyBinding);
            m_PropertyBinder.GetBinding(m_MasterRectangle, FrameworkElement.WidthProperty).Returns(null);
            m_PropertyBinder.GetBinding(m_MasterRectangle, FrameworkElement.HeightProperty).Returns(null);
            m_MasterLayoutAdapter = new LayoutObjectAdapter(m_MasterRectangle, m_PropertyBinder); 
        }

LineDrawerTest.cs
-4
+4
/Tools/ToolsTest/Screen/ScreenEditor/Layout/LineDrawerTest.cs
using System.Windows;
using System.Windows.Shapes;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Layout
{
        [SetUp]
        public void Setup()
        {
            m_ModifierKeysInfoStub = MockRepository.GenerateStub<IModifierKeysInfo>();
            m_ModifierKeysInfoStub = Substitute.For<IModifierKeysInfo>();
            m_LineDrawer = new LineDrawer(m_ModifierKeysInfoStub);
        }
        [Test]
        public void WhenShiftKeyIsNotPressedItDoesNotSnapTheLineToAFixedAngle()
        {
            m_ModifierKeysInfoStub.Stub(x => x.ShiftKeyDown).Return(false);
            m_ModifierKeysInfoStub.ShiftKeyDown.Returns(false);
            Line lineToUpdate = new Line() { X1 = 0, X2 = 0, Y1 = 0, Y2 = 0 };
            Point newStartPoint = new Point(1, 10);
            Point newEndPoint = new Point(100, 1000);
        [TestCase(0, 50, -135)]
        public void DrawingTheLineWithShiftPressedSnapsTheEndPointBasedOn45DegreeAngleSteps(double newEndPointX, double newEndPointY, double expectedAngle)
        {
            m_ModifierKeysInfoStub.Stub(x => x.ShiftKeyDown).Return(true);
            m_ModifierKeysInfoStub.ShiftKeyDown.Returns(true);
            double currentStartPointX = 50;
            double currentStartPointY = 100;
            double currentEndPointX = 50;

FormatPainterToolTest.cs
-7
+5
/Tools/ToolsTest/Screen/ScreenEditor/Tools/FormatPainterToolTest.cs
using Neo.ApplicationFramework.Controls.Screen;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.PropertyGrid;
using Neo.ApplicationFramework.TestUtilities.Brush;
using Neo.ApplicationFramework.TestUtilities.Utilities;
using Neo.ApplicationFramework.Tools.PropertyGrid;
using Neo.ApplicationFramework.Tools.Selection;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Tools
{
        [SetUp]
        public void SetUp()
        {
            var toolManagerMock = TestHelper.CreateAndAddServiceMock<IToolManager>();
            toolManagerMock
                .Expect(x => x.Runtime)
                .Return(false);
            var toolManagerMock = TestHelper.CreateAndAddServiceStub<IToolManager>();
            toolManagerMock.Runtime.Returns(false);
            TestHelper.AddService<IPropertyBinderFactory>(new PropertyBinderFactory());
            TestHelper.AddService<IAppearanceAdapterService>(new AppearanceAdapterService());
            m_ElementCanvas.Children.Add(m_TargetRectangle);
            TestHelper.AddService<ISelectionService>(new SelectionService());
            m_DesignerHost = MockRepository.GenerateStub<INeoDesignerHost>();
            m_DesignerHost = Substitute.For<INeoDesignerHost>();
        }
        [TearDown]

UndoUnitTest.cs
-19
+19
/Tools/ToolsTest/Screen/ScreenEditor/Undo/UndoUnitTest.cs
using Neo.ApplicationFramework.Controls.Undo;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen.ScreenEditor.Undo
{
            TestHelper.AddService<IPropertyBinderFactory>(new PropertyBinderFactory());
            TestHelper.CreateAndAddServiceStub<IFeatureSecurityServiceIde>();
            var toolManagerMock = MockRepository.GenerateStub<IToolManager>();
            toolManagerMock.Stub(x => x.Runtime).Return(false);
            var toolManagerMock = Substitute.For<IToolManager>();
            toolManagerMock.Runtime.Returns(false);
            TestHelper.AddService<IToolManager>(toolManagerMock);
            //m_ScreenEditorWindow = new ScreenEditorTestWindow();
            m_ServiceProvider.AddService(typeof(IAppearanceAdapterService), new AppearanceAdapterService());
            m_ScreenRootDesigner = designerHostStub.ScreenRootDesigner;
            //m_ScreenRootDesigner.Stub(x => x.DesignerHost).Return(m_DesignerHostStub);
            //m_ScreenRootDesigner.Stub(x => x.Select(Arg<FrameworkElement>.Is.Anything)).Do(new Action<FrameworkElement>(y => m_SelectionService.SetSelectedComponents(new List<object>() { y })));
            //m_ScreenRootDesigner.Stub(x => x.Select(Arg<FrameworkElement>.Is.Anything, Arg<SelectionTypes>.Is.Anything)).Do(new Action<FrameworkElement, SelectionTypes>((y, z) => m_SelectionService.SetSelectedComponents(new List<object>() { y }, z)));
            //m_ScreenRootDesigner.Stub(x => x.Select(Arg<IList<FrameworkElement>>.Is.Anything, Arg<SelectionTypes>.Is.Anything)).Do(new Action<IList<FrameworkElement>, SelectionTypes>((y, z) => m_SelectionService.SetSelectedComponents(y.ToList(), z)));
            //m_ScreenRootDesigner.Stub(x => x.SelectedElements).Do(new Func<IList<FrameworkElement>>(() => m_SelectionService.GetSelectedComponents().Cast<FrameworkElement>().ToList()));
            //m_ScreenRootDesigner.DesignerHost.Returns(m_DesignerHostStub);
            //m_ScreenRootDesigner.Select(Arg<FrameworkElement>())).Do(new Action<FrameworkElement>(y => m_SelectionService.SetSelectedComponents(new List<object>() { y })));
            //m_ScreenRootDesigner.Select(Arg<FrameworkElement>(), Arg<SelectionTypes>())).Do(new Action<FrameworkElement, SelectionTypes>((y, z) => m_SelectionService.SetSelectedComponents(new List<object>() { y }, z)));
            //m_ScreenRootDesigner.Select(Arg<IList<FrameworkElement>>(), Arg<SelectionTypes>())).Do(new Action<IList<FrameworkElement>, SelectionTypes>((y, z) => m_SelectionService.SetSelectedComponents(y.ToList(), z)));
            //m_ScreenRootDesigner.SelectedElements).Do(new Func<IList<FrameworkElement>>(() => m_SelectionService.GetSelectedComponents().Cast<FrameworkElement>().ToList()));
            //IElementChangeService changeService = MockRepository.GenerateStub<IElementChangeService>();
            //IElementChangeService changeService = Substitute.For<IElementChangeService>();
            //m_ServiceProvider.AddService(typeof(IElementChangeService), changeService);
            m_ScreenEditor = designerHostStub.ScreenEditor;
            //m_ScreenEditor = MockRepository.GenerateStub<IScreenEditor>();
            //Adorner adornerStub = MockRepository.GenerateStub<Adorner>(m_ScreenEditorWindow.Editor);
            //m_ScreenEditor.Stub(x => x.EditorAdorner).Return(adornerStub);
            //m_ScreenEditor.Stub(x => x.EditorCanvas).Return(m_ScreenEditorWindow.Editor.Canvas);
            //m_ScreenEditor.Stub(x => x.AddElements(Arg<IList<FrameworkElement>>.Is.Anything)).Do(new Action<IList<FrameworkElement>>(x => AddElementsToScreenEditor(x)));
            //m_ScreenEditor.Stub(x => x.RemoveElements(Arg<IList<FrameworkElement>>.Is.Anything)).Do(new Action<IList<FrameworkElement>>(x => RemoveElementsFromScreenEditor(x)));
            //m_ScreenEditor = Substitute.For<IScreenEditor>();
            //Adorner adornerStub = Substitute.For<Adorner>(m_ScreenEditorWindow.Editor);
            //m_ScreenEditor.EditorAdorner.Returns(adornerStub);
            //m_ScreenEditor.EditorCanvas.Returns(m_ScreenEditorWindow.Editor.Canvas);
            //m_ScreenEditor.AddElements(Arg<IList<FrameworkElement>>())).Do(new Action<IList<FrameworkElement>>(x => AddElementsToScreenEditor(x)));
            //m_ScreenEditor.RemoveElements(Arg<IList<FrameworkElement>>())).Do(new Action<IList<FrameworkElement>>(x => RemoveElementsFromScreenEditor(x)));
            //m_ServiceProvider.AddService(typeof(IScreenEditor), m_ScreenEditor);
            m_ScreenDesignerView = designerHostStub.ScreenDesignerView;
            //m_ScreenDesignerView = new ScreenDesignerView();
            //m_ScreenRootDesigner.Stub(x => x.DefaultView).Return(m_ScreenDesignerView);
            //m_ScreenRootDesigner.Stub(x => x.FindElementByName(Arg<string>.Is.Anything)).Do(new Func<string, FrameworkElement>(y => m_ScreenDesignerView.Elements.Where(z => z.Name == y).FirstOrDefault()));
            //m_ScreenRootDesigner.Stub(x => x.FindElementsByName(Arg<string>.Is.Anything)).Do(new Func<string, IEnumerable<FrameworkElement>>(y => m_ScreenDesignerView.Elements.Where(z => z.Name == y)));
            //m_ScreenRootDesigner.Stub(x => x.SelectOneElement()).Do(new System.Action(() => m_SelectionService.SetSelectedComponents(new List<object>() { m_ScreenDesignerView.Elements.FirstOrDefault() })));
            //m_ScreenRootDesigner.DefaultView.Returns(m_ScreenDesignerView);
            //m_ScreenRootDesigner.FindElementByName(Arg<string>())).Do(new Func<string, FrameworkElement>(y => m_ScreenDesignerView.Elements.Where(z => z.Name == y).FirstOrDefault()));
            //m_ScreenRootDesigner.FindElementsByName(Arg<string>())).Do(new Func<string, IEnumerable<FrameworkElement>>(y => m_ScreenDesignerView.Elements.Where(z => z.Name == y)));
            //m_ScreenRootDesigner.SelectOneElement()).Do(new System.Action(() => m_SelectionService.SetSelectedComponents(new List<object>() { m_ScreenDesignerView.Elements.FirstOrDefault() })));
            //((ScreenDesignerView)m_ScreenDesignerView).ScreenEditor = m_ScreenEditor;
            //m_ScreenDesignerView.Designer = m_ScreenRootDesigner;

PrintScreenServiceTest.cs
-14
+11
/Tools/ToolsTest/Screen/PrintScreenServiceTest.cs
using System;
using System.Windows;
using Neo.ApplicationFramework.Controls.Controls;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using Point = System.Drawing.Point;
using Size = System.Drawing.Size;
namespace Neo.ApplicationFramework.Tools.Screen
{
            m_PrintScreenService = new PrintScreenService();
            m_PrintScreenServiceCF = new PrintScreenServiceCF();
            m_ScreenManager = MockRepository.GenerateStub<IScreenManager>();
            m_MainScreen = MockRepository.GenerateStub<IMainScreen>();
            m_ScreenManager = Substitute.For<IScreenManager>();
            m_MainScreen = Substitute.For<IMainScreen, Window>();
        }
        [TearDown]
        [Test]
        public void PrintCurrentScreenDoesntThrowExceptionWhenMainScreenIsNotSetCF()
        {
            m_ScreenManager.Stub(x => x.ActiveScreen).Return(null);
            m_ScreenManager.Stub(x => x.MainScreen).Return(null);
            m_ScreenManager.ActiveScreen.Returns(x => null);
            m_ScreenManager.MainScreen.Returns(x => null);
            TestHelper.AddService(m_ScreenManager);
            Assert.DoesNotThrow(() => m_PrintScreenServiceCF.PrintCurrentScreen(PrintScreenAction.Print, FileDirectory.ProjectFiles, ""));
        [Test]
        public void PrintCurrentScreenDoesntThrowExceptionWhenMainScreenIsNotSet()
        {
            m_ScreenManager.Stub(x => x.ActiveScreen).Return(null);
            m_ScreenManager.Stub(x => x.MainScreen).Return(null);
            m_ScreenManager.ActiveScreen.Returns(x => null);
            m_ScreenManager.MainScreen.Returns(x => null);
            TestHelper.AddService(m_ScreenManager);
            Assert.DoesNotThrow(() => m_PrintScreenService.PrintCurrentScreen(PrintScreenAction.Print, FileDirectory.ProjectFiles, ""));
        [Test]
        public void PrintCurrentScreenThrowsExceptionWhenMainScreenIsSetAndActiveScreenIsNotCF()
        {
            
            m_ScreenManager.Stub(x => x.ActiveScreen).Return(null);
            m_ScreenManager.Stub(x => x.MainScreen).Return(m_MainScreen);
            m_ScreenManager.ActiveScreen.Returns(x => null);
            m_ScreenManager.MainScreen.Returns(m_MainScreen);
            TestHelper.AddService(m_ScreenManager);
            Assert.Throws<NullReferenceException>(() => m_PrintScreenServiceCF.PrintCurrentScreen(PrintScreenAction.Print, FileDirectory.ProjectFiles, ""));
            Assert.Throws<NullReferenceException>(() =>
                m_PrintScreenService.PrintCurrentScreen(PrintScreenAction.Print, FileDirectory.ProjectFiles, ""));
        }
    }
}

ScreenIDServiceTest.cs
-12
+10
/Tools/ToolsTest/Screen/ScreenIDServiceTest.cs
using Core.Api.GlobalReference;
using Core.Api.Utilities;
using Core.TestUtilities.Utilitites;
using Neo.ApplicationFramework.Utilities;
using Neo.ApplicationFramework.Common.Runtime.Screen;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Screen
{
        {
            get
            {
                IScreen screen = MockRepository.GenerateStub<IScreen>();
                IScreen screen = Substitute.For<IScreen>();
                screen.ScreenID = 1;
                return screen;
            }
            TestHelper.ClearServices();
            m_GlobalReferenceService = TestHelper.CreateAndAddServiceStub<IGlobalReferenceService>();
            m_ScreenIDXmlFileReaderStub = MockRepository.GenerateStub<ScreenIDXmlFileReader>();
            m_ScreenIDXmlFileReaderStub = Substitute.For<ScreenIDXmlFileReader>();
            m_ScreenIdService = new ScreenIDService(m_ScreenIDXmlFileReaderStub, new LazyWrapper<IGlobalReferenceService>(() => m_GlobalReferenceService));
        }
        {
            string screenName = "screen1";
            IScreen screen = ScreenStub;
            m_ScreenIDXmlFileReaderStub.Stub(x => x.Load()).Return(new[] { new ScreenIDInformation(1, screenName) });
            m_GlobalReferenceService.Stub(x => x.GetObject<IScreen>(ScreenPathHelper.GetPath(screenName))).Return(screen);
            m_ScreenIDXmlFileReaderStub.Load().Returns(new[] { new ScreenIDInformation(1, screenName) });
            m_GlobalReferenceService.GetObject<IScreen>(ScreenPathHelper.GetPath(screenName)).Returns(screen);
            m_ScreenIdService.OpenScreenByID(1);
            screen.AssertWasCalled(x => x.Show());
            screen.Received().Show();
        }
        [Test]
        public void WhenOpeningScreenByIdAndItDoesntExitsItReturnsWithoutShowingTheScreen()
        {
            IScreen screen = MockRepository.GenerateStub<IScreen>();
            IScreen screen = Substitute.For<IScreen>();
            screen.ScreenID = 1;
            m_ScreenIDXmlFileReaderStub.Stub(x => x.Load()).Return(new[] { new ScreenIDInformation(1, "") });
            m_GlobalReferenceService.Stub(x => x.GetObject<IScreen>("")).Return(screen);
            m_ScreenIDXmlFileReaderStub.Load().Returns(new[] { new ScreenIDInformation(1, "") });
            m_GlobalReferenceService.GetObject<IScreen>("").Returns(screen);
            m_ScreenIdService.OpenScreenByID(2);
            screen.AssertWasNotCalled(x => x.Show());
            screen.DidNotReceive().Show();
        }
        [Test]

ScreenObjectDecoratorServiceTest.cs
-1
+1
/Tools/ToolsTest/ScreenObjectDecorator/ScreenObjectDecoratorServiceTest.cs
        [SetUp]
        public void SetUp()
        {
            TestHelper.CreateAndAddServiceMock<ITargetService>();
            TestHelper.CreateAndAddServiceStub<ITargetService>();
            m_ScreenObjectDecoratorService = new ScreenObjectDecoratorService();
        }

ScriptEventServiceTest.cs
-19
+18
/Tools/ToolsTest/ScriptEditor/ScriptEventServiceTest.cs
using System.ComponentModel.Design;
using Core.Api.Platform;
using Core.Api.ProjectTarget;
using Core.Api.Service;
using Core.Api.Tools;
using Core.Component.Engine.Design;
using Core.Controls.Api.Designer;
using Neo.ApplicationFramework.Tools.Design;
using Neo.ApplicationFramework.Controls.Script;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Design;
using Neo.ApplicationFramework.Tools.EventMapper;
using Neo.ApplicationFramework.Tools.Script.Editor;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.ScriptEditor
{
            Target target = new Target(TargetPlatform.WindowsCE, string.Empty, string.Empty);
            ITargetService targetService = MockRepository.GenerateMock<ITargetService>();
            targetService.Stub(x => x.CurrentTarget).Return(target);
            ITargetService targetService = Substitute.For<ITargetService>();
            targetService.CurrentTarget.Returns(target);
            TestHelper.AddService(targetService);
            IToolManager toolManager = MockRepository.GenerateMock<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(false);
            IToolManager toolManager = Substitute.For<IToolManager>();
            toolManager.Runtime.Returns(false);
            TestHelper.AddService(toolManager);
            var namingConstraints = MockRepository.GenerateMock<INamingConstraints>();
            namingConstraints.Stub(inv => inv.IsNameLengthValid(Arg<int>.Is.Anything, Arg<int>.Is.Anything, Arg<int>.Is.Anything)).Return(true);
            namingConstraints.Stub(inv => inv.ReservedApplicationNames).Return(new HashSet<string>());
            namingConstraints.Stub(inv => inv.ReservedSystemNames).Return(new HashSet<string>());
            var namingConstraints = Substitute.For<INamingConstraints>();
            namingConstraints.IsNameLengthValid(Arg.Any<int>(), Arg.Any<int>(), Arg.Any<int>()).Returns(true);
            namingConstraints.ReservedApplicationNames.Returns(new HashSet<string>());
            namingConstraints.ReservedSystemNames.Returns(new HashSet<string>());
            ServiceContainer serviceContainer = new ServiceContainer();
            var componentContainerService = MockRepository.GenerateStub<IComponentContainerService>();
            componentContainerService.Stub(inv => inv.AddComponent(Arg<IComponent>.Is.Anything)).WhenCalled(
                inv =>
            var componentContainerService = Substitute.For<IComponentContainerService>();
            componentContainerService
                .WhenForAnyArgs(x => x.AddComponent(Arg.Any<IComponent>()))
                .Do(y =>
                    {
                    var component = (IComponent)inv.Arguments[0];
                        var component = (IComponent)y[0];
                        component.Site = new ScriptSite(component, new Container());
                }
            );
                    });
            TestHelper.AddService<IEventMapperService>(new EventMapperService(targetService.ToILazy()));
            serviceContainer.AddService(typeof(IComponentContainerService), componentContainerService);
            serviceContainer.AddService(typeof(IElementAdapterService), new ElementAdapterService(serviceContainer));
            var refService = MockRepository.GenerateStub<IReferenceService>();
            refService.Stub(inv => inv.GetComponent(Arg<object>.Is.Anything)).WhenCalled(inv => inv.ReturnValue = inv.Arguments[0]).Return(null);
            var refService = Substitute.For<IReferenceService>();
            refService.GetComponent(Arg.Any<object>()).Returns(x => (IComponent)x[0]);
            serviceContainer.AddService(typeof(IReferenceService), refService);
            serviceContainer.AddService(typeof(IEventBindingService), new SampleEventBindingService(serviceContainer));
            m_ScriptEventService = new ScriptEventService(serviceContainer);

SdCardServiceTest.cs
-19
+25
/Tools/ToolsTest/SdCardCeServiceTest/SdCardServiceTest.cs
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml;
using Core.Api.Service;
using Core.TestUtilities.Utilitites;
using Neo.ApplicationFramework.Utilities.IO;
using Neo.ApplicationFramework.Common.Constants;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Storage.Common;
using Neo.ApplicationFramework.Storage.Settings;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.SDCard;
using Neo.ApplicationFramework.Tools.Storage;
using Neo.ApplicationFramework.Utilities.IO;
using NSubstitute;
using NUnit.Framework;
using NUnit.Framework.Internal;
using Rhino.Mocks;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml;
namespace Neo.ApplicationFramework.Tools.SdCardCeServiceTest
{
        [SetUp]
        public void Setup()
        {
            m_nativeAPI = MockRepository.GenerateMock<INativeAPI>();
            m_nativeAPI = Substitute.For<INativeAPI>();
        }
        private ISdCardCeService ISdCardCeServiceConstructor(INativeAPI mockedNativeAPI)
        {
            var mockedDiskSpace = new FREEDISKSPACE();
            mockedDiskSpace.TotalNumberOfFreeBytes = availableMemoryOnSD;
            m_nativeAPI.Stub(x => x.GetDiskFreeSpaceEx(Arg<string>.Is.Anything, ref Arg<FREEDISKSPACE>.Ref(Rhino.Mocks.Constraints.Is.Anything(), mockedDiskSpace).Dummy)).Return(true);
            m_nativeAPI.GetDiskFreeSpaceEx(Arg.Any<string>(), ref Arg.Any<FREEDISKSPACE>())
                .Returns(x => 
                {
                    x[1] = mockedDiskSpace;
                    return true; 
                });
            ulong result = ISdCardCeServiceConstructor(m_nativeAPI).GetAvailableMemory();
            Assert.IsTrue(result == availableMemoryOnSD);
        [TestCase(FormatExternalStorageCardResult.Ok)]
        public void IsExternalStorageCardPresent(FormatExternalStorageCardResult returnValue)
        {
            m_nativeAPI.Stub(x => x.IsExternalStorageCardPresent(Arg<string>.Is.Anything)).Return(returnValue);
            m_nativeAPI.IsExternalStorageCardPresent(Arg.Any<string>()).Returns(returnValue);
            FormatExternalStorageCardResult result = ISdCardCeServiceConstructor(m_nativeAPI).IsExternalStorageCardPresent();
            Assert.IsTrue(result == returnValue);
        [TestCase(ApplicationConstantsCF.FlashDriveProjectPath)]
        public void ShouldDbBeStoredOnSD(string databaseLocation)
        {
            var mockedSettings = MockRepository.GenerateMock<ISettings>();
            var mockedLocallyHostedProjectStorageProviderSettings = MockRepository.GenerateMock<ILocallyHostedStorageProviderSettings>();
            mockedLocallyHostedProjectStorageProviderSettings.Stub(x => x.RootDirectory).Return(databaseLocation);
            var mockedSettings = Substitute.For<ISettings>();
            var mockedLocallyHostedProjectStorageProviderSettings = Substitute.For<ILocallyHostedStorageProviderSettings>();
            mockedLocallyHostedProjectStorageProviderSettings.RootDirectory.Returns(databaseLocation);
            //Need to make a 'fake' object IEnumerable list to avoid null reference in the ProjectStorageProviderSettings constructor 
            IEnumerable<MockStorageProviderSetting> mockObjects = new List<MockStorageProviderSetting>() {new MockStorageProviderSetting()};
            mockedLocallyHostedProjectStorageProviderSettings.Stub(x => x.Settings).Return(mockObjects);
            mockedLocallyHostedProjectStorageProviderSettings.Settings.Returns(mockObjects);
            IStorageProviderSettings storageProviderSettings = new LocallyHostedProjectStorageProviderSettings(mockedLocallyHostedProjectStorageProviderSettings);
            mockedSettings.Stub(x => x.ProjectSettings.StorageProviderSettings).Return(storageProviderSettings);
            mockedSettings.ProjectSettings.StorageProviderSettings.Returns(storageProviderSettings);
            bool result = ISdCardCeServiceConstructor(m_nativeAPI).ShouldDbBeStoredOnSD(mockedSettings);
                Assert.IsFalse(result);
        }
#if !VNEXT_TARGET
        [Test]
        public void HasBlackListBeenUpdatedWithCorrectDatabaseExtension()
        {
            List<string> ignoreExtensions = BlacklistFileStream();
            Assert.IsFalse(ignoreExtensions.IsNullOrEmpty());
            Assert.IsTrue(ignoreExtensions != null && ignoreExtensions.Any());
#if DEBUG
            const string buildConfig = "OutPut\\Debug";
            }
            return ignoreExtensions;
        }
#endif
        private class MockStorageProviderSetting : IStorageProviderSetting
        {

PasswordComplexityTest.cs
-4
+4
/Tools/ToolsTest/Security/PasswordComplexityTest.cs
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Security
{
        [Test]
        public void MeetCriteriaChecksPasswordLength()
        {
            var securityManager = MockRepository.GenerateStub<ISecurityManager>();
            var securityManager = Substitute.For<ISecurityManager>();
            securityManager.MinimumPasswordLength = 3;
            PasswordComplexity passwordComplexity = new PasswordComplexity(securityManager);
        [Test]
        public void AssertCriteriaThrowsOnTooSmallPassword()
        {
            var securityManager = MockRepository.GenerateStub<ISecurityManager>();
            var securityManager = Substitute.For<ISecurityManager>();
            securityManager.MinimumPasswordLength = 3;
            PasswordComplexity passwordComplexity = new PasswordComplexity(securityManager);
        [Test]
        public void AssertCriteriaDoesNothingOnCorrectPassword()
        {
            var securityManager = MockRepository.GenerateStub<ISecurityManager>();
            var securityManager = Substitute.For<ISecurityManager>();
            securityManager.MinimumPasswordLength = 3;
            PasswordComplexity passwordComplexity = new PasswordComplexity(securityManager);

PasswordValidatorTest.cs
-2
+4
/Tools/ToolsTest/Security/PasswordValidatorTest.cs
#if !VNEXT_TARGET
using System.IO;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Security
{
            string assemblyDirectory = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
            string blacklistPath = Path.Combine(assemblyDirectory, "Configurations", PasswordValidator.BlacklistFileName);
            var fileSettingsServiceStub = TestHelper.AddServiceStub<IFileSettingsServiceIde>();
            fileSettingsServiceStub.Stub(x => x.FileNameInCommonApplicationDataFolder(Arg<string>.Is.Anything)).Return(blacklistPath);
            fileSettingsServiceStub.FileNameInCommonApplicationDataFolder(Arg.Any<string>()).Returns(blacklistPath);
        }
        [TearDown]
        }
    }
}
#endif

SecurityDesignerHelperTest.cs
-5
+7
/Tools/ToolsTest/Security/SecurityDesignerHelperTest.cs
#if !VNEXT_TARGET
using System.ComponentModel;
using Core.TestUtilities.Utilitites;
using Neo.ApplicationFramework.Common.Security;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Security
{
                new SecurityGroup("visitorGroup", SecurityGroups.Group_04)
            };
            m_SecurityServiceStub.Stub(x => x.Groups).Return(securityGroupsList);
            m_SecurityServiceStub.Groups.Returns(securityGroupsList);
            // ACT
            SecurityGroups nextSecurityGroup = m_SecurityDesignerHelper.GetNextSecurityGroupsEnum();
        {
            // ARRANGE
            BindingList<ISecurityGroup> securityGroupsList = new BindingList<ISecurityGroup>();
            m_SecurityServiceStub.Stub(x => x.Groups).Return(securityGroupsList);
            m_SecurityServiceStub.Groups.Returns(securityGroupsList);
            // ACT
            SecurityGroups nextSecurityGroup = m_SecurityDesignerHelper.GetNextSecurityGroupsEnum();
                new SecurityGroup("visitorGroup", SecurityGroups.Group_04)
            };
            m_SecurityServiceStub.Stub(x => x.Groups).Return(securityGroupsList);
            m_SecurityServiceStub.Groups.Returns(securityGroupsList);
            // ACT
            SecurityGroups nextSecurityGroup = m_SecurityDesignerHelper.GetNextSecurityGroupsEnum();
                new SecurityGroup("rhubarbGroup", SecurityGroups.Group_31)
            };
            m_SecurityServiceStub.Stub(x => x.Groups).Return(securityGroupsList);
            m_SecurityServiceStub.Groups.Returns(securityGroupsList);
            // ACT
            SecurityGroups nextSecurityGroup = m_SecurityDesignerHelper.GetNextSecurityGroupsEnum();
        }
    }
}
#endif

SecurityManagerTest.cs
-14
+18
/Tools/ToolsTest/Security/SecurityManagerTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Security
{
        [SetUp]
        public void SetUp()
        {
            var coreApplication = TestHelper.CreateAndAddServiceMock<ICoreApplication>();
            coreApplication.Stub(inv => inv.StartupPath).Return(m_StartupPath);
            var coreApplication = TestHelper.CreateAndAddServiceStub<ICoreApplication>();
            coreApplication.StartupPath.Returns(m_StartupPath);
            Directory.CreateDirectory(m_StartupPath);
            m_ISecurityManager = m_SecurityManager = new SecurityManager();
        public void GetUsersFromGroup()
        {
            IToolManager toolManagerStub = TestHelper.AddServiceStub<IToolManager>();
            toolManagerStub.Stub(x => x.Runtime).Return(false);
            toolManagerStub.Runtime.Returns(false);
            ISecurityGroup securityGroup = new SecurityGroup("Administrators", SecurityGroups.Group_03);
            m_ISecurityManager.AddGroup(securityGroup);
        [TestCase(1, true)]
        public void AutomaticTimeoutValueGreaterThanZero(int newValue, bool changeExpected)
        {
            var messageBoxServiceStub = MockRepository.GenerateMock<IMessageBoxServiceCF>();
            messageBoxServiceStub.Stub(x => x.Show(Arg<string>.Is.Anything, Arg<string>.Is.Anything)).Return(DialogResult.OK);
            var messageBoxServiceStub = Substitute.For<IMessageBoxServiceCF>();
            messageBoxServiceStub.Show(Arg.Any<string>(), Arg.Any<string>()).Returns(DialogResult.OK);
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceStub);
            var securityServiceStub = TestHelper.AddServiceStub<ISecurityServiceCF>();
            securityServiceStub.Stub(x => x.UserActive());
            int previousValue = m_ISecurityManager.AutomaticLogoutMinutes;
            m_ISecurityManager.AutomaticLogoutMinutes = newValue;
            if (changeExpected)
            {
                Assert.AreEqual(m_ISecurityManager.AutomaticLogoutMinutes, newValue);
                messageBoxServiceStub.AssertWasNotCalled(x => x.Show(TextsCF.SecurityLogoutTimeWrongInputValue.GetTranslation(), TextsCF.Error.GetTranslation()));
                messageBoxServiceStub.DidNotReceive()
                    .Show(TextsCF.SecurityLogoutTimeWrongInputValue.GetTranslation(), TextsCF.Error.GetTranslation());
                securityServiceStub.Received().UserActive();
            }
            else
            {
                Assert.AreEqual(m_ISecurityManager.AutomaticLogoutMinutes, previousValue);
                messageBoxServiceStub.AssertWasCalled(x => x.Show(TextsCF.SecurityLogoutTimeWrongInputValue.GetTranslation(), TextsCF.Error.GetTranslation()));
                messageBoxServiceStub.Received()
                    .Show(TextsCF.SecurityLogoutTimeWrongInputValue.GetTranslation(), TextsCF.Error.GetTranslation());
                securityServiceStub.DidNotReceive().UserActive();
            }
        }
            m_SecurityManager.Login(loginParams);
            //ASSERT
            m_mockSecurityServiceCF.AssertWasCalled(s => s.ShowLoginDialog(loginParams));
            m_mockSecurityServiceCF.AssertWasNotCalled(s => s.LoginUser(loginParams.UserName, loginParams.Password, loginParams.ShowLoginSucceededDialog));
            m_mockSecurityServiceCF.Received().ShowLoginDialog(loginParams);
            m_mockSecurityServiceCF.DidNotReceive()
                .LoginUser(loginParams.UserName, loginParams.Password, loginParams.ShowLoginSucceededDialog);
        }
        [Test]
            m_SecurityManager.Login(loginParams);
            //ASSERT
            m_mockSecurityServiceCF.AssertWasNotCalled(s => s.ShowLoginDialog(loginParams));
            m_mockSecurityServiceCF.AssertWasCalled(s => s.LoginUser(loginParams.UserName, loginParams.Password, loginParams.ShowLoginSucceededDialog, loginParams.ShowLoginFailedDialog));
            m_mockSecurityServiceCF.DidNotReceive().ShowLoginDialog(loginParams);
            m_mockSecurityServiceCF.Received()
                .LoginUser(loginParams.UserName, loginParams.Password, loginParams.ShowLoginSucceededDialog, loginParams.ShowLoginFailedDialog);
        }
    }
}

SecurityManagerToolCFTest.cs
-112
+84
/Tools/ToolsTest/Security/SecurityManagerToolCFTest.cs
using System.Collections.Generic;
using System.ComponentModel;
using Core.Api.Service;
using Neo.ApplicationFramework.Utilities.IO;
using Neo.ApplicationFramework.Common.MultiLanguage;
using Neo.ApplicationFramework.Common.Serialization;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.Utilities.IO;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Security
{
    [TestFixture]
    public class SecurityManagerToolCFTest : SecurityManagerToolTestBase
    {
        private PasswordComplexity SetUpPasswordComplexityMock(string password)
        {
            var passwordComplexity = MockRepository.GenerateMock<PasswordComplexity>();
            m_SecurityManagerToolCF.PasswordComplexity = passwordComplexity;
            passwordComplexity.Expect(x => x.AssertPasswordCriteria(password));
            return passwordComplexity;
        }
        [Test]
        public void AddUserChecksIfPasswordMeetsCriteria()
        {
            var passwordComplexity = MockRepository.GenerateMock<PasswordComplexity>();
            var passwordComplexity = Substitute.For<PasswordComplexity>();
            m_SecurityManagerToolCF.PasswordComplexity = passwordComplexity;
            passwordComplexity.Expect(x => x.AssertPasswordCriteria(Password1));
            m_ISecurityManagerToolCF.AddUser(UserName, Password1);
            passwordComplexity.VerifyAllExpectations();
            passwordComplexity.Received().AssertPasswordCriteria(Password1);
        }
        [Test]
        public void AddUserOverloadChecksIfPasswordMeetsCriteriaIfParameterIsTrue()
        {
            var passwordComplexity = MockRepository.GenerateMock<PasswordComplexity>();
            var passwordComplexity = Substitute.For<PasswordComplexity>();
            m_SecurityManagerToolCF.PasswordComplexity = passwordComplexity;
            passwordComplexity.Expect(x => x.AssertPasswordCriteria(Password1));
            m_ISecurityManagerToolCF.AddUser(UserName, Password1, true);
            passwordComplexity.VerifyAllExpectations();
            passwordComplexity.Received().AssertPasswordCriteria(Password1);
        }
        [Test]
        public void AddUserOverloadChecksIfPasswordMeetsCriteriaIfParameterIsFalse()
        {
            var passwordComplexity = MockRepository.GenerateMock<PasswordComplexity>();
            var passwordComplexity = Substitute.For<PasswordComplexity>();
            m_SecurityManagerToolCF.PasswordComplexity = passwordComplexity;
            passwordComplexity.Expect(x => x.AssertPasswordCriteria(null))
                              .IgnoreArguments()
                              .Repeat.Never();
            m_ISecurityManagerToolCF.AddUser(UserName, Password1, false);
            passwordComplexity.VerifyAllExpectations();
            passwordComplexity.DidNotReceiveWithAnyArgs().AssertPasswordCriteria(Arg.Any<string>());
        }
        [Test]
        {
            m_ISecurityManagerToolCF.AddUser(UserName, Password1, false);
            m_SecurityManagerStub.AssertWasCalled(stub => stub.AddUser(UserName, m_PasswordHash1));
            m_SecurityManagerStub.Received().AddUser(UserName, m_PasswordHash1);
        }
        [Test]
        public void LoginUserWorksIfUsernameAndPwIsCorrect()
        {
            var messageBoxServiceStub = MockRepository.GenerateMock<IMessageBoxServiceCF>();
            messageBoxServiceStub.Stub(x => x.Show(Arg<string>.Is.Anything, Arg<string>.Is.Anything, Arg<bool>.Is.Anything, Arg<bool>.Is.Anything, Arg<System.Action>.Is.Null)).NoOperation();
            var messageBoxServiceStub = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceStub);
            Assert.IsTrue(m_ISecurityManagerToolCF.LoginUser(UserName, Password1));
            Assert.AreEqual(m_ISecurityManagerToolCF.CurrentUser, UserName);
            //messageBoxServiceStub.Show(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<bool>(), Arg.Any<bool>(), null); // NoOperation() ???
        }
        [Test]
        public void LoginUserShowsLoginSucceededDialogIfNotSpecified()
        {
            var messageBoxServiceMock = MockRepository.GenerateStrictMock<IMessageBoxServiceCF>();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.SecurityLoginSuccess)).Repeat.Once();
            var messageBoxServiceMock = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceMock);
            Assert.IsTrue(m_ISecurityManagerToolCF.LoginUser(UserName, Password1));
            Assert.AreEqual(m_ISecurityManagerToolCF.CurrentUser, UserName);
            MockShow(messageBoxServiceMock, TextsCF.SecurityLoginSuccess, 1);
        }
        [Test]
        public void LoginUserShowsLoginSucceededDialog()
        {
            var messageBoxServiceMock = MockRepository.GenerateStrictMock<IMessageBoxServiceCF>();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.SecurityLoginSuccess)).Repeat.Once();
            var messageBoxServiceMock = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceMock);
            Assert.IsTrue(m_ISecurityManagerToolCF.LoginUser(UserName, Password1, true));
            Assert.AreEqual(m_ISecurityManagerToolCF.CurrentUser, UserName);
            MockShow(messageBoxServiceMock, TextsCF.SecurityLoginSuccess, 1);
        }
        [Test]
        public void LoginUserDoesNotShowLoginSucceededDialog()
        {
            var messageBoxServiceMock = MockRepository.GenerateStrictMock<IMessageBoxServiceCF>();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.SecurityLoginSuccess)).Repeat.Never();
            var messageBoxServiceMock = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceMock);
            Assert.IsTrue(m_ISecurityManagerToolCF.LoginUser(UserName, Password1, false));
            Assert.AreEqual(m_ISecurityManagerToolCF.CurrentUser, UserName);
            MockShow(messageBoxServiceMock, TextsCF.SecurityLoginSuccess, 0);
        }
        [Test]
        public void LoginUserDoesShowLoginFailedDialog()
        {
            var messageBoxServiceMock = MockRepository.GenerateStrictMock<IMessageBoxServiceCF>();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.LoginFailure)).Repeat.Once();
            var messageBoxServiceMock = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceMock);
            Assert.IsFalse(m_ISecurityManagerToolCF.LoginUser(UserName, "wrongPass", true, true));
            MockShow(messageBoxServiceMock, TextsCF.LoginFailure, 1);
        }
        [Test]
        public void LoginUserDoesNotShowLoginFailedDialog()
        {
            var messageBoxServiceMock = MockRepository.GenerateStrictMock<IMessageBoxServiceCF>();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.LoginFailure)).Repeat.Never();
            var messageBoxServiceMock = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceMock);
            Assert.IsFalse(m_ISecurityManagerToolCF.LoginUser(UserName, "wrongPass", true, false));
            MockShow(messageBoxServiceMock, TextsCF.LoginFailure, 0);
        }
        [Test]
        public void LoginUserDoesNotShowLoginFailedDialogWhenSuccedLogin()
        {
            var messageBoxServiceMock = MockRepository.GenerateStrictMock<IMessageBoxServiceCF>();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.SecurityLoginSuccess)).Repeat.Once();
            var messageBoxServiceMock = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceMock);
            Assert.IsTrue(m_ISecurityManagerToolCF.LoginUser(UserName, Password1, true, false));
            MockShow(messageBoxServiceMock, TextsCF.SecurityLoginSuccess, 1);
        }
        [Test]
        public void LoginUserReturnsFalseWithWrongUsername()
        {
            var messageBoxServiceMock = MockRepository.GenerateStrictMock<IMessageBoxServiceCF>();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.LoginFailure)).Repeat.Once();
            var messageBoxServiceMock = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceMock);
            Assert.IsFalse(m_ISecurityManagerToolCF.LoginUser("someuser", Password1));
            MockShow(messageBoxServiceMock, TextsCF.LoginFailure, 1);
        }
        [Test]
        public void LoginUserReturnsFalseWithWrongPassword()
        {
            var messageBoxServiceMock = MockRepository.GenerateStrictMock<IMessageBoxServiceCF>();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.LoginFailure)).Repeat.Once();
            var messageBoxServiceMock = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceMock);
            Assert.IsFalse(m_ISecurityManagerToolCF.LoginUser(UserName, "wrongpassword"));
            MockShow(messageBoxServiceMock, TextsCF.LoginFailure, 1);
        }
        [Test]
            SecurityUser securityUser = new SecurityUser(UserName, null);
            users.Add(securityUser);
            ISecurityManager securityManagerMock = MockRepository.GenerateStub<ISecurityManager>();
            securityManagerMock.Stub(x => x.Users).Return(users).Repeat.Any();
            ISecurityManager securityManagerMock = Substitute.For<ISecurityManager>();
            securityManagerMock.Users.Returns(users);
            m_ISecurityManagerToolCF.SecurityManager = securityManagerMock;
            Assert.Throws<NullReferenceException>(() => m_ISecurityManagerToolCF.LoginUser(UserName, Password1));
        [Test]
        public void ChangePasswordOverloadChecksIfPasswordMeetsCriteria()
        {
            var passwordComplexity = SetUpPasswordComplexityMock(Password2);
            var simpleXmlSerializerFactoryStub = MockRepository.GenerateStub<IRunTimeXmlSerializerFactory>();
            m_SecurityManagerToolCF.SecurityUserSerializer = MockRepository.GenerateStub<SecurityUserSerializer>(simpleXmlSerializerFactoryStub);
            var passwordComplexity = Substitute.For<PasswordComplexity>();
            m_SecurityManagerToolCF.PasswordComplexity = passwordComplexity;
            var simpleXmlSerializerFactoryStub = Substitute.For<IRunTimeXmlSerializerFactory>();
            m_SecurityManagerToolCF.SecurityUserSerializer = Substitute.For<SecurityUserSerializer>(simpleXmlSerializerFactoryStub);
            m_ISecurityManagerToolCF.ChangePassword(UserName, Password2);
            passwordComplexity.VerifyAllExpectations();
            passwordComplexity.Received().AssertPasswordCriteria(Password2);
        }
        //[Test]
        [Test]
        public void ChangePasswordChecksIfPasswordMeetsCriteria()
        {
            var passwordComplexity = SetUpPasswordComplexityMock(Password2);
            var simpleXmlSerializerFactoryStub = MockRepository.GenerateStub<IRunTimeXmlSerializerFactory>();
            m_SecurityManagerToolCF.SecurityUserSerializer = MockRepository.GenerateStub<SecurityUserSerializer>(simpleXmlSerializerFactoryStub);
            var passwordComplexity = Substitute.For<PasswordComplexity>();
            m_SecurityManagerToolCF.PasswordComplexity = passwordComplexity;
            var simpleXmlSerializerFactoryStub = Substitute.For<IRunTimeXmlSerializerFactory>();
            m_SecurityManagerToolCF.SecurityUserSerializer = Substitute.For<SecurityUserSerializer>(simpleXmlSerializerFactoryStub);
            m_ISecurityManagerToolCF.ChangePassword(UserName, Password1, Password2, Password2);
            passwordComplexity.VerifyAllExpectations();
            passwordComplexity.Received().AssertPasswordCriteria(Password2);
        }
        [Test]
        public void LogoutUserWorks()
        {
            var messageBoxServiceStub = MockRepository.GenerateMock<IMessageBoxServiceCF>();
            messageBoxServiceStub.Stub(x => x.Show(Arg<string>.Is.Anything, Arg<string>.Is.Anything,
                Arg<bool>.Is.Anything, Arg<bool>.Is.Anything, Arg<System.Action>.Is.Null)).NoOperation();
            var messageBoxServiceStub = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceStub);
            m_ISecurityManagerToolCF.LoginUser(UserName, Password1);
            Assert.AreEqual(m_ISecurityManagerToolCF.CurrentUser, UserName);
            m_ISecurityManagerToolCF.LogoutUser();
            Assert.IsTrue(string.IsNullOrEmpty(m_ISecurityManagerToolCF.CurrentUser));
            //messageBoxServiceStub.Received().Show(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<bool>(), Arg.Any<bool>(), null)); //.NoOperation();
        }
        [Test]
        public void LogoutUserShowsLogoutSucceededDialogIfNotSpecified()
        {
            var messageBoxServiceMock = MockRepository.GenerateStrictMock<IMessageBoxServiceCF>();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.SecurityLoginSuccess)).Repeat.Once();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.SecurityLogoutSuccess)).Repeat.Once();
            var messageBoxServiceMock = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceMock);
            m_ISecurityManagerToolCF.LoginUser(UserName, Password1);
            Assert.AreEqual(m_ISecurityManagerToolCF.CurrentUser, UserName);
            m_ISecurityManagerToolCF.LogoutUser();
            Assert.IsTrue(string.IsNullOrEmpty(m_ISecurityManagerToolCF.CurrentUser));
            MockShow(messageBoxServiceMock, TextsCF.SecurityLoginSuccess, 1);
            MockShow(messageBoxServiceMock, TextsCF.SecurityLogoutSuccess, 1);
            //MockShow(messageBoxServiceMock, TextsCF.SecurityLogoutSuccess, 1); // ???
        }
        [Test]
        public void LogoutUserShowsLogoutSucceededDialog()
        {
            var messageBoxServiceMock = MockRepository.GenerateStrictMock<IMessageBoxServiceCF>();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.SecurityLoginSuccess)).Repeat.Once();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.SecurityLogoutSuccess)).Repeat.Once();
            var messageBoxServiceMock = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceMock);
            m_ISecurityManagerToolCF.LoginUser(UserName, Password1);
            Assert.AreEqual(m_ISecurityManagerToolCF.CurrentUser, UserName);
            m_ISecurityManagerToolCF.LogoutUser(true);
            Assert.IsTrue(string.IsNullOrEmpty(m_ISecurityManagerToolCF.CurrentUser));
            MockShow(messageBoxServiceMock, TextsCF.SecurityLoginSuccess, 1);
            MockShow(messageBoxServiceMock, TextsCF.SecurityLogoutSuccess, 1);
        }
        [Test]
        public void LogoutUserDoesNotShowLogoutSucceededDialog()
        {
            var messageBoxServiceMock = MockRepository.GenerateStrictMock<IMessageBoxServiceCF>();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.SecurityLoginSuccess)).Repeat.Once();
            messageBoxServiceMock.Expect(x => MockShow(x, TextsCF.SecurityLogoutSuccess)).Repeat.Never();
            var messageBoxServiceMock = Substitute.For<IMessageBoxServiceCF>();
            ServiceContainerCF.Instance.AddService(typeof(IMessageBoxServiceCF), messageBoxServiceMock);
            m_ISecurityManagerToolCF.LoginUser(UserName, Password1);
            Assert.AreEqual(m_ISecurityManagerToolCF.CurrentUser, UserName);
            m_ISecurityManagerToolCF.LogoutUser(false);
            Assert.IsTrue(string.IsNullOrEmpty(m_ISecurityManagerToolCF.CurrentUser));
            MockShow(messageBoxServiceMock, TextsCF.SecurityLoginSuccess, 1);
            MockShow(messageBoxServiceMock, TextsCF.SecurityLogoutSuccess, 0);
        }
        [Test]
        {
            string fileName = "filename";
            FileHelperCF fileHelper = MockRepository.GenerateMock<FileHelperCF>();
            FileHelperCF fileHelper = Substitute.For<FileHelperCF>();
            m_SecurityManagerToolCF.FileHelper = fileHelper;
            fileHelper.Expect(mock => mock.Exists(fileName))
                      .Return(false);
            fileHelper.Exists(fileName).Returns(false);
            bool result = m_ISecurityManagerToolCF.Load(fileName);
            Assert.IsFalse(result);
            fileHelper.VerifyAllExpectations();
            fileHelper.Received().Exists(fileName);
        }
        [Test]
        {
            string fileName = "filename";
            FileHelperCF fileHelper = MockRepository.GenerateMock<FileHelperCF>();
            FileHelperCF fileHelper = Substitute.For<FileHelperCF>();
            m_SecurityManagerToolCF.FileHelper = fileHelper;
            var simpleXmlSerializerFactoryStub = MockRepository.GenerateStub<IRunTimeXmlSerializerFactory>();
            SecurityUserSerializer xmlTypeSerializer = MockRepository.GenerateMock<SecurityUserSerializer>(simpleXmlSerializerFactoryStub);
            var simpleXmlSerializerFactoryStub = Substitute.For<IRunTimeXmlSerializerFactory>();
            SecurityUserSerializer xmlTypeSerializer = Substitute.For<SecurityUserSerializer>(simpleXmlSerializerFactoryStub);
            xmlTypeSerializer.When(x => x.Load(fileName, out Arg.Any<IList<ISecurityUser>>(), out Arg.Any<IList<ISecurityGroup>>()))
                .Do(y =>
                {
                    y[1] = new List<ISecurityUser>();
                    y[2] = new List<ISecurityGroup>();
                });
            m_SecurityManagerToolCF.SecurityUserSerializer = xmlTypeSerializer;
            fileHelper.Expect(mock => mock.Exists(fileName))
                      .Return(true);
            IList<ISecurityGroup> groups = new List<ISecurityGroup>();
            IList<ISecurityUser> users = new List<ISecurityUser>();
            xmlTypeSerializer.Expect(mock => mock.Load(fileName, out users, out groups)).OutRef(users, groups);
            fileHelper.Exists(fileName).Returns(true);
            bool result = m_ISecurityManagerToolCF.Load(fileName);
            Assert.IsTrue(result);
            fileHelper.VerifyAllExpectations();
            xmlTypeSerializer.VerifyAllExpectations();
            fileHelper.Received().Exists(fileName);
            xmlTypeSerializer.Received().Load(fileName, out Arg.Any<IList<ISecurityUser>>(), out Arg.Any<IList<ISecurityGroup>>());
        }
        [Test]
                                                   }
                                           };
            ISecurityManager securityManager = MockRepository.GenerateMock<ISecurityManager>();
            ISecurityManager securityManager = Substitute.For<ISecurityManager>();
            m_ISecurityManagerToolCF.SecurityManager = securityManager;
            securityManager.Expect(mock => mock.Users)
                           .Return(users)
                           .Repeat.AtLeastOnce();
            securityManager.Users.Returns(users);
            Assert.Throws<ArgumentNullException>(() => m_ISecurityManagerToolCF.Save(null));
            securityManager.VerifyAllExpectations();
        }
        {
            IList<ISecurityUser> savedUsers = null;
            ISecurityManager securityManager = MockRepository.GenerateMock<ISecurityManager>();
            ISecurityManager securityManager = Substitute.For<ISecurityManager>();
            m_ISecurityManagerToolCF.SecurityManager = securityManager;
            securityManager.Expect(mock => mock.Users)
                           .Return(users)
                           .Repeat.AtLeastOnce();
            securityManager.Users.Returns(users);
            securityManager.Expect(mock => mock.Groups)
                           .Return(new BindingList<ISecurityGroup>())
                           .Repeat.AtLeastOnce();
            securityManager.Groups.Returns(new BindingList<ISecurityGroup>());
            m_SecurityUserSerializer.Expect(mock => mock.Save(null, null, null))
                                    .Callback(new Func<string, IList<ISecurityUser>, IList<ISecurityGroup>, bool>(
                                      (str, userList, groupList) =>
                                      {
                                          savedUsers = userList;
                                          return true;
                                      }));
            m_SecurityUserSerializer.When(x => x.Save(Arg.Any<string>(), Arg.Any<IList<ISecurityUser>>(), Arg.Any<IList<ISecurityGroup>>()))
                                    .Do(y => savedUsers = (IList<ISecurityUser>)y[1]);
            m_ISecurityManagerToolCF.Save(null);
            securityManager.VerifyAllExpectations();
            m_SecurityUserSerializer.VerifyAllExpectations();
            Assert.AreEqual(1, savedUsers.Count);
            return savedUsers[0];
        }
        
        private static void MockShow(IMessageBoxServiceCF x, string caption)
        private static void MockShow(IMessageBoxServiceCF x, string caption, short numOfRepeats)
        {
            x.Show(Arg<string>.Is.Anything,
                Arg<string>.Is.Equal(caption.GetTranslation()),
                Arg<bool>.Is.Anything,
                Arg<bool>.Is.Anything,
                Arg<System.Action>.Is.Null);
            x.Received(numOfRepeats)
                .Show(Arg.Any<string>(),
                    caption.GetTranslation(),
                    Arg.Any<bool>(),
                    Arg.Any<bool>(),
                    null);
        }
    }
}

SecurityManagerToolFXTest.cs
-12
+12
/Tools/ToolsTest/Security/SecurityManagerToolFXTest.cs
using Neo.ApplicationFramework.Controls.Blink;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Security
{
            m_SecurityService = new SecurityManagerTool();
            TestHelper.AddService<ISecurityServiceCF>(m_SecurityService);
            m_SecurityUser = MockRepository.GenerateStub<ISecurityUser>();
            m_SecurityUser = Substitute.For<ISecurityUser>();
            TestHelper.SetSingleInstanceField(typeof(SecurityManagerToolCF), m_SecurityService, typeof(ISecurityUser), m_SecurityUser);
        }
            
            m_AnalogNumeric.SetBinding(BlinkProperties.VisibleDynamicsValueProperty, binding);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(false);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(false);
            m_SecurityService.UpdateVisibility(m_Canvas);
            
            m_AnalogNumeric.SetBinding(BlinkProperties.VisibleDynamicsValueProperty, binding);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(true);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(true);
            m_SecurityService.UpdateVisibility(m_Canvas);
            Binding binding = new Binding("Value");
            m_AnalogNumeric.SetBinding(AnalogNumericFX.IsEnabledProperty, binding);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(false);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(false);
            m_SecurityService.UpdateVisibility(m_Canvas);
            Binding binding = new Binding("Value");
            m_AnalogNumeric.SetBinding(AnalogNumericFX.IsEnabledProperty, binding);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(true);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(true);
            m_SecurityService.UpdateVisibility(m_Canvas);
            Binding binding = new Binding("Value");
            m_AnalogNumeric.SetBinding(EnabledProperties.EnabledDynamicsValueProperty, binding);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(false);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(false);
            m_SecurityService.UpdateVisibility(m_Canvas);
            Binding binding = new Binding("Value");
            m_AnalogNumeric.SetBinding(EnabledProperties.EnabledDynamicsValueProperty, binding);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(true);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(true);
            m_SecurityService.UpdateVisibility(m_Canvas);
            Binding binding = new Binding("Value");
            m_AnalogNumeric.SetBinding(AnalogNumericFX.VisibilityProperty, binding);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(false);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(false);
            m_SecurityService.UpdateVisibility(m_Canvas);
            Binding binding = new Binding("Value");
            m_AnalogNumeric.SetBinding(AnalogNumericFX.VisibilityProperty, binding);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(true);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(true);
            m_SecurityService.UpdateVisibility(m_Canvas);
        {
            SecurityProperties.SetVisibilityOnAccessDenied(m_AnalogNumeric, VisibilityModes.Hidden);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(false);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(false);
            m_SecurityService.UpdateVisibility(m_Canvas);
        {
            SecurityProperties.SetVisibilityOnAccessDenied(m_AnalogNumeric, VisibilityModes.Hidden);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(true);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(true);
            m_SecurityService.UpdateVisibility(m_Canvas);

SecurityManagerToolTest.cs
-35
+33
/Tools/ToolsTest/Security/SecurityManagerToolTest.cs
#if !VNEXT_TARGET
using System.Collections;
using System.Linq;
using System.Windows.Forms;
using Neo.ApplicationFramework.Controls.Controls;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.OpcClient;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Security
{
            m_AnalogNumeric = new AnalogNumeric();
            m_SecurityExtenderStub = MockRepository.GenerateStub<ISecurityExtenderCF>();
            m_SecurityExtenderStub.Stub(x => x.GetSecurityGroups(m_AnalogNumeric)).Return(SecurityGroups.Group_01);
            m_SecurityExtenderStub = Substitute.For<ISecurityExtenderCF>();
            m_SecurityExtenderStub.GetSecurityGroups(m_AnalogNumeric).Returns(SecurityGroups.Group_01);
            m_Controls = new object[] { m_AnalogNumeric };
            m_SecurityUser = MockRepository.GenerateStub<ISecurityUser>();
            m_SecurityUser = Substitute.For<ISecurityUser>();
            var securityManager = MockRepository.GenerateStub<ISecurityManager>();
            var securityManager = Substitute.For<ISecurityManager>();
            m_SecurityVisibilityHelper = new SecurityVisibilityHelper(m_SecurityUser, securityManager);
            m_GlobalDataItem = MockRepository.GenerateStub<GlobalDataItem>();
            m_GlobalDataItem = Substitute.For<GlobalDataItem>();
          
        }
        [Test]
        public void UpdateVisibilityForAccessDeniedWhenModeIsDisabledKeepsVisibilityBinding()
        {
            m_SecurityExtenderStub.Stub(x => x.GetVisibilityMode(m_AnalogNumeric)).Return(VisibilityModes.Disabled);
            m_SecurityExtenderStub.GetVisibilityMode(m_AnalogNumeric).Returns(VisibilityModes.Disabled);
            m_AnalogNumeric.DataBindings.Add("Visible", m_GlobalDataItem, "Value", true);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(false);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(false);
            m_SecurityVisibilityHelper.UpdateControlsVisibility(m_Controls, m_SecurityExtenderStub);
        [Test]
        public void UpdateVisibilityForAccessGrantedWhenModeIsDisabledKeepsVisibilityBinding()
        {
            m_SecurityExtenderStub.Stub(x => x.GetVisibilityMode(m_AnalogNumeric)).Return(VisibilityModes.Disabled);
            m_SecurityExtenderStub.GetVisibilityMode(m_AnalogNumeric).Returns(VisibilityModes.Disabled);
            m_AnalogNumeric.DataBindings.Add("Visible", m_GlobalDataItem, "Value", true);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(true);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(true);
            m_SecurityVisibilityHelper.UpdateControlsVisibility(m_Controls, m_SecurityExtenderStub);
        [Test]
        public void UpdateVisibilityForAccessDeniedWhenModeIsDisabledKeepsIsEnabledBinding()
        {
            m_SecurityExtenderStub.Stub(x => x.GetVisibilityMode(m_AnalogNumeric)).Return(VisibilityModes.Disabled);
            m_SecurityExtenderStub.GetVisibilityMode(m_AnalogNumeric).Returns(VisibilityModes.Disabled);
            m_AnalogNumeric.DataBindings.Add("Enabled", m_GlobalDataItem, "Value", true);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(false);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(false);
            m_SecurityVisibilityHelper.UpdateControlsVisibility(m_Controls, m_SecurityExtenderStub);
        [Test]
        public void UpdateVisibilityForAccessGrantedWhenModeIsDisabledKeepsIsEnabledBinding()
        {
            m_SecurityExtenderStub.Stub(x => x.GetVisibilityMode(m_AnalogNumeric)).Return(VisibilityModes.Disabled);
            m_SecurityExtenderStub.GetVisibilityMode(m_AnalogNumeric).Returns(VisibilityModes.Disabled);
            m_AnalogNumeric.DataBindings.Add("Enabled", m_GlobalDataItem, "Value", true);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(true);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(true);
            m_SecurityVisibilityHelper.UpdateControlsVisibility(m_Controls, m_SecurityExtenderStub);
        [Test]
        public void UpdateVisibilityForAccessDeniedWhenModeIsHiddenKeepsIsEnabledBinding()
        {
            m_SecurityExtenderStub.Stub(x => x.GetVisibilityMode(m_AnalogNumeric)).Return(VisibilityModes.Hidden);
            m_SecurityExtenderStub.GetVisibilityMode(m_AnalogNumeric).Returns(VisibilityModes.Hidden);
            m_AnalogNumeric.DataBindings.Add("Enabled", m_GlobalDataItem, "Value", true);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(false);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(false);
            m_SecurityVisibilityHelper.UpdateControlsVisibility(m_Controls, m_SecurityExtenderStub);
        [Test]
        public void UpdateVisibilityForAccessGrantedWhenModeIsHiddenKeepsIsEnabledBinding()
        {
            m_SecurityExtenderStub.Stub(x => x.GetVisibilityMode(m_AnalogNumeric)).Return(VisibilityModes.Hidden);
            m_SecurityExtenderStub.GetVisibilityMode(m_AnalogNumeric).Returns(VisibilityModes.Hidden);
            m_AnalogNumeric.DataBindings.Add("Enabled", m_GlobalDataItem, "Value", true);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(true);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(true);
            m_SecurityVisibilityHelper.UpdateControlsVisibility(m_Controls, m_SecurityExtenderStub);
        [Test]
        public void UpdateVisibilityForAccessDeniedWhenModeIsHiddenKeepsVisibilityBinding()
        {
            m_SecurityExtenderStub.Stub(x => x.GetVisibilityMode(m_AnalogNumeric)).Return(VisibilityModes.Hidden);
            m_SecurityExtenderStub.GetVisibilityMode(m_AnalogNumeric).Returns(VisibilityModes.Hidden);
            m_AnalogNumeric.DataBindings.Add("Visible", m_GlobalDataItem, "Value", true);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(false);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(false);
            m_SecurityVisibilityHelper.UpdateControlsVisibility(m_Controls, m_SecurityExtenderStub);
        [Test]
        public void UpdateVisibilityForAccessGrantedWhenModeIsHiddenKeepsVisibilityBinding()
        {
            m_SecurityExtenderStub.Stub(x => x.GetVisibilityMode(m_AnalogNumeric)).Return(VisibilityModes.Hidden);
            m_SecurityExtenderStub.GetVisibilityMode(m_AnalogNumeric).Returns(VisibilityModes.Hidden);
            m_AnalogNumeric.DataBindings.Add("Visible", m_GlobalDataItem, "Value", true);
            m_SecurityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01)).Return(true);
            m_SecurityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(true);
            m_SecurityVisibilityHelper.UpdateControlsVisibility(m_Controls, m_SecurityExtenderStub);
        [Test]
        public void UpdateVisibility()
        {
            var form = MockRepository.GenerateStub<IForm>();
            var securityExtender = MockRepository.GenerateStub<ISecurityExtenderCF>();
            var securityUser = MockRepository.GenerateStub<ISecurityUser>();
            var securityManager = MockRepository.GenerateStub<ISecurityManager>();
            var form = Substitute.For<IForm>();
            var securityExtender = Substitute.For<ISecurityExtenderCF>();
            var securityUser = Substitute.For<ISecurityUser>();
            var securityManager = Substitute.For<ISecurityManager>();
            Control control = new Control();
            ArrayList controls = new ArrayList();
            controls.Add(control);
            form.Stub(x => x.Controls).Return(controls).Repeat.Any();
            form.Controls.Returns(controls);
            securityExtender.Stub(x => x.GetSecurityGroups(control))
                            .Return(SecurityGroups.Group_01)
                            .Repeat.Any();
            securityExtender.GetSecurityGroups(control).Returns(SecurityGroups.Group_01);
            securityUser.Stub(x => x.BelongsToGroup(SecurityGroups.Group_01))
                        .Return(false);
            securityUser.BelongsToGroup(SecurityGroups.Group_01).Returns(false);
            SecurityVisibilityHelper securityVisibilityHelper = new SecurityVisibilityHelper(securityUser, securityManager);
            securityVisibilityHelper.UpdateControlsVisibility(form.Controls, securityExtender);
        [Test]
        public void ChangePasswordUsesPasswordComplexity()
        {
            var passwordComplexity = MockRepository.GenerateMock<PasswordComplexity>();
            passwordComplexity.Expect(x => x.AssertPasswordCriteria("pw"));
            var passwordComplexity = Substitute.For<PasswordComplexity>();
            m_SecurityManagerTool.PasswordComplexity = passwordComplexity;
            m_SecurityService.ChangePassword(UserName, "pw");
            passwordComplexity.VerifyAllExpectations();
            passwordComplexity.Received().AssertPasswordCriteria("pw");
        }
        [Test]
        }
    }
}
#endif

SecurityManagerToolTestBase.cs
-23
+16
/Tools/ToolsTest/Security/SecurityManagerToolTestBase.cs
using System.ComponentModel;
using System.Windows.Forms;
using Core.Api.GlobalReference;
using Core.Api.Utilities;
using Core.TestUtilities.Utilitites;
using Neo.ApplicationFramework.Utilities.IO;
using Neo.ApplicationFramework.Common.Serialization;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Utilities.IO;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Security
{
        protected const string UserName = "test";
        protected const string Password1 = "mycurrentpassword";
        protected const string Password2 = "anewpassword";
        protected MockRepository m_Mocks;
        protected ISecurityServiceCF m_ISecurityManagerToolCF;
        protected SecurityManagerToolCF m_SecurityManagerToolCF;
        protected BindingList<ISecurityGroup> m_GroupsList;
        {
            TestHelper.UseTestWindowThreadHelper = true;
            m_Mocks = new MockRepository();
            m_ISecurityManagerToolCF = m_SecurityManagerToolCF = CreateSecurityManagerTool();
            var passwordHasher = MockRepository.GenerateStub<PasswordHasherCF>();
            passwordHasher.Expect(mock => mock.GetPasswordHash(Password1))
                          .Return(m_PasswordHash1);
            var passwordHasher = Substitute.For<PasswordHasherCF>();
            passwordHasher.GetPasswordHash(Password1).Returns(m_PasswordHash1);
            passwordHasher.Expect(mock => mock.GetPasswordHash(Password2))
                          .Return(m_PasswordHash2);
            passwordHasher.GetPasswordHash(Password2).Returns(m_PasswordHash2);
            passwordHasher.Expect(mock => mock.GetPasswordHash(string.Empty))
                          .Return(m_EmptyPasswordHash);
            passwordHasher.GetPasswordHash(string.Empty).Returns(m_EmptyPasswordHash);
            m_SecurityManagerToolCF.PasswordHasher = passwordHasher;
            FileHelperCF fileHelper = MockRepository.GenerateStub<FileHelperCF>();
            FileHelperCF fileHelper = Substitute.For<FileHelperCF>();
            m_SecurityManagerToolCF.FileHelper = fileHelper;
            var v = MockRepository.GenerateStub<IRunTimeXmlSerializerFactory>();
            var v = Substitute.For<IRunTimeXmlSerializerFactory>();
            m_SecurityUserSerializer = MockRepository.GenerateMock<SecurityUserSerializer>(v);
            m_SecurityUserSerializer = Substitute.For<SecurityUserSerializer>(v);
            m_SecurityManagerToolCF.SecurityUserSerializer = m_SecurityUserSerializer;
            SetPasswordComplexityStub();
        protected virtual SecurityManagerToolCF CreateSecurityManagerTool()
        {
            var globalReferenceService = MockRepository.GenerateStub<IGlobalReferenceService>();
            globalReferenceService.Stub(service => service.GetObjects<Form>()).Return(new Form[0]);
            var globalReferenceService = Substitute.For<IGlobalReferenceService>();
            globalReferenceService.GetObjects<Form>().Returns(new Form[0]);
            
            return new SecurityManagerToolCF(new LazyWrapper<IGlobalReferenceService>(() => globalReferenceService));
        }
        private void SetPasswordComplexityStub()
        {
            var passwordComplexity = MockRepository.GenerateStub<PasswordComplexity>();
            passwordComplexity.Stub(x => x.MeetCriteria(null)).IgnoreArguments().Return(true);
            var passwordComplexity = Substitute.For<PasswordComplexity>();
            passwordComplexity.MeetCriteria(Arg.Any<string>()).Returns(true);
            m_SecurityManagerToolCF.PasswordComplexity = passwordComplexity;
        }
              new SecurityUser(UserName, m_PasswordHash1)
            };
            ISecurityManager securityManagerStub = MockRepository.GenerateStub<ISecurityManager>();
            securityManagerStub.Stub(x => x.Groups).Return(m_GroupsList).Repeat.Any();
            securityManagerStub.Stub(x => x.Users).Return(m_UsersList).Repeat.Any();
            ISecurityManager securityManagerStub = Substitute.For<ISecurityManager>();
            securityManagerStub.Groups.Returns(m_GroupsList);
            securityManagerStub.Users.Returns(m_UsersList);
            return securityManagerStub;
        }
    }

SecurityUserSerializerTest.cs
-8
+9
/Tools/ToolsTest/Security/SecurityUserSerializerTest.cs
#if !VNEXT_TARGET
using System.Collections.Generic;
using System.IO;
using System.Xml.Linq;
using Neo.ApplicationFramework.Tools.Design;
using Neo.ApplicationFramework.Common.Serialization;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Design;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Security
{
    {
        private IRunTimeXmlSerializerFactory m_RunTimeXmlSerializerFactoryStub;
        [OneTimeSetUp]
        public void TestFixtureSetUp()
        {
            var namingConstraints = MockRepository.GenerateMock<INamingConstraints>();
            namingConstraints.Stub(inv => inv.IsNameLengthValid(Arg<int>.Is.Anything, Arg<int>.Is.Anything, Arg<int>.Is.Anything)).Return(true);
            namingConstraints.Stub(inv => inv.ReservedApplicationNames).Return(new HashSet<string>());
            namingConstraints.Stub(inv => inv.ReservedSystemNames).Return(new HashSet<string>());
            var namingConstraints = Substitute.For<INamingConstraints>();
            namingConstraints.IsNameLengthValid(Arg.Any<int>(), Arg.Any<int>(), Arg.Any<int>()).Returns(true);
            namingConstraints.ReservedApplicationNames.Returns(new HashSet<string>());
            namingConstraints.ReservedSystemNames.Returns(new HashSet<string>());
            TestHelper.AddService(typeof(INameCreationService), new NameCreationService(namingConstraints));
        }
        [SetUp]
        public void SetUp()
        {
            m_RunTimeXmlSerializerFactoryStub = MockRepository.GenerateStub<IRunTimeXmlSerializerFactory>();
            m_RunTimeXmlSerializerFactoryStub = Substitute.For<IRunTimeXmlSerializerFactory>();
        }
        [Test]
        }
    }
}
#endif

ScriptChanges230Test.cs
-10
+12
/Tools/ToolsTest/Serialization/Converters/Script/ScriptChanges230Test.cs
using Neo.ApplicationFramework.Controls.Dialogs.ScriptChanges;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.Serialization.Converters.Script.ScriptSamples;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Serialization.Converters.Script
{
        private void LoadTestFiles(Dictionary<string, string> files)
        {
            var targetService = MockRepository.GenerateStub<ITargetService>().ToILazy();
            targetService.Value.Expect(x => x.CurrentTargetInfo.ProjectPath).Return(DummyTestFolder);
            var targetService = Substitute.For<ITargetService>().ToILazy();
            targetService.Value.CurrentTargetInfo.ProjectPath.Returns(DummyTestFolder);
            var messageBoxService = MockRepository.GenerateStub<IMessageBoxServiceIde>().ToILazy();
            var messageBoxService = Substitute.For<IMessageBoxServiceIde>().ToILazy();
            var encryptionStrategyFactory = MockRepository.GenerateStub<IEncryptionStrategyFactory>().ToILazy();
            var encryptionStrategy = MockRepository.GenerateMock<ICSharpSerializationEncryptionStrategy>();
            encryptionStrategy.Expect(x => x.GetScriptsFromDirectory(DummyTestFolder)).Return(files.Keys);
            var encryptionStrategyFactory = Substitute.For<IEncryptionStrategyFactory>().ToILazy();
            var encryptionStrategy = Substitute.For<ICSharpSerializationEncryptionStrategy>();
            encryptionStrategy.GetScriptsFromDirectory(DummyTestFolder).Returns(files.Keys);
            foreach (KeyValuePair<string, string> file in files)
            {
                string filename = file.Key;
                encryptionStrategy.Expect(x => x.LoadScriptFile(filename)).Return(file.Value);
                encryptionStrategy.LoadScriptFile(filename).Returns(file.Value);
            }
            encryptionStrategy.Expect(x => x.SaveScriptFile(null, null)).IgnoreArguments().WhenCalled(a => m_SavedFiles.Add((string)a.Arguments[0], (string)a.Arguments[1]));
            encryptionStrategyFactory.Value.Expect(x => x.GetEncryptionStrategy<ICSharpSerializationEncryptionStrategy>(true)).Return(encryptionStrategy);
            encryptionStrategy
                .WhenForAnyArgs(x => x.SaveScriptFile(Arg.Any<string>(), Arg.Any<string>()))
                .Do(a => m_SavedFiles.Add((string)a[0], (string)a[1]));
            encryptionStrategyFactory.Value.GetEncryptionStrategy<ICSharpSerializationEncryptionStrategy>(true).Returns(encryptionStrategy);
            m_Converter = new TestableScriptConverter230(messageBoxService, encryptionStrategyFactory);
        }

AddAndUpdateProjectGuidConverterTest.cs
-6
+6
/Tools/ToolsTest/Serialization/Converters/AddAndUpdateProjectGuidConverterTest.cs
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.Security;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Serialization.Converters
{
        [SetUp]
        public void Setup()
        {
            m_FileHelper = MockRepository.GeneratePartialMock<FileHelper>();
            m_FileHelper = Substitute.For<FileHelper>();
        }
        [Test]
        public void UpdatesAllDesignerItemBaseObjects()
        {
            m_FileHelper.Stub(f => f.Exists(Arg<string>.Is.Anything)).Return(false);
            m_FileHelper.Exists(Arg.Any<string>()).Returns(false);
            XDocument doc = XDocument.Parse(TestDocument);
            int numOfGuidBefore = CountGuids(doc);
            var converter = new TestConverter(m_FileHelper);
        [Test]
        public void DoesNotUpdateIfPropertyExists()
        {
            m_FileHelper.Stub(f => f.Exists(Arg<string>.Is.Anything)).Return(false);
            m_FileHelper.Exists(Arg.Any<string>()).Returns(false);
            XDocument doc = XDocument.Parse(ConvertedDoc);
            var converter = new TestConverter(m_FileHelper);
            bool success = converter.Convert(doc);
        [Test]
        public void UpdatesExpressionsGuids()
        {
            m_FileHelper.Stub(f => f.Exists(Arg<string>.Is.Anything)).Return(false);
            m_FileHelper.Exists(Arg.Any<string>()).Returns(false);
            XDocument doc = XDocument.Parse(ExpressionFile);
            int numOfGuidBefore = CountGuids(doc);
            var converter = new TestConverter(m_FileHelper);
        [Test]
        public void ConvertsSecurityXmlFile()
        {
            m_FileHelper.Stub(f => f.Exists(Arg<string>.Is.Anything)).Return(true);
            m_FileHelper.Exists(Arg.Any<string>()).Returns(true);
            XDocument doc = XDocument.Parse(SecurityNeoFile);
            var converter = new TestConverter(m_FileHelper);
            bool success = converter.Convert(doc);

ScreenImageSizeConverterTest.cs
-12
+10
/Tools/ToolsTest/Serialization/Converters/ScreenImageSizeConverterTest.cs
using Neo.ApplicationFramework.Common.Constants;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Tools.Serialization.Converters.Samples;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Serialization.Converters
{
        {
            base.SetUp();
            m_FileHelper = MockRepository.GenerateStub<FileHelper>();
            m_FileHelper = Substitute.For<FileHelper>();
            m_Converter = new ScreenImageSizeConverter {FileHelper = m_FileHelper};
            m_XmlConverterManager.RegisterConverter(m_Converter);
            string expectedThumbnailPath = expectedPath + string.Format(ProjectItemConstants.ThumbnailFileFormat, m_ScreenName);
            string expectedBackgroundPath = expectedPath + string.Format(ProjectItemConstants.ThumbnailBackgroundFileFormat, m_ScreenName);
            m_FileHelper.Stub(x => x.Exists(expectedThumbnailPath)).Return(true);
            m_FileHelper.Stub(x => x.Exists(expectedBackgroundPath)).Return(true);
            m_FileHelper.Exists(expectedThumbnailPath).Returns(true);
            m_FileHelper.Exists(expectedBackgroundPath).Returns(true);
            m_XmlConverterManager.ConvertProject(string.Empty, XDocument.Parse(FileResources.ProjectWithScreen));
            m_FileHelper.AssertWasCalled(x => x.Delete(expectedThumbnailPath));
            m_FileHelper.AssertWasCalled(x => x.Delete(expectedBackgroundPath));
            m_FileHelper.Received().Delete(expectedThumbnailPath);
            m_FileHelper.Received().Delete(expectedBackgroundPath);
        }
        [Test]
            string expectedThumbnailPath = expectedPath + string.Format(ProjectItemConstants.ThumbnailFileFormat, m_ScreenName);
            string expectedBackgroundPath = expectedPath + string.Format(ProjectItemConstants.ThumbnailBackgroundFileFormat, m_ScreenName);
            m_FileHelper.Stub(x => x.Exists(expectedThumbnailPath)).Return(false);
            m_FileHelper.Stub(x => x.Exists(expectedBackgroundPath)).Return(false);
            m_FileHelper.Exists(expectedThumbnailPath).Returns(false);
            m_FileHelper.Exists(expectedBackgroundPath).Returns(false);
            m_XmlConverterManager.ConvertProject(string.Empty, XDocument.Parse(FileResources.ProjectWithScreen));
            m_FileHelper.AssertWasNotCalled(x => x.Delete(expectedThumbnailPath));
            m_FileHelper.AssertWasNotCalled(x => x.Delete(expectedBackgroundPath));
            m_FileHelper.DidNotReceive().Delete(expectedThumbnailPath);
            m_FileHelper.DidNotReceive().Delete(expectedBackgroundPath);
        }
    }
}

SetSqLiteStorageProviderConverterTest.cs
-3
+3
/Tools/ToolsTest/Serialization/Converters/SetSqLiteStorageProviderConverterTest.cs
using Neo.ApplicationFramework.Tools.Brand;
using Neo.ApplicationFramework.Tools.Serialization.Converters.Samples;
using Neo.ApplicationFramework.Tools.Storage.Features;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Serialization.Converters
{
        public void ConvertSqlCeProjectForBrand(bool enableStorageProviderSelectionFeature, int panelBrandId, bool expectedResult)
        {
            //ARRANGE
            m_FeatureSecurityServiceIde.Stub(x => x.IsActivated<EnableStorageProviderSelectionFeature>()).Return(enableStorageProviderSelectionFeature);
            m_FeatureSecurityServiceIde.IsActivated<EnableStorageProviderSelectionFeature>().Returns(enableStorageProviderSelectionFeature);
            BrandToolHelper.Instance = new BrandToolHelper(panelBrandId);
            //ACT
        public void ConvertSqLiteProjectForBrand(bool enableStorageProviderSelectionFeature, int panelBrandId, bool expectedResult)
        {
            //ARRANGE
            m_FeatureSecurityServiceIde.Stub(x => x.IsActivated<EnableStorageProviderSelectionFeature>()).Return(enableStorageProviderSelectionFeature);
            m_FeatureSecurityServiceIde.IsActivated<EnableStorageProviderSelectionFeature>().Returns(enableStorageProviderSelectionFeature);
            BrandToolHelper.Instance = new BrandToolHelper(panelBrandId);
            //ACT

XamlCircularMeterRemoveMinMaxDynamicsConverterTest.cs
-7
+7
/Tools/ToolsTest/Serialization/Converters/XamlCircularMeterRemoveMinMaxDynamicsConverterTest.cs
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.Serialization.Converters.Samples;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.Serialization.Converters
{
            m_XmlConverterManager = new XmlConverterManager();
            m_XmlConverterManager.Converters.Clear();
            var objectSerializerFactory = MockRepository.GenerateMock<IObjectSerializerFactoryIde>();
            objectSerializerFactory.Stub(objSer => objSer.GetXDocumentLoader().Load(Arg<string>.Is.Anything))
                .Do((Func<string, XDocument>)GetProjectDocument);
            var objectSerializerFactory = Substitute.For<IObjectSerializerFactoryIde>();
            objectSerializerFactory.GetXDocumentLoader().Load(Arg.Any<string>())
                .Returns(x => GetProjectDocument((string)x[0]));
            var directoryHelper = MockRepository.GeneratePartialMock<DirectoryHelper>();
            directoryHelper.Stub(dirHelper => dirHelper.GetFiles(Arg<string>.Is.Anything, Arg<string>.Is.Anything))
                .Do((Func<string, string, string[]>)GetProjectFile);
            var directoryHelper = Substitute.ForPartsOf<DirectoryHelper>();
            directoryHelper.GetFiles(Arg.Any<string>(), Arg.Any<string>())
                .Returns(x => GetProjectFile((string)x[0], (string)x[1]));
            m_Converter = new XamlCircularMeterRemoveMinMaxDynamicsConverter(objectSerializerFactory.ToILazy(), directoryHelper);
            m_XmlConverterManager.RegisterConverter(m_Converter);

XamlConverterBaseTest.cs
-2
+2
/Tools/ToolsTest/Serialization/Converters/XamlConverterBaseTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.Serialization.Converters
{
        public virtual void SetUp()
        {
            var brandService = TestHelper.AddServiceStub<IBrandServiceIde>();
            brandService.Stub(x => x.ScreenFileExtension).Return(".neoxaml");
            brandService.ScreenFileExtension.Returns(".neoxaml");
            m_XmlConverterManager = new XmlConverterManager();
            m_XmlConverterManager.Converters.Clear();

XmlPrinterDeviceSettingsSplitConverterTest.cs
-8
+6
/Tools/ToolsTest/Serialization/Converters/XmlPrinterDeviceSettingsSplitConverterTest.cs
using Neo.ApplicationFramework.Tools.Printer;
using Neo.ApplicationFramework.Tools.Serialization.Converters.Samples;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.Serialization.Converters
{
            m_XmlPrinterDeviceSettingsSplitConverter = new XmlPrinterDeviceSettingsSplitConverter();
            m_XmlConverterManager.RegisterConverter(m_XmlPrinterDeviceSettingsSplitConverter);
            m_XmlTypeSerializerMock = MockRepository.GenerateMock<XmlTypeSerializer>();
            m_XmlTypeSerializerMock = Substitute.For<XmlTypeSerializer>();
            m_XmlPrinterDeviceSettingsSplitConverter.XmlTypeSerializer = m_XmlTypeSerializerMock;
        }
        public override void TearDown()
        {
            base.TearDown();
            m_XmlTypeSerializerMock.VerifyAllExpectations();
        }
        [Test]
        public void ConfirmThatPropertiesAreRemovedAndSavedIntoNewFile()
        {
            m_XmlTypeSerializerMock.Expect(x => x.Save<PrinterDistributor>(null, null)).IgnoreArguments();
            string path = System.Reflection.Assembly.GetExecutingAssembly().Location;
            var xDoc = XDocument.Parse(FileResources.PrinterDeviceWithAlarmDistributorSettings);
            Assert.IsFalse(PropertyExists("IsBufferRequired", xDoc));
            Assert.IsFalse(PropertyExists("BufferWaitingTime", xDoc));
            Assert.IsFalse(PropertyExists("BufferMaxAlarms", xDoc));
            m_XmlTypeSerializerMock.Received().Save(Arg.Any<string>(), Arg.Any<PrinterDistributor>());
        }
        private bool PropertyExists(string propertyName, XDocument document)
        [Test]
        public void ConfirmThatSectionIsCreatedWhenNoPrinterExists()
        {
            m_XmlTypeSerializerMock.Expect(x => x.Save<PrinterDevice>(null, null)).IgnoreArguments();
            string path = System.Reflection.Assembly.GetExecutingAssembly().Location;
            var xDoc = XDocument.Parse(FileResources.ProjectWithoutDeviceSection);
            bool isConverted = m_XmlConverterManager.ConvertProject(path, xDoc);
            var devices = from item in xDoc.Descendants("Object")
                          let designerTypeNameAttribute = item.Attribute("Name")
                          where (designerTypeNameAttribute != null && designerTypeNameAttribute.Value == "Devices")
                          where designerTypeNameAttribute != null && designerTypeNameAttribute.Value == "Devices"
                          select item;
            Assert.That(devices.Count() > 0);
            m_XmlTypeSerializerMock.Received().Save(Arg.Any<string>(), Arg.Any<PrinterDevice>());
        }
        private int GetNumberOfProperties(XDocument xDocument)

XmlProjectCurrentPlatformVersionConverterTest.cs
-3
+3
/Tools/ToolsTest/Serialization/Converters/XmlProjectCurrentPlatformVersionConverterTest.cs
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.Tools.Serialization.Converters.Samples;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.Serialization.Converters
{
        [SetUp]
        public void Setup()
        {
            m_FileHelper = MockRepository.GeneratePartialMock<FileHelper>();
            m_FileHelper = Substitute.For<FileHelper>();
        }
        [Test]
        public void AddsProjectCurrentPlatformVersionIfNotExisting()
        {
            // Arrange
            m_FileHelper.Stub(f => f.Exists(Arg<string>.Is.Anything)).Return(false);
            m_FileHelper.Exists(Arg.Any<string>()).Returns(false);
            XDocument doc = XDocument.Parse(FileResources.ProjectWithoutCurrentPlatformVersion);
            var converter = new TestConverter(m_FileHelper);

OldTypeObjectSerializerTest.cs
-17
+20
/Tools/ToolsTest/Serialization/OldTypeObjectSerializerTest.cs
using Neo.ApplicationFramework.Tools.OpcClient;
using Neo.ApplicationFramework.Tools.Serialization.Converters;
using Neo.ApplicationFramework.Tools.Serialization.Converters.Samples;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Serialization
{
            TestHelper.ClearServices();   
            m_GlobalReferenceService = TestHelper.CreateAndAddServiceStub<IGlobalReferenceService>();
            var pathProvider = MockRepository.GenerateStub<IFeatureXmlPathProvider>().ToLazy();
            var pathProvider = Substitute.For<IFeatureXmlPathProvider>().ToLazy();
            IToolManager toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(false);
            toolManager.Runtime.Returns(false);
            m_Controllers = new ExtendedBindingList<IDataSourceContainer>();
            m_DataItem = MockRepository.GenerateStub<IDataItem>();
            m_DataItem = Substitute.For<IDataItem>();
            TestHelper.AddService(typeof(INativeAPI), new NativeAPI());
            IFeatureSecurityService featureSecurityService = MockRepository.GenerateStub<IFeatureSecurityService>();
            IFeatureSecurityService featureSecurityService = Substitute.For<IFeatureSecurityService>();
            TestHelper.AddService(typeof(IFeatureSecurityService), featureSecurityService);
            m_OpcClientService = TestHelper.AddServiceStub<IOpcClientServiceCF>();
            m_OpcClientService.Stub(x => x.Controllers).Return(m_Controllers);
            m_OpcClientService.Stub(x => x.AddNewDataItem(string.Empty, string.Empty, null)).IgnoreArguments().Return(MockRepository.GenerateStub<IDataItem>());
            m_OpcClientService.Stub(x => x.AddNewDataItem(string.Empty, string.Empty, null, true, 0.0, 0.0, BEDATATYPE.DT_BIT, 0)).IgnoreArguments().Return(m_DataItem);
            m_GlobalController = MockRepository.GenerateStub<IGlobalController>();
            m_OpcClientService.Controllers.Returns(m_Controllers);
            m_OpcClientService.AddNewDataItem(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<IControllerBase>())
                .Returns(Substitute.For<IDataItem>());
            m_OpcClientService.AddNewDataItem(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<IControllerBase>(), 
                Arg.Any<bool>(), Arg.Any<double>(), Arg.Any<double>(), Arg.Any<BEDATATYPE>(), Arg.Any<short>())
                .Returns(m_DataItem);
            m_GlobalController = Substitute.For<IGlobalController>();
            m_GlobalController.Name = "GlobalController";
            
            IPollGroup pollGroup = MockRepository.GenerateStub<IPollGroup>();
            IPollGroup pollGroup = Substitute.For<IPollGroup>();
            pollGroup.Name = "DefaultPollGroup";
            m_GlobalController.Stub(x => x.PollGroups).Return(new BindingList<IPollGroup>() { pollGroup });
            m_GlobalController.PollGroups.Returns(new BindingList<IPollGroup>() { pollGroup });
            m_OpcClientService.Stub(x => x.GlobalController).Return(m_GlobalController);
            m_OpcClientService.GlobalController.Returns(m_GlobalController);
            IDataSourceContainer controller = null;
            IDataItem dataItem = null;
            //ARRAYTAG
            globalDataItem.DataItems.Add(dataItem);
            globalDataItem.AccessRights[controller.Name] = AccessRights.ReadWrite;
            m_GlobalReferenceService.Stub(x => x.GetObject<IGlobalDataItem>(StringConstants.TagsRoot + "Tag1")).Return(globalDataItem).Repeat.Any();
            m_GlobalReferenceService.GetObject<IGlobalDataItem>(StringConstants.TagsRoot + "Tag1").Returns(globalDataItem);
            m_MappingTypeDescriptorProvider = new AsmMetaTypeDescriptionProviderBuilder(typeof(object))
                .Build();
            
            TypeDescriptor.AddProvider(m_MappingTypeDescriptorProvider, typeof(object));
            var tagTraverser = MockRepository.GenerateStub<ITagTraverser>();
            var tagTraverser = Substitute.For<ITagTraverser>();
            var emptyEnumerable = Enumerable.Empty<IGlobalDataItemBase>().ToArray();
            tagTraverser.Stub(inv => inv.GetFlattenedDataItems(Arg<ITag>.Is.Anything)).Return(emptyEnumerable);
            tagTraverser.Stub(inv => inv.GetFlattenedDataItems(Arg<IEnumerable<ITag>>.Is.Anything)).Return(emptyEnumerable);
            tagTraverser.Stub(inv => inv.GetAllPaths(Arg<ITag[]>.Is.Anything)).Return(Enumerable.Empty<string>().ToArray());
            tagTraverser.GetFlattenedDataItems(Arg.Any<ITag>()).Returns(emptyEnumerable);
            tagTraverser.GetFlattenedDataItems(Arg.Any<IEnumerable<ITag>>()).Returns(emptyEnumerable);
            tagTraverser.GetAllPaths(Arg.Any<ITag[]>()).Returns(Enumerable.Empty<string>().ToArray());
            ServiceContainerCF.Instance.AddService<ITagTraverser>(tagTraverser);
        }

StorageSettingsViewModelPropertyPageTest.cs
-35
+36
/Tools/ToolsTest/Storage/StorageSettingsViewModelPropertyPageTest.cs
#if !VNEXT_TARGET
using System;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Storage.Common;
using NUnit.Framework;
using Neo.ApplicationFramework.Tools.Storage.PropertyPages;
using Core.Api.ProjectTarget;
using System.Reflection;
using Core.Api.Feature;
using Neo.ApplicationFramework.Storage.Settings;
using Rhino.Mocks;
using Core.Api.Platform;
using Core.Api.ProjectTarget;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.vNext.Gaps;
using System.Reflection;
using Neo.ApplicationFramework.Storage.Common;
using Neo.ApplicationFramework.Storage.Settings;
using Neo.ApplicationFramework.Tools.Storage.PropertyPages;
using NSubstitute;
using NUnit.Framework;
namespace Neo.ApplicationFramework.Tools.Storage
{
        [OneTimeSetUp]
        public void OneTimeSetUpSetUp()
        {
            var targetService = MockRepository.GenerateMock<ITargetService>();
            var storageService = MockRepository.GenerateMock<IStorageService>();
            var projectManager = MockRepository.GenerateMock<IProjectManager>();
            var featureService = MockRepository.GenerateMock<IFeatureSecurityServiceIde>();
            var fastLoggingService = MockRepository.GenerateMock<IFastLoggingFeatureLogicService>();
            var project = MockRepository.GenerateMock<IProject>();
            var terminal = MockRepository.GenerateMock<ITerminal>();
            var storageProviderSettings = MockRepository.GenerateMock<IStorageProviderSettings>();
            var target = MockRepository.GenerateMock<ITarget>();
            var targetService = Substitute.For<ITargetService>();
            var storageService = Substitute.For<IStorageService>();
            var projectManager = Substitute.For<IProjectManager>();
            var featureService = Substitute.For<IFeatureSecurityServiceIde>();
            var fastLoggingService = Substitute.For<IFastLoggingFeatureLogicService>();
            var project = Substitute.For<IProject>();
            var terminal = Substitute.For<ITerminal>();
            var storageProviderSettings = Substitute.For<IStorageProviderSettings>();
            var target = Substitute.For<ITarget>();
            storageProviderSettings.Stub(x => x.DisplayName).Return("blah");
            storageProviderSettings.Stub(x => x.Settings).Return(new IStorageProviderSetting[0]);
            target.Stub(x => x.Id).Return(TargetPlatform.WindowsCE);
            target.Stub(x => x.PlatformVersion).WhenCalled(x => x.ReturnValue = m_PlatformVersionIsCE8 ? TargetPlatformVersion.CE8 : TargetPlatformVersion.CE6).Return(TargetPlatformVersion.CE6); // return value ignored
            targetService.Stub(x => x.CurrentTarget).Return(target);
            fastLoggingService.Stub(x => x.IsFeatureAvailable(Arg<string>.Is.Anything, Arg<bool>.Is.Anything))
                .WhenCalled(a => a.ReturnValue = m_FastLoggingFeatureActive)
                .Return(m_FastLoggingFeatureActive); // return value required but ignored
            project.Stub(x => x.Terminal).Return(terminal);
            project.Stub(x => x.StorageProviderSettings).Return(storageProviderSettings);
            projectManager.Stub(x => x.Project).Return(project);
            storageService.Stub(x => x.CreateProviderSettings(Arg<string>.Is.Anything, Arg<TargetPlatform>.Is.Anything, Arg<TargetPlatformVersion>.Is.Anything))
                .Return(storageProviderSettings);
            storageService.Stub(x => x.ProvidersSupportedByTarget(Arg<TargetPlatform>.Is.Anything, Arg<TargetPlatformVersion>.Is.Anything)).Return(new string[0]);
            terminal.Stub(x => x.ExternalMemCardSupport).WhenCalled(x => x.ReturnValue = m_PanelHasSdCard ? 1 : 0).Return(0); // return value ignored
            storageService.Stub(x=>x.ProviderNames).Return(new[] {"blah"});
            storageProviderSettings.DisplayName.Returns("blah");
            storageProviderSettings.Settings.Returns(new IStorageProviderSetting[0]);
            target.Id.Returns(TargetPlatform.WindowsCE);
            target.PlatformVersion.Returns(x => m_PlatformVersionIsCE8 ? TargetPlatformVersion.CE8 : TargetPlatformVersion.CE6);
            targetService.CurrentTarget.Returns(target);
            fastLoggingService.IsFeatureAvailable(Arg.Any<string>(), Arg.Any<bool>())
                .Returns(a => m_FastLoggingFeatureActive);
            project.Terminal.Returns(terminal);
            project.StorageProviderSettings.Returns(storageProviderSettings);
            projectManager.Project.Returns(project);
            storageService.CreateProviderSettings(Arg.Any<string>(), Arg.Any<TargetPlatform>(), Arg.Any<TargetPlatformVersion>())
                .Returns(storageProviderSettings);
            storageService.ProvidersSupportedByTarget(Arg.Any<TargetPlatform>(), Arg.Any<TargetPlatformVersion>()).Returns(new string[0]);
            terminal.ExternalMemCardSupport.Returns(x => m_PanelHasSdCard ? 1 : 0);
            storageService.ProviderNames.Returns(new[] {"blah"});
            var gapServiceStub = MockRepository.GenerateStub<IGapService>();
            gapServiceStub.Stub(x => x.IsSubjectConsideredGap(Arg<MemberInfo>.Is.Anything)).Return(false);
            var gapServiceStub = Substitute.For<IGapService>();
            gapServiceStub.IsSubjectConsideredGap(Arg.Any<MemberInfo>()).Returns(false);
            m_storageViewModel = new StorageSettingsViewModel(targetService.ToILazy(), storageService, projectManager.ToILazy(), 
                featureService, fastLoggingService.ToILazy(), gapServiceStub.ToILazy());
    }
}
#endif

StructuredTagsTestBase.cs
-20
+20
/Tools/ToolsTest/StructuredTags/Common/StructuredTagsTestBase.cs
using Neo.ApplicationFramework.Tools.StructuredTag.Model;
using Neo.ApplicationFramework.Tools.StructuredType.Model;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.StructuredTags.Common
{
        /// <returns>An instance of the stub.</returns>
        public static IStructuredTypeService CreateStructuredTagServiceStub()
        {
            var rootComponent = MockRepository.GenerateStub<IStructuredTypeRootComponent>();
            rootComponent.Stub(x => x.Members).Return(new List<ITag>());
            var rootComponent = Substitute.For<IStructuredTypeRootComponent>();
            rootComponent.Members.Returns(new List<ITag>());
            var structuredTagService = TestHelper.AddServiceStub<IStructuredTypeService>();
            structuredTagService.Stub(x => x.GetType(Arg<string>.Is.Anything)).Return(rootComponent);
            structuredTagService.GetType(Arg.Any<string>()).Returns(rootComponent);
            return structuredTagService;
        }
        {
            TestHelper.ClearServices();
            TestHelper.AddService<IDataItemCountingService>(MockRepository.GenerateStub<IDataItemCountingService>());
            TestHelper.AddService<IDataItemCountingService>(Substitute.For<IDataItemCountingService>());
            StructuredTypeService = MockRepository.GenerateStub<IStructuredTypeService>();
            StructuredTypeService = Substitute.For<IStructuredTypeService>();
            TestHelper.AddService<IStructuredTypeService>(StructuredTypeService);
            OpcClientServiceIde = MockRepository.GenerateStub<IOpcClientServiceIde>();
            OpcClientServiceIde = Substitute.For<IOpcClientServiceIde>();
            TestHelper.AddService<IOpcClientServiceCF>(OpcClientServiceIde);
            TestHelper.AddService<IOpcClientServiceIde>(OpcClientServiceIde);
            OpcClientServiceIde.Stub(inv => inv.Controllers).Return(new ExtendedBindingList<IDataSourceContainer>());
            OpcClientServiceIde.Controllers.Returns(new ExtendedBindingList<IDataSourceContainer>());
            m_GlobalController = new GlobalController();
            OpcClientServiceIde.Stub(inv => inv.GlobalController).Return(m_GlobalController);
            OpcClientServiceIde.GlobalController.Returns(m_GlobalController);
            ErrorListService = MockRepository.GenerateStub<IErrorListService>();
            ErrorListService = Substitute.For<IErrorListService>();
            TestHelper.AddService<IErrorListService>(ErrorListService);
        }
            var dataItemMembers = dataItemMemberPostFixNr.Select(item => "member" + item).ToArray();
            var structuredMembers = structuredMemberPostFixNr.Select(item => "structmember" + item).ToArray();
            IStructuredTypeRootComponent rootType = MockRepository.GenerateStub<IStructuredTypeRootComponent>();
            rootType.Stub(inv => inv.BaseType).Return(null);
            IStructuredTypeRootComponent rootType = Substitute.For<IStructuredTypeRootComponent>();
            rootType.BaseType.Returns(x => null);
            rootType.Name = Type1Name;
            List<ITag> allMembers = PrepareMembers(dataItemMemberPostFixNr, structuredMemberPostFixNr, appendExtraOnType, dataItemMembers, structuredMembers);
            rootType.Stub(inv => inv.Members).Return(allMembers.ToArray());
            StructuredTypeService.Stub(inv => inv.GetType(Arg<string>.Is.Equal(Type1Name))).Return(rootType);
            StructuredTypeService.Stub(inv => inv.TypeNameExists(Arg<string>.Is.Equal(Type1Name))).Return(true);
            rootType.Members.Returns(allMembers.ToArray());
            StructuredTypeService.GetType(Type1Name).Returns(rootType);
            StructuredTypeService.TypeNameExists(Type1Name).Returns(true);
            StructuredTagInstance tagInstance = new StructuredTagInstance();
            tagInstance.Name = Tag1Name;
        private StructuredTypeReference GenerateReferenceAndRegisterType(string memberName, string typeName)
        {
            var structMember = new StructuredTypeReference() { Name = memberName, TypeName = typeName };
            var structType = MockRepository.GenerateStub<IStructuredTypeRootComponent>();
            var structType = Substitute.For<IStructuredTypeRootComponent>();
            structType.Name = typeName;
            structType.Stub(inv => inv.Members).Return(Enumerable.Empty<ITag>());
            structType.Stub(inv => inv.BaseType).Return(null);
            StructuredTypeService.Stub(inv => inv.GetType(Arg<string>.Is.Equal(typeName))).Return(structType);
            StructuredTypeService.Stub(inv => inv.TypeNameExists(Arg<string>.Is.Equal(typeName))).Return(true);
            structType.Members.Returns(Enumerable.Empty<ITag>());
            structType.BaseType.Returns(x => null);
            StructuredTypeService.GetType(typeName).Returns(structType);
            StructuredTypeService.TypeNameExists(typeName).Returns(true);
            return structMember;
        }

CountStructuredTagsTests.cs
-5
+2
/Tools/ToolsTest/StructuredTags/CountStructuredTagsTests.cs
using System;
using System.Text;
using Core.Api.Service;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.Events;
using Neo.ApplicationFramework.Interfaces.StructuredTag.Entities;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.OpcClient;
using Neo.ApplicationFramework.Tools.StructuredTag.Model;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.StructuredTags
{
            TestHelper.ClearServices();
            TestHelper.AddService<IDataItemCountingService>(new OpcClientToolIde());
            var provider = TestHelper.AddServiceStub<IGlobalDataItemMappingFactory>();
            provider.Stub(inv => inv.CreateNew()).WhenCalled(inv =>{inv.ReturnValue = new GlobalDataItemMappingCF();}).Return(default(GlobalDataItemMappingCF));
            provider.CreateNew().Returns(new GlobalDataItemMappingCF());
        }
       
        [TearDown]

StructuredTagRootRenamerTest.cs
-13
+20
/Tools/ToolsTest/StructuredTags/StructuredTagRootRenamerTest.cs
using System;
using System.Collections.Generic;
using System.Linq;
using Core.Api.CrossReference;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.StructuredTag.Misc;
using Neo.ApplicationFramework.Tools.StructuredTag.Model;
using Neo.ApplicationFramework.Tools.StructuredType.Model;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.StructuredTags
{
        public void SetUp()
        {
            TestHelper.AddService<IDataItemCountingService>(new OpcClientToolIde());
            m_StructuredTagService = MockRepository.GenerateStub<IStructuredTagService>();
            m_RenamerByCrossReferenceService = MockRepository.GenerateMock<ICrossReferenceRenameService>();
            m_MessageBoxService = MockRepository.GenerateStub<IMessageBoxServiceIde>();
            m_StructuredTypeService = MockRepository.GenerateStub<IStructuredTypeService>();
            m_CrossReferenceService = MockRepository.GenerateStub<ICrossReferenceService>();
            var tagChangedNotificationService = MockRepository.GenerateStub<ITagChangedNotificationServiceCF>();
            m_StructuredTagService = Substitute.For<IStructuredTagService>();
            m_RenamerByCrossReferenceService = Substitute.For<ICrossReferenceRenameService>();
            m_MessageBoxService = Substitute.For<IMessageBoxServiceIde>();
            m_StructuredTypeService = Substitute.For<IStructuredTypeService>();
            m_CrossReferenceService = Substitute.For<ICrossReferenceService>();
            var tagChangedNotificationService = Substitute.For<ITagChangedNotificationServiceCF>();
            TestHelper.AddService(m_StructuredTypeService);
            m_CrossReferenceService.Stub(x => x.GetReferences<ICrossReferenceItem>()).IgnoreArguments().Return(Enumerable.Empty<ICrossReferenceItem>());
            m_CrossReferenceService.GetReferences<ICrossReferenceItem>().Returns(Enumerable.Empty<ICrossReferenceItem>());
            m_StructuredTagRootRenamer = new StructuredTagRootRenamer(
                m_RenamerByCrossReferenceService.ToILazy(),
        public void CanOnlyRenameIfNewNameIsValid(bool isValidName)
        {
            IStructuredTagInstance structuredTagInstance = CreateStructuredTagInstance();
            m_StructuredTagService.Stub(x => x.IsValidNewName("", null, true)).IgnoreArguments().Return(isValidName);
            m_StructuredTagService.IsValidNewName(Arg.Any<string>(), null, true).Returns(isValidName);
            StubRenamerValidation();
            bool couldRename = m_StructuredTagRootRenamer.TryRename(structuredTagInstance, "someNewName");
            
            StubAllValidations();
            m_StructuredTagRootRenamer.TryRename(structuredTagInstance, "a");
            
            m_RenamerByCrossReferenceService.AssertWasCalled(x => x.UpdateNameByCrossReferences<ICrossReferenceItem>("", "", null), o => o.IgnoreArguments().Repeat.Times(numberOfPossibleUpdates));
            m_RenamerByCrossReferenceService.Received(numberOfPossibleUpdates)
                .UpdateNameByCrossReferences<ICrossReferenceItem>(Arg.Any<string>(), Arg.Any<string>(), 
                    Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), "StructuredTag", "GlobalDataItem");
        }
        [Test]
        private void StubRenamerValidation()
        {
            m_RenamerByCrossReferenceService.Stub(x => x.NameShouldBeUpdated<ICrossReferenceItem>("")).IgnoreArguments().Return(true);
            m_RenamerByCrossReferenceService.Stub(x => x.UpdateNameByCrossReferences<ICrossReferenceItem>("", "", null)).IgnoreArguments().Return(true);
            m_RenamerByCrossReferenceService.NameShouldBeUpdated<ICrossReferenceItem>(Arg.Any<string>(), 
                Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>(), Arg.Any<string>())
                .Returns(true);
            m_RenamerByCrossReferenceService.UpdateNameByCrossReferences<ICrossReferenceItem>(
                Arg.Any<string>(), Arg.Any<string>(), Arg.Any<Func<string, IEnumerable<ICrossReferenceItem>>>())
                .Returns(true);
        }
        private void StubNameValidation()
        {
            m_StructuredTagService.Stub(x => x.IsValidNewName(Arg<string>.Is.Anything, Arg<INamingContext>.Is.Anything, Arg<bool>.Is.Anything)).Return(true);
            m_StructuredTagService.IsValidNewName(Arg.Any<string>(), Arg.Any<INamingContext>(), Arg.Any<bool>()).Returns(true);
        }
        private static IStructuredTagInstance CreateStructuredTagInstance()

StructuredTagServiceTests.cs
-17
+14
/Tools/ToolsTest/StructuredTags/StructuredTagServiceTests.cs
using Neo.ApplicationFramework.Tools.StructuredTag.Services;
using Neo.ApplicationFramework.Tools.StructuredTags.Common;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.StructuredTags
{
            TestHelper.CreateAndAddServiceStub<IDataItemCountingService>();
            var controllers = new ExtendedBindingList<IDataSourceContainer>();
            m_OpcClientServiceIde = MockRepository.GenerateStub<IOpcClientServiceIde>();
            m_OpcClientServiceIde.Stub(inv => inv.Controllers).Return(controllers);
            m_OpcClientServiceIde = Substitute.For<IOpcClientServiceIde>();
            m_OpcClientServiceIde.Controllers.Returns(controllers);
            TestHelper.AddService<IOpcClientServiceCF>(m_OpcClientServiceIde);
            TestHelper.AddService<IOpcClientServiceIde>(m_OpcClientServiceIde);
            m_StructuredTypeService = StructuredTagsTestBase.CreateStructuredTagServiceStub();
            m_StructuredTagService = new StructuredTagService(
                MockRepository.GenerateStub<INameCreationService>(),
                Substitute.For<INameCreationService>(),
                m_StructuredTypeService,
                m_OpcClientServiceIde
            );
            m_GlobalController = new GlobalController();
            m_OpcClientServiceIde.Stub(inv => inv.GlobalController).Return(m_GlobalController);
            m_OpcClientServiceIde.GlobalController.Returns(m_GlobalController);
            m_StructuredTypeService.Stub(
               inv =>
                   inv.FlattenHierarchy(
                       Arg<IStructuredTypeReference>.Is.Anything,
                       Arg<Func<IStructuredTypeRootComponent, IStructuredTypeReference, ITag, string, string>>.Is.Anything,
                       Arg<bool>.Is.Anything,
                       Arg<string>.Is.Anything)
                   )
                   .WhenCalled(inv =>
            m_StructuredTypeService.FlattenHierarchy(
                       Arg.Any<IStructuredTypeReference>(),
                       Arg.Any<Func<IStructuredTypeRootComponent, IStructuredTypeReference, ITag, string, string>>(),
                       Arg.Any<bool>(),
                       Arg.Any<string>())
                   .Returns(inv =>
                   {
                       IStructuredTypeReference r = (IStructuredTypeReference)inv.Arguments[0];
                       inv.ReturnValue = r.TypeName == TestType ? new[] {TestType} : Enumerable.Empty<string>();
                   }).Return(default(IEnumerable<string>));
                       IStructuredTypeReference r = (IStructuredTypeReference)inv[0];
                       return r.TypeName == TestType ? new[] { TestType } : Enumerable.Empty<string>();
                   });
        }
        [TearDown]

StructuredTagsViewerFacadeTest.cs
-11
+15
/Tools/ToolsTest/StructuredTags/StructuredTagsViewerFacadeTest.cs
using Neo.ApplicationFramework.Tools.StructuredTag.Facades.StructuredTagsViewer;
using Neo.ApplicationFramework.Tools.StructuredTag.Facades.StructuredTagsViewer.Private;
using Neo.ApplicationFramework.Tools.StructuredTags.Common;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.StructuredTags
{
    [TestFixture]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Non-substitutable member", "NS1004:Argument matcher used with a non-virtual member of a class.", Justification = "By creator's design.")]
    public class StructuredTagsViewerFacadeTest : StructuredTagsTestBase
    {
        private IStructuredTagsViewerFacade m_StructuredTagsViewerFacade;
            base.SetUpBase();
            //SetupFromOtherTest();
            m_StructuredTagService = MockRepository.GenerateStub<IStructuredTagService>();
            m_NameService = MockRepository.GenerateStub<INameService>();
            m_StructuredTagService = Substitute.For<IStructuredTagService>();
            m_NameService = Substitute.For<INameService>();
            m_StructuredTagService.Stub(inv => inv.DeleteStructuredTagInstance(Arg<string>.Is.Equal(DoesNotExists))).Throw(new Exception("Tag does not exist"));
            m_StructuredTagService.Stub(
                inv => inv.DeleteStructuredTagInstance(Arg<string>.Is.NotEqual(DoesNotExists)))
                    .WhenCalled(
                        (arg) => m_StructuredTagService.Raise(x => x.TagsChanged += null, m_StructuredTagService, EventArgs.Empty));
            m_StructuredTagService
                .When(x => x.DeleteStructuredTagInstance(DoesNotExists))
                .Do(x => throw new Exception("Tag does not exist"));
            m_StructuredTagService.When(x => x.DeleteStructuredTagInstance(Arg.Is<string>(arg => arg != DoesNotExists)))
                    .Do(arg => Raise.Event());
            m_StructuredTagsViewerFacade = new StructuredTagsViewerFacade(OpcClientServiceIde, StructuredTypeService, m_StructuredTagService, m_NameService);
        }
        public void TestTagsChangedRegistration()
        {
            m_StructuredTagsViewerFacade.TagsChanged += StructuredTagsViewerFacadeOnTagsChanged;
            m_StructuredTagService.AssertWasCalled(inv => inv.TagsChanged += Arg<EventHandler>.Is.Anything);
            m_StructuredTagService.Received().TagsChanged += Arg.Any<EventHandler>();
        }
        [Test]
        
        public void TestTagsChangedDeregistration()
        {
            m_StructuredTagsViewerFacade.TagsChanged -= StructuredTagsViewerFacadeOnTagsChanged;
            m_StructuredTagService.AssertWasCalled(inv => inv.TagsChanged -= Arg<EventHandler>.Is.Anything);
            m_StructuredTagService.Received().TagsChanged -= Arg.Any<EventHandler>();
        }
        [Test]
            string newTagName = "abc";
            bool newTagAlreadyExisted = m_StructuredTagsViewerFacade.GetTags().Any(x => x.Name == newTagName);
            bool renamedTagExistedBefore = m_StructuredTagsViewerFacade.GetTags().Any(x => x.Name == tagToRename);
            m_NameService.Stub(x => x.RenameObject(Arg<object>.Is.Anything, Arg<string>.Is.Anything, Arg<string>.Is.Anything)).WhenCalled(x => ((ITag)x.Arguments[0]).Name = newTagName);
            m_NameService
                .WhenForAnyArgs(x => x.RenameObject(Arg.Any<object>(), Arg.Any<string>(), Arg.Any<string>()))
                .Do(x => ((ITag)x[0]).Name = newTagName);
            bool renamed = m_StructuredTagsViewerFacade.RenameTag(tagToRename, newTagName);
            bool renamedTagExistsAfter = m_StructuredTagsViewerFacade.GetTags().Any(x => x.Name == tagToRename);

StructuredTypeServiceTests.cs
-22
+21
/Tools/ToolsTest/StructuredTags/StructuredTypeServiceTests.cs
using Neo.ApplicationFramework.Tools.StructuredType.Model;
using Neo.ApplicationFramework.Tools.StructuredType.Services;
using Neo.ApplicationFramework.Tools.Utilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.StructuredTags
{
            TestHelper.ClearServices();
            m_ProjectManager = MockRepository.GenerateStub<IProjectManager>();
            m_Item = MockRepository.GenerateStub<IDesignerProjectItem>();
            m_ProjectItemFinder = MockRepository.GenerateStub<IProjectItemFinder>();
            m_DesignerHost = MockRepository.GenerateStub<INeoDesignerHost>();
            m_ProjectManager = Substitute.For<IProjectManager>();
            m_Item = Substitute.For<IDesignerProjectItem>();
            m_ProjectItemFinder = Substitute.For<IProjectItemFinder>();
            m_DesignerHost = Substitute.For<INeoDesignerHost>();
            m_DesignerHost.RootComponent.Returns(m_RootComponent);
            m_Item.DesignerHost.Returns(m_DesignerHost);
            m_ProjectManager.Stub(inv => inv.AddNewDesigner(Arg<Type>.Is.Anything, Arg<bool>.Is.Anything, Arg<bool>.Is.Anything, Arg<string>.Is.Anything)).
                WhenCalled(invocation =>
            m_ProjectManager.AddNewDesigner(Arg.Any<Type>(), Arg.Any<bool>(), Arg.Any<bool>(), Arg.Any<string>()).
                Returns(invocation =>
                {
                    m_RootComponent = new StructuredTypeRootComponent() { Name = invocation.Arguments[3].ToString() };
                    m_Item.Stub(inv => inv.DesignerType).Return(m_RootComponent.GetType());
                    m_Item.Stub(inv => inv.ContainedObject).Return(m_RootComponent);
                    invocation.ReturnValue = m_Item;
                    m_ProjectManager.GetEventRaiser(x => x.ProjectItemAdded += null).Raise(null, new ProjectItemFactoryEventArgs(m_Item));
                }).Return(default(DesignerProjectItem));
            m_DesignerHost.Stub(inv => inv.RootComponent).WhenCalled(inv => inv.ReturnValue = m_RootComponent).Return(m_RootComponent);
            m_Item.Stub(inv => inv.DesignerHost).Return(m_DesignerHost);
                    m_RootComponent = new StructuredTypeRootComponent() { Name = invocation[3].ToString() };
                    m_Item.DesignerType.Returns(m_RootComponent.GetType());
                    m_Item.ContainedObject.Returns(m_RootComponent);
                    Raise.EventWith(null, new ProjectItemFactoryEventArgs(m_Item));
                    return m_Item;
                });
            m_DataSourceContainer = MockRepository.GenerateStub<IDataSourceContainer>();
            m_DataSourceContainer = Substitute.For<IDataSourceContainer>();
            m_DataSourceContainer.Name = "Controller1";
            var dataSourceContainers = new ExtendedBindingList<IDataSourceContainer>();
            dataSourceContainers.Add(m_DataSourceContainer);
            var opcClientService = MockRepository.GenerateStub<IOpcClientServiceIde>();
            opcClientService.Stub(inv => inv.Controllers).Return(dataSourceContainers);
            var opcClientService = Substitute.For<IOpcClientServiceIde>();
            opcClientService.Controllers.Returns(dataSourceContainers);
            TestHelper.AddService<IOpcClientServiceCF>(opcClientService);
            TestHelper.AddService<IOpcClientServiceIde>(opcClientService);
            m_OpcClientService = opcClientService.ToILazy();
            m_GlobalController = new GlobalController();
            c.Add(m_GlobalController, StringConstants.Tags);
            m_OpcClientService.Value.Stub(inv => inv.GlobalController).Return(m_GlobalController);
            m_OpcClientService.Value.GlobalController.Returns(m_GlobalController);
            m_NameCreationService = MockRepository.GenerateStub<INameCreationService>();
            m_NameCreationService.Stub(inv => inv.IsValidName(default(string))).IgnoreArguments().Return(true);
            m_NameCreationService = Substitute.For<INameCreationService>();
            m_NameCreationService.IsValidName(Arg.Any<string>()).Returns(true);
        }
        [TearDown]

StructuredTypesViewerFacadeTests.cs
-14
+14
/Tools/ToolsTest/StructuredTags/StructuredTypesViewerFacadeTests.cs
using Neo.ApplicationFramework.Tools.StructuredTag.Facades.StructuredTypesViewer;
using Neo.ApplicationFramework.Tools.StructuredTag.Facades.StructuredTypesViewer.Private;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.StructuredTags
{
    [TestFixture]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Non-substitutable member", "NS1004:Argument matcher used with a non-virtual member of a class.", Justification = "By creator's design.")]
    public class StructuredTypesViewerFacadeTests
    {
        private IStructuredTypesViewerFacade m_StructuredTypesViewerFacade;
        public void SetUp()
        {
            m_StructuredTypeService = TestHelper.CreateAndAddServiceStub<IStructuredTypeService>();
            m_StructuredTypeService.Stub(inv => inv.GetAllTypes()).Return(GetMockedStructuredTypes());
            m_StructuredTypeService.GetAllTypes().Returns(x => GetMockedStructuredTypes());
            m_StructuredTagService = TestHelper.CreateAndAddServiceStub<IStructuredTagService>();
            m_StructuredTypesViewerFacade = new StructuredTypesViewerFacade(m_StructuredTypeService, m_StructuredTagService);
        }
            for (int i = 0; i < NumberOfTypes; i++)
            {
                var type = MockRepository.GenerateStub<IStructuredTypeRootComponent>();
                var type = Substitute.For<IStructuredTypeRootComponent>();
                type.Name = "typeWithName" + i;
                type.ControllerName = "Ctrl1";
                type.AddressDescriptor = new OpcUaStringNodeID("namespace", "identifier" + i, "browseName" + i);
                type.Stub(inv => inv.Members).Return(Enumerable.Empty<ITag>());
                type.Members.Returns(Enumerable.Empty<ITag>());
                list.Add(type);
            }
            return list;
        [Test]
        public void TestIsTypeDeletableWhenTypeIsUsedByAnyTag()
        {
            m_StructuredTagService.Stub(inv => inv.IsTypeUsedByAnyTag(Arg<string>.Is.Equal(TestType))).Return(true);
            m_StructuredTagService.Stub(inv => inv.IsTypeUsedByAnyTag(Arg<string>.Is.NotEqual(TestType))).Return(false);
            m_StructuredTagService.IsTypeUsedByAnyTag(Arg.Is(TestType)).Returns(true);
            m_StructuredTagService.IsTypeUsedByAnyTag(Arg.Is<string>(x => x != TestType)).Returns(false);
            bool result = m_StructuredTypesViewerFacade.IsTypeDeletable(TestType);
            m_StructuredTagService.AssertWasCalled(inv => inv.IsTypeUsedByAnyTag(Arg<string>.Is.Equal(TestType)));
            m_StructuredTagService.Received().IsTypeUsedByAnyTag(Arg.Is(TestType));
            Assert.IsFalse(result);
        }
        [Test]
        public void TestIsTypeDeletableWhenTypeIsUsedByNoTag()
        {
            m_StructuredTagService.Stub(inv => inv.IsTypeUsedByAnyTag(Arg<string>.Is.Equal(TestType))).Return(false);
            m_StructuredTagService.Stub(inv => inv.IsTypeUsedByAnyTag(Arg<string>.Is.NotEqual(TestType))).Return(true);
            m_StructuredTagService.IsTypeUsedByAnyTag(TestType).Returns(false, true);
            bool result = m_StructuredTypesViewerFacade.IsTypeDeletable(TestType);
            m_StructuredTagService.AssertWasCalled(inv => inv.IsTypeUsedByAnyTag(Arg<string>.Is.Equal(TestType)));
            m_StructuredTagService.Received().IsTypeUsedByAnyTag(TestType);
            Assert.IsTrue(result);
        }
        public void TestDeleteType()
        {
            m_StructuredTypesViewerFacade.DeleteType(TestType);
            m_StructuredTypeService.AssertWasCalled(inv => inv.DeleteTypes(Arg<IEnumerable<string>>.Is.Anything));
            m_StructuredTypeService.Received().DeleteTypes(Arg.Any<IEnumerable<string>>());
        }
        [Test]
        
        public void TestTypesChangedRegistration()
        {
            m_StructuredTypesViewerFacade.TypesChanged += StructuredTypesViewerFacadeOnTypesChanged;
            m_StructuredTypeService.AssertWasCalled(inv => inv.TypesChanged += Arg<EventHandler>.Is.Anything);
            m_StructuredTypeService.Received().TypesChanged += Arg.Any<EventHandler>();
        }
        [Test]
        public void TestTypesChangedDeregistration()
        {
            m_StructuredTypesViewerFacade.TypesChanged -= StructuredTypesViewerFacadeOnTypesChanged;
            m_StructuredTypeService.AssertWasCalled(inv => inv.TypesChanged -= Arg<EventHandler>.Is.Anything);
            m_StructuredTypeService.Received().TypesChanged -= Arg.Any<EventHandler>();
        }

SymbolServiceIdeTest.cs
-42
+38
/Tools/ToolsTest/Symbol/SymbolServiceIdeTest.cs
#if !VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.Drawing;
using Neo.ApplicationFramework.Tools.Build.BuildManager;
using Neo.ApplicationFramework.Tools.CrossReference;
using Neo.ApplicationFramework.Tools.Symbol.Service;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Symbol
{
        [SetUp]
        public void SetUp()
        {
            m_OpenFileDialogStub = MockRepository.GenerateStub<OpenFileDialogEx>();
            m_OpenFileDialogStub = Substitute.For<OpenFileDialogEx>();
            m_FileHelperMock = MockRepository.GenerateStub<FileHelper>();
            m_FileHelperMock.Stub(x => x.Exists(null))
                .IgnoreArguments()
                .Return(true);
            m_FileHelperMock = Substitute.For<FileHelper>();
            m_FileHelperMock.Exists(Arg.Any<string>()).Returns(true);
            m_DirectoryHelperStub = MockRepository.GenerateStub<DirectoryHelper>();
            m_DirectoryHelperStub.Stub(x => x.Exists(null))
                                 .IgnoreArguments()
                                 .Return(true);
            m_DirectoryHelperStub = Substitute.For<DirectoryHelper>();
            m_DirectoryHelperStub.Exists(Arg.Any<string>()).Returns(true);
            m_BitmapHelperStub = MockRepository.GenerateStub<BitmapHelper>();
            m_BitmapHelperStub = Substitute.For<BitmapHelper>();
            m_ProjectManagerStub = MockRepository.GenerateStub<IProjectManager>();
            m_ProjectStub = MockRepository.GenerateStub<IProject>();
            m_ProjectManagerStub = Substitute.For<IProjectManager>();
            m_ProjectStub = Substitute.For<IProject>();
            m_ProjectManagerStub.Project = m_ProjectStub;
            m_ProjectStub.FolderPath = ProjectFolderPath;
            var componentInfoFactory = MockRepository.GenerateStub<IComponentInfoFactory>();
            var componentInfoFactory = Substitute.For<IComponentInfoFactory>();
            m_TargetService = MockRepository.GenerateStub<ITargetService>();
            m_TargetService = Substitute.For<ITargetService>();
            m_SymbolServiceIde = new TestableSymbolServiceIde(
                m_ProjectManagerStub,
            m_ISymbolServiceIde = m_SymbolServiceIde;
            var symbolInfo = MockRepository.GenerateStub<ISymbolInfo>();
            var symbolInfoFactory = MockRepository.GenerateStub<SymbolInfoFactoryIde>();
            symbolInfoFactory.Stub(x => x.CreateSymbolInfo(string.Empty, string.Empty)).IgnoreArguments().Return(symbolInfo);
            var symbolInfo = Substitute.For<ISymbolInfo>();
            var symbolInfoFactory = Substitute.For<SymbolInfoFactoryIde>();
            symbolInfoFactory.CreateSymbolInfo(string.Empty, string.Empty).Returns(symbolInfo);
            m_SymbolServiceIde.SymbolInfoFactory = symbolInfoFactory;
        [Test]
        public void AddSymbolThrowsFileNotFoundExceptionWhenFileDoesNotExist()
        {
            var fileHelper = MockRepository.GenerateStub<FileHelper>();
            fileHelper.Stub(x => x.Exists(null))
                            .IgnoreArguments()
                            .Return(false);
            var fileHelper = Substitute.For<FileHelper>();
            fileHelper.Exists(Arg.Any<string>()).Returns(false);
            m_SymbolServiceIde.FileHelper = fileHelper;
            Assert.Throws<FileNotFoundException>(() => m_ISymbolServiceIde.AddSymbol("somesymbolname"));
        {
            string symbolPath = CreateSymbolPathFromSymbolName(SymbolName);
            var symbolInfo = MockRepository.GenerateStub<ISymbolInfo>();
            symbolInfo.Stub(x => x.SymbolName).Return(SymbolName);
            symbolInfo.Stub(x => x.FileName).Return(symbolPath);
            var symbolInfo = Substitute.For<ISymbolInfo>();
            symbolInfo.SymbolName.Returns(SymbolName);
            symbolInfo.FileName.Returns(symbolPath);
            var symbolInfoFactory = MockRepository.GenerateStub<SymbolInfoFactoryIde>();
            symbolInfoFactory.Stub(x => x.CreateSymbolInfo(string.Empty, string.Empty)).IgnoreArguments().Return(symbolInfo);
            var symbolInfoFactory = Substitute.For<SymbolInfoFactoryIde>();
            symbolInfoFactory.CreateSymbolInfo(Arg.Any<string>(), Arg.Any<string>()).Returns(symbolInfo);
            m_SymbolServiceIde.SymbolInfoFactory = symbolInfoFactory;
            string expectedSymbolName1 = SymbolName.ToLower();
        {
            string symbolPath = CreateSymbolPathFromSymbolName(SymbolName);
            var symbolInfo = MockRepository.GenerateStub<ISymbolInfo>();
            symbolInfo.Stub(x => x.SymbolName).Return(SymbolName);
            symbolInfo.Stub(x => x.FileName).Return(symbolPath);
            var symbolInfo = Substitute.For<ISymbolInfo>();
            symbolInfo.SymbolName.Returns(SymbolName);
            symbolInfo.FileName.Returns(symbolPath);
            var symbolInfoFactory = MockRepository.GenerateStub<SymbolInfoFactoryIde>();
            symbolInfoFactory.Stub(x => x.CreateSymbolInfo(string.Empty, string.Empty)).IgnoreArguments().Return(symbolInfo);
            var symbolInfoFactory = Substitute.For<SymbolInfoFactoryIde>();
            symbolInfoFactory.CreateSymbolInfo(Arg.Any<string>(), Arg.Any<string>()).Returns(symbolInfo);
            m_SymbolServiceIde.SymbolInfoFactory = symbolInfoFactory;
            string expectedSymbolName = SymbolName.ToLower();
            var bitmapHelper = MockRepository.GenerateStub<BitmapHelperStub>();
            bitmapHelper.Stub(x => x.IsSameBinaryFile(null, null))
                        .IgnoreArguments()
                        .Return(true);
            var bitmapHelper = Substitute.For<BitmapHelperStub>();
            bitmapHelper.IsSameBinaryFile(Arg.Any<string>(), Arg.Any<string>()).Returns(true);
            m_SymbolServiceIde.BitmapHelper = bitmapHelper;
            m_ISymbolServiceIde.AddSymbol(symbolPath);
            string symbolPath = CreateSymbolPathFromSymbolName(SymbolName);
            string expectedSymbolName = SymbolName.ToLower();
            m_OpenFileDialogStub.Stub(x => x.FileNames).Return(new [] { symbolPath });
            m_OpenFileDialogStub.Stub(x => x.ShowDialog()).Return(DialogResult.OK);
            string[] fileNames = new string[] { symbolPath };
            m_OpenFileDialogStub.FileNames.Returns(fileNames);
            m_OpenFileDialogStub.ShowDialog().Returns(DialogResult.OK);
            string symbolName = m_ISymbolServiceIde.SelectNewSymbolFromFile();
        public void FindUsedSymbolsReturnsButtonSymbol()
        {
            string symbolName = "buttonsymbol";
            var button = MockRepository.GenerateStub<ApplicationFramework.Controls.Button>();
            button.Stub(x => x.SymbolIntervals).Return(new SymbolIntervalList());
            var button = Substitute.For<ApplicationFramework.Controls.Button>();
            button.SymbolIntervals.Returns(new SymbolIntervalList());
            var symbolDictionary = (Dictionary<string, ISymbolInfo>)TestHelper.GetInstanceField(typeof(SymbolServiceIde), m_SymbolServiceIde, "m_SymbolDictionary");
            symbolDictionary.Add("buttonsymbol", new SymbolInfo(true));
        public void RemoveUnusedSymbolsTest()
        {
            var projectManager = TestHelper.AddServiceStub<IProjectManager>();
            projectManager.Stub(x => x.IsProjectDirty).Return(false);
            projectManager.IsProjectDirty.Returns(false);
            var symbolDictionary = (Dictionary<string, ISymbolInfo>)TestHelper.GetInstanceField(typeof(SymbolServiceIde), m_SymbolServiceIde, "m_SymbolDictionary");
            m_SymbolServiceIde.AddSymbol("Used", new SymbolInfo(true));
            crossReferenceItems.Add(new SymbolCrossReferenceItem(string.Empty, string.Empty, "Used", 10, 10, false));
            var crossReferenceServiceStub = TestHelper.AddServiceStub<ICrossReferenceQueryService>();
            crossReferenceServiceStub.Expect(crossRefSvc => crossRefSvc.GetSymbols()).Return(crossReferenceItems);
            crossReferenceServiceStub.GetSymbols().Returns(crossReferenceItems);
            m_ISymbolServiceIde.FindAndRemoveUnusedSymbols();
        #endregion
    }
}
#endif

SystemDataItemConverterTest.cs
+2
/Tools/ToolsTest/SystemTag/SystemDataItemConverterTest.cs
#if !VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.ComponentModel;
        }
    }
}
#endif

SystemTagServiceCFTest.cs
-29
+14
/Tools/ToolsTest/SystemTag/SystemTagServiceCFTest.cs
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.OpcClient;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.SystemTag
{
    [TestFixture]
    public class SystemTagServiceCFTest
    {
        private MockRepository m_MockRepository;
        private IList<IDataItemBase> m_DataItems;
        [SetUp]
        public void Setup()
        {
            m_DataItems = new List<IDataItemBase>();
            m_MockRepository = new MockRepository();
            IToolManager toolManager = MockRepository.GenerateStub<IToolManager>();
            toolManager.Stub(tool => tool.Runtime).Return(true);
            IToolManager toolManager = Substitute.For<IToolManager>();
            toolManager.Runtime.Returns(true);
            TestHelper.AddService(toolManager);
        }
        [TearDown]
        public void TearDown()
        {
            m_MockRepository.VerifyAll();
            TestHelper.ClearServices();
        }
        private void SetupServiceStubs(bool expectedLookups = false, int numberOfDataItemCacheLookupsExpected = -1)
        private void SetupServiceStubs()
        {
            IGlobalController globalControllerStub = m_MockRepository.StrictMock<IGlobalController>();
            IGlobalController globalControllerStub = Substitute.For<IGlobalController>();
            if (expectedLookups)
                globalControllerStub.Expect(controller => controller.DataItemBases).Return(new ReadOnlyCollection<IDataItemBase>(m_DataItems)).Repeat.Times(numberOfDataItemCacheLookupsExpected);
            else
                globalControllerStub.Stub(controller => controller.DataItemBases).Return(new ReadOnlyCollection<IDataItemBase>(m_DataItems));
            globalControllerStub.DataItemBases.Returns(new ReadOnlyCollection<IDataItemBase>(m_DataItems));
            globalControllerStub.Stub(controller => controller.GetSystemTags(Arg<ISystemTagInfo>.Is.Anything))
                .WhenCalled(
                    invocation =>
                    {
                        invocation.ReturnValue =
                            globalControllerStub.DataItemBases.OfType<ISystemDataItem>().Where(
                                item => item.SystemTagInfoName == ((ISystemTagInfo)invocation.Arguments.First()).Name
                            ).ToArray();
                    }
                ).Return(Array.Empty<ISystemDataItem>()); // only so that Rhino Mocks understands the return type...
            globalControllerStub.GetSystemTags(Arg.Any<ISystemTagInfo>())
                .Returns(x => 
                    globalControllerStub.DataItemBases.OfType<ISystemDataItem>()
                        .Where(item => item.SystemTagInfoName == ((ISystemTagInfo)x[0]).Name).ToArray());
            IOpcClientServiceCF opcClientServiceStub = MockRepository.GenerateStub<IOpcClientServiceCF>();
            opcClientServiceStub.Stub(client => client.GlobalController).Return(globalControllerStub);
            IOpcClientServiceCF opcClientServiceStub = Substitute.For<IOpcClientServiceCF>();
            opcClientServiceStub.GlobalController.Returns(globalControllerStub);
            TestHelper.AddService(opcClientServiceStub);
            m_MockRepository.ReplayAll();
        }
    
        [Test]
        public void CachesCallsToGlobalControllerWithSameSystemTagInfo()
        {
            SetupServiceStubs(true, 1);
            SetupServiceStubs();
            ISystemTagInfo systemTagInfo = new SystemTagInfo("dummy system info", "", "", BEDATATYPE.DT_INTEGER4, AccessRights.Read);
        [Test]
        public void MakesMultipleCallsToGlobalControllerWithMultipleSameSystemTagInfoButCachesThem()
        {
            SetupServiceStubs(true, 2);
            SetupServiceStubs();
            ISystemTagInfo firstSystemTagInfo = new SystemTagInfo("dummy system info1", "", "", BEDATATYPE.DT_INTEGER4, AccessRights.Read);
            ISystemTagInfo secondSystemTagInfo = new SystemTagInfo("dummy system info2", "", "", BEDATATYPE.DT_INTEGER2, AccessRights.Read);

SystemTagServiceIdeTest.cs
-7
+9
/Tools/ToolsTest/SystemTag/SystemTagServiceIdeTest.cs
#if !VNEXT_TARGET
using System;
using System.Linq;
using Core.Api.DataSource;
using Neo.ApplicationFramework.Tools.OpcClient;
using Neo.ApplicationFramework.Tools.SystemTag.Features;
using Neo.ApplicationFramework.Tools.TestHelpers.Fixtures;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.SystemTag
{
        {
            m_OpcClientServiceStub = TestHelper.CreateAndAddServiceStub<IOpcClientServiceIde>();
            m_FeatureSecurityServiceIdeStub = TestHelper.CreateAndAddServiceStub<IFeatureSecurityServiceIde>();
            m_OpcClientServiceStub.Stub(x => x.AddNewDataItem<SystemDataItem>(string.Empty, string.Empty, null)).IgnoreArguments().Return(new SystemDataItem());
            m_FeatureSecurityServiceIdeStub.Stub(x => x.IsActivated<SystemTagFeature>()).Return(true);
            m_OpcClientServiceStub.AddNewDataItem<SystemDataItem>(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<IControllerBase>())
                .Returns(new SystemDataItem());
            m_FeatureSecurityServiceIdeStub.IsActivated<SystemTagFeature>().Returns(true);
            TestHelper.CreateAndAddServiceStub<ITargetService>();
            TestHelper.CreateAndAddServiceStub<IProjectManager>();
            TestHelper.CreateAndAddServiceStub<IEventBrokerService>();
            string defaultName = "Some Display Name";
            string defaultValidName = "SystemTagSomeDisplayName";
            m_OpcClientServiceStub.BackToRecord();
            m_OpcClientServiceStub.Stub(x => x.AddNewDataItem<SystemDataItem>(Arg.Is(defaultValidName), Arg<string>.Is.Anything, Arg<IControllerBase>.Is.Anything)).Return(new SystemDataItem() { Name = defaultValidName });
            m_OpcClientServiceStub.Stub(x => x.GlobalController).Return(null);
            m_OpcClientServiceStub.Replay();
            m_OpcClientServiceStub.AddNewDataItem<SystemDataItem>(Arg.Is(defaultValidName), Arg.Any<string>(), Arg.Any<IControllerBase>())
                .Returns(new SystemDataItem() { Name = defaultValidName });
            m_OpcClientServiceStub.GlobalController.Returns(x => null);
            SystemTagInfo systemTagInfo = new SystemTagInfo("Some Other Display Name", defaultName, "some description", "some group", BEDATATYPE.DT_DATETIME, 1, AccessRights.Write, DateTime.Parse("1901-01-01 01:01:01"));
        }
    }
}
#endif

TagUsageValidatorTest.cs
-27
+21
/Tools/ToolsTest/Tag/TagUsageValidatorTest.cs
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using Core.Api.CrossReference;
using Neo.ApplicationFramework.Common.CrossReference;
using Neo.ApplicationFramework.CrossReference;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
namespace Neo.ApplicationFramework.Tools.Tag
{
        [SetUp]
        public void SetUp()
        {
            m_CrossReferenceQueryServiceStub = MockRepository.GenerateStub<ICrossReferenceQueryService>();
            m_ProjectManagerStub = MockRepository.GenerateStub<IProjectManager>();
            m_ErrorListServiceStub = MockRepository.GenerateStub<IErrorListService>();
            m_ProjectStub = MockRepository.GenerateStub<IProject>();
            m_ScriptOwnerMock = MockRepository.GenerateMock<IProjectItem, IScriptOwner>();
            m_CrossReferenceQueryServiceStub = Substitute.For<ICrossReferenceQueryService>();
            m_ProjectManagerStub = Substitute.For<IProjectManager>();
            m_ErrorListServiceStub = Substitute.For<IErrorListService>();
            m_ProjectStub = Substitute.For<IProject>();
            m_ScriptOwnerMock = Substitute.For<IProjectItem, IScriptOwner>();
            m_ValidateWarnings = new List<string>();
            m_ErrorListServiceStub.Stub(x => x.Add(Arg<CompilerError>.Is.Anything))
                .WhenCalled(x => m_ValidateWarnings.Add(((CompilerError)x.Arguments[0]).ErrorText));
            m_ErrorListServiceStub.WhenForAnyArgs(x => x.Add(Arg.Any<CompilerError>()))
                .Do(y => m_ValidateWarnings.Add(((CompilerError)y[0]).ErrorText));
            string[] tagNames =
            {
                "Tags.Tag1", "Tags.Tag2", "Tags.Tag3", "Tags.Tag4"
            };
            m_CrossReferenceQueryServiceStub.Stub(
                    x => x.GetReferences<ICrossReferenceItem>(
                        Arg<string[]>.Is.Equal(
                            new[]
                            {
                                "Script"
                            })))
                .Return(
            m_CrossReferenceQueryServiceStub.GetReferences<ICrossReferenceItem>(new[] { "Script" })
                .Returns(
                    Enumerable.Range(0, tagNames.Length).Select(
                        i => new CrossReferenceItem
                        {
            m_MainProjectStub = new[]
            {
                TestHelper.CreateAndAddServiceMock<IProjectItem>()
                TestHelper.CreateAndAddServiceStub<IProjectItem>()
            };
            m_MainProjectStub[0].Stub(x => x.ProjectItems).Return(new[]
            m_MainProjectStub[0].ProjectItems.Returns(new[]
            {
                m_ScriptOwnerMock
            });
            m_ProjectStub.Stub(x => x.ProjectItems).Return(m_MainProjectStub);
            m_ProjectStub.ProjectItems.Returns(m_MainProjectStub);
            m_ProjectManagerStub.Project = m_ProjectStub;
        }
        [Test]
        public void NoUsageFoundTest()
        {
            m_ScriptOwnerMock.Stub(scriptOwner => ((IScriptOwner)scriptOwner).ScriptText).Return(@"
            ((IScriptOwner)m_ScriptOwnerMock).ScriptText.Returns(@"
// Script block without Tag variables
public void SomeMethod()
{
            var tagValidator = new TagUsageValidator(m_ProjectManagerStub, m_CrossReferenceQueryServiceStub.ToILazy(), m_ErrorListServiceStub.ToILazy());
            Assert.That(tagValidator.Validate(), Is.True);
            m_ErrorListServiceStub.AssertWasNotCalled(x => x.Add(Arg<CompilerError>.Is.Anything));
            m_ErrorListServiceStub.DidNotReceiveWithAnyArgs().Add(Arg.Any<CompilerError>());
        }
        [Test]
        public void AllOperandsTagUsageTest()
        {
            m_ScriptOwnerMock.Stub(scriptOwner => ((IScriptOwner)scriptOwner).ScriptText).Return(@"
            ((IScriptOwner)m_ScriptOwnerMock).ScriptText.Returns(@"
// Script block with Tag variables
public void SomeMethod()
{
        [Test]
        public void DifferentCodeFormattingTest()
        {
            m_ScriptOwnerMock.Stub(scriptOwner => ((IScriptOwner)scriptOwner).ScriptText).Return(@"
            ((IScriptOwner)m_ScriptOwnerMock).ScriptText.Returns(@"
// Script block with different code formatting
public void SomeMethod()
{

TerminalManagerTest.cs
-4
+5
/Tools/ToolsTest/Terminal/TerminalManagerTest.cs
#if !VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using Core.Api.Application;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Terminal
{
        [SetUp]
        public void SetUp()
        {
            ICoreApplication coreApplication = MockRepository.GenerateMock<ICoreApplication>();
            ICoreApplication coreApplication = Substitute.For<ICoreApplication>();
            const string startupPath = "./";
            Directory.CreateDirectory(startupPath);
            coreApplication.Stub(inv => inv.StartupPath).Return(startupPath);
            coreApplication.StartupPath.Returns(startupPath);
            TestHelper.AddService<ICoreApplication>(coreApplication);
            m_Manager = new TerminalManager();
        }
    }
}
#endif

TerminalTest.cs
-7
+51
/Tools/ToolsTest/Terminal/TerminalTest.cs
using System.IO;
using Core.Api.Application;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Terminal
{
    public class TerminalTest
    {
        private const string TestDirectory = "TerminalTestDirectory";
        private const string TerminalFileName = "X2marine15HB.xml";
        private const string SchemaFileName = "Terminal.xsd";
#if VNEXT_TARGET
        private const string TerminalFileName = "X2plusPro7.xml";
#else
        private const string TerminalFileName = "X2marine15HB.xml"; 
#endif
        private Terminal m_Terminal;
        private string m_TerminalTestFolder;
        [SetUp]
        public void SetUp()
        {
            ICoreApplication coreApplication = MockRepository.GenerateMock<ICoreApplication>();
            ICoreApplication coreApplication = Substitute.For<ICoreApplication>();
            const string startupPath = "./";
            Directory.CreateDirectory(startupPath);
            coreApplication.Stub(inv => inv.StartupPath).Return(startupPath);
            coreApplication.StartupPath.Returns(startupPath);
            TestHelper.AddService<ICoreApplication>(coreApplication);
            m_Terminal = CreateTerminal(TerminalFileName);
            DeleteTerminalTestFolder();
        }
#if VNEXT_TARGET
        [Test]
        public void PropertyTests()
        {
            Assert.True(m_Terminal.Name.Equals("X2+ pro 7"));
            Assert.True(m_Terminal.PanelBaseName.Equals("X2pro7"));
            Assert.True(m_Terminal.Platform.Equals(Core.Api.Platform.TargetPlatform.WindowsCE));
            Assert.True(m_Terminal.PlatformVersion.Equals(Core.Api.Platform.TargetPlatformVersion.CE8));
            Assert.True(m_Terminal.CpuArchitecture.Equals(Core.Api.DI.PlatformFactory.CpuArchitecture.Arm64));
            Assert.True(m_Terminal.SupportRotate);
            Assert.False(m_Terminal.SupportDipSwitch);
            Assert.True(m_Terminal.SupportSerialNumber);
            Assert.True(m_Terminal.SupportFlashLifeTimeInfo);
            Assert.True(m_Terminal.TimeoutForTransfer.Equals(100));
            Assert.False(m_Terminal.IsKeyPanel);
            Assert.True(m_Terminal.IsPanel);
            Assert.False(m_Terminal.IsPC);
            Assert.False(m_Terminal.IsDeprecated);
            Assert.True(m_Terminal.ItemHeightScaleFactor.Equals(1));
            Assert.True(m_Terminal.ItemWidthScaleFactor.Equals(1));
            Assert.True(m_Terminal.ImageHeight.Equals(776));
            Assert.True(m_Terminal.ImageWidth.Equals(1111));
            Assert.True(m_Terminal.DefaultKeyboardLayout.Equals("US"));
            string ethernetAdapterName;
            m_Terminal.EthernetAdapterNames.TryGetValue(1, out ethernetAdapterName);
            Assert.True(ethernetAdapterName != null && ethernetAdapterName.Equals("ENET1"));
            Assert.True(m_Terminal.NumberOfCpuCores.Equals(1));
        }
#else
        [Test]
        public void PropertyTests()
        {
            Assert.True(m_Terminal.NumberOfCpuCores.Equals(4));
        }
#endif
        [Test]
        public void GetParameterTest()
        private Terminal CreateTerminal(string terminalFilename)
        {
            var terminal = MockRepository.GenerateStub<Terminal>();
            terminal.Stub(term => term.DirectoryPath).Return(m_TerminalTestFolder);
            var terminal = Substitute.For<Terminal>();
            terminal.DirectoryPath.Returns(m_TerminalTestFolder);
            terminal.FilePath = terminalFilename;
            return terminal;
        }
        private void CopyTerminalFiles()
        {
            // copy the terminal file
#if VNEXT_TARGET
            string terminalFolder = System.AppDomain.CurrentDomain.BaseDirectory.TrimEnd(@"\".ToCharArray()) + @"..\..\..\..\..\..\..\Brands\vNext\Terminals";
#else
            string terminalFolder = System.AppDomain.CurrentDomain.BaseDirectory.TrimEnd(@"\".ToCharArray()) + @"..\..\..\..\..\Brands\iX\Terminals";
#endif
            string terminalFile = Path.Combine(terminalFolder, TerminalFileName);
            File.Copy(terminalFile, Path.Combine(m_TerminalTestFolder, TerminalFileName), true);
            const string solutionConfig = "Release";
#endif
#if VNEXT_TARGET
            string schemaFolder = System.AppDomain.CurrentDomain.BaseDirectory.TrimEnd(@"\".ToCharArray()) + "..\\..\\..\\..\\..\\..\\..\\Output\\" + solutionConfig +
                                  "\\Resources\\Terminals";
#else
            string schemaFolder = System.AppDomain.CurrentDomain.BaseDirectory.TrimEnd(@"\".ToCharArray()) + "..\\..\\..\\..\\..\\Output\\" + solutionConfig +
                                  "\\Resources\\Terminals";
#endif
            string schemaFile = Path.Combine(schemaFolder, SchemaFileName);
            File.Copy(schemaFile, Path.Combine(m_TerminalTestFolder, SchemaFileName));
        }

CurveDataCacheManagerTest.cs
-9
+9
/Tools/ToolsTest/TrendViewer/CurveDataCacheManagerTest.cs
using Core.Api.GlobalReference;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.TrendViewer
{
        [SetUp]
        public void SetUp()
        {
            m_DataSourceOne = MockRepository.GenerateStub<IValue>();
            m_DataSourceTwo = MockRepository.GenerateStub<IValue>();
            m_DataSourceThree = MockRepository.GenerateStub<IValue>();
            m_DataSourceOne = Substitute.For<IValue>();
            m_DataSourceTwo = Substitute.For<IValue>();
            m_DataSourceThree = Substitute.For<IValue>();
            AddServices();
        private void AddServices()
        {
            m_GlobalReferenceService = MockRepository.GenerateStub<IGlobalReferenceService>();
            //m_GlobalReferenceService.Stub(x => x.GetObject(Arg<string>.Is.Anything)).Return(valueStub);
            m_GlobalReferenceService.Stub(x => x.GetObject<IValue>(DataSourceNameOne)).Return(m_DataSourceOne);
            m_GlobalReferenceService.Stub(x => x.GetObject<IValue>(DataSourceNameTwo)).Return(m_DataSourceTwo);
            m_GlobalReferenceService.Stub(x => x.GetObject<IValue>(DataSourceNameThree)).Return(m_DataSourceThree);
            m_GlobalReferenceService = Substitute.For<IGlobalReferenceService>();
            //m_GlobalReferenceService.GetObject(Arg<string>()).Returns(valueStub);
            m_GlobalReferenceService.GetObject<IValue>(DataSourceNameOne).Returns(m_DataSourceOne);
            m_GlobalReferenceService.GetObject<IValue>(DataSourceNameTwo).Returns(m_DataSourceTwo);
            m_GlobalReferenceService.GetObject<IValue>(DataSourceNameThree).Returns(m_DataSourceThree);
            TestHelper.ClearServices();
            TestHelper.AddService(m_GlobalReferenceService);

TrendDataServiceCFTest.cs
-6
+6
/Tools/ToolsTest/TrendViewer/TrendDataServiceCFTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.TestUtilities;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.TrendViewer
{
        private void AddServices()
        {
            m_GlobalReferenceService = MockRepository.GenerateStub<IGlobalReferenceService>();
            m_GlobalReferenceService.Stub(x => x.GetObjects<IDataLogger>()).Return(new IDataLogger[0]);
            m_GlobalReferenceService = Substitute.For<IGlobalReferenceService>();
            m_GlobalReferenceService.GetObjects<IDataLogger>().Returns(new IDataLogger[0]);
            m_FeatureSecurityService = MockRepository.GenerateStub<IFeatureSecurityService>();
            m_FeatureSecurityService = Substitute.For<IFeatureSecurityService>();
            var dateTimeEditService = MockRepository.GenerateStub<IDateTimeEditService>();
            dateTimeEditService.Stub(x => x.LocalTime).Return(DateTime.Now);
            var dateTimeEditService = Substitute.For<IDateTimeEditService>();
            dateTimeEditService.LocalTime.Returns(DateTime.Now);
            TestHelper.ClearServices();
            TestHelper.AddService(m_GlobalReferenceService);

TrendViewerToolIdeTest.cs
+2
/Tools/ToolsTest/TrendViewer/TrendViewerToolIdeTest.cs
#if !VNEXT_TARGET
using System;
using System.Collections.Generic;
using System.Linq;
        }
    }
}
#endif

TrendViewerValidatorTest.cs
-17
+12
/Tools/ToolsTest/TrendViewer/TrendViewerValidatorTest.cs
#if !VNEXT_TARGET
using Core.Api.CrossReference;
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Resources.Texts;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.TrendViewer.Validation;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
using System;
using System.Collections.Generic;
        public void NoTrendViewersYieldsNoBuildWarning()
        {
            //ARRANGE
            m_CrossReferenceService.Stub(x => x.GetReferences<ITrendViewerCrossReferenceItem>()).Return(new ITrendViewerCrossReferenceItem[0]);
            m_CrossReferenceService.GetReferences<ITrendViewerCrossReferenceItem>().Returns(new ITrendViewerCrossReferenceItem[0]);
            //ACT
            m_TrendViewerValidator.Validate();
        public void OneTrendViewerWithNoCacheYieldsNoBuildWarning()
        {
            //ARRANGE
            m_CrossReferenceService.Stub(x => x.GetReferences<ITrendViewerCrossReferenceItem>()).Return(new List<ITrendViewerCrossReferenceItem>()
            {
                GetTrendViewerWithNoCache()
            }.ToArray());
            var trendViewerCrossReferenceItem = new ITrendViewerCrossReferenceItem[] { GetTrendViewerWithNoCache() };
            m_CrossReferenceService.GetReferences<ITrendViewerCrossReferenceItem>().Returns(trendViewerCrossReferenceItem);
            //ACT
            m_TrendViewerValidator.Validate();
        public void OneTrendViewerWithCacheYieldsOneBuildWarning()
        {
            //ARRANGE
            m_CrossReferenceService.Stub(x => x.GetReferences<ITrendViewerCrossReferenceItem>()).Return(new List<ITrendViewerCrossReferenceItem>()
            {
                GetTrendViewerWithCache()
            }.ToArray());
            var trendViewerCrossReferenceItem = new ITrendViewerCrossReferenceItem[] { GetTrendViewerWithCache() };
            m_CrossReferenceService.GetReferences<ITrendViewerCrossReferenceItem>().Returns(trendViewerCrossReferenceItem);
            //ACT
            m_TrendViewerValidator.Validate();
        public void TwoTrendViewersWithCacheYieldsOneBuildWarning()
        {
            //ARRANGE
            m_CrossReferenceService.Stub(x => x.GetReferences<ITrendViewerCrossReferenceItem>()).Return(new List<ITrendViewerCrossReferenceItem>()
            {
                GetTrendViewerWithCache(),
                GetTrendViewerWithCache()
            }.ToArray());
            var trendViewerCrossReferenceItem = new ITrendViewerCrossReferenceItem[] { GetTrendViewerWithCache(), GetTrendViewerWithCache() };
            m_CrossReferenceService.GetReferences<ITrendViewerCrossReferenceItem>().Returns(trendViewerCrossReferenceItem);
            //ACT
            m_TrendViewerValidator.Validate();
        private ITrendViewerCrossReferenceItem GetTrendViewerStub()
        {
            return MockRepository.GenerateStub<ITrendViewerCrossReferenceItem>();
            return Substitute.For<ITrendViewerCrossReferenceItem>();
        }
        private void AddServices()
            m_CrossReferenceService = TestHelper.CreateAndAddServiceStub<ICrossReferenceService>();
            m_ErrorListService = TestHelper.CreateAndAddServiceStub<IErrorListService>();
            m_ErrorListService.Stub(x => x.AddNewCompilerError(m_ErrorMessage, true)).WhenCalled(x => m_ValidateWarnings.Add(m_ErrorMessage));
            m_ErrorListService.When(x => x.AddNewCompilerError(m_ErrorMessage, true)).Do(y => m_ValidateWarnings.Add(m_ErrorMessage));
        }
    }
}
#endif

TypeListServiceTest.cs
-13
+13
/Tools/ToolsTest/TypeList/TypeListServiceTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.vNext.Gaps;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
using System;
namespace Neo.ApplicationFramework.Tools.TypeList
        [SetUp]
        public void Setup()
        {
            IDesignerMetadata designerMetadataStub = MockRepository.GenerateStub<IDesignerMetadata>();
            m_DesignerInfoStub = MockRepository.GenerateStub<IDesignerInfo>();
            m_DesignerInfoStub.Stub(x => x.Metadata).Return(designerMetadataStub);
            IDesignerMetadata designerMetadataStub = Substitute.For<IDesignerMetadata>();
            m_DesignerInfoStub = Substitute.For<IDesignerInfo>();
            m_DesignerInfoStub.Metadata.Returns(designerMetadataStub);
            m_ImportProductSettingsStub = MockRepository.GenerateStub<IImportProductSettings>();
            m_FileSettingsServiceIde = MockRepository.GenerateMock<IFileSettingsServiceIde>();
            m_FileSettingsServiceIde.Expect(i => i.CommonApplicationDataFolder).Return(".");
            m_ImportProductSettingsStub = Substitute.For<IImportProductSettings>();
            m_FileSettingsServiceIde = Substitute.For<IFileSettingsServiceIde>();
            m_FileSettingsServiceIde.CommonApplicationDataFolder.Returns(".");
            ServiceContainerCF.Instance.AddService(typeof(IFileSettingsServiceIde), m_FileSettingsServiceIde);
            var gapService = MockRepository.GenerateStub<IGapService>();
            gapService.Stub(x => x.IsSubjectConsideredGap(Arg<Type>.Is.Anything)).Return(false);
            var gapService = Substitute.For<IGapService>();
            gapService.IsSubjectConsideredGap(Arg.Any<Type>()).Returns(false);
            ServiceContainerCF.Instance.AddService<IGapService>(gapService);
        }
        public void IsDesignerTypeAddable_IsAddable_ReturnsTrue(Type type)
        {
            // ARRANGE
            var typeListService = (ITypeListService)MockRepository.GeneratePartialMock<TypeListService>(m_ImportProductSettingsStub);
            typeListService.Stub(x => x.GetDesignerInfo(Arg<Type>.Is.Anything)).Return(m_DesignerInfoStub);
            var typeListService = (ITypeListService)Substitute.For<TypeListService>(m_ImportProductSettingsStub);
            typeListService.GetDesignerInfo(Arg.Any<Type>()).Returns(m_DesignerInfoStub);
            // ACT, ASSERT
            Assert.IsTrue(typeListService.IsDesignerTypeAddable(type));
        public void IsDesignerTypeAddable_IsNotAddable_ReturnsFalse(Type type)
        {
            // ARRANGE
            var typeListService = (ITypeListService)MockRepository.GeneratePartialMock<TypeListService>(m_ImportProductSettingsStub);
            typeListService.Stub(x => x.GetDesignerInfo(Arg<Type>.Is.Anything)).Return(m_DesignerInfoStub);
            var typeListService = (ITypeListService)Substitute.For<TypeListService>(m_ImportProductSettingsStub);
            typeListService.GetDesignerInfo(Arg.Any<Type>()).Returns(m_DesignerInfoStub);
            // ACT
            typeListService.RegisterNonAddableDesignerType(typeof(Reporting.Reports));

ParentUndoUnitTest.cs
-19
+15
/Tools/ToolsTest/UndoManager/ParentUndoUnitTest.cs
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.UndoManager
{
        {
            m_ParentUndoUnit = new ParentUndoUnit("", null);
            m_UndoUnitMock = MockRepository.GenerateMock<IUndoUnit>();
            m_UndoUnitMockTwo = MockRepository.GenerateMock<IUndoUnit>();
            m_UndoUnitMock = Substitute.For<IUndoUnit>();
            m_UndoUnitMockTwo = Substitute.For<IUndoUnit>();
        }
        [Test]
        [Test]
        public void UndoOnTwoUnits()
        {
            m_UndoUnitMock.Stub(x => x.ShouldBeAddedToUndoStack(null)).Return(true);
            m_UndoUnitMockTwo.Stub(x => x.ShouldBeAddedToUndoStack(m_UndoUnitMock)).Return(true);
            m_UndoUnitMock.ShouldBeAddedToUndoStack(null).Returns(true);
            m_UndoUnitMockTwo.ShouldBeAddedToUndoStack(m_UndoUnitMock).Returns(true);
            m_ParentUndoUnit.RegisterUndoUnit(m_UndoUnitMock);
            m_ParentUndoUnit.RegisterUndoUnit(m_UndoUnitMockTwo);
            //Now check that both undo units are undone on one call to Undo
            m_UndoUnitMock.Expect(x => x.Undo());
            m_UndoUnitMockTwo.Expect(x => x.Undo());
            m_ParentUndoUnit.Undo();
            m_UndoUnitMock.VerifyAllExpectations();
            m_UndoUnitMockTwo.VerifyAllExpectations();
            m_UndoUnitMock.Received().Undo();
            m_UndoUnitMockTwo.Received().Undo();
        }
        [Test]
        public void UndoIsNotRegisteredTwiceForSameUndoType()
        {
            m_UndoUnitMock.Stub(x => x.ShouldBeAddedToUndoStack(null)).Return(true);
            m_UndoUnitMockTwo.Stub(x => x.ShouldBeAddedToUndoStack(m_UndoUnitMock)).Return(false);
            m_UndoUnitMock.ShouldBeAddedToUndoStack(null).Returns(true);
            m_UndoUnitMockTwo.ShouldBeAddedToUndoStack(m_UndoUnitMock).Returns(false);
            m_ParentUndoUnit.RegisterUndoUnit(m_UndoUnitMock);
            m_ParentUndoUnit.RegisterUndoUnit(m_UndoUnitMockTwo);
        [Test]
        public void UndoUnitsAreMergedForMergableUndoUnits()
        {
            m_UndoUnitMock.Stub(x => x.ShouldBeAddedToUndoStack(null)).Return(true);
            m_UndoUnitMockTwo.Stub(x => x.ShouldBeAddedToUndoStack(m_UndoUnitMock)).Return(true);
            m_UndoUnitMock.ShouldBeAddedToUndoStack(null).Returns(true);
            m_UndoUnitMockTwo.ShouldBeAddedToUndoStack(m_UndoUnitMock).Returns(true);
            m_UndoUnitMockTwo.Stub(x => x.Merge(null)).IgnoreArguments().Return(true);
            m_UndoUnitMockTwo.Merge(Arg.Any<IUndoUnit>()).Returns(true);
            m_ParentUndoUnit.RegisterUndoUnit(m_UndoUnitMock);
            m_ParentUndoUnit.RegisterUndoUnit(m_UndoUnitMockTwo);
        [Test]
        public void UndoUnitsAreNotMergedForUnmergableUndoUnits()
        {
            m_UndoUnitMock.Stub(x => x.ShouldBeAddedToUndoStack(null)).Return(true);
            m_UndoUnitMockTwo.Stub(x => x.ShouldBeAddedToUndoStack(m_UndoUnitMock)).Return(true);
            m_UndoUnitMock.ShouldBeAddedToUndoStack(null).Returns(true);
            m_UndoUnitMockTwo.ShouldBeAddedToUndoStack(m_UndoUnitMock).Returns(true);
            m_UndoUnitMockTwo.Stub(x => x.Merge(null)).IgnoreArguments().Return(false);
            m_UndoUnitMockTwo.Merge(Arg.Any<IUndoUnit>()).Returns(false);
            m_ParentUndoUnit.RegisterUndoUnit(m_UndoUnitMock);
            m_ParentUndoUnit.RegisterUndoUnit(m_UndoUnitMockTwo);

UndoManagerTest.cs
-2
+2
/Tools/ToolsTest/UndoManager/UndoManagerTest.cs
using Neo.ApplicationFramework.Interfaces;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.UndoManager
{
        {
            m_UndoManager = new UndoManager();
            m_UndoServiceMock = MockRepository.GenerateStub<IUndoService>();
            m_UndoServiceMock = Substitute.For<IUndoService>();
        }
        [Test]

UndoServiceTest.cs
-40
+26
/Tools/ToolsTest/UndoManager/UndoServiceTest.cs
using Neo.ApplicationFramework.Interfaces;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.UndoManager
{
            m_UndoServiceInstance = new UndoService();
            m_UndoService = (IUndoService)m_UndoServiceInstance;
            m_UndoUnitMock = MockRepository.GenerateMock<IUndoUnit>();
            m_UndoUnitMockTwo = MockRepository.GenerateMock<IUndoUnit>();
            m_RedoUnitMock = MockRepository.GenerateMock<IUndoUnit>();
            m_UndoUnitMock = Substitute.For<IUndoUnit>();
            m_UndoUnitMockTwo = Substitute.For<IUndoUnit>();
            m_RedoUnitMock = Substitute.For<IUndoUnit>();
            Assert.IsNotNull(m_UndoUnitMock, "The creation of the Mock failed somehow");
            Assert.IsNotNull(m_UndoUnitMockTwo, "The creation of the Mock failed somehow");
        }
        [Test]
        public void Create()
        {
        public void IsUndoCalledOnUndoUnit()
        {
            m_UndoService.RegisterUndoUnit(m_UndoUnitMock);
            m_UndoUnitMock.Expect(x => x.Undo());
            m_UndoService.Undo();
            m_UndoUnitMock.VerifyAllExpectations();
            Assert.IsFalse(m_UndoService.IsUndoAvailable(), "Undo should not be enabled");
            m_UndoUnitMock.Received().Undo();
        }
        [Test]
        {
            string undoDescription = "UndoDescription";
            m_UndoService.RegisterUndoUnit(m_UndoUnitMock);
            m_UndoUnitMock.Stub(x => x.UndoDescription).Return(undoDescription);
            m_UndoUnitMock.UndoDescription.Returns(undoDescription);
            Assert.AreEqual(undoDescription, m_UndoService.UndoDescription);
            Assert.IsTrue(m_UndoService.IsUndoAvailable(), "Undo should still enabled");
        public void AddUndoUnitQueryReturnsTrue()
        {
            m_UndoService.RegisterUndoUnit(m_UndoUnitMock);
            m_UndoUnitMock.Stub(x => x.UndoDescription).Return("Dummy");
            m_UndoUnitMock.UndoDescription.Returns("Dummy");
            m_UndoUnitMock.Stub(x => x.ShouldBeAddedToUndoStack(Arg<IUndoUnit>.Is.Anything)).Return(true);
            m_UndoUnitMock.Stub(x => x.Merge(Arg<IUndoUnit>.Is.Anything)).Return(false);
            m_UndoUnitMock.ShouldBeAddedToUndoStack(Arg.Any<IUndoUnit>()).Returns(true);
            m_UndoUnitMock.Merge(Arg.Any<IUndoUnit>()).Returns(false);
            //m_UndoUnitMock.SetupResult("Merge", false, typeof(IUndoUnit));
            m_UndoService.RegisterUndoUnit(m_UndoUnitMock);
        {
            m_UndoService.RegisterUndoUnit(m_UndoUnitMock);
            m_UndoUnitMock.Stub(x => x.ShouldBeAddedToUndoStack(Arg<IUndoUnit>.Is.Anything)).Return(false);
            m_UndoUnitMock.Stub(x => x.Merge(Arg<IUndoUnit>.Is.Anything)).Return(false);
            m_UndoUnitMock.ShouldBeAddedToUndoStack(Arg.Any<IUndoUnit>()).Returns(false);
            m_UndoUnitMock.Merge(Arg.Any<IUndoUnit>()).Returns(false);
            //Register
            m_UndoService.RegisterUndoUnit(m_UndoUnitMock);
            undoUnit.UndoDescription = undoDescription;
            m_UndoService.RegisterUndoUnit(undoUnit);
            m_RedoUnitMock.Expect(x => x.UndoDescription).Return(undoDescription);
            m_RedoUnitMock.UndoDescription.Returns(undoDescription);
            m_UndoService.Undo();
            Assert.AreEqual(undoDescription, m_UndoService.RedoDescription);
            m_RedoUnitMock.VerifyAllExpectations();
        }
        [Test]
            IUndoUnit undoUnit = new UndoUnitWithRedo(m_RedoUnitMock, m_UndoService);
            m_UndoService.RegisterUndoUnit(undoUnit);
            m_UndoService.Undo();
            m_RedoUnitMock.Expect(x => x.Undo());
            m_UndoService.Redo();
            m_RedoUnitMock.VerifyAllExpectations();
            Assert.IsFalse(m_UndoService.IsUndoAvailable(), "Undo should not be enabled anymore");
            m_RedoUnitMock.Received().Undo();
        }
        [Test]
        {
            //m_UndoUnitMock.ExpectNoCall("ShouldBeAddedToUndoStack", typeof(IUndoUnit));
            m_UndoUnitMock.Stub(x => x.ShouldBeAddedToUndoStack(Arg<IUndoUnit>.Is.Anything)).Return(false);
            m_UndoUnitMock.Stub(x => x.Merge(Arg<IUndoUnit>.Is.Anything)).Return(false);
            m_UndoUnitMock.ShouldBeAddedToUndoStack(Arg.Any<IUndoUnit>()).Returns(false);
            m_UndoUnitMock.Merge(Arg.Any<IUndoUnit>()).Returns(false);
            //Complex setup of Mocks...
            IUndoUnit redoUnitThatRegistersUndo = new UndoUnitWithRedo(m_UndoUnitMock, m_UndoService);
            IUndoUnit undoUnitThatRegistersRedo = new UndoUnitWithRedo(redoUnitThatRegistersUndo, m_UndoService);
        {
            IParentUndoUnit parentUndoUnit = m_UndoService.OpenParentUndo("");
            m_UndoUnitMock.Stub(x => x.ShouldBeAddedToUndoStack(Arg<IUndoUnit>.Is.Anything)).Return(true);
            m_UndoUnitMockTwo.Stub(x => x.ShouldBeAddedToUndoStack(Arg<IUndoUnit>.Is.Anything)).Return(true);
            m_UndoUnitMockTwo.Stub(x => x.Merge(Arg<IUndoUnit>.Is.Anything)).Return(false);
            m_UndoUnitMock.ShouldBeAddedToUndoStack(Arg.Any<IUndoUnit>()).Returns(true);
            m_UndoUnitMockTwo.ShouldBeAddedToUndoStack(Arg.Any<IUndoUnit>()).Returns(true);
            m_UndoUnitMockTwo.Merge(Arg.Any<IUndoUnit>()).Returns(false);
            m_UndoService.RegisterUndoUnit(m_UndoUnitMock);
            m_UndoService.RegisterUndoUnit(m_UndoUnitMockTwo);
            parentUndoUnit.Close();
            //Now check that both undo units are undone on one call to Undo
            m_UndoUnitMock.Expect(x => x.Undo());
            m_UndoUnitMockTwo.Expect(x => x.Undo());
            m_UndoService.Undo();
            m_UndoUnitMock.VerifyAllExpectations();
            m_UndoUnitMockTwo.VerifyAllExpectations();
            m_UndoUnitMock.Received().Undo();
            m_UndoUnitMockTwo.Received().Undo();
        }
        /// <summary>
        public void RedoOnParentedUndoUnits()
        {
            IParentUndoUnit parentUndoUnit = m_UndoService.OpenParentUndo("");
            m_UndoUnitMock.Stub(x => x.ShouldBeAddedToUndoStack(Arg<IUndoUnit>.Is.Anything)).Return(true);
            m_UndoUnitMock.Stub(x => x.Merge(Arg<IUndoUnit>.Is.Anything)).Return(false);
            m_UndoUnitMockTwo.Stub(x => x.ShouldBeAddedToUndoStack(Arg<IUndoUnit>.Is.Anything)).Return(true);
            m_UndoUnitMockTwo.Stub(x => x.Merge(Arg<IUndoUnit>.Is.Anything)).Return(false);
            m_UndoUnitMock.ShouldBeAddedToUndoStack(Arg.Any<IUndoUnit>()).Returns(true);
            m_UndoUnitMock.Merge(Arg.Any<IUndoUnit>()).Returns(false);
            m_UndoUnitMockTwo.ShouldBeAddedToUndoStack(Arg.Any<IUndoUnit>()).Returns(true);
            m_UndoUnitMockTwo.Merge(Arg.Any<IUndoUnit>()).Returns(false);
            UndoUnitWithRedo undoUnitWithRedo = new UndoUnitWithRedo(m_UndoUnitMock, m_UndoService);
            m_UndoService.RegisterUndoUnit(undoUnitWithRedo);
            //Now check that both undo units are undone on one call to Redo
            Assert.IsTrue(m_UndoService.IsRedoAvailable());
            m_UndoUnitMock.Expect(x => x.Undo());
            m_UndoUnitMockTwo.Expect(x => x.Undo());
            m_UndoService.Redo();
            m_UndoUnitMock.VerifyAllExpectations();
            m_UndoUnitMockTwo.VerifyAllExpectations();
            m_UndoUnitMock.Received().Undo();
            m_UndoUnitMockTwo.Received().Undo();
        }
    }
}

UpdateManagerTest.cs
-12
+10
/Tools/ToolsTest/UpdateManager/UpdateManagerTest.cs
using Neo.ApplicationFramework.Tools.Brand;
using Neo.ApplicationFramework.Tools.UpdateManager.Dialogs;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
using StoreSoftwareManagerLibrary;
namespace Neo.ApplicationFramework.Tools.UpdateManager
        [SetUp]
        public void Setup()
        {
            m_BrandServiceIde = MockRepository.GenerateStub<IBrandServiceIde>();
            var lazyBrandServiceIde = MockRepository.GenerateStub<ILazy<IBrandServiceIde>>();
            lazyBrandServiceIde.Stub(x => x.Value)
                .Return(m_BrandServiceIde);
            m_BrandServiceIde = Substitute.For<IBrandServiceIde>();
            var lazyBrandServiceIde = Substitute.For<ILazy<IBrandServiceIde>>();
            lazyBrandServiceIde.Value.Returns(m_BrandServiceIde);
            m_IdeOptionsService = MockRepository.GenerateStub<IIDEOptionsService>();
            var lazyIdeOptionsService = MockRepository.GenerateStub<ILazy<IIDEOptionsService>>();
            lazyIdeOptionsService.Stub(x => x.Value)
                .Return(m_IdeOptionsService);
            m_IdeOptionsService = Substitute.For<IIDEOptionsService>();
            var lazyIdeOptionsService = Substitute.For<ILazy<IIDEOptionsService>>();
            lazyIdeOptionsService.Value.Returns(m_IdeOptionsService);
            
            m_StoreSoftwareManager = MockRepository.GenerateMock<IStoreSoftwareManager>();
            m_StoreSoftwareManager = Substitute.For<IStoreSoftwareManager>();
            m_UpdateManager = new UpdateManager(
                lazyBrandServiceIde,
        {
            // Arrange
            BrandToolHelper.Instance = new BrandToolHelper(BrandToolHelper.PanelBrandId8);
            m_StoreSoftwareManager.Stub(x => x.IsLatestSoftwareVersionInstalledAsync(Arg<string>.Is.Anything, Arg<Version>.Is.Anything))
                .Return(Task.FromResult(false));
            m_StoreSoftwareManager.IsLatestSoftwareVersionInstalledAsync(Arg.Any<string>(), Arg.Any<Version>())
                .Returns(Task.FromResult(false));
            // Act
            bool newerVersionExists = await m_UpdateManager.NewerVersionExistsAsync();

UpdateSoftwareDialogViewModelTest.cs
-11
+9
/Tools/ToolsTest/UpdateManager/UpdateSoftwareDialogViewModelTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Tools.UpdateManager.Dialogs;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.UpdateManager
{
        [SetUp]
        public void SetUp()
        {
            m_IdeOptionsService = MockRepository.GenerateStub<IIDEOptionsService>();
            var lazyIdeOptionsService = MockRepository.GenerateStub<ILazy<IIDEOptionsService>>();
            lazyIdeOptionsService.Stub(x => x.Value)
                .Return(m_IdeOptionsService);
            m_IdeOptionsService = Substitute.For<IIDEOptionsService>();
            var lazyIdeOptionsService = Substitute.For<ILazy<IIDEOptionsService>>();
            lazyIdeOptionsService.Value.Returns(m_IdeOptionsService);
            m_UpdateService = MockRepository.GenerateStub<IUpdateService>();
            var lazyUpdateService = MockRepository.GenerateStub<ILazy<IUpdateService>>();
            lazyUpdateService.Stub(x => x.Value)
                .Return(m_UpdateService);
            m_UpdateService = Substitute.For<IUpdateService>();
            var lazyUpdateService = Substitute.For<ILazy<IUpdateService>>();
            lazyUpdateService.Value.Returns(m_UpdateService);
            m_UpdateSoftwareDialogViewModel = new UpdateSoftwareDialogViewModel(lazyUpdateService, lazyIdeOptionsService);
        }
        public void ShouldRemindAboutSoftware_SetsUpdateSoftwareOption()
        {
            // Arrange
            m_IdeOptionsService.Stub(x => x.GetOption<UpdateSoftwareOptions>()).Return(new UpdateSoftwareOptions());
            m_IdeOptionsService.GetOption<UpdateSoftwareOptions>().Returns(new UpdateSoftwareOptions());
            // Act
            m_UpdateSoftwareDialogViewModel.ShouldRemindAboutSoftware = true;
            
            // Assert
            m_IdeOptionsService.AssertWasCalled(x => x.GetOption<UpdateSoftwareOptions>().ShowUpdateInfoOnStartup);
            m_IdeOptionsService.Received().GetOption<UpdateSoftwareOptions>().ShowUpdateInfoOnStartup = true;
        }
    }
}

VncMonitorServiceTest.cs
-16
+20
/Tools/ToolsTest/VncServer/VncMonitorServiceTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.VncServer;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.VncServer
{
        [SetUp]
        public void Setup()
        {
            var api = MockRepository.GenerateMock<INativeAPI>();
            api.Stub(x => x.CreateMsgQueue(Arg<string>.Is.Anything, ref Arg<MSGQUEUEOPTIONS>.Ref(Rhino.Mocks.Constraints.Is.Anything(), new MSGQUEUEOPTIONS()).Dummy))
                .Return(new IntPtr(1));
            api.Stub(x => x.CloseMsgQueue(Arg<IntPtr>.Is.Anything)).WhenCalled(
                call =>
            var api = Substitute.For<INativeAPI>();
            api.CreateMsgQueue(Arg.Any<string>(), ref Arg.Any<MSGQUEUEOPTIONS>())
                .Returns(x =>
                {
                    x[1] = new MSGQUEUEOPTIONS();
                    return new IntPtr(1);
                });
            api.CloseMsgQueue(Arg.Any<IntPtr>())
                .Returns(x =>
                {
                    Debug.WriteLine("Closing message queue");
                    lock (m_Messages)
                    {
                        m_Messages.Clear();
                    }
                    UpdateMessageEmptyEvent();
                }).Return(true);
            api.Stub(x => x.ReadMsgQueue(Arg<IntPtr>.Is.Anything, out Arg<string>.Out(null).Dummy, Arg<uint>.Is.Anything, out Arg<uint>.Out(0).Dummy))
                .WhenCalled(
                    return true;
                });
            api.ReadMsgQueue(Arg.Any<IntPtr>(), out Arg.Any<string>(), Arg.Any<uint>(), out Arg.Any<uint>())
                .Returns(
                    call =>
                    {
                        string theMessage = NextMessage;
                        call.Arguments[1] = theMessage;
                        call.Arguments[3] = 0u;
                        call.ReturnValue = theMessage != null ;
                        call[1] = theMessage;
                        call[3] = 0u;
                        Debug.WriteLine("Read message: " + theMessage);
                    })
                .Return(true);
                        return theMessage != null;
                    });
            var lazyApi = MockRepository.GenerateMock<ILazy<INativeAPI>>();
            lazyApi.Stub(x => x.Value).Return(api);
            var lazyApi = Substitute.For<ILazy<INativeAPI>>();
            lazyApi.Value.Returns(api);
            m_VncService = new VncMonitorService(lazyApi, true);

FormsAuthenticationTest.cs
-9
+8
/Tools/ToolsTest/WebServer/WebFramework/Authentication/Forms/FormsAuthenticationTest.cs
using System.Collections.Generic;
using System.Linq;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Authentication.Forms
{
            m_Credentials  = new Dictionary<string, string>();
            m_FormsAuthentication = new FormsAuthentication(m_Credentials);
            m_SessionMock = MockRepository.GenerateMock<ISession>();
            m_SessionMock = Substitute.For<ISession>();
        }
        [Test]
            m_FormsAuthentication.Login("mrfoo", "bar", m_SessionMock);
            m_SessionMock.AssertWasCalled(m => m.PutValue("FormsAuthenticator.IsAuthenticated", true));
            m_SessionMock.Received().PutValue("FormsAuthenticator.IsAuthenticated", true);
        }
        [Test]
        public void Should_be_authenticated_when_session_has_no_authentication_flag()
        {
            var communicationContext = CommunicationContextFixture.Empty;
            communicationContext.Session.Stub(s => s.TryGetValue("FormsAuthenticator.IsAuthenticated", false)).Return(true);
            communicationContext.Session.TryGetValue("FormsAuthenticator.IsAuthenticated", false).Returns(true);
            bool authResult = m_FormsAuthentication.IsAuthenticatedWithSideEffects(communicationContext);
        public void Should_add_location_header_to_login_with_redirect_when_user_is_not_authenticated()
        {
            var communicationContext = CommunicationContextFixture.AfterRouteResolve;
            communicationContext.Request.Stub(s => s.Path).Return("/aPath");
            communicationContext.Request.Path.Returns("/aPath");
            m_FormsAuthentication.IsAuthenticatedWithSideEffects(communicationContext);
            communicationContext.Response.AssertWasCalled(s => s.AddHeader("Location", "/login?continueTo=/aPath"));
            communicationContext.Response.Received().AddHeader("Location", "/login?continueTo=/aPath");
        }
        [Test]
        [Test]
        public void Should_delete_authorization_data_when_logging_out()
        {
            ISession session = MockRepository.GenerateMock<ISession>();
            ISession session = Substitute.For<ISession>();
            
            m_FormsAuthentication.Logout(session);
            session.AssertWasCalled(m => m.DeleteValue("FormsAuthenticator.IsAuthenticated"));
            session.Received().DeleteValue("FormsAuthenticator.IsAuthenticated");
        }
    }
}

LoginHandlerTest.cs
-14
+12
/Tools/ToolsTest/WebServer/WebFramework/Authentication/Forms/LoginHandlerTest.cs
using System.Collections.Generic;
using System.IO;
using Core.Api.Application;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor;
using Neo.ApplicationFramework.Tools.WebServer.Website.Shared;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Authentication.Forms
{
        [SetUp]
        public void Setup()
        {
            var coreApplication = TestHelper.CreateAndAddServiceMock<ICoreApplication>();
            coreApplication.Stub(inv => inv.StartupPath).Return(m_StartupPath);
            var coreApplication = TestHelper.CreateAndAddServiceStub<ICoreApplication>();
            coreApplication.StartupPath.Returns(m_StartupPath);
            Directory.CreateDirectory(m_StartupPath);
            m_FormsAuthentication = MockRepository.GenerateStub<FormsAuthentication>(new Dictionary<string, string>());
            m_EmbeddedFileReader = MockRepository.GenerateStub<EmbeddedFileReader>(null, null, null, null);
            m_FileReader = MockRepository.GenerateStub<FileReader>(null, null, null);
            m_FormsAuthentication = Substitute.For<FormsAuthentication>(new Dictionary<string, string>());
            m_EmbeddedFileReader = Substitute.For<EmbeddedFileReader>(null, null, null, null);
            m_FileReader = Substitute.For<FileReader>(null, null, null);
            m_Context = CommunicationContextFixture.AfterOperationCandidateGeneration;
            m_LoginHandler = new LoginHandler(m_Context.Session, m_Context.Response, m_FormsAuthentication, m_EmbeddedFileReader, m_FileReader);
        public void Should_get_embedded_login_page_when_no_page_exist_in_webroot()
        {
            object embeddedFileResult = new object();
            m_FileReader.Stub(s => s.HasFile(null)).IgnoreArguments().Return(false);
            m_EmbeddedFileReader.Stub(s => s.Get("login.html")).Return(embeddedFileResult);
            m_FileReader.HasFile(Arg.Any<string>()).Returns(false);
            m_EmbeddedFileReader.Get("login.html").Returns(embeddedFileResult);
            object handlerResult = m_LoginHandler.Get();
        public void Should_get_login_page_from_webroot_when_it_exists()
        {
            object fileReaderResult = new object();
            m_FileReader.Stub(s => s.HasFile("login.html")).Return(true);
            m_FileReader.Stub(s => s.Get("login.html")).Return(fileReaderResult);
            m_FileReader.HasFile("login.html").Returns(true);
            m_FileReader.Get("login.html").Returns(fileReaderResult);
            object handlerResult = m_LoginHandler.Get();
        [Test]
        public void Should_return_200_ok_when_posting_valid_credentials()
        {
            m_FormsAuthentication.Stub(s => s.Login(null, null, null)).IgnoreArguments().Return(true);
            m_FormsAuthentication.Login(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<ISession>()).Returns(true);
            object post = m_LoginHandler.Post(new LoginDataDto());
        [Test]
        public void Should_return_401_Not_Authurized_when_posting_invalid_credentials()
        {
            m_FormsAuthentication.Stub(s => s.Login(null, null, null)).IgnoreArguments().Return(false);
            m_FormsAuthentication.Login(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<ISession>()).Returns(false);
            object post = m_LoginHandler.Post(new LoginDataDto());

LogoutHandlerTest.cs
-3
+3
/Tools/ToolsTest/WebServer/WebFramework/Authentication/Forms/LogoutHandlerTest.cs
using System.Collections.Generic;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Authentication.Forms
{
        [SetUp]
        public void Setup()
        {
            m_FormsAuthentication = MockRepository.GenerateStub<FormsAuthentication>(new Dictionary<string, string>());
            m_FormsAuthentication = Substitute.For<FormsAuthentication>(new Dictionary<string, string>());
        
            m_Context = CommunicationContextFixture.AfterOperationCandidateGeneration;
            m_LogoutHandler = new LogoutHandler(m_Context.Session, m_FormsAuthentication);
        {
            m_LogoutHandler.Get();
            m_FormsAuthentication.AssertWasCalled(m => m.Logout(m_Context.Session));
            m_FormsAuthentication.Received().Logout(m_Context.Session);
        }
    }
}

SessionManagerTest.cs
-9
+3
/Tools/ToolsTest/WebServer/WebFramework/Authentication/SessionManagerTest.cs
using System;
using Neo.ApplicationFramework.Interfaces;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Authentication
{
        private IWebServerConfigService SetupWebServerConfigService(int numberOfSessions)
        {
            var webServerConfigService = MockRepository.GenerateMock<IWebServerConfigService>();
            webServerConfigService.Expect(inv => inv.MaxSessions).Repeat.Once().Return(numberOfSessions);
            var webServerConfigService = Substitute.For<IWebServerConfigService>();
            webServerConfigService.MaxSessions.Returns(numberOfSessions);
            return webServerConfigService;
        }
            ISession retrievedSession = sessionManager.GetSessionAndRenewLease(newSession.Id);
            Assert.That(newSession, Is.SameAs(retrievedSession));
            service.VerifyAllExpectations();
        }
        
        [Test]
            ISession retrievedSession = sessionManager.GetSessionAndRenewLease("evil_session_id");
            Assert.That(retrievedSession, Is.Null);
            service.VerifyAllExpectations();
        }
        
        [Test]
            ISession retrievedSession = sessionManager.GetSessionAndRenewLease(newSession.Id);
            Assert.That(retrievedSession, Is.Null);
            service.VerifyAllExpectations();
        }
        
        [Test]
            Assert.That(newSession1.Id, Is.Not.EqualTo(newSession3.Id));
            Assert.That(newSession2.Id, Is.Not.EqualTo(newSession1.Id));
            Assert.That(newSession2.Id, Is.Not.EqualTo(newSession3.Id));
            service.VerifyAllExpectations();
        }
        [Test]
            Assert.That(newSession1, Is.Not.Null);
            Assert.That(newSession2, Is.Null);
            service.VerifyAllExpectations();
        }
    }
}

ApplicationOctetStreamCodecTest.cs
-10
+10
/Tools/ToolsTest/WebServer/WebFramework/Codecs/ApplicationOctetStreamCodecTest.cs
using System;
using System.IO;
using Neo.ApplicationFramework.Utilities.IO;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Neo.ApplicationFramework.Utilities.IO;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Codecs
{
        [SetUp]
        public void Setup()
        {
            m_ResponseMock = MockRepository.GenerateMock<IResponse>();
            m_FileHelperMock = MockRepository.GenerateMock<FileHelperCF>();
            m_ResponseMock = Substitute.For<IResponse>();
            m_FileHelperMock = Substitute.For<FileHelperCF>();
            
            _mWriter = new ApplicationOctetStreamWriter(m_FileHelperMock);
        }
            
            _mWriter.WriteTo(file, m_ResponseMock);
            m_FileHelperMock.AssertWasCalled(m => m.Open("image.jpg", FileMode.Open, FileAccess.Read));
            m_FileHelperMock.Received().Open("image.jpg", FileMode.Open, FileAccess.Read);
        }
        
        [Test]
        {
            FileResource file = new FileResource("image.jpg");
            MemoryStream fileStream = new MemoryStream();
            m_FileHelperMock.Stub(m => m.Open("image.jpg", FileMode.Open, FileAccess.Read)).Return(fileStream);
            m_FileHelperMock.Open("image.jpg", FileMode.Open, FileAccess.Read).Returns(fileStream);
            _mWriter.WriteTo(file, m_ResponseMock);
            m_ResponseMock.AssertWasCalled(m => m.StreamContent = fileStream);
            m_ResponseMock.Received().StreamContent = fileStream;
        }
        
        [Test]
            
            _mWriter.WriteTo(stream, m_ResponseMock);
            m_ResponseMock.AssertWasCalled(m => m.StreamContent = memstream);
            m_ResponseMock.Received().StreamContent = memstream;
        }
        private void MockFileSize(int fileSize)
        {
            m_FileHelperMock.Stub(m => m.GetFileSize(null)).IgnoreArguments().Return(fileSize);
            m_FileHelperMock.GetFileSize(Arg.Any<string>()).Returns(fileSize);
        }
        private void AssertContentType(string expectedContentType)
        
        private void AssertHeader(string headerName, string headerValue)
        {
            m_ResponseMock.AssertWasCalled(m => m.AddHeader(Arg.Is(headerName), Arg.Is(headerValue)));
            m_ResponseMock.Received().AddHeader(Arg.Is(headerName), Arg.Is(headerValue));
        }
    }
}

ErrorPageWriterTest.cs
-3
+3
/Tools/ToolsTest/WebServer/WebFramework/Codecs/ErrorPageWriterTest.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Codecs
{
        [SetUp]
        public void Setup()
        {
            m_ResponseMock = MockRepository.GenerateMock<IResponse>();
            m_ResponseMock = Substitute.For<IResponse>();
        }
        [Test]
            errorPageWriter.WriteTo(new ErrorPage(400, "Not Found"), m_ResponseMock);
            m_ResponseMock.AssertWasCalled(m => m.SetErrorResponse(Arg.Is(400), Arg.Is("Not Found"), Arg<string>.Is.Anything));
            m_ResponseMock.Received().SetErrorResponse(Arg.Is(400), Arg.Is("Not Found"), Arg.Any<string>());
        }
    }
}

JsonCodecTest.cs
-6
+6
/Tools/ToolsTest/WebServer/WebFramework/Codecs/JsonCodecTest.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Codecs
{
        [SetUp] 
        public void Setup()
        {
            m_ResponseMock = MockRepository.GenerateMock<IResponse>();
            m_RequestMock = MockRepository.GenerateMock<IRequest>();
            m_ResponseMock = Substitute.For<IResponse>();
            m_RequestMock = Substitute.For<IRequest>();
        }
        [Test]
            jsonCodec.WriteTo(foo, m_ResponseMock);
            m_ResponseMock.AssertWasCalled(m => m.StringContent = expectedJson);
            m_ResponseMock.Received().StringContent = expectedJson;
        }    
        
        [Test]
            jsonCodec.WriteTo(foo, m_ResponseMock);
            m_ResponseMock.AssertWasCalled(m => m.AddHeader("Content-Type", "application/json"));
            m_ResponseMock.Received().AddHeader("Content-Type", "application/json");
        }
        
        [Test]
            Foo foo = new Foo();
            JsonCodec jsonCodec = new JsonCodec();
            string json = @"{""intValue"":22,""stringValue"":""foo""}";
            m_RequestMock.Stub(m => m.Body).Return(json);
            m_RequestMock.Body.Returns(json);
            object result = jsonCodec.ReadFrom(m_RequestMock, typeof(Foo), null);

MediaWriterSelectorTest.cs
-10
+10
/Tools/ToolsTest/WebServer/WebFramework/Codecs/MediaWriterSelectorTest.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Codecs;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework
{
        [Test]
        public void Should_match_the_hight_quality_media_writer_available()
        {
            IMediaTypeWriter barWriter = MockRepository.GenerateStub<IMediaTypeWriter>();
            IMediaTypeWriter bazWriter = MockRepository.GenerateStub<IMediaTypeWriter>();
            barWriter.Stub(m => m.SupportedTypes).Return(new[] { typeof(FooType) });
            barWriter.Stub(m => m.SupportedMediaType).Return(new[] { new MediaType("foo/bar"),  });
            bazWriter.Stub(m => m.SupportedTypes).Return(new[] { typeof(FooType) });
            bazWriter.Stub(m => m.SupportedMediaType).Return(new[] { new MediaType("foo/baz"),  });
            IMediaTypeWriter barWriter = Substitute.For<IMediaTypeWriter>();
            IMediaTypeWriter bazWriter = Substitute.For<IMediaTypeWriter>();
            barWriter.SupportedTypes.Returns(new[] { typeof(FooType) });
            barWriter.SupportedMediaType.Returns(new[] { new MediaType("foo/bar"),  });
            bazWriter.SupportedTypes.Returns(new[] { typeof(FooType) });
            bazWriter.SupportedMediaType.Returns(new[] { new MediaType("foo/baz"),  });
            string acceptType = "not/known;, foo/bar;q=0.5, foo/baz;q=1";
            
        [Test]
        public void Should_pick_writer_when_type_is_assignable_from_supported_type()
        {
            IMediaTypeWriter barWriter = MockRepository.GenerateStub<IMediaTypeWriter>();
            barWriter.Stub(m => m.SupportedTypes).Return(new[] { typeof(object) });
            barWriter.Stub(m => m.SupportedMediaType).Return(new[] { new MediaType("foo/bar"),  });
            IMediaTypeWriter barWriter = Substitute.For<IMediaTypeWriter>();
            barWriter.SupportedTypes.Returns(new[] { typeof(object) });
            barWriter.SupportedMediaType.Returns(new[] { new MediaType("foo/bar"),  });
            
            string acceptType = "foo/bar";
            

WwwUrlFormReaderTest.cs
-4
+4
/Tools/ToolsTest/WebServer/WebFramework/Codecs/WwwUrlFormReaderTest.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Codecs
{
        [SetUp]
        public void SetUp()
        {
            m_Request = MockRepository.GenerateMock<IRequest>();
            m_Request = Substitute.For<IRequest>();
            m_WwwUrlFormReader = new WwwUrlFormReader();
        }
        private void StubContent(string content)
        {
            m_Request.Stub(m => m.ContentLength).Return(content.Length);
            m_Request.Stub(m => m.Body).Return(content);
            m_Request.ContentLength.Returns(content.Length);
            m_Request.Body.Returns(content);
        }
        public class FooKVP

MethodNameFilterTest.cs
-4
+4
/Tools/ToolsTest/WebServer/WebFramework/OperationModel/MethodNameFilterTest.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor;
using NSubstitute;
using NUnit.Framework;
using NUnit.Framework.Constraints;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.OperationModel
{
        {
            m_CommunicationContextMock = CommunicationContextFixture.Empty;
            
            m_OperationStub = MockRepository.GenerateStub<IOperation>();
            m_OperationStub = Substitute.For<IOperation>();
            m_Filter = new MethodNameFilter();
        }
        private void AssertIsMatch(string operationName, string httpVerb, IResolveConstraint isMatchContraint)
        {
            m_OperationStub.Stub(m => m.Name).Return(operationName);
            m_CommunicationContextMock.Request.Stub(m => m.Method).Return(httpVerb);
            m_OperationStub.Name.Returns(operationName);
            m_CommunicationContextMock.Request.Method.Returns(httpVerb);
            bool operationIsMatch = m_Filter.IsMatch(m_OperationStub, m_CommunicationContextMock);

UriParametersFilterTest.cs
-8
+6
/Tools/ToolsTest/WebServer/WebFramework/OperationModel/UriParametersFilterTest.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.OperationModel
{
            m_CommunicationContextMock = CommunicationContextFixture.Empty;
            m_CommunicationContextMock.PipelineData.UriTemplateParameters = new NameValueCollection();
            m_InputMemberStub = MockRepository.GenerateStub<IInputMember>();
            m_InputMemberStub = Substitute.For<IInputMember>();
            
            m_OperationStub = MockRepository.GenerateStub<IOperation>();
            m_OperationStub = Substitute.For<IOperation>();
            m_Filter = new UriParametersFilter();
        }
        {
            IOperation fooWithBarStringParameter = OperationFixture.FooWithBarStringParameter;
            m_CommunicationContextMock.PipelineData.UriTemplateParameters.Add("not_named_bar", "abc");
            m_InputMemberStub.Stub(m => m.TrySetFromString(null, null)).IgnoreArguments().Return(false);
            m_InputMemberStub.TrySetFromString(Arg.Any<string>(), Arg.Any<string>()).Returns(false);
            
            bool operationIsMatch = m_Filter.IsMatch(fooWithBarStringParameter, m_CommunicationContextMock);
        public void Should_match_when_all_template_parameters_match_input_members()
        {
            IOperation operationWithTwoParams = OperationFixture.FooWithBarAndBazStringParameters;
            m_CommunicationContextMock.PipelineData.UriTemplateParameters.Add("bar", "ccc");
            m_CommunicationContextMock.PipelineData.UriTemplateParameters.Add("baz", "bbb");
            operationWithTwoParams.Inputs.ToList()[0].Stub(i => i.TrySetFromString("bar", "ccc")).Return(true);
            operationWithTwoParams.Inputs.ToList()[1].Stub(i => i.TrySetFromString("baz", "bbb")).Return(true);
            operationWithTwoParams.Inputs.ToList()[0].TrySetFromString("bar", "ccc").Returns(true);
            operationWithTwoParams.Inputs.ToList()[1].TrySetFromString("baz", "bbb").Returns(true);
            bool operationIsMatch = m_Filter.IsMatch(operationWithTwoParams, m_CommunicationContextMock);

CommunicationContextFixture.cs
-6
+6
/Tools/ToolsTest/WebServer/WebFramework/Pipeline/Contributor/CommunicationContextFixture.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Authentication;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor
{
        {
            get
            {
                ICommunicationContext cc = MockRepository.GenerateMock<ICommunicationContext>();
                cc.Stub(m => m.Request).Return(MockRepository.GenerateMock<IRequest>());
                cc.Stub(m => m.Response).Return(MockRepository.GenerateMock<IResponse>());
                cc.Stub(m => m.PipelineData).Return(new PipelineData());
                cc.Stub(m => m.Session).Return(MockRepository.GenerateMock<ISession>());
                ICommunicationContext cc = Substitute.For<ICommunicationContext>();
                cc.Request.Returns(Substitute.For<IRequest>());
                cc.Response.Returns(Substitute.For<IResponse>());
                cc.PipelineData.Returns(new PipelineData());
                cc.Session.Returns(Substitute.For<ISession>());
                return cc;
            }
        }

InputMemberFixture.cs
-7
+7
/Tools/ToolsTest/WebServer/WebFramework/Pipeline/Contributor/InputMemberFixture.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.OperationModel;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor
{
        {
            get
            {
                var im = MockRepository.GenerateStub<IInputMember>();
                im.Stub(s => s.Name).Return("bar");
                im.Stub(s => s.InputType).Return(typeof(string));
                var im = Substitute.For<IInputMember>();
                im.Name.Returns("bar");
                im.InputType.Returns(typeof(string));
                return im;
            }
        }
        {
            get
            {
                var im = MockRepository.GenerateStub<IInputMember>();
                im.Stub(s => s.Name).Return("baz");
                im.Stub(s => s.InputType).Return(typeof(string));
                var im = Substitute.For<IInputMember>();
                im.Name.Returns("baz");
                im.InputType.Returns(typeof(string));
                return im;
            }
        }

OperationCandidateGeneratorTest.cs
-8
+9
/Tools/ToolsTest/WebServer/WebFramework/Pipeline/Contributor/OperationCandidateGeneratorTest.cs
using System.Collections.Generic;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.OperationModel;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor
{
        [SetUp]
        public void SetUp()
        {
            m_OperationCreator = MockRepository.GenerateMock<OperationCreator>();
            m_OperationFilter = MockRepository.GenerateMock<OperationFilter>();
            m_OperationCreator = Substitute.For<OperationCreator>();
            m_OperationFilter = Substitute.For<OperationFilter>();
            m_OperationCandidateGenerator = new OperationCandidateGenerator(m_OperationCreator, m_OperationFilter);
            m_Context = CommunicationContextFixture.AfterRouteResolve;
        }
        [Test]
        public void Should_respond_not_found_when_no_operations_are_eligable()
        {
            m_OperationCreator.Stub(m => m.CreateForHandler(null)).IgnoreArguments().Return(new IOperation[0]);
            m_OperationFilter.Stub(m => m.ApplyFilter(null, null)).IgnoreArguments().Return(new IOperation[0]);
            m_OperationCreator.CreateForHandler(Arg.Any<ICommunicationContext>()).Returns(new IOperation[0]);
            m_OperationFilter.ApplyFilter(Arg.Any<IEnumerable<IOperation>>(), Arg.Any<ICommunicationContext>()).Returns(new IOperation[0]);
            
            PipelineContinuation continuation = m_OperationCandidateGenerator.Process(m_Context);
            
        [Test]
        public void Should_add_candidate_operation_to_pipeline_data()
        {
            IOperation operation = MockRepository.GenerateMock<IOperation>();
            m_OperationCreator.Stub(m => m.CreateForHandler(null)).IgnoreArguments().Return(new IOperation[0]);
            m_OperationFilter.Stub(m => m.ApplyFilter(null, null)).IgnoreArguments().Return(new[] { operation });
            IOperation operation = Substitute.For<IOperation>();
            m_OperationCreator.CreateForHandler(Arg.Any<ICommunicationContext>()).Returns(new IOperation[0]);
            m_OperationFilter.ApplyFilter(Arg.Any<IEnumerable<IOperation>>(), Arg.Any<ICommunicationContext>()).Returns(new[] { operation });
            
            PipelineContinuation continuation = m_OperationCandidateGenerator.Process(m_Context);
            

OperationFixture.cs
-17
+17
/Tools/ToolsTest/WebServer/WebFramework/Pipeline/Contributor/OperationFixture.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.OperationModel;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor
{
        { 
            get
            {
                var op = MockRepository.GenerateMock<IOperation>();
                op.Stub(m => m.Name).Return("Foo");
                op.Stub(m => m.Inputs).Return(new[] { InputMemberFixture.BarString });
                op.Stub(m => m.IsAllInputValid).Return(false);
                var op = Substitute.For<IOperation>();
                op.Name.Returns("Foo");
                op.Inputs.Returns(x => new[] { InputMemberFixture.BarString });
                op.IsAllInputValid.Returns(false);
                return op;
            } 
        }
        {
            get
            {
                var op = MockRepository.GenerateMock<IOperation>();
                op.Stub(m => m.Name).Return("Foo");
                op.Stub(m => m.Inputs).Return(new IInputMember[0]);
                op.Stub(m => m.IsAllInputValid).Return(true);
                var op = Substitute.For<IOperation>();
                op.Name.Returns("Foo");
                op.Inputs.Returns(new IInputMember[0]);
                op.IsAllInputValid.Returns(true);
                return op;
            }
        }
        {
            get
            {
                var op = MockRepository.GenerateMock<IOperation>();
                op.Stub(m => m.Name).Return("Foo");
                op.Stub(m => m.Inputs).Return(new[] { InputMemberFixture.BarString });
                op.Stub(m => m.IsAllInputValid).Return(true);
                op.Stub(m => m.Invoke()).Return(true);
                var op = Substitute.For<IOperation>();
                op.Name.Returns("Foo");
                op.Inputs.Returns(x => new[] { InputMemberFixture.BarString });
                op.IsAllInputValid.Returns(true);
                op.Invoke().Returns(true);
                return op;
            }
        }
        {
            get
            {
                var op = MockRepository.GenerateMock<IOperation>();
                op.Stub(m => m.Name).Return("Foo");
                op.Stub(m => m.Inputs).Return(new[] { InputMemberFixture.BarString, InputMemberFixture.BazString });
                var op = Substitute.For<IOperation>();
                op.Name.Returns("Foo");
                op.Inputs.Returns(x => new[] { InputMemberFixture.BarString, InputMemberFixture.BazString });
                return op;
            }
        }

OperationInvokerTest.cs
-6
+6
/Tools/ToolsTest/WebServer/WebFramework/Pipeline/Contributor/OperationInvokerTest.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.OperationModel;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor
{
        {
            IOperation operationMock = OperationFixture.Valid;
            object operationResult = new object();
            operationMock.Stub(m => m.Invoke()).Return(operationResult).Repeat.Any();
            operationMock.Invoke().Returns(operationResult);
            m_Context.PipelineData.CandidateOperations = new[] { operationMock };
            m_OperationInvoker.Process(m_Context);
        {
            IOperation operationMock = OperationFixture.Valid;
            OperationResult operationResult = OperationResult.Forbidden();
            operationMock.Stub(m => m.Invoke()).Return(operationResult).Repeat.Any();
            operationMock.Invoke().Returns(operationResult);
            m_Context.PipelineData.CandidateOperations = new[] { operationMock };
            m_OperationInvoker.Process(m_Context);
            IOperation opOne = OperationFixture.FooWithBarStringParameter;
            IOperation opTwo = OperationFixture.FooWithBarAndBazStringParameters;
            IOperation opThree = OperationFixture.Invalid;
            opOne.Stub(m => m.IsAllInputValid).Return(true);
            opTwo.Stub(m => m.IsAllInputValid).Return(true);
            opOne.IsAllInputValid.Returns(true);
            opTwo.IsAllInputValid.Returns(true);
            m_Context.PipelineData.CandidateOperations = new[] { opOne, opTwo, opThree };
            m_OperationInvoker.Process(m_Context);
            opTwo.AssertWasCalled(m => m.Invoke());
            opTwo.Received().Invoke();
        }
    }
}

RequestDecoderTest.cs
-11
+11
/Tools/ToolsTest/WebServer/WebFramework/Pipeline/Contributor/RequestDecoderTest.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Codecs;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.OperationModel;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor
{
            m_RouteTable = new RouteTable();
            m_RouteTable.AddRoute(new RouteData());
            m_MediaTypeReaderFactoryMock = MockRepository.GenerateMock<MediaTypeReaderFactory>();
            m_MediaTypeReaderFactoryMock = Substitute.For<MediaTypeReaderFactory>();
            m_RequestDecoding = new RequestDecoding(m_MediaTypeReaderFactoryMock);
        }
        [Test]
        public void Should_continue_when_content_length_is_zero()
        {
            m_CommunicationContextStub.Request.Stub(m => m.ContentLength).Return(0);
            m_CommunicationContextStub.Request.ContentLength.Returns(0);
            PipelineContinuation pipelineContinuation = m_RequestDecoding.Process(m_CommunicationContextStub);
            
        [Test]
        public void Should_use_media_type_reader_factory_to_create_a_read_for_the_content_type()
        {
            m_CommunicationContextStub.Request.Stub(m => m.ContentLength).Return(1);
            m_CommunicationContextStub.Request.Stub(m => m.ContentType).Return("application/json");
            m_CommunicationContextStub.Request.ContentLength.Returns(1);
            m_CommunicationContextStub.Request.ContentType.Returns("application/json");
            m_CommunicationContextStub.PipelineData.Route.ResourceType = typeof(string);
            IOperation fooWithBarStringParameter = OperationFixture.FooWithUnsetBarStringParameter;
            m_CommunicationContextStub.PipelineData.CandidateOperations = new[] { fooWithBarStringParameter };
            m_RequestDecoding.Process(m_CommunicationContextStub);
            m_MediaTypeReaderFactoryMock.AssertWasCalled(m => m.Create("application/json"));
            m_MediaTypeReaderFactoryMock.Received().Create("application/json");
        }
        [Test]
        public void Should_hydrate_object_using_media_type_reader()
        {
            m_CommunicationContextStub.Request.Stub(m => m.ContentLength).Return(1);
            m_CommunicationContextStub.Request.Stub(m => m.ContentType).Return("application/json");
            m_CommunicationContextStub.Request.ContentLength.Returns(1);
            m_CommunicationContextStub.Request.ContentType.Returns("application/json");
            m_CommunicationContextStub.PipelineData.Route.ResourceType = typeof(string);
            IOperation fooWithBarStringParameter = OperationFixture.FooWithUnsetBarStringParameter;
            m_CommunicationContextStub.PipelineData.CandidateOperations = new[] { fooWithBarStringParameter };
            IMediaTypeReader mediaTypeReader = MockRepository.GenerateMock<IMediaTypeReader>();
            m_MediaTypeReaderFactoryMock.Stub(m => m.Create("application/json")).Return(mediaTypeReader);
            IMediaTypeReader mediaTypeReader = Substitute.For<IMediaTypeReader>();
            m_MediaTypeReaderFactoryMock.Create("application/json").Returns(mediaTypeReader);
            m_RequestDecoding.Process(m_CommunicationContextStub);
            mediaTypeReader.AssertWasCalled(m => m.ReadFrom(m_CommunicationContextStub.Request, typeof(string), "bar"));
            mediaTypeReader.Received().ReadFrom(m_CommunicationContextStub.Request, typeof(string), "bar");
        }
    }
}

ResponseCoderTest.cs
-11
+13
/Tools/ToolsTest/WebServer/WebFramework/Pipeline/Contributor/ResponseCoderTest.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Codecs;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor
{
        {
            m_RouteTable = new RouteTable();
            
            m_CommunicationContextStub = MockRepository.GenerateStub<ICommunicationContext>();
            m_RequestStub = MockRepository.GenerateStub<IRequest>();
            m_ResponseMock = MockRepository.GenerateMock<IResponse>();
            m_CommunicationContextStub = Substitute.For<ICommunicationContext>();
            m_RequestStub = Substitute.For<IRequest>();
            m_ResponseMock = Substitute.For<IResponse>();
            m_PipelineData = new PipelineData();
            m_CommunicationContextStub = MockRepository.GenerateStub<ICommunicationContext>();
            m_CommunicationContextStub = Substitute.For<ICommunicationContext>();
            m_CommunicationContextStub.Request = m_RequestStub;
            m_CommunicationContextStub.Response = m_ResponseMock;
            m_CommunicationContextStub.PipelineData = m_PipelineData;
            m_RouteTable.AddRoute(new RouteData());
            m_MediaWriterSelector = MockRepository.GenerateStub<MediaWriterSelector>();
            IMediaTypeWriter mediaTypeWriter = MockRepository.GenerateMock<IMediaTypeWriter>();
            m_MediaWriterSelector.Stub(m => m.GetBestMatchingMediaWriter(null)).IgnoreArguments().Return(mediaTypeWriter);
            m_MediaWriterSelector = Substitute.For<MediaWriterSelector>();
            IMediaTypeWriter mediaTypeWriter = Substitute.For<IMediaTypeWriter>();
            m_MediaWriterSelector.GetBestMatchingMediaWriter(Arg.Any<System.Type>()).Returns(mediaTypeWriter);
            m_ResponseCoder = new ResponseCoder(m_MediaWriterSelector);
        }
            m_ResponseCoder.Process(m_CommunicationContextStub);
            m_ResponseMock.AssertWasCalled(m => m.StatusCode = 404);
            m_ResponseMock.Received().StatusCode = 404;
        }
        [Test]
        public void Should_respond_with_not_acceptable_if_no_media_writer_can_be_found_for_operation_result()
        {
            m_PipelineData.OperationResult = OperationResult.Ok(new object());
            m_MediaWriterSelector.Stub(m => m.GetBestMatchingMediaWriter(null, null, null)).IgnoreArguments().Return(null);
            m_MediaWriterSelector
                .GetBestMatchingMediaWriter(Arg.Any<string>(), Arg.Any<System.Type>(), Arg.Any<System.Collections.Generic.IEnumerable<IMediaTypeWriter>>())
                .Returns(x => null);
            m_ResponseCoder.Process(m_CommunicationContextStub);
            m_ResponseMock.AssertWasCalled(m => m.StatusCode = 406);
            m_ResponseMock.Received().StatusCode = 406;
        }
    }
}

RouteResolverTest.cs
-9
+14
/Tools/ToolsTest/WebServer/WebFramework/Pipeline/Contributor/RouteResolverTest.cs
using System.Collections.Specialized;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor
{
        public void Setup()
        {
            m_RouteTable = new RouteTable();
            m_UriTemplateMatcherStub = MockRepository.GenerateStub<IUriTemplateMatcher>();
            m_UriTemplateMatcherStub = Substitute.For<IUriTemplateMatcher>();
            m_CommunicationContextStub = CommunicationContextFixture.Empty;
            m_RouteTable.AddRoute(new RouteData());
        [Test]
        public void Should_return_404_Not_Found_when_no_route_matches()
        {
            NameValueCollection dummy;
            m_UriTemplateMatcherStub.Stub(m => m.MatchesUriTemplate(null, null, out dummy)).IgnoreArguments().Return(false);
            m_UriTemplateMatcherStub.MatchesUriTemplate(Arg.Any<string>(), Arg.Any<string>(), out Arg.Any<NameValueCollection>())
                .Returns(false);
            m_RouteResolver.Process(m_CommunicationContextStub);
        [Test]
        public void Should_render_now_when_no_route_matches()
        {
            NameValueCollection dummy;
            m_UriTemplateMatcherStub.Stub(m => m.MatchesUriTemplate(null, null, out dummy)).IgnoreArguments().Return(false);
            m_UriTemplateMatcherStub.MatchesUriTemplate(Arg.Any<string>(), Arg.Any<string>(), out Arg.Any<NameValueCollection>())
                .Returns(false);
            PipelineContinuation continuation = m_RouteResolver.Process(m_CommunicationContextStub);
        [Test]
        public void Should_continue_pipeline_when_route_is_found()
        {
            NameValueCollection nameValueCollection = null;
            m_UriTemplateMatcherStub.Stub(m => m.MatchesUriTemplate(null, null, out nameValueCollection)).IgnoreArguments().Return(true);
            m_UriTemplateMatcherStub.MatchesUriTemplate(Arg.Any<string>(), Arg.Any<string>(), out Arg.Any<NameValueCollection>())
                .Returns(true);
            PipelineContinuation continuation = m_RouteResolver.Process(m_CommunicationContextStub);
        public void Should_set_uri_template_parameters_when_route_is_found()
        {
            NameValueCollection nameValueCollection = null;
            m_UriTemplateMatcherStub.Stub(m => m.MatchesUriTemplate(null, null, out nameValueCollection)).IgnoreArguments().Return(true);
            m_UriTemplateMatcherStub.MatchesUriTemplate(Arg.Any<string>(), Arg.Any<string>(), out Arg.Any<NameValueCollection>())
                .Returns(x => 
                {
                    nameValueCollection = (NameValueCollection)x[2];
                    return true; 
                });
            m_RouteResolver.Process(m_CommunicationContextStub);

SessionResolverTest.cs
-17
+23
/Tools/ToolsTest/WebServer/WebFramework/Pipeline/Contributor/SessionResolverTest.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Authentication;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor
{
        public void Setup()
        {
            m_CommunicationContextStub = CommunicationContextFixture.Empty;
            m_SessionManagerMock = MockRepository.GenerateMock<ISessionManager>();
            m_SessionManagerMock = Substitute.For<ISessionManager>();
            m_SessionResolver = new SessionResolver(m_SessionManagerMock);
        }
        [Test]
        public void Should_start_new_session_when_client_has_no_session_cookie()
        {
            m_SessionManagerMock.GetSessionAndRenewLease(Arg.Any<string>()).Returns(x => null);
            m_SessionResolver.Process(m_CommunicationContextStub);
            
            m_SessionManagerMock.AssertWasCalled(m => m.StartNewSession());
            m_SessionManagerMock.Received().StartNewSession();
        }
        
        [Test]
        {
            string SID = "12345";
            StubSIDCookie(SID);
            m_SessionManagerMock.Stub(m => m.GetSessionAndRenewLease(SID)).Return(null);
            m_SessionManagerMock.GetSessionAndRenewLease(Arg.Any<string>()).Returns(x => null);
            m_SessionResolver.Process(m_CommunicationContextStub);
            m_SessionManagerMock.AssertWasCalled(m => m.StartNewSession());
            m_SessionManagerMock.Received().StartNewSession();
        }
        [Test]
        public void Should_create_a_session_cookie_when_new_session_is_created()
        {
            ISession sessionStub = MockRepository.GenerateStub<ISession>();
            sessionStub.Stub(s => s.Id).Return("123");
            m_SessionManagerMock.Stub(m => m.StartNewSession()).Return(sessionStub);
            var sessionId = "123";
            ISession sessionStub = Substitute.For<ISession>();
            sessionStub.Id.Returns(sessionId);
            m_SessionManagerMock.StartNewSession().Returns(sessionStub);
            m_SessionManagerMock.GetSessionAndRenewLease(Arg.Any<string>()).Returns(x => null);
            m_SessionResolver.Process(m_CommunicationContextStub);
            m_CommunicationContextStub.Response.AssertWasCalled(m => m.AddHeader(Arg.Is("Set-Cookie"), Arg.Text.StartsWith("SID=123")));
            m_CommunicationContextStub.Response.Received().AddHeader("Set-Cookie", Arg.Is<string>(x => x.StartsWith($"SID={sessionId}")));
        }
        [Test]
        public void Should_continue_pipeline_when_session_can_be_created()
        {
            ISession sessionStub = MockRepository.GenerateStub<ISession>();
            sessionStub.Stub(s => s.Id).Return("123");
            m_SessionManagerMock.Stub(m => m.StartNewSession()).Return(sessionStub);
            ISession sessionStub = Substitute.For<ISession>();
            sessionStub.Id.Returns("123");
            m_SessionManagerMock.GetSessionAndRenewLease(Arg.Any<string>()).Returns(x => null);
            m_SessionManagerMock.StartNewSession().Returns(sessionStub);
            var pipelineContinuation = m_SessionResolver.Process(m_CommunicationContextStub);
        [Test]
        public void Should_ignore_malformed_cookie()
        {
            ISession sessionStub = MockRepository.GenerateStub<ISession>();
            m_CommunicationContextStub.Request.Stub(m => m.GetHeader("Cookie")).Return("SID=123;hasse=");
            m_SessionManagerMock.Stub(m => m.StartNewSession()).Return(sessionStub);
            ISession sessionStub = Substitute.For<ISession>();
            m_CommunicationContextStub.Request.GetHeader("Cookie").Returns("SID=123;hasse=");
            m_SessionManagerMock.StartNewSession().Returns(sessionStub);
            m_SessionManagerMock.GetSessionAndRenewLease(Arg.Any<string>()).Returns(x => null);
            m_SessionResolver.Process(m_CommunicationContextStub);
            m_SessionManagerMock.AssertWasCalled(m => m.StartNewSession());
            m_SessionManagerMock.Received().StartNewSession();
        }
        private void StubSIDCookie(string sid)
        {
            m_CommunicationContextStub.Request.Stub(m => m.GetHeader("Cookie")).Return(string.Format("SID={0};", sid));
            m_CommunicationContextStub.Request.GetHeader("Cookie").Returns(string.Format("SID={0};", sid));
        }
    }
}

UserAuthenticationTest.cs
-4
+4
/Tools/ToolsTest/WebServer/WebFramework/Pipeline/Contributor/UserAuthenticationTest.cs
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Authentication;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using NUnit.Framework;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor
{
        [SetUp]
        public void Setup()
        {
            m_AuthenticatorMock = MockRepository.GenerateMock<IAuthenticator>();
            m_AuthenticatorMock = Substitute.For<IAuthenticator>();
            m_UserAuthentication = new UserAuthentication(m_AuthenticatorMock);
        }
        public void Should_skip_to_render_when_user_is_not_authenticated()
        {
            ICommunicationContext context = CommunicationContextFixture.AfterRouteResolve;
            m_AuthenticatorMock.Stub(m => m.IsAuthenticatedWithSideEffects(context)).Return(false);
            m_AuthenticatorMock.IsAuthenticatedWithSideEffects(context).Returns(false);
            PipelineContinuation continuation = m_UserAuthentication.Process(context);
        public void Should_continue_pipeline_when_user_is_authenticated()
        {
            ICommunicationContext context = CommunicationContextFixture.AfterRouteResolve;
            m_AuthenticatorMock.Stub(m => m.IsAuthenticatedWithSideEffects(context)).Return(true);
            m_AuthenticatorMock.IsAuthenticatedWithSideEffects(context).Returns(true);
            PipelineContinuation continuation = m_UserAuthentication.Process(context);

PipelineRunnerTest.cs
-20
+20
/Tools/ToolsTest/WebServer/WebFramework/Pipeline/PipelineRunnerTest.cs
using System;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline.Contributor;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework.Pipeline
{
        public void SetUp()
        {
            m_Context = CommunicationContextFixture.Empty;
            m_First = MockRepository.GenerateMock<IPipelineContributor>();
            m_Second = MockRepository.GenerateMock<IPipelineContributor>();
            m_Renderer = MockRepository.GenerateMock<CombinedIPipelineContributorIRenderer>();
            m_First = Substitute.For<IPipelineContributor>();
            m_Second = Substitute.For<IPipelineContributor>();
            m_Renderer = Substitute.For<CombinedIPipelineContributorIRenderer>();
        }
        [Test]
        public void Should_execute_next_contributor_when_continuation_is_continue()
        {
            m_First.Stub(m => m.Process(m_Context)).Return(PipelineContinuation.Continue);
            m_First.Process(m_Context).Returns(PipelineContinuation.Continue);
            PipelineRunner pipelineRunner = new PipelineRunner(new[] { m_First, m_Second });
            pipelineRunner.ExecutePipeline(m_Context);
            m_Second.AssertWasCalled(m => m.Process(m_Context));
            m_Second.Received().Process(m_Context);
        }
        
        [Test]
        public void Should_not_execute_next_contributor_when_continuation_is_abort()
        {
            m_First.Stub(m => m.Process(m_Context)).Return(PipelineContinuation.Abort);
            m_First.Process(m_Context).Returns(PipelineContinuation.Abort);
            PipelineRunner pipelineRunner = new PipelineRunner(new[] { m_First, m_Second });
            pipelineRunner.ExecutePipeline(m_Context);
            m_Second.AssertWasNotCalled(m => m.Process(m_Context));
            m_Second.DidNotReceive().Process(m_Context);
        }
        
        [Test]
        public void Should_skip_to_first_redering_contributor_when_continuation_is_render_now()
        {
            m_First.Stub(m => m.Process(m_Context)).Return(PipelineContinuation.RenderNow);
            m_First.Process(m_Context).Returns(PipelineContinuation.RenderNow);
            PipelineRunner pipelineRunner = new PipelineRunner(new[] { m_First, m_Second, m_Renderer });
            pipelineRunner.ExecutePipeline(m_Context);
            m_Second.AssertWasNotCalled(m => m.Process(m_Context));
            m_Renderer.AssertWasCalled(m => m.Process(m_Context));
            m_Second.DidNotReceive().Process(m_Context);
            m_Renderer.Received().Process(m_Context);
        }
        [Test]
        public void Should_set_response_to_500_Internal_server_error_if_contributor_throws()
        {
            m_First.Stub(m => m.Process(m_Context)).Throw(new Exception("Dooh"));
            m_First.Process(m_Context).Returns(x => throw new Exception("Dooh"));
            PipelineRunner pipelineRunner = new PipelineRunner(new[] { m_First });
            pipelineRunner.ExecutePipeline(m_Context);
            m_Context.Response.AssertWasCalled(m => m.SetErrorResponse(Arg.Is(500), Arg<string>.Is.Anything, Arg<string>.Is.Anything));
            m_Context.Response.Received().SetErrorResponse(Arg.Is(500), Arg.Any<string>(), Arg.Any<string>());
        }   
        
        [Test]
        public void Should__not_set_error_response_when_pipeline_executes_without_errors()
        {
            m_First.Stub(m => m.Process(m_Context)).Return(PipelineContinuation.Continue);
            m_Second.Stub(m => m.Process(m_Context)).Return(PipelineContinuation.Continue);
            m_First.Process(m_Context).Returns(PipelineContinuation.Continue);
            m_Second.Process(m_Context).Returns(PipelineContinuation.Continue);
            PipelineRunner pipelineRunner = new PipelineRunner(new[] { m_First, m_Second });
            pipelineRunner.ExecutePipeline(m_Context);
            m_Context.Response.AssertWasNotCalled(m => m.SetErrorResponse(Arg<int>.Is.Anything, Arg<string>.Is.Anything, Arg<string>.Is.Anything));
            m_Context.Response.DidNotReceiveWithAnyArgs().SetErrorResponse(Arg.Any<int>(), Arg.Any<string>(), Arg.Any<string>());
        }
        [Test]
            ICommunicationContext contextOne = CommunicationContextFixture.AfterRouteResolve;
            ICommunicationContext contextTwo = CommunicationContextFixture.AfterRouteResolve;
            ICommunicationContext contextThree = CommunicationContextFixture.AfterRouteResolve;
            m_First.Stub(m => m.Process(null)).IgnoreArguments().Return(PipelineContinuation.Continue);
            m_First.Process(Arg.Any<ICommunicationContext>()).Returns(PipelineContinuation.Continue);
            PipelineRunner pipelineRunner = new PipelineRunner(new[] { m_First });
            pipelineRunner.ExecutePipeline(contextOne);
            pipelineRunner.ExecutePipeline(contextTwo);
            pipelineRunner.ExecutePipeline(contextThree);
            contextOne.AssertWasCalled(m => m.Id = 1);
            contextTwo.AssertWasCalled(m => m.Id = 2);
            contextThree.AssertWasCalled(m => m.Id = 3);
            contextOne.Received().Id = 1;
            contextTwo.Received().Id = 2;
            contextThree.Received().Id = 3;
        }
        public interface CombinedIPipelineContributorIRenderer : IPipelineContributor, IRenderer

IRequestExtensionsTest.cs
-3
+3
/Tools/ToolsTest/WebServer/WebFramework/IRequestExtensionsTest.cs
using System;
using Neo.ApplicationFramework.Common;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.WebFramework
{
        [SetUp]
        public void Setup()
        {
            m_RequestMock = MockRepository.GenerateMock<IRequest>();
            m_RequestMock = Substitute.For<IRequest>();
        }
        [Test]
        private void StubLastModified(DateTime lastModifiedsd)
        {
            var lastModified = lastModifiedsd.ToString("R");            
            m_RequestMock.Stub(m => m.GetHeader("If-Modified-Since")).Return(lastModified);
            m_RequestMock.GetHeader("If-Modified-Since").Returns(lastModified);
        }
    }
}

EmbeddedFileReaderTest.cs
-13
+9
/Tools/ToolsTest/WebServer/Website/Shared/EmbeddedFileReaderTest.cs
using System;
using System.IO;
using Neo.ApplicationFramework.Utilities.IO;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Codecs;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Neo.ApplicationFramework.Tools.WebServer.Website.Shared;
using Neo.ApplicationFramework.Utilities.IO;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.Website.File
{
        [SetUp]
        public void Setup()
        {
            m_FileHelper = MockRepository.GenerateMock<FileHelperCF>();
            m_FileHelper = Substitute.For<FileHelperCF>();
            m_FileHelper
                .Stub(m => m.Open(
                    Arg<string>.Is.Anything,
                    Arg<FileMode>.Is.Equal(FileMode.Open),
                    Arg<FileAccess>.Is.Equal(FileAccess.Read)))
                .Return(new MemoryStream());
            m_FileHelper.Open(Arg.Any<string>(), Arg.Is(FileMode.Open), Arg.Is(FileAccess.Read))
                .Returns(new MemoryStream());
            m_ResponseMock = MockRepository.GenerateMock<IResponse>();
            m_RequestMock = MockRepository.GenerateMock<IRequest>();
            m_ResponseMock = Substitute.For<IResponse>();
            m_RequestMock = Substitute.For<IRequest>();
            DateTime lastWriteTime = new DateTime(2000, 1, 1, 0, 0, 0, 123);
            m_FileHelper.Stub(m => m.GetLastWriteTime(null)).IgnoreArguments().Return(lastWriteTime);
            m_FileHelper.GetLastWriteTime(Arg.Any<string>()).Returns(lastWriteTime);
            m_EmbeddedFileReader = new EmbeddedFileReader(m_RequestMock, m_ResponseMock, m_FileHelper, "Neo.ApplicationFramework.Tools.WebServer.Website.Assets.");
        }
        {
            string lastModified = new DateTime(2000, 1, 1).ToString("G");
            
            m_RequestMock.Stub(m => m.GetHeader("If-Modified-Since")).IgnoreArguments().Return(lastModified);
            m_RequestMock.GetHeader("If-Modified-Since").Returns(lastModified);
            OperationResult result = m_EmbeddedFileReader.Get("iX.js") as OperationResult;

FileReaderTest.cs
-19
+16
/Tools/ToolsTest/WebServer/Website/Shared/FileReaderTest.cs
using System;
using System.IO;
using Core.Api.Application;
using Neo.ApplicationFramework.Utilities.IO;
using Neo.ApplicationFramework.Common.Constants;
using Neo.ApplicationFramework.Common.Utilities;
using Neo.ApplicationFramework.TestUtilities;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Codecs;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Neo.ApplicationFramework.Utilities.IO;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.Website.Shared
{
        [SetUp]
        public void Setup()
        {
            var coreApplication = TestHelper.CreateAndAddServiceMock<ICoreApplication>();
            coreApplication.Stub(inv => inv.StartupPath).Return(m_StartupPath);
            var coreApplication = TestHelper.CreateAndAddServiceStub<ICoreApplication>();
            coreApplication.StartupPath.Returns(m_StartupPath);
            Directory.CreateDirectory(m_StartupPath);
            m_FileHelper = MockRepository.GenerateMock<FileHelperCF>();
            m_FileHelper = Substitute.For<FileHelperCF>();
            m_FileHelper
                .Stub(m => m.Open(
                    Arg<string>.Is.Anything,
                    Arg<FileMode>.Is.Equal(FileMode.Open),
                    Arg<FileAccess>.Is.Equal(FileAccess.Read)))
                .Return(new MemoryStream());
            m_FileHelper.Open(Arg.Any<string>(), Arg.Is(FileMode.Open), Arg.Is(FileAccess.Read))
                .Returns(new MemoryStream());
            m_ResponseMock = MockRepository.GenerateMock<IResponse>();
            m_RequestMock = MockRepository.GenerateMock<IRequest>();
            m_ResponseMock = Substitute.For<IResponse>();
            m_RequestMock = Substitute.For<IRequest>();
            m_FileHelper.Stub(m => m.Exists(Arg<string>.Is.Anything)).Return(true);
            m_FileHelper.Exists(Arg.Any<string>()).Returns(true);
            m_FileReader = new FileReader(m_FileHelper, m_RequestMock, m_ResponseMock);
        }
        [Test]
        public void Should_return_file_not_found_when_requested_file_does_not_exist()
        {
            m_FileHelper.Stub(m => m.Exists(Arg<string>.Is.Anything)).Return(false).Repeat.Any();
            m_FileHelper.Exists(Arg.Any<string>()).Returns(false);
            OperationResult operationResult = m_FileReader.Get("index.html") as OperationResult;
            Assert.That(operationResult.HttpStatusCode, Is.EqualTo(404));
            m_FileHelper.Received().Exists(Arg.Any<string>());
        }
        [Test]
        public void Should_return_absolute_file_path()
        {
            m_RequestMock.Stub(m => m.GetHeader(null)).IgnoreArguments().Return(null);
            m_FileHelper.Stub(m => m.GetLastWriteTime(null)).IgnoreArguments().Return(DateTime.Today);
            m_RequestMock.GetHeader(Arg.Any<string>()).Returns(x => null);
            m_FileHelper.GetLastWriteTime(Arg.Any<string>()).Returns(DateTime.Today);
            string expectedPath = Path.Combine(
                NeoApplication.StartupPath,
        [Test]
        public void Should_respond_not_modified_when_file_modification_date_is_before_modified_since_header()
        {
            m_RequestMock.Stub(m => m.GetHeader("If-Modified-Since")).Return("2000-01-01 01:01:01");
            m_RequestMock.GetHeader("If-Modified-Since").Returns("2000-01-01 01:01:01");
            DateTime fileModificationDate = new DateTime(2000, 1, 1, 1, 1, 1);
            m_FileHelper.Stub(m => m.GetLastWriteTime(null)).IgnoreArguments().Return(fileModificationDate);
            m_FileHelper.GetLastWriteTime(Arg.Any<string>()).Returns(fileModificationDate);
            OperationResult result = m_FileReader.Get("file.txt") as OperationResult;

BatchTagsHandlerTest.cs
-25
+22
/Tools/ToolsTest/WebServer/Website/Tags/BatchTagsHandlerTest.cs
using Neo.ApplicationFramework.Interfaces.CachedDataItem;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Authentication;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.Website.Tags
{
        [SetUp]
        public void Setup()
        {
            m_CachedDataItemServiceMock = MockRepository.GenerateMock<ICachedDataItemService>();
            m_CachedDataItemServiceMock = Substitute.For<ICachedDataItemService>();
            IDataItemProxy tag1Stub = MockRepository.GenerateMock<IDataItemProxy>();
            IDataItemProxy tag2Stub = MockRepository.GenerateMock<IDataItemProxy>();
            IDataItemProxy tag1Stub = Substitute.For<IDataItemProxy>();
            IDataItemProxy tag2Stub = Substitute.For<IDataItemProxy>();
            var tag1GlobalDataItem = MockRepository.GenerateMock<IMultiMockDataItemInterface>();
            var tag2GlobalDataItem = MockRepository.GenerateMock<IMultiMockDataItemInterface>();
            var tag1GlobalDataItem = Substitute.For<IMultiMockDataItemInterface>();
            var tag2GlobalDataItem = Substitute.For<IMultiMockDataItemInterface>();
            tag1GlobalDataItem.Stub(m => m.GetConnectedDataItems(Arg<AccessRights>.Is.Anything)).Return(new IDataItem[0]);
            tag2GlobalDataItem.Stub(m => m.GetConnectedDataItems(Arg<AccessRights>.Is.Anything)).Return(new IDataItem[0]);
            tag1GlobalDataItem.GetConnectedDataItems(Arg.Any<AccessRights>()).Returns(new IDataItem[0]);
            tag2GlobalDataItem.GetConnectedDataItems(Arg.Any<AccessRights>()).Returns(new IDataItem[0]);
            tag1GlobalDataItem.Stub(m => m.DataTypeFriendlyName).Return("int16");
            tag2GlobalDataItem.Stub(m => m.DataTypeFriendlyName).Return("INT16");
            tag1GlobalDataItem.DataTypeFriendlyName.Returns("int16");
            tag2GlobalDataItem.DataTypeFriendlyName.Returns("INT16");
            tag1Stub.Stub(m => m.DataItem).Return(tag1GlobalDataItem);
            tag2Stub.Stub(m => m.DataItem).Return(tag2GlobalDataItem);
            tag1Stub.DataItem.Returns(tag1GlobalDataItem);
            tag2Stub.DataItem.Returns(tag2GlobalDataItem);
            tag1Stub.Stub(m => m.Value).Return(new VariantValue(1111));
            tag2Stub.Stub(m => m.Value).Return(new VariantValue(2222));
            tag1Stub.Value.Returns(new VariantValue(1111));
            tag2Stub.Value.Returns(new VariantValue(2222));
            m_CachedDataItemServiceMock
                .Stub(m => m.GetTags(Arg.Is(new[] {"tag1"}), Arg<ILifetimeContext>.Is.Anything))
                .Return(new Dictionary<string, IDataItemProxy> { { "tag1", tag1Stub } });
            m_CachedDataItemServiceMock.GetTags(Arg.Is<IEnumerable<string>>(x => x.First() == "tag1"), Arg.Any<ILifetimeContext>())
                .Returns(new Dictionary<string, IDataItemProxy> { { "tag1", tag1Stub } });
            m_CachedDataItemServiceMock
                .Stub(m => m.GetTags(Arg.Is(new[] { "tag2" }), Arg<ILifetimeContext>.Is.Anything))
                .Return(new Dictionary<string, IDataItemProxy> { { "tag2", tag2Stub } });
            m_CachedDataItemServiceMock.GetTags(Arg.Is<IEnumerable<string>>(x => x.First() == "tag2"), Arg.Any<ILifetimeContext>())
                .Returns(new Dictionary<string, IDataItemProxy> { { "tag2", tag2Stub } });
            
            m_CachedDataItemServiceMock
                .Stub(m => m.GetTags(Arg.Is(new[] { "tag1", "tag2" }), Arg<ILifetimeContext>.Is.Anything))
                .Return(new Dictionary<string, IDataItemProxy> { { "tag1", tag1Stub }, { "tag2", tag2Stub } });
            m_CachedDataItemServiceMock.GetTags(Arg.Is<IEnumerable<string>>(x => x.First() == "tag1" && x.Last() == "tag2"), Arg.Any<ILifetimeContext>())
                .Returns(new Dictionary<string, IDataItemProxy> { { "tag1", tag1Stub }, { "tag2", tag2Stub } });
            Session fakeSession = new Session(Guid.NewGuid().ToString(), DateTime.UtcNow + TimeSpan.FromMinutes(1));
            m_BatchTagsHandler = new BatchTagsHandler(fakeSession, m_CachedDataItemServiceMock);
            
            m_BatchTagsHandler.Post(batchTagOperationDto);
            m_CachedDataItemServiceMock.AssertWasCalled(m => m.GetTags(Arg<IEnumerable<string>>.Is.Anything, Arg<ILifetimeContext>.Is.Anything));
            m_CachedDataItemServiceMock.Received().GetTags(Arg.Any<IEnumerable<string>>(), Arg.Any<ILifetimeContext>());
        }       
        
        [Test]
            m_BatchTagsHandler.Post(batchTagOperationDto);
            m_CachedDataItemServiceMock.AssertWasCalled(m => m.SetTagValues(Arg<IDictionary<string, VariantValue>>.Is.Anything, Arg<ILifetimeContext>.Is.Anything));
            m_CachedDataItemServiceMock.Received().SetTagValues(Arg.Any<IDictionary<string, VariantValue>>(), Arg.Any<ILifetimeContext>());
        }       
        
        [Test]

CachedDataItemServiceTest.cs
-21
+27
/Tools/ToolsTest/WebServer/Website/Tags/CachedDataItemServiceTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.CachedDataItem;
using Neo.ApplicationFramework.Tools.CachedDataItem;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.Website.Tags
{
        [SetUp]
        public void Setup()
        {
            m_OpcClientServiceMock = MockRepository.GenerateMock<IOpcClientServiceCF>();
            m_BatchServiceMock = MockRepository.GenerateMock<IBatchService>();
            m_ActivateDataItemCacheMock = MockRepository.GenerateMock<IActivatedDataItemCache>();
            m_LifetimeContextMock = MockRepository.GenerateMock<ILifetimeContext>();
            m_CachedDataItemService = new CachedDataItemService(m_OpcClientServiceMock.ToILazy(), m_BatchServiceMock.ToILazy(), m_ActivateDataItemCacheMock);
            m_OpcClientServiceMock = Substitute.For<IOpcClientServiceCF>();
            m_BatchServiceMock = Substitute.For<IBatchService>();
            m_ActivateDataItemCacheMock = Substitute.For<IActivatedDataItemCache>();
            m_LifetimeContextMock = Substitute.For<ILifetimeContext>();
            m_CachedDataItemService = 
                new CachedDataItemService(m_OpcClientServiceMock.ToILazy(), m_BatchServiceMock.ToILazy(), m_ActivateDataItemCacheMock);
        }
        [Test]
        {
            IGlobalDataItem dataItemMock = MockGlobalDataItem("fooTag", "foo");
            m_CachedDataItemService.GetTagValue("fooTag", m_LifetimeContextMock);
            m_ActivateDataItemCacheMock.AssertWasCalled(m => m.AddDataItems(Arg<IEnumerable<IGlobalDataItem>>.List.ContainsAll(new IGlobalDataItem[] { dataItemMock })));
            m_ActivateDataItemCacheMock.Received()
                .AddDataItems(Arg.Is<IEnumerable<IGlobalDataItem>>(x => x.ContainsSameElements(new IGlobalDataItem[] { dataItemMock })));
        }
        [Test]
        public void TagIsNotAddedToCacheIfTagNotExists()
        {
            m_CachedDataItemService.GetTagValue("fooTag", m_LifetimeContextMock);
            m_ActivateDataItemCacheMock.AssertWasNotCalled(m => m.AddDataItems(Arg<IEnumerable<IGlobalDataItem>>.Is.Anything));
            m_ActivateDataItemCacheMock.DidNotReceiveWithAnyArgs().AddDataItems(Arg.Any<IEnumerable<IGlobalDataItem>>());
        }
        [Test]
        public void TagIsNotAddedToCacheWhenWhenTagIsInvalid()
        {
            IGlobalDataItem dataItemMock = MockGlobalDataItem("fooTag", "foo");
            dataItemMock.Stub(m => m.IsArrayTag).Return(true);
            dataItemMock.IsArrayTag.Returns(true);
            m_CachedDataItemService.GetTagValue("fooTag", m_LifetimeContextMock);
            m_ActivateDataItemCacheMock.AssertWasNotCalled(m => m.AddDataItems(Arg<IEnumerable<IGlobalDataItem>>.Is.Anything));
            m_ActivateDataItemCacheMock.DidNotReceiveWithAnyArgs().AddDataItems(Arg.Any<IEnumerable<IGlobalDataItem>>());
        }
        [Test]
        {
            IGlobalDataItem dataItemMock = MockGlobalDataItem("fooTag", "foo");
            m_CachedDataItemService.GetTagValue("fooTag", m_LifetimeContextMock);
            dataItemMock.AssertWasCalled(m => m.BatchRead());
            dataItemMock.Received().BatchRead();
        }
        [Test]
        {
            IGlobalDataItem fooMock = MockGlobalDataItem("fooTag", "foo");
            IGlobalDataItem barMock = MockGlobalDataItem("barTag", "bar");
            m_ActivateDataItemCacheMock.Stub(m => m.GetDataItem("fooTag")).Return(new DataItemProxy());
            m_ActivateDataItemCacheMock.GetDataItem("fooTag").Returns(new DataItemProxy());
            List<string> tagNames = new List<string>() { "fooTag", "barTag" };
            m_CachedDataItemService.GetTagValues(tagNames, m_LifetimeContextMock);
            m_ActivateDataItemCacheMock.AssertWasNotCalled(m => m.AddDataItems(Arg<IEnumerable<IGlobalDataItem>>.List.ContainsAll(new IGlobalDataItem[] { fooMock })));
            m_ActivateDataItemCacheMock.AssertWasCalled(m => m.AddDataItems(Arg<IEnumerable<IGlobalDataItem>>.List.ContainsAll(new IGlobalDataItem[] { barMock })));
            m_ActivateDataItemCacheMock.DidNotReceiveWithAnyArgs()
                .AddDataItems(Arg.Is<IEnumerable<IGlobalDataItem>>(x => x.ContainsSameElements(new IGlobalDataItem[] { fooMock })));
            m_ActivateDataItemCacheMock.Received()
                .AddDataItems(Arg.Is<IEnumerable<IGlobalDataItem>>(x => x.ContainsSameElements(new IGlobalDataItem[] { barMock })));
        }
        [Test]
        {
            IGlobalDataItem dataItemMock = MockGlobalDataItem("fooTag", "foo");
            m_CachedDataItemService.SetTagValue("fooTag", "foo", m_LifetimeContextMock);
            m_ActivateDataItemCacheMock.AssertWasCalled(m => m.AddDataItems(Arg<IEnumerable<IGlobalDataItem>>.List.ContainsAll(new IGlobalDataItem[] { dataItemMock })));
            m_ActivateDataItemCacheMock.Received()
                .AddDataItems(Arg.Is<IEnumerable<IGlobalDataItem>>(x => x.ContainsSameElements(new IGlobalDataItem[] { dataItemMock })));
        }
        [Test]
            string tagValue = "foo";
            IGlobalDataItem fooMock = MockGlobalDataItem(tagName, tagValue);
            m_ActivateDataItemCacheMock.Stub(m => m.GetDataItem(tagName)).Return(new DataItemProxy());
            m_ActivateDataItemCacheMock.GetDataItem(tagName).Returns(new DataItemProxy());
            m_CachedDataItemService.GetTag(tagName, m_LifetimeContextMock);
            m_CachedDataItemService.GetTags(tagNames, m_LifetimeContextMock);
            tagNamesAndValues.Add(tagName, tagValue);
            m_CachedDataItemService.SetTagValues(tagNamesAndValues, m_LifetimeContextMock);
            m_LifetimeContextMock.AssertWasCalled(m => m.ItemsAccessed(Arg<IEnumerable<string>>.List.ContainsAll(tagNames)), options => options.Repeat.Times(6));
            m_LifetimeContextMock.Received(6)
                .ItemsAccessed(Arg.Is<IEnumerable<string>>(x => x.ContainsSameElements(tagNames)));
        }
        private IGlobalDataItem MockGlobalDataItem(string tagName, VariantValue tagValue)
        {
            IGlobalDataItem globalDataItemMock = MockRepository.GenerateMock<IGlobalDataItem>();
            globalDataItemMock.Stub(m => m.Name).Return(tagName);
            globalDataItemMock.Stub(m => m.Value).Return(tagValue);
            IGlobalDataItem globalDataItemMock = Substitute.For<IGlobalDataItem>();
            globalDataItemMock.Name.Returns(tagName);
            globalDataItemMock.Value.Returns(tagValue);
            m_OpcClientServiceMock.Stub(m => m.FindTag(tagName)).Return(globalDataItemMock);
            m_OpcClientServiceMock.FindTag(tagName).Returns(globalDataItemMock);
            return globalDataItemMock;
        }

TagsHandlerTest.cs
-15
+15
/Tools/ToolsTest/WebServer/Website/Tags/TagsHandlerTest.cs
using Neo.ApplicationFramework.Interfaces;
using Neo.ApplicationFramework.Interfaces.CachedDataItem;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.Website.Tags
{
        [SetUp]
        public void Setup()
        {
            m_TagServiceMock = MockRepository.GenerateMock<ICachedDataItemService>();
            m_TagServiceMock = Substitute.For<ICachedDataItemService>();
            m_TagsHandler = new TagsHandler(m_TagServiceMock);
        }
            m_TagsHandler.Get("tag1");
            m_TagServiceMock.AssertWasCalled(m => m.GetTag(Arg.Is("tag1"), Arg<ILifetimeContext>.Is.Anything));
            m_TagServiceMock.Received().GetTag(Arg.Is("tag1"), Arg.Any<ILifetimeContext>());
        }
        [Test]
        {
            m_TagsHandler.Put(new TagValueDto { name = "foo", value = "value" });
            m_TagServiceMock.AssertWasCalled(m => m.SetTagValue(Arg.Is("foo"), Arg.Is(new VariantValue("value")), Arg<ILifetimeContext>.Is.Anything));
            m_TagServiceMock.Received().SetTagValue(Arg.Is("foo"), Arg.Is(new VariantValue("value")), Arg.Any<ILifetimeContext>());
        }
        
        [Test]
        [Test]
        public void Should_get_all_tag_names_from_tag_service()
        {
            m_TagServiceMock.Stub(m => m.GetAllTagNames()).Return(new[] { "foo", "bar" });
            m_TagServiceMock.GetAllTagNames().Returns(new[] { "foo", "bar" });
            var names = m_TagsHandler.GetAllTagNames();
        private void MockTagValue(string tagName, object tagValue)
        {
            var dataItemProxy = MockRepository.GenerateMock<IDataItemProxy>();
            var globalDataItem = MockRepository.GenerateMock<IMultiMockDataItemInterface>();
            var dataItemProxy = Substitute.For<IDataItemProxy>();
            var globalDataItem = Substitute.For<IMultiMockDataItemInterface>();
            dataItemProxy.Stub(m => m.DataItem).Return(globalDataItem);
            dataItemProxy.Stub(m => m.Value).Return(new VariantValue(tagValue));
            dataItemProxy.DataItem.Returns(globalDataItem);
            dataItemProxy.Value.Returns(new VariantValue(tagValue));
            globalDataItem.Stub(m => m.GetConnectedDataItems(Arg<AccessRights>.Is.Anything)).Return(new List<IDataItem>());
            globalDataItem.Stub(m => m.DataTypeFriendlyName).Return("int16");
            globalDataItem.Stub(m => ((IDataItemProxySource)m).Name).Return(tagName);
            globalDataItem.Stub(m => ((IGlobalDataItem)m).Name).Return(tagName);
            globalDataItem.GetConnectedDataItems(Arg.Any<AccessRights>()).Returns(new List<IDataItem>());
            globalDataItem.DataTypeFriendlyName.Returns("int16");
            ((IDataItemProxySource)globalDataItem).Name.Returns(tagName);
            ((IGlobalDataItem)globalDataItem).Name.Returns(tagName);
            m_TagServiceMock.Stub(m => m.Exists(tagName)).Return(true);            
            m_TagServiceMock.Stub(m => m.GetTag(Arg.Is(tagName), Arg<ILifetimeContext>.Is.Anything)).Return(dataItemProxy);
            m_TagServiceMock.Exists(tagName).Returns(true);
            m_TagServiceMock.GetTag(Arg.Is(tagName), Arg.Any<ILifetimeContext>()).Returns(dataItemProxy);
        }
    }
}

JsonWithTagOptimizationCodecTest.cs
-6
+6
/Tools/ToolsTest/WebServer/Website/JsonWithTagOptimizationCodecTest.cs
using System.Text;
using Neo.ApplicationFramework.Tools.WebServer.WebFramework.Host;
using Neo.ApplicationFramework.Tools.WebServer.Website.Tags;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.WebServer.Website
{
        [Test]
        public void Should_add_application_json_content_type_header()
        {
            IResponse response = MockRepository.GenerateStub<IResponse>();
            IResponse response = Substitute.For<IResponse>();
            BatchTagOperationResultDto dto = new BatchTagOperationResultDto();
            dto.tags = new[] { new TagDto() };
            JsonWithTagOptimizationCodec jsonWithTagOptimizationCodec = new JsonWithTagOptimizationCodec();
            jsonWithTagOptimizationCodec.WriteTo(dto, response);
            response.AssertWasCalled(m => m.AddHeader("Content-Type", "application/json"));
            response.Received().AddHeader("Content-Type", "application/json");
        }
        private object DeserializeBatchTagOperationDto(string body)
        {
            var memoryStream = new MemoryStream(Encoding.UTF8.GetBytes(body));
            IRequest response = MockRepository.GenerateStub<IRequest>();
            response.Stub(m => m.BodyStream).Return(memoryStream);
            IRequest response = Substitute.For<IRequest>();
            response.BodyStream.Returns(memoryStream);
            JsonWithTagOptimizationCodec deserializer = new JsonWithTagOptimizationCodec();
            return deserializer.ReadFrom(response, typeof(BatchTagOperationDto), null);
        private void AssertSerializedResult(BatchTagOperationResultDto dto, string tagsNameFooValueNameBarValueT00Z)
        {
            IResponse response = MockRepository.GenerateStub<IResponse>();
            IResponse response = Substitute.For<IResponse>();
            
            JsonWithTagOptimizationCodec jsonWithTagOptimizationCodec = new JsonWithTagOptimizationCodec();
            jsonWithTagOptimizationCodec.WriteTo(dto, response);

TerminalComparerTest.cs
-65
+65
/Tools/ToolsTest/Wizards/TerminalComparerTest.cs
using System.Collections;
using System.Windows;
using Neo.ApplicationFramework.Interfaces;
using NSubstitute;
using NUnit.Framework;
using Rhino.Mocks;
namespace Neo.ApplicationFramework.Tools.Wizards
{
        {
            m_Comparer = new TerminalComparer();
            m_TerminalAStub = MockRepository.GenerateStub<ITerminal>();
            m_TerminalBStub = MockRepository.GenerateStub<ITerminal>();
            m_TerminalAStub = Substitute.For<ITerminal>();
            m_TerminalBStub = Substitute.For<ITerminal>();
        }
        [Test]
        public void NullReturnEqualWhenFirst()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(true);
            m_TerminalAStub.IsPC.Returns(true);
            Assert.That(m_Comparer.Compare(null, m_TerminalAStub), Is.EqualTo(0));
        }
        [Test]
        public void NullReturnEqualWhenLast()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(true);
            m_TerminalAStub.IsPC.Returns(true);
            Assert.That(m_Comparer.Compare(m_TerminalAStub, 0), Is.EqualTo(0));
        }
        [Test]
        public void PCPanelHasHigherPriorityThanPanelWhenPCPanelIsFirst()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(true);
            m_TerminalBStub.Stub(x => x.IsPC).Return(false);
            m_TerminalAStub.IsPC.Returns(true);
            m_TerminalBStub.IsPC.Returns(false);
            Assert.That(m_Comparer.Compare(m_TerminalAStub, m_TerminalBStub), Is.EqualTo(FirstItemHigherPriority));
        }
        [Test]
        public void PCPanelHasHigherPriorityThanPanelWhenPCPanelIsLast()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(true);
            m_TerminalBStub.Stub(x => x.IsPC).Return(false);
            m_TerminalAStub.IsPC.Returns(true);
            m_TerminalBStub.IsPC.Returns(false);
            Assert.That(m_Comparer.Compare(m_TerminalBStub, m_TerminalAStub), Is.EqualTo(SecondItemHigherPriority));
        }
        [Test]
        public void SortingGroupForPCHasHigherPriorityWhenFirst()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(true);
            m_TerminalAStub.Stub(x => x.SortingPriority).Return(1);
            m_TerminalAStub.IsPC.Returns(true);
            m_TerminalAStub.SortingPriority.Returns(1);
            m_TerminalAStub.ScreenSize = new Size(5, 5);
            m_TerminalBStub.Stub(x => x.IsPC).Return(true);
            m_TerminalBStub.Stub(x => x.SortingPriority).Return(10);
            m_TerminalBStub.IsPC.Returns(true);
            m_TerminalBStub.SortingPriority.Returns(10);
            m_TerminalBStub.ScreenSize = new Size(10, 10);
            Assert.That(m_Comparer.Compare(m_TerminalAStub, m_TerminalBStub), Is.EqualTo(FirstItemHigherPriority));
        [Test]
        public void SortingGroupForPCHasHigherPriorityWhenLast()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(true);
            m_TerminalAStub.Stub(x => x.SortingPriority).Return(1);
            m_TerminalAStub.IsPC.Returns(true);
            m_TerminalAStub.SortingPriority.Returns(1);
            m_TerminalAStub.ScreenSize = new Size(5, 5);
            m_TerminalBStub.Stub(x => x.IsPC).Return(true);
            m_TerminalBStub.Stub(x => x.SortingPriority).Return(10);
            m_TerminalBStub.IsPC.Returns(true);
            m_TerminalBStub.SortingPriority.Returns(10);
            m_TerminalBStub.ScreenSize = new Size(10, 10);
            Assert.That(m_Comparer.Compare(m_TerminalBStub, m_TerminalAStub), Is.EqualTo(SecondItemHigherPriority));
        [Test]
        public void ScreenSizeHasHigherPriorityForPCPanelsWhenLargestFirst()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(true);
            m_TerminalAStub.IsPC.Returns(true);
            m_TerminalAStub.ScreenSize = new Size(10, 10);
            m_TerminalBStub.Stub(x => x.IsPC).Return(true);
            m_TerminalBStub.IsPC.Returns(true);
            m_TerminalBStub.ScreenSize = new Size(5, 5);
            Assert.That(m_Comparer.Compare(m_TerminalAStub, m_TerminalBStub), Is.EqualTo(FirstItemHigherPriority));
        [Test]
        public void ScreenSizeHasHigherPriorityForPCPanelsWhenLargestLast()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(true);
            m_TerminalAStub.IsPC.Returns(true);
            m_TerminalAStub.ScreenSize = new Size(10, 10);
            m_TerminalBStub.Stub(x => x.IsPC).Return(true);
            m_TerminalBStub.IsPC.Returns(true);
            m_TerminalBStub.ScreenSize = new Size(5, 5);
            Assert.That(m_Comparer.Compare(m_TerminalBStub, m_TerminalAStub), Is.EqualTo(SecondItemHigherPriority));
        [Test]
        public void ScreenSizeEqualForPCPanelsSortsDecreasingAlphabeticallyWhenFirst()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(true);
            m_TerminalAStub.Stub(x => x.Name).Return("APanel");
            m_TerminalAStub.IsPC.Returns(true);
            m_TerminalAStub.Name.Returns("APanel");
            m_TerminalAStub.ScreenSize = new Size(5, 5);
            m_TerminalBStub.Stub(x => x.IsPC).Return(true);
            m_TerminalBStub.Stub(x => x.Name).Return("BPanel");
            m_TerminalBStub.IsPC.Returns(true);
            m_TerminalBStub.Name.Returns("BPanel");
            m_TerminalBStub.ScreenSize = new Size(5, 5);
            Assert.That(m_Comparer.Compare(m_TerminalAStub, m_TerminalBStub), Is.EqualTo(SecondItemHigherPriority));
        [Test]
        public void ScreenSizeEqualForPCPanelsSortsDecreasingAlphabeticallyWhenLast()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(true);
            m_TerminalAStub.Stub(x => x.Name).Return("APanel");
            m_TerminalAStub.IsPC.Returns(true);
            m_TerminalAStub.Name.Returns("APanel");
            m_TerminalAStub.ScreenSize = new Size(5, 5);
            m_TerminalBStub.Stub(x => x.IsPC).Return(true);
            m_TerminalBStub.Stub(x => x.Name).Return("BPanel");
            m_TerminalBStub.IsPC.Returns(true);
            m_TerminalBStub.Name.Returns("BPanel");
            m_TerminalBStub.ScreenSize = new Size(5, 5);
            Assert.That(m_Comparer.Compare(m_TerminalBStub, m_TerminalAStub), Is.EqualTo(FirstItemHigherPriority));
        [Test]
        public void ReturnsEqualWhenPCsEqual()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(true);
            m_TerminalAStub.Stub(x => x.Name).Return("APanel");
            m_TerminalAStub.IsPC.Returns(true);
            m_TerminalAStub.Name.Returns("APanel");
            m_TerminalAStub.ScreenSize = new Size(5, 5);
            m_TerminalBStub.Stub(x => x.IsPC).Return(true);
            m_TerminalBStub.Stub(x => x.Name).Return("APanel");
            m_TerminalBStub.IsPC.Returns(true);
            m_TerminalBStub.Name.Returns("APanel");
            m_TerminalBStub.ScreenSize = new Size(5, 5);
            Assert.That(m_Comparer.Compare(m_TerminalAStub, m_TerminalBStub), Is.EqualTo(0));
        [Test]
        public void SortingGroupForPanelHasHigherPriorityWhenFirst()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(false);
            m_TerminalAStub.Stub(x => x.SortingPriority).Return(1);
            m_TerminalAStub.IsPC.Returns(false);
            m_TerminalAStub.SortingPriority.Returns(1);
            m_TerminalAStub.ScreenSize = new Size(5, 5);
            m_TerminalBStub.Stub(x => x.IsPC).Return(false);
            m_TerminalBStub.Stub(x => x.SortingPriority).Return(10);
            m_TerminalBStub.IsPC.Returns(false);
            m_TerminalBStub.SortingPriority.Returns(10);
            m_TerminalBStub.ScreenSize = new Size(10, 10);
            Assert.That(m_Comparer.Compare(m_TerminalAStub, m_TerminalBStub), Is.EqualTo(FirstItemHigherPriority));
        [Test]
        public void SortingGroupForPanelHasHigherPriorityWhenLast()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(false);
            m_TerminalAStub.Stub(x => x.SortingPriority).Return(1);
            m_TerminalAStub.IsPC.Returns(false);
            m_TerminalAStub.SortingPriority.Returns(1);
            m_TerminalAStub.ScreenSize = new Size(5, 5);
            m_TerminalBStub.Stub(x => x.IsPC).Return(false);
            m_TerminalBStub.Stub(x => x.SortingPriority).Return(10);
            m_TerminalBStub.IsPC.Returns(false);
            m_TerminalBStub.SortingPriority.Returns(10);
            m_TerminalBStub.ScreenSize = new Size(10, 10);
            Assert.That(m_Comparer.Compare(m_TerminalBStub, m_TerminalAStub), Is.EqualTo(SecondItemHigherPriority));
        [Test]
        public void ScreenSizeHasHigherPriorityForPanelsWhenLargestFirst()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(false);
            m_TerminalAStub.IsPC.Returns(false);
            m_TerminalAStub.ScreenSize = new Size(10, 10);
            m_TerminalBStub.Stub(x => x.IsPC).Return(false);
            m_TerminalBStub.IsPC.Returns(false);
            m_TerminalBStub.ScreenSize = new Size(5, 5);
            Assert.That(m_Comparer.Compare(m_TerminalAStub, m_TerminalBStub), Is.EqualTo(FirstItemHigherPriority));
        [Test]
        public void ScreenSizeHasHigherPriorityForPanelsWhenLargestLast()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(false);
            m_TerminalAStub.IsPC.Returns(false);
            m_TerminalAStub.ScreenSize = new Size(10, 10);
            m_TerminalBStub.Stub(x => x.IsPC).Return(false);
            m_TerminalBStub.IsPC.Returns(false);
            m_TerminalBStub.ScreenSize = new Size(5, 5);
            Assert.That(m_Comparer.Compare(m_TerminalBStub, m_TerminalAStub), Is.EqualTo(SecondItemHigherPriority));
        [Test]
        public void ScreenSizeEqualForPanelsSortsDecreasingAlphabeticallyWhenFirst()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(false);
            m_TerminalAStub.Stub(x => x.Name).Return("APanel");
            m_TerminalAStub.IsPC.Returns(false);
            m_TerminalAStub.Name.Returns("APanel");
            m_TerminalAStub.ScreenSize = new Size(5, 5);
            m_TerminalBStub.Stub(x => x.IsPC).Return(false);
            m_TerminalBStub.Stub(x => x.Name).Return("BPanel");
            m_TerminalBStub.IsPC.Returns(false);
            m_TerminalBStub.Name.Returns("BPanel");
            m_TerminalBStub.ScreenSize = new Size(5, 5);
            Assert.That(m_Comparer.Compare(m_TerminalAStub, m_TerminalBStub), Is.EqualTo(SecondItemHigherPriority));
        [Test]
        public void ScreenSizeEqualForPanelsSortsDecreasingAlphabeticallyWhenLast()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(false);
            m_TerminalAStub.Stub(x => x.Name).Return("APanel");
            m_TerminalAStub.IsPC.Returns(false);
            m_TerminalAStub.Name.Returns("APanel");
            m_TerminalAStub.ScreenSize = new Size(5, 5);
            m_TerminalBStub.Stub(x => x.IsPC).Return(false);
            m_TerminalBStub.Stub(x => x.Name).Return("BPanel");
            m_TerminalBStub.IsPC.Returns(false);
            m_TerminalBStub.Name.Returns("BPanel");
            m_TerminalBStub.ScreenSize = new Size(5, 5);
            Assert.That(m_Comparer.Compare(m_TerminalBStub, m_TerminalAStub), Is.EqualTo(FirstItemHigherPriority));
        [Test]
        public void ReturnsEqualWhenPanelsEqual()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(false);
            m_TerminalAStub.Stub(x => x.Name).Return("APanel");
            m_TerminalAStub.IsPC.Returns(false);
            m_TerminalAStub.Name.Returns("APanel");
            m_TerminalAStub.ScreenSize = new Size(5, 5);
            m_TerminalBStub.Stub(x => x.IsPC).Return(false);
            m_TerminalBStub.Stub(x => x.Name).Return("APanel");
            m_TerminalBStub.IsPC.Returns(false);
            m_TerminalBStub.Name.Returns("APanel");
            m_TerminalBStub.ScreenSize = new Size(5, 5);
            Assert.That(m_Comparer.Compare(m_TerminalAStub, m_TerminalBStub), Is.EqualTo(0));
        [Test]
        public void TouchPanelHasHigherPriorityThanKeyPanelWhenFirst()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(false);
            m_TerminalAStub.Stub(x => x.IsKeyPanel).Return(false);
            m_TerminalBStub.Stub(x => x.IsPC).Return(false);
            m_TerminalBStub.Stub(x => x.IsKeyPanel).Return(true);
            m_TerminalAStub.IsPC.Returns(false);
            m_TerminalAStub.IsKeyPanel.Returns(false);
            m_TerminalBStub.IsPC.Returns(false);
            m_TerminalBStub.IsKeyPanel.Returns(true);
            Assert.That(m_Comparer.Compare(m_TerminalAStub, m_TerminalBStub), Is.EqualTo(FirstItemHigherPriority));
        }
        [Test]
        public void TouchPanelHasHigherPriorityThanKeyPanelWhenLast()
        {
            m_TerminalAStub.Stub(x => x.IsPC).Return(false);
            m_TerminalAStub.Stub(x => x.IsKeyPanel).Return(false);
            m_TerminalBStub.Stub(x => x.IsPC).Return(false);
            m_TerminalBStub.Stub(x => x.IsKeyPanel).Return(true);
            m_TerminalAStub.IsPC.Returns(false);
            m_TerminalAStub.IsKeyPanel.Returns(false);
            m_TerminalBStub.IsPC.Returns(false);
            m_TerminalBStub.IsKeyPanel.Returns(true);
            Assert.That(m_Comparer.Compare(m_TerminalBStub, m_TerminalAStub), Is.EqualTo(SecondItemHigherPriority));
        }

packages.config
-1
/Tools/ToolsTest/packages.config
  <package id="NUnit3TestAdapter" version="4.0.0-beta.2" targetFramework="net48" />
  <package id="Prism.Core" version="6.3.0" targetFramework="net48" />
  <package id="Prism.Wpf" version="6.3.0" targetFramework="net48" />
  <package id="RhinoMocks" version="3.6.1" targetFramework="net472" />
  <package id="StoreSoftwareManagerLibrary" version="1.0.7" targetFramework="net48" />
  <package id="System.Runtime.CompilerServices.Unsafe" version="4.5.2" targetFramework="net48" />
  <package id="System.Threading.Tasks.Extensions" version="4.5.2" targetFramework="net48" />

TestHelperExtensions.cs
-4
+2
/Tools/ToolsTest/TestHelperExtensions.cs
using Core.Api.Tools;
using Neo.ApplicationFramework.TestUtilities;
using Rhino.Mocks;
using NSubstitute;
namespace Neo.ApplicationFramework.Tools
{
    internal static class TestHelperExtensions
    {
        public static IToolManager AddServiceToolManager(bool runtime)
        {
            IToolManager toolManager = TestHelper.AddServiceStub<IToolManager>();
            toolManager.Stub(x => x.Runtime).Return(runtime);
            toolManager.Runtime.Returns(runtime);
            return toolManager;
        }
    }
}

ToolsTest.csproj
-4
/Tools/ToolsTest/ToolsTest.csproj
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\ThirdParty\RebexTotalPack\lib\netcf-3.5\Rebex.Networking.dll</HintPath>
    </Reference>
    <Reference Include="Rhino.Mocks, Version=3.6.0.0, Culture=neutral, PublicKeyToken=0b3305902db7183f, processorArchitecture=MSIL">
      <HintPath>..\..\ThirdParty\RhinoMocks.3.6.1\lib\net\Rhino.Mocks.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="RibbonControlsLibrary, Version=4.0.0.11019, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\ThirdParty\Microsoft Ribbon for WPF\RibbonControlsLibrary.dll</HintPath>

vNextTargets.sln
+33
/vNextTargets.sln
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ControlsTest", "Controls\ControlsTest\.vNext\ControlsTest.csproj", "{CA9C286F-C5CE-4549-A457-AEC92142832D}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "CommonTest", "Common\CommonTest\.vNext\CommonTest.csproj", "{4EA117C5-E980-4363-B2A6-5BAF341CAA84}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "TestUtilities", "Test\TestUtilities\.vNext\TestUtilities.csproj", "{29635819-DB6F-4C71-BFBA-3D4791C1AD12}"
EndProject
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "ToolsTest", "Tools\ToolsTest\.vNext\ToolsTest.csproj", "{99A128DB-7D9D-44D3-975C-BBB0077A4E60}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		{CA9C286F-C5CE-4549-A457-AEC92142832D}.Release|Any CPU.Build.0 = Release|Any CPU
		{CA9C286F-C5CE-4549-A457-AEC92142832D}.Release|x86.ActiveCfg = Release|Any CPU
		{CA9C286F-C5CE-4549-A457-AEC92142832D}.Release|x86.Build.0 = Release|Any CPU
		{4EA117C5-E980-4363-B2A6-5BAF341CAA84}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{4EA117C5-E980-4363-B2A6-5BAF341CAA84}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{4EA117C5-E980-4363-B2A6-5BAF341CAA84}.Debug|x86.ActiveCfg = Debug|Any CPU
		{4EA117C5-E980-4363-B2A6-5BAF341CAA84}.Debug|x86.Build.0 = Debug|Any CPU
		{4EA117C5-E980-4363-B2A6-5BAF341CAA84}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{4EA117C5-E980-4363-B2A6-5BAF341CAA84}.Release|Any CPU.Build.0 = Release|Any CPU
		{4EA117C5-E980-4363-B2A6-5BAF341CAA84}.Release|x86.ActiveCfg = Release|Any CPU
		{4EA117C5-E980-4363-B2A6-5BAF341CAA84}.Release|x86.Build.0 = Release|Any CPU
		{29635819-DB6F-4C71-BFBA-3D4791C1AD12}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{29635819-DB6F-4C71-BFBA-3D4791C1AD12}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{29635819-DB6F-4C71-BFBA-3D4791C1AD12}.Debug|x86.ActiveCfg = Debug|Any CPU
		{29635819-DB6F-4C71-BFBA-3D4791C1AD12}.Debug|x86.Build.0 = Debug|Any CPU
		{29635819-DB6F-4C71-BFBA-3D4791C1AD12}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{29635819-DB6F-4C71-BFBA-3D4791C1AD12}.Release|Any CPU.Build.0 = Release|Any CPU
		{29635819-DB6F-4C71-BFBA-3D4791C1AD12}.Release|x86.ActiveCfg = Release|Any CPU
		{29635819-DB6F-4C71-BFBA-3D4791C1AD12}.Release|x86.Build.0 = Release|Any CPU
		{99A128DB-7D9D-44D3-975C-BBB0077A4E60}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{99A128DB-7D9D-44D3-975C-BBB0077A4E60}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{99A128DB-7D9D-44D3-975C-BBB0077A4E60}.Debug|x86.ActiveCfg = Debug|Any CPU
		{99A128DB-7D9D-44D3-975C-BBB0077A4E60}.Debug|x86.Build.0 = Debug|Any CPU
		{99A128DB-7D9D-44D3-975C-BBB0077A4E60}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{99A128DB-7D9D-44D3-975C-BBB0077A4E60}.Release|Any CPU.Build.0 = Release|Any CPU
		{99A128DB-7D9D-44D3-975C-BBB0077A4E60}.Release|x86.ActiveCfg = Release|Any CPU
		{99A128DB-7D9D-44D3-975C-BBB0077A4E60}.Release|x86.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
		{A990367B-CAE9-4356-A066-91107396F113} = {EC2A5294-EDD9-4CD8-97E1-04C176AEBBF8}
		{D8EB3493-D297-45F1-A42F-9EF27F13F78F} = {EC2A5294-EDD9-4CD8-97E1-04C176AEBBF8}
		{CA9C286F-C5CE-4549-A457-AEC92142832D} = {E632B3D6-E4D7-4C8D-A834-C767BC2A8F5C}
		{4EA117C5-E980-4363-B2A6-5BAF341CAA84} = {E632B3D6-E4D7-4C8D-A834-C767BC2A8F5C}
		{29635819-DB6F-4C71-BFBA-3D4791C1AD12} = {E632B3D6-E4D7-4C8D-A834-C767BC2A8F5C}
		{99A128DB-7D9D-44D3-975C-BBB0077A4E60} = {E632B3D6-E4D7-4C8D-A834-C767BC2A8F5C}
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {82E0A50D-991D-46A7-BBFD-ED082EE67F2D}
